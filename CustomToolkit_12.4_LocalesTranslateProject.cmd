@echo OFF

if exist "%SystemROOT%\SysWOW64" (set "HostArchitecture=x64") else (set "HostArchitecture=x86")

::===================================================================
:: Getting Admin Rights by Run Script as Trusted Installer with nSudo or MinSudo
rem >nul 2>&1 KTMutil.exe || (
>nul 2>&1 reg.exe query HKU\S-1-5-19 || (
	title Run "%~nx0" Script as Trusted Installer with nSudo...
	rem title Run "%~nx0" Script as Trusted Installer with MinSudo...
	if exist "%~dp0Bin\%HostArchitecture%\nSudo.exe" (
	rem if exist "%~dp0Bin\%HostArchitecture%\MinSudo.exe" (
		rem for %%# in ("%~f0") do (Start "%%~nx#" /I %~dp0Bin\%HostArchitecture%\PowerRun.exe /WD:"%%~dp#" "%%~f#" %*)
		rem cmd.exe /X /R for %%# in ("%~f0") do (Start "%%~nx#" /I %~dp0Bin\%HostArchitecture%\PowerRun.exe /WD:"%%~dp#" "%%~f#" %*)

		for %%# in ("%~f0") do (Start "%%~nx#" /I "%~dp0Bin\%HostArchitecture%\nSudo.exe" -U=T -P=E -CurrentDirectory=%%~dp# "%%~f#" %*)
		rem cmd.exe /X /R "for %%# in ("%~f0") do (Start "%%~nx#" /I "%~dp0Bin\%HostArchitecture%\nSudo.exe" -U=T -P=E -CurrentDirectory=%%~dp# "%%~f#" %*)"

		rem for %%# in ("%~f0") do (Start "%%~nx#" /I "%~dp0Bin\%HostArchitecture%\MinSudo.exe" -U=T -P=E -CurrentDirectory=%%~dp# "%%~f#" %*)
		rem cmd.exe /X /R "for %%# in ("%~f0") do (Start "%%~nx#" /I "%~dp0Bin\%HostArchitecture%\MinSudo.exe" -U=T -P=E -CurrentDirectory=%%~dp# "%%~f#" %*)"
	) else (
		echo.
		echo.
		echo.Run "%~nx0" Script from Toolkit's folder.
		echo.
		pause
	)
	exit
) 
::===================================================================

title "%~nx0" Script - Running As Trusted Installer by nSudo.
rem title "%~nx0" Script - Running As Trusted Installer by MinSudo.

set "version=v12.4"
call :DateTimeCLOCK
::------------------------------------------------------------------------------
:: MSMG Toolkit (custom)2022-06-29
:: Copyright (c) 2013-2022 MSMG. All rights reserved.
::------------------------------------------------------------------------------
::
:: Credits: CREDITS.TXT
:: License: LICENSE.TXT
:: 3rd Party License: <Bin\LICENSES>
::
::-------------------------------------------------------------------------------------------

rem mode con: lines=50 cols=96
rem mode 96,50
color 0E
title MSMG Toolkit %version%(custom)[%DateTimeCLOCK%]

reg.exe add "HKCU\Console\%%SystemROOT%%_system32_cmd.exe" /v "ScreenBufferSize" /t REG_DWORD /d "0x23290050" /f >nul
reg.exe add "HKCU\Console\%%SystemROOT%%_system32_cmd.exe" /v "WindowSize" /t REG_DWORD /d "0x190050" /f >nul

:: Setting Host OS variables
set HostOSName=
set HostEdition=
set HostBuildBranch=
set HostReleaseVersion=
set HostDisplayVersion=
set HostVersion=
set HostBuild=
set HostServicePackBuild=
set HostInstallationType=
set HostArchitecture=
set FullHostVersion=
set HostLanguage=
set "Langs=ar-SA;bg-BG;ca-ES;cs-CZ;da-DK;de-DE;el-GR;en-GB;en-US;es-ES;es-MX;et-EE;eu-ES;fi-FI;fr-CA;fr-FR;gl-ES;he-IL;hr-HR;hu-HU;id-ID;it-IT;ja-JP;ko-KR;lt-LT;lv-LV;nl-NL;nb-NO;pl-PL;pt-BR;pt-PT;ro-RO;ru-RU;sk-SK;sl-SI;sr-Latn-RS;sv-SE;th-TH;tr-TR;uk-UA;vi-VN;zh-CN;zh-HK;zh-TW"
set "LOCALES=%~dp0LOCALES\LOCALES.cmd"

for /f "tokens=6 delims=[]. " %%i in ('ver 2^>nul') do (set /A HostBuild=%%i)

for /f "tokens=4-5 delims=[]. " %%s in ('ver 2^>nul') do (set "HostVersion=%%s.%%t" & set "HostOSVersion=%%s")
if "%HostVersion%" equ "6.1" set "HostOSVersion=7 SP1"
if "%HostVersion%" equ "6.2" set "HostOSVersion=8"
if "%HostVersion%" equ "6.3" set "HostOSVersion=8.1"
if "%HostBuild%" geq "21996" set "HostOSVersion=11"
for /f "tokens=3 delims= " %%l in ('reg.exe query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /v "EditionID" ^| find.exe /I "REG_SZ"') do (set "HostEdition=%%l")
for /f "tokens=3 delims= " %%j in ('reg.exe query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /v "BuildBranch" ^| find.exe /I "REG_SZ"') do (set HostBuildBranch=%%j)
for /f "tokens=3 delims= " %%j in ('reg.exe query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /f "ReleaseId" ^| find.exe /I "REG_SZ"') do (set /A HostReleaseVersion=%%j & if "%%j" lss "2004" set /A HostDisplayVersion=%%j)
if "%HostDisplayVersion%" equ "" for /f "tokens=3 delims= " %%k in ('reg query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /v "DisplayVersion" ^| find.exe /I "REG_SZ"') do (set "HostDisplayVersion=(%HostReleaseVersion% %%k) ")
for /f "tokens=7 delims=[]. " %%r in ('ver 2^>nul') do (set HostServicePackBuild=%%r)
for /f "tokens=3 delims= " %%m in ('reg.exe query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion" /v "InstallationType" ^| find.exe /I "REG_SZ"') do (set "HostInstallationType=%%m")
if exist "%SystemROOT%\SysWOW64\" (
	if /I "%PROCESSOR_ARCHITECTURE%" equ "amd64" (
		set "HostArchitecture=x64"
	) else (
		set "HostArchitecture=%PROCESSOR_ARCHITECTURE%"
	)
)
if not exist "%SystemROOT%\SysWOW64\" (
	if /I "%PROCESSOR_ARCHITECTURE%" neq "arm" set "HostArchitecture=x86"
	if /I "%PROCESSOR_ARCHITECTURE%" neq "x86" set "HostArchitecture=arm"
)
set "HostOSName=Windows %HostVersion% %HostEdition% %HostInstallationType%"
for /f "tokens=* delims=MicrosoftWindows " %%f in ('ver 2^>nul') do (set "FullHostVersion=%%f")
for /f "tokens=3 delims= " %%o in ('reg.exe query "HKLM\SYSTEM\CurrentControlSet\Control\CommonGlobUserSettings\Control Panel\International" /v "LocaleName" ^| find.exe /I "REG_SZ"') do (set "HostLanguage=%%o")
if "%HostLanguage%" neq "" if exist "%LOCALES%" call :ScriptLanguageTranslator

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - EULA
::-------------------------------------------------------------------------------------------
:EULA
cls
echo.===============================================================================
echo.%EULA_menu%
echo.===============================================================================
echo.
echo. %EULA_line01%
echo. %EULA_line02%
echo. %EULA_line03%
echo.
echo. %EULA_line04%
echo. %EULA_line05%
echo.
echo. %EULA_line06%
echo. %EULA_line07%
echo. %EULA_line08%
echo.
echo. %EULA_line09%
echo. %EULA_line10%
echo.
echo. %EULA_line11%
echo. %EULA_line12%
echo.
echo.===============================================================================
echo.
choice /C:AR /N /M "%EULA_ch01%"
if errorlevel 2 (
	reg.exe delete "HKCU\Console\%%SystemROOT%%_system32_cmd.exe" /f >nul

	color 00
	endlocal

	exit
)
::-------------------------------------------------------------------------------------------

setlocal EnableExtensions EnableDelayedExpansion

:: Drive Letters
set "DriveLetters=D E F G H I J K L M N O P Q R S T U V W X Y Z"
set "AllDriveLetters=A B C %DriveLetters%"

:: Setting Toolkit environment path variables
set "ROOT=%~dp0"
set "Bin=%~dp0Bin"

set "EnvironmentPath=%Bin%\EnvironmentPath.cmd"
if not exist "%EnvironmentPath%" if exist "%Bin%\EnvironmentPath.zip" (
	"%Bin%\%HostArchitecture%\7z.exe" x -y "%Bin%\EnvironmentPath.zip" -o"%Bin%\" >nul
)
if exist "%EnvironmentPath%" call "%EnvironmentPath%"

if "%WorkingFolder%" equ "" set "WorkingFolder=%SystemDRIVE%\TK\"
if "%WorkingFolder%" equ "%~dp0" (
	set "InstallMedia=%WorkingFolder%DVD"
	set "del286=%~d0\_del286"
)
if "%WorkingFolder:~1%" equ ":\TK\" (
	set "InstallMedia=%WorkingFolder%InstallMedia"
	set "del286=%SystemDRIVE%\_del286"
)
echo.
echo.ROOT          : "%ROOT%"
echo.WorkingFolder : "%WorkingFolder%"
echo.
echo.
rem pause
set "DVD=%InstallMedia%"
set "Mount=%WorkingFolder%MNT"
set "_TMP=%WorkingFolder%TMP"
set "Logs=%WorkingFolder%Logs"
set "ISOsource=%~dp0ISOsource"
set "ISO=%~dp0ISO"
call :CreateFolder "%DVD%"
call :CreateFolder "%Logs%"
call :CreateFolder "%ISOsource%"
call :CreateFolder "%ISO%"
set "BIOSBoot=%DVD%\boot\etfsboot.com"
set "UEFIBoot=%DVD%\efi\microsoft\boot\efisys.bin"
set InstallMediaSourceImage_IsPresent=
set InstallMediaIMGSource=
set InstallMediaIMG=
set InstallMediaISOSource=
set InstallMediaISO=
set InstallMediaSource_ImageLabel=
set InstallMediaSource_ImageFileName=
set InstallMedia_ImageSavingFileName=

:: Setting WADK tools environment path variables
if "%HostVersion%" equ "6.1" (
	set "DISM=%Bin%\%HostArchitecture%\DISM81\Dism.exe"
) else (
	set "DISM=%Bin%\%HostArchitecture%\DISM10\Dism.exe"
)
set "DismScratch=%_TMP%\DISM"
set "DismFormat=/English /ScratchDir:%DismScratch% /LogPath:%Logs%\Dism.txt /LogLevel:3 /NoRestart"
set "Imagex=%Bin%\%HostArchitecture%\imagex.exe"
set "Oscdimg=%Bin%\%HostArchitecture%\oscdimg.exe"
set "Dvdburn=%Bin%\dvdburn.exe"
set "WimConfigFile=%Bin%\wimscript.ini"

:: Setting Source OS variables
set SelectedSourceOS=
set OSID=
set "BootWim=%DVD%\sources\boot.wim"
set "InstallWim=%DVD%\sources\install.wim"
set "InstallEsd=%DVD%\sources\install.esd"
set InstallImageFile=
set "WinReWim=Windows\System32\Recovery\winre.wim"
set "BootMount=%Mount%\Boot"
set "InstallMount=%Mount%\I"
set "WinReMount=%Mount%\WinRE"
set "VirtualCreate_ImageIndexEditions=Disabled"
set "TrimEditions=Disabled"
set "ImageFormat=WIM"

:: Setting Source Image information variables
set ImageCount=
set ChosenSource=
set /A ChosenCount=0
set ImageIndexNo=
set AutoImageIndexNo=
set Auto=
set SpecifiedSourceIndex=
set ImageArchitecture=
set ImageName=
set ImageDescription=
set ImageFlag=
set ImageEdition=
set ImageInstallationType=
set ImageDefaultLanguage=
set ImageMajorVersion=
set ImageMinorVersion=
set ImageBuild=
set ImageVersion=
set ImageServicePackBuild=
set ImageServicePackLevel=

:: Setting Toolkit's control flag variables
set "IsSourceSelected=No"
set IsBootImageSelected=
set IsRecoveryImageSelected=
set MountSource=
set RemoveWinRE=
set "MountWinREwim=-"
set "MountBOOTwim=-"
set "IsDialogsEnabled=Yes"
set "IsLogsEnabled=Yes"
set "IsImageRegistryLoaded=No"
set "IsW7SP1CRUSelected=No"
set Allowed=
set "Bypass=O"
set Cleaning=

:: Setting Toolkit's dependent tools environment path variables
set "ImageInfo=%_TMP%\ImageInfo.txt"
set "Lists=%Bin%\Lists"
set "RemoveAppsList=%Lists%\RemoveAppsList.txt"
set "RemovePkgsList_DISM=%Lists%\RemovePkgsList_DISM.txt"
set "RemovePkgsList=%Lists%\RemovePkgsList.txt"
set "PersonalLists=%Lists%\Personal"
set "Patches=%Bin%\Patches"
set "ResourceHacker=%Bin%\ResourceHacker.exe"
set "TempResourceHacker=%_TMP%\ResourceHacker.exe"
set "ToolkitHelper=%Bin%\ToolkitHelper.exe"
set "W10EsdDecrypter=%Bin%\Dism++CUI.exe /ESDFile"
set "W81EsdDecrypter=%Bin%\esddecrypt.exe"
set "WimlibImagex=%Bin%\%HostArchitecture%\wimlib-imagex.exe"
set "XCopy=xcopy.exe /E /I /H /R /Y /J"
set "XMLs=%Bin%\XMLs"
set "StartMenuLayoutBIN=%Bin%\StartMenuLayoutBIN"
set "W7ESU=%Bin%\Patches\W7ESU"
set "W10CUFix=%Bin%\Patches\W10CUFix"
set "WMCGActTokens=%Bin%\Patches\WMCGActTokens.tpk"
set "PSFExtractor=%Bin%\PSFExtractor.exe"
set "Zip=%Bin%\%HostArchitecture%\7z.exe"
set "Configs=%Bin%\Configs"
if not exist "%Configs%" (
	call :CreateFolder "%Configs%"
)
set "Toolkitcfg=%Configs%\Toolkit.cfg"

set All_Components=
set TKHC_List=

set "GenericEI=%Configs%\GenericEI\EI.cfg"
if not exist "%GenericEI%" (
	call :CreateFolder "%Configs%\GenericEI"
	(
		echo.[EditionID]
		echo.
		echo.[Channel]
		echo._Default
		echo.
		echo.[VL]
		echo.
	)>"%GenericEI%"
)
set VL=0
set "VLeditions=Enterprise;EnterpriseN;EnterpriseS;EnterpriseSN;EnterpriseG;EnterpriseGN;ServerRdsh;Education;EducationN"

:: Setting All Editions for VirtualCreate_ImageIndexEditions
for %%# in (
	ProfessionalCountrySpecific
	ProfessionalSingleLanguage
	Professional
	ProfessionalN
	ProfessionalWorkstation
	ProfessionalWorkstationN
	ProfessionalEducation
	ProfessionalEducationN
	Enterprise
	EnterpriseN
	EnterpriseS
	EnterpriseSN
	EnterpriseG
	EnterpriseGN
	Education
	EducationN
	ServerRdsh
	IoTEnterprise
	IoTEnterpriseS
	PPIPro
	Cloud
	CloudN
	CloudE
	CloudEN
	CloudEdition
	CloudEditionN
	Starter
	StarterN
	CoreCountrySpecific
	CoreSingleLanguage
	Core
	CoreN
	ServerStandardCore
	ServerStandard
	ServerDatacenterCore
	ServerDatacenter
	ServerAzureStackHCICor
	ServerTurbineCor
	ServerTurbine
	ServerARM64
	ServerStandardACor
	ServerDatacenterACor
	ServerStandardWSCor
	ServerDatacenterWSCord
) do (
	set "VE_%%#=-"
)

goto :PreCleanUpOperation

:: DateTime General CLOCK
:DateTimeCLOCK
set DateTimeCLOCK=
set "DateTimeCLOCK=%Date% %Time:~0,8%"

goto :EOF

:: DateTime Version Stamp
:DateTimeStamp
set DateTimeStamp=
for /f "tokens=*" %%d in ('PowerShell.exe -NoP -C "Get-Date -f yyyyMMdd_HHmmss"') do (
	set "DateTimeStamp=%%d"
)

goto :EOF

:: Script Language Translator
:ScriptLanguageTranslator
for %%l in (%Langs%) do (
	if /i "%HostLanguage%" equ "%%l" (
		set "LocaleArg=%%l"
	)
)
if "%LocaleArg%" neq "" (
	call "%LOCALES%" /%LocaleArg:-=%
	goto :EOF
)
call "%LOCALES%"

goto :EOF

:: Setting Selected Source OS version
:SelectedSourceOS
if "%ImageVersion%" equ "6.1.7601" (
	set "SelectedSourceOS=w7"
	set "OSID=7 SP1"
)

if "%ImageVersion%" equ "6.3.9600" (
	set "SelectedSourceOS=w81"
	set "OSID=8.1"
)

if "%ImageVersion:~0,-6%" equ "10.0" (
	if "%ImageBuild%" lss "21996" (
		set "SelectedSourceOS=w10"
		set "OSID=10"
	)
	if "%ImageBuild%" geq "21996" (
		set "SelectedSourceOS=w11"
		set "OSID=11"
	)
)

if "%ImageVersion:~0,-6%" equ "11.0" (
	if "%ImageBuild%" geq "21996" (
		set "SelectedSourceOS=w11"
		set "OSID=11"
	)
)
goto :EOF

:: Setting Package Build and Service Pack Build Version
:PackageBuild_ServicePackBuild
if "%SelectedSourceOS%" equ "w7" (
	set "PackageBuild=%ImageBuild%"
	set "PackageVersion=%ImageVersion%"
	set "PackageServicePackBuild=17514"
)
if "%SelectedSourceOS%" equ "w81" (
	set "PackageBuild=%ImageBuild%"
	set "PackageVersion=%ImageVersion%"
	set "PackageServicePackBuild=16384"
)
if "%SelectedSourceOS%" equ "w10" (
	if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "15063" (
		set "PackageBuild=%ImageBuild%"
		set "PackageVersion=10.0.%ImageBuild%"
		set "PackageServicePackBuild=0"
	)
	if "%ImageBuild%" equ "16299" (
		set "PackageBuild=%ImageBuild%"
		set "PackageVersion=10.0.%ImageBuild%"
		set "PackageServicePackBuild=15"
	)
	if "%ImageBuild%" geq "17134" (
		if "%ImageBuild%" leq "17763" (
			set "PackageBuild=%ImageBuild%"
			set "PackageVersion=10.0.%ImageBuild%"
		)
		if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
			set "PackageBuild=18362"
			set "PackageVersion=10.0.18362"
		)
		if "%ImageBuild%" geq "19041" if "%ImageBuild%" leq "19044" (
			set "PackageBuild=19041"
			set "PackageVersion=10.0.19041"
		)
		if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "22000" (
			set "PackageBuild=%ImageBuild%"
			set "PackageVersion=10.0.%ImageBuild%"
		)
		set "PackageServicePackBuild=1"
	)
)

if "%SelectedSourceOS%" equ "w11" (
	if "%ImageBuild%" geq "21996" if "%ImageBuild%" lss "22563" (
		set "PackageBuild=22000"
		rem set "PackageBuild=%ImageBuild%"
		set "PackageVersion=10.0.22000"
		rem set "PackageVersion=%ImageVersion:~0,-6%.%ImageBuild%"
	)
	if "%ImageBuild%" geq "22563" if "%ImageBuild%" lss "25115" (
		set "PackageBuild=22000"
		rem set "PackageBuild=22621"
		rem set "PackageBuild=%ImageBuild%"
		set "PackageVersion=10.0.22000"
		rem set "PackageVersion=10.0.22621"
		rem set "PackageVersion=%ImageVersion:~0,-6%.%ImageBuild%"
	)
	set "PackageServicePackBuild=1"
)

rem if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" set "FindString=%ImageVersion%"
if "%SelectedSourceOS%" equ "w7" (
	if "%ImageVersion%" equ "6.1.7600" set "FindString=%ImageVersion%.16385"
	if "%ImageVersion%" equ "6.1.7601" set "FindString=6.1.7600.16385 %ImageVersion%.%PackageServicePackBuild%"
)
if "%SelectedSourceOS%" equ "w81" set "FindString=%ImageVersion%.%PackageServicePackBuild%"
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%ImageBuild%" geq "10240" if "%ImageBuild%" lss "22563" (
		set "FindString=%PackageVersion%.%PackageServicePackBuild%"
	)
	if "%ImageBuild%" geq "22563" if "%ImageBuild%" lss "25115" (
		set "FindString=10.0.22621.%PackageServicePackBuild%"
	)
)

::Checking if Build and ServicePackBuild are supported by this Toolkit Version
rem ToolkitHelper 12.3
rem Updated the Feature "Remove Windows Component" to support Windows 10 Client v1809/LTSC2019 (v10.0.17763.1/v10.0.17763.3046 [KB5014692]) Source OS.
rem Updated the Feature "Remove Windows Component" to support Windows 10 Client v1903 (v10.0.18362.1) & v1903/v1909 (v10.0.1836x.2274 [KB5013945]) Source OS.
rem Updated the Feature "Remove Windows Component" to support Windows 10 Client v2004 (v10.0.19041.1) & v2004/v20H2/v21H1/v21H2/LTSC2021 (v10.0.1904x.1766 [KB5014699]) Source OS.
rem Updated the Feature "Remove Windows Component" to support Windows 11 Client v21H2 (v10.0.22000.1/v10.0.22000.739 [KB5014697]) Source OS.
rem Updated the Feature "Remove Windows Component" to support Windows 11 Client v22H2 (v10.0.22621.1/v10.0.22621.105 [KB5014688]) Source OS.

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "!InitialImageServicePackBuild!" neq "1" (
	if "%ImageBuild%" equ "17763" (
		if "!InitialImageServicePackBuild!" neq "3046" (
			set "Support_Warning=1
		)
	)
	if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
		if "!InitialImageServicePackBuild!" neq "2274" (
			set "Support_Warning=1
		)
	)
	if "%ImageBuild%" geq "19041" if "%ImageBuild%" leq "19044" (
		if "!InitialImageServicePackBuild!" neq "1766" (
			set "Support_Warning=1
		)
	)
	if "%ImageBuild%" equ "22000" (
		if "!InitialImageServicePackBuild!" neq "739" (
			set "Support_Warning=1
		)
	)
	if "%ImageBuild%" equ "22621" (
		if "!InitialImageServicePackBuild!" neq "105" (
			set "Support_Warning=1
		)
	)
	if "%ImageBuild%" gtr "22621" (
		rem if "!InitialImageServicePackBuild!" neq "" (
			set "Support_Warning=1
		rem )
	)
)

goto :EOF

:: Setting Package Index and Architecture
:PackageIndex_Architecture
if /i "%ImageArchitecture%" equ "x86" (
	set "PackageIndex=1"
	set "PackageArchitecture=x86"
)
if /i "%ImageArchitecture%" equ "x64" (
	set "PackageIndex=2"
	set "PackageArchitecture=amd64"
)
if /i "%ImageArchitecture%" equ "arm" (
	set "PackageIndex=3"
	set "PackageArchitecture=arm"
)
if /i "%ImageArchitecture%" equ "arm64" (
	set "PackageIndex=4"
	set "PackageArchitecture=arm64"
)
goto :EOF

:: Getting All Image Index Edition
:GettingAllImageIndexEditions
for /l %%i in (1, 1, !ImageCount!) do (
	call :GetImageEdition "%InstallWim%", %%i >nul
	set "ImageEdition%%i=!ImageEdition!"
	set "LastImageEdition=!ImageEdition!"
)

goto :EOF

:: Setting Toolkit's Environment Variables
:EnvironmentVariables

set MenuChoice=

set "Custom=%~dp0Custom"
set "Packs=%~dp0Packs"
set "Updates=%~dp0Updates"
set "WHD=%~dp0WHD"

set "Apps=%Packs%\Apps"
set "AppLicense=%Bin%\AppLicense"
set "Braille=%Packs%\Braille"
set "DaRT=%Packs%\DaRT"
set "Dedup=%Packs%\Dedup"
set "DirectX9c=%Packs%\DirectX9c"
set "EdgeClassic=%Packs%\EdgeBrowser"
set "EdgeChromium=%Packs%\EdgeChromium"
set EdgeChrGPD=
set "Games=%Packs%\Games"
set "IE11=%Packs%\IE11"
set "MediaFeaturePack=%Packs%\MediaFeaturePack"
set "MMRC=%Packs%\MultimediaRestrictedCodecs"
set "NetFx35=%Packs%\NetFX35"
set "NetFx462=%Packs%\NetFX462"
set "NetFx48=%Packs%\NetFX48"
set NetFX48Pkg=
set NetFX48LpPkg=
set "NETCore31=%Packs%\NETCore31"
set "NET6=%Packs%\NET6"
set "OfficeUWP=%Packs%\OfficeUWP"
set "OpenSSH=%Packs%\OpenSSH"
set "PortableDevices=%Packs%\PortableDevices"
set "PowerShell7=%Packs%\PowerShell7"
set "RDP81=%Packs%\RDP81"
set "RSAT=%Packs%\RSAT"
set "Sidebar=%Packs%\Sidebar"
set "Skins=%Packs%\Skins"
set "SystemRestore=%Packs%\SystemRestore"
set "ThinPC=%Packs%\ThinPC"
set "UAP=%Packs%\UAP"
set "VCRuntime=%Packs%\VCRuntime"
set "Win32Calc=%Packs%\Win32Calc"
set "WinToGo=%Packs%\WinToGo"
set "WMF=%Packs%\WMF"
set "WMR=%Packs%\WMR"
set "WSL=%Packs%\WSL"

set "PreActTokens=%Custom%\ActivationTokens"
set ProductKey=
set "CustomFiles=%Custom%\Files"
set "CustomFonts=%Custom%\Fonts"
set "CustomRecoveryImage=%Custom%\RecoveryImage"
set "CustomTerminalServer=%Custom%\TerminalServer"
set "CustomUxTheme=%Custom%\UxTheme"
set PackageLanguage=

goto :EOF

:: Setting Integrate status flags
:IntegrateFlags

:: Integrate LanguagePacks Sub-Menu
set LanguagePacks=
set LanguagePackCode=

:: Integrate Drivers Sub-Menu
set "Drivers=%~dp0Drivers"
set DriverType=
set IntDrivers=

:: Integrate Features

:: Integrate DaRT Sub-Menu
set DebugTools=

:: Integrate RSAT Sub-Menu
:: Integrate IntInboxApps Sub-Menu
set InboxApps=

:: Integrate IntOfficeUWPApps Sub-Menu
set OfficeUWPApps=

:: Integrate ThinPC Sub-Menu
set ThinPCpkgs=

:: Setting Windows Legacy Games status flags
:: Integrate Legacy Games
set GamesList=
set WLegacyGames=
set GameBaseIndex=
set GameLangIndex=

:: Integrate Features and Custom Features
for %%f in (
	F_IntLanguagePacksMenu
	IntLanguagePacksBoot
	IntLanguagePacksInstall
	IntLanguagePacksRecovery
	F_IntDriversMenu
	IntDriversBoot
	IntDriversInstall
	IntDriversRecovery
	ExportHostDrivers
	ExportHostDriversPath
	F_IntDaRTMenu
	IntDaRT_Selection
	IntDaRTBoot
	IntDaRTRecovery
	F_IntRSATMenu
	IntRSATv1609
	IntRSATv1709
	IntRSATv1803
	F_PersonalLists
) do (
	set "%%f=-"
)

for %%f in (
	F_IntFeaturesMenu
	NetFX35
	NetFX462
	NetFX48
	NETCore31
	NET6
	DirectX9c
	EdgeClassic
	EdgeChromium
	IE11
	VCRuntime
	Win32Calc
	OpenSSH
	RDP81
	SysinternalsSuite
	Braille
	Dedup
	WMF
	MediaFeaturePack
	WMR
	MMRC
	PortableDevices
	PowerShell7
	Sidebar
	WSL
	SystemRestore
	WinToGo
	F_IntCustomFeaturesMenu
	WMCGActTokens
	PreActTokens
	UAP
	CustomFonts
	CustomFiles
	CustomUxTheme
	CustomRecoveryImage
	Win32CalcMetroSkin
	WMPMetroSkin
	WPVMetroSkin
	WIconsSkin
	CustomTerminalServer
) do (
	set "%%f=%%f"
	if "!%%f:~,2!" equ "F_" (
		set "%%f=-"
	) else (
		set Int%%f=
		set "F_Int%%f=-"
		set %%f=
	)
)

for %%g in (
	F_IntGamesMenu
	WLegacyGames_Pack
	CariocaRummy
	HoldEm
	Sudoku
	Tinker
	ChessTitans
	FreeCell
	Hearts
	Inkball
	MahjongTitans
	Minesweeper
	Pinball
	PurblePlace
	Solitaire
	SpiderSolitaire
) do (
	set "%%g=%%g"
	if "!%%g:~,2!" neq "F_" if "!%%g:~,2!" neq "WL" (
		set "G_%%g=-"
		set %%g=
	)
	if "!%%g:~,2!" equ "F_" (
		set "%%g=-"
	)
	if "!%%g:~,2!" equ "WL" (
		set "%%g=-"
	)
)

:: Integrate Windows Updates
for %%f in (
	F_IntUpdatesMenu
	WHDUpdatesMenu
	W7withSP2WHDUpdates
	W7withoutSP2WHDUpdates
	WHDBaselineMenu
	WHDBaseLineBoot
	WHDBaseLineInstall
	WHDBaseLineInstallRecovery
	WHDBaseLineBootInstallRecovery
	UpdatesGeneral
	UpdatesHotfix
	UpdatesSecurity
	WHDAdditionalMenu
	WHDExtraMenu
	WindowsSetupMediaUpdates
) do (
	set "%%f=%%f"
	if "!%%f:~,2!" equ "F_" (
		set "%%f=-"
	) else (
		set Int%%f=
		set "F_Int%%f=-"
		set %%f=
	)
)

set "F_IntUpdates=0"
set "F_IntWHDBaseLine=0"

for %%# in (
	Boot
	Install
	InstallRecovery
	BootInstallRecovery
) do (
	set "F_IntWHDBaseLine%%#=-"
)

for %%# in (
	WUpdates
	General
	Hotfix
	Security
	ESU
	NET35
	Windows10
	WAT
	WinPE
	WUSatisfy
	ADLDS
	FMApi
	VirtualPC
	Features
	WorkFolders
) do (
	set IntUpdates%%#=
	set "F_IntUpdates%%#=-"
)

for %%# in (
	F_IntInboxAppsMenu

	Alarms

	BingFinance
	BingFoodDrink
	BingHealthFitness
	BingMaps
	BingNews
	BingSports
	BingTravel
	BingWeather
	Calculator
	CommunicationsApps
	Camera
	ClipChamp
	AV1VideoExtension
	VP9VideoExtensions
	HEIFImageExtension
	HEVCVideoExtension
	MPEG2VideoExtension
	RawImageExtension
	WebMediaExtensions
	WebpImageExtension
	Cortana
	DesktopAppInstaller
	DirectXRuntime
	FeedbackHub
	GetHelp

	HelpAndTips

	Maps
	Messaging
	Wallet
	MicrosoftPowerBI
	MinecraftEducationEdition
	MixedRealityPortal
	MixedRealityViewer
	OneConnect

	OfficeHub
	Notepad
	OneNote
	D3DMappingLayers
	Paint3D
	Paint
	People
	YourPhone
	Photos
	PhotosMediaEngine
	PowerAutomateDesktop
	Print3D
	QuickAssist
	Reader
	ReadingList
	Scan
	Skype
	ScreenSketch
	SolitaireCollection
	SoundRecorder
	StickyNotes
	StorePurchaseApp
	Teams
	Terminal
	Getstarted
	Todos

	ClientWebExperience
	WindowsDefender

	WindowsStore
	AmazonStore
	WindowsSubsystemForAndroid
	WindowsSubsystemForLinux
	Whiteboard
	GamingServices
	Xbox
	Gaming
	XboxGamingOverlay
	XboxGameOverlay
	XboxIdentityProvider
	XboxSpeechToTextOverlay
	XboxLiveGames
	XboxTCUI
	ZuneMusic
	ZuneVideo

	AMDLink
	HPSupportAssistant
	IntelGraphicsCommandCenter
	IntelThunderboltController
	KillerControlCenter
	NVIDIAControlPanel
	RealtekAudioControl
	WavesMaxxAudioProforDell
) do (
	rem set "%%#=!%%#:~,2!"
	set "%%#=%%#"
	rem echo.~,2 !%%#:~,2!
	if "!%%#:~,2!" equ "F_" (
		set "%%#=-"
	) else (
		set "InboxApp%%#=-"
		set %%#_Appx=
		set %%#_License=
		set %%#=
	)
)

for %%# in (
	IntegratedInboxAppNamesList

	AdvertisingXaml_Appx
	MediaPlayReadyClient2_Appx
	NETNativeFramework13_Appx
	NETNativeFramework16_Appx
	NETNativeFramework17_Appx
	NETNativeFramework21_Appx
	NETNativeFramework22_Appx
	NETNativeRuntime13_Appx
	NETNativeRuntime14_Appx
	NETNativeRuntime16_Appx
	NETNativeRuntime17_Appx
	NETNativeRuntime21_Appx
	NETNativeRuntime22_Appx
	ServicesStoreEngagement_Appx
	UIXaml20_Appx
	UIXaml21_Appx
	UIXaml22_Appx
	UIXaml23_Appx
	UIXaml24_Appx
	UIXaml25_Appx
	UIXaml26_Appx
	UIXaml27_Appx
	VCLibs12_arm_Appx
	VCLibs12_x86_Appx
	VCLibs12_x64_Appx
	VCLibsUWPDesktop11_Appx
	VCLibsUWPDesktop12_Appx
	VCLibsUWPDesktop14_Appx
	VCLibs14_Appx
	WinJS20_Appx
) do (
	set %%#=
)

for %%o in (
	F_IntOfficeUWPAppsMenu
	Desktop
	Access
	Excel
	Outlook
	PowerPoint
	Publisher
	Word
) do (
	set "%%o=%%o"
	if "!%%o:~,2!" equ "F_" (
		set "%%o=-"
	) else (
		if %%o neq "Desktop" set "OfficeUWP%%oApp=-"
		set Office%%o_Appx=
		set Office%%o_License=
		set %%o=
	)
)

for %%t in (
	F_IntThinPCpkgsMenu
	NetFx35
	BackupRestore
	BasicHelp
	Defender
	DVDMaker
	FaxScan
	ISOBurner
	MediaCenter
	PremiumCodecs
	MobilityCenter
	ParentalControl
	PhotoViewer
	Search
	SpeechText
	TabletPC
) do (
	set "%%t=%%t"
	if "!%%t:~,2!" equ "F_" (
		set "%%t=-"
	) else (
		set "ThinPC%%t=-"
		set %%t=
	)
)

goto :EOF

:: Setting Components status flags
:ComponentsFlags

set Components=

set "C_PersonalLists=-"
set RemovedPkgsNamesList=
set RetainedPkgsNamesList=

:: [1]  Internet
:: [2]  Multimedia
:: [3]  Network
:: [4]  Privacy
:: [5]  Remoting
:: [6 ^| 7 ^| 8]  System, SystemApps and WindowsApps
:: [6]  System
:: [7]  SystemApps
:: [8]  WindowsApps

if "%IsSourceSelected%" equ "Yes" if "%SelectedSourceOS%" neq "w7" (
	if "!TKHC_List!" equ "" (
		for /f "skip=6 eol== tokens=1,2* delims=- " %%# in ('%ToolKitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
			if "%%#" neq "Internet" if "%%#" neq "Multimedia" if "%%#" neq "Network" if "%%#" neq "Privacy" if "%%#" neq "Remoting" if "%%#" neq "System" if "%%#" neq "Windows" if "%%#" neq "Group" if "%%#" neq "SystemApps" if "%%#" neq "WindowsApps" if "%%#" neq "AllComponents" (
				set "TKHC_List=!TKHC_List!;%%#"
				set "TKHRC_%%#=+"
				set "TKHC_%%#=Present"
				set TKHRICID_%%#=
				set TKHRMCID_%%#=
				set TKHRNCID_%%#=
				set TKHRPCID_%%#=
				set TKHRRCID_%%#=
				set TKHRSCID_%%#=
				set TKHRSACID_%%#=
				set TKHRWACID_%%#=
			)
		)
		set "TKHC_List=!TKHC_List:~1!"
	)
	if "!TKHC_List!" neq "" (
		if "!All_Components!" equ "" (
			for %%c in (
				AdobeFlashForWindows
				EdgeChromium
				InternetExplorer
				FirstLogonAnimation
				GameExplorer
				LockScreenBackground
				ScreenSavers
				SnippingTool
				SoundThemes
				SpeechRecognition
				Wallpapers
				WindowsMediaPlayer
				WindowsPhotoViewer
				WinSAT
				WindowsThemes
				WindowsTIFFIFilter
				OfflineFiles
				OpenSSH
				RemoteDesktopClient
				RemoteDifferentialCompression
				SimpleTCPIPServices
				TelnetClient
				TFTPClient
				WindowsMail
				AssignedAccess
				CEIP
				FaceRecognition
				KernelDebugging
				LocationService
				PicturePassword
				PinEnrollment
				UnifiedTelemetryClient
				WiFiNetworkManager
				WindowsErrorReporting
				WindowsInsiderHub
				HomeGroup
				OneDrive
				MultiPointConnector
				RemoteAssistance
				RemoteDesktopServer
				RemoteRegistry
				WorkFoldersClient
				Cortana
				Paint
				QuickAssist
				AccessibilityTools
				Calculator
				DeviceLockdown
				EaseOfAccessCursors
				EaseOfAccessThemes
				EasyTransfer
				FileHistory
				Magnifier
				ManualSetup
				Narrator
				Notepad
				OnScreenKeyboard
				ProjFS
				SecurityCenter
				StepsRecorder
				StorageSpaces
				SystemRestore
				WindowsBackup
				WindowsFirewall
				WindowsSubsystemForLinux
				WindowsToGo
				Wordpad
				AccountsControl
				AddSuggestedFoldersToLibraryDialog
				AppResolverUX
				AssignedAccessLockApp
				AsyncTextService
				AADBrokerPlugin
				CallingShellApp
				CBSPreview
				CapturePicker
				ContentDeliveryManager
				CredDialogHost
				Edge
				EdgeDevToolsClient
				WindowsReaderPDF
				ECApp
				FileExplorer
				FilePicker
				LockApp
				MapControl
				XGpuEjectDialog
				NarratorQuickStart
				NcsiUwpApp
				OOBENetworkCaptivePortal
				OOBENetworkConnectionFlow
				ParentalControls
				PeopleExperienceHost
				PinningConfirmationDialog
				PPIProjection
				PrintDialog
				RetailDemoContent
				SearchApp
				SettingSync
				SkypeORTC
				SmartScreen
				SecureAssessmentBrowser
				WebcamExperience
				Win32WebViewHost
				WindowsDefender
				BioEnrollment
				WindowsMixedReality
				WindowsStoreClient
				XboxClient
				XboxGameCallableUI
				AdvertisingXaml
				Alarms
				CalculatorApp
				Camera
				ClipChamp
				VP9VideoExtensions
				HEIFImageExtension
				HEVCVideoExtension
				RawImageExtension
				WebMediaExtensions
				WebpImageExtension
				DesktopAppInstaller
				Family
				FeedbackHub
				GetHelp
				ZuneMusic
				ZuneVideo
				Maps
				Messaging
				WalletService
				MixedRealityPortal
				3DViewer
				OneConnect
				OfficeHub
				BingNews
				NotepadApp
				OfficeOneNote
				Paint3D
				People
				Photos
				PowerAutomateDesktop
				Print3D
				ServicesStoreEngagement
				SkypeApp
				ScreenSketch
				SolitaireCollection
				StickyNotes
				StorePurchaseApp
				Terminal
				Getstarted
				Todos
				SoundRecorder
				BingWeather
				ClientWebExperience
				CommunicationsApps
				WindowsStoreApp
				XboxApp
				GamingApp
				XboxGamingOverlay
				XboxGameOverlay
				XboxIdentityProvider
				XboxSpeechToTextOverlay
				XboxTCUI
				YourPhone
			) do (
				set "All_Components=!All_Components!;%%c"
			)
			set "All_Components=!All_Components:~1!"
		)
		for %%c in (!All_Components!) do (
			set "C_%%c=+"
			set %%c=
		)
	)
)
goto :EOF

:: Setting Tweaks status flags
:TweaksFlags

if "%IsSourceSelected%" equ "Yes" (
	set Tweaks=
	set TweakLanguage=
	set TweakWSL=
	set RegistryTweaks=
	set "EnableFeaturesList=%Lists%\EnableFeaturesList.txt"
	set "DisableFeaturesList=%Lists%\DisableFeaturesList.txt"
	set "DefaultInboxAppsAssociationXML=%XMLs%\%SelectedSourceOS%_DefaultAppsAssociation.xml"
	set "CustomInboxAppsAssociationXML=%XMLs%\%SelectedSourceOS%_CustomAppsAssociation.xml"
	set "DefaultStartMenuLayoutXML=%XMLs%\%SelectedSourceOS%_%ImageVersion%_DefaultStartMenuLayout.xml"
	set "CustomStartMenuLayoutXML=%XMLs%\%SelectedSourceOS%_CustomStartMenuLayout.xml"
	set "DefaultStartMenuLayoutBIN=%StartMenuLayoutBIN%\DefaultStartMenuLayout.bin"
	set "CustomStartMenuLayoutBIN=%StartMenuLayoutBIN%\CustomStartMenuLayout.bin"
	set CustomRegistry=

	for %%t in (
		ExportInboxAppsAssociation
		RemoveInboxAppsAssociation
		ImportInboxAppsAssociation
		ImportStartMenuLayout
		EnableFeatures
		EnableFeaturesMenu
		EnableFeaturesList
		DisableFeatures
		DisableFeaturesMenu
		DisableFeaturesList
		ImportCustomRegistry
		HiberbootEnabled
		EnableDarkThemeandTransparency
		ControlPanelnConfigsandSettingsforFastestWindows
		WindowsExplorer_PreferencesandPolicies
		SetQoSlimittozero_internetWithNoLimits
		BugFix_WiFinoInternetConnection
		SetLanmanWorkstationandDownloads_OptimizationConfigs
		Disable3RDPartyApps
		CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
		SetCloudContentfor3RDPartyAppsandDataCollection_Policies
		DisableCortanaApp
		SetWindowsSearchandCortana_PreferencesandPolicies
		DisableSIA_DebugTracing
		CustomWindowsErrorReporting_Policies
		DisableWindowsSmartScreen
		DisableWindowsDefender
		DisableWindowsFirewall
		CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
		DisableDriversUpdates
		EnableCustomWindowsDriversUpdateTweaks
		DisableWindowsUpdate
		CustomDisableWindowsUpdateTweaks
		DisableWindowsUpgrade
		DisableReservedStorage
		EnableFullResetBase
		EnableFMP3ProCodec
		EnablePhotoViewer
		ForceLatestNetFramework
		HideCortanaIcon
		HideMeetNowIcon
		HideNewsAndInterests
		HideTaskbarSearchbox
		HideTaskViewIcon
		LegacyVerticalMixerVolumeControl
		BlockAutoEdgeChromiumBasedDelivery
		GeneralTweaks
		BypassReq
		DisableTeamsApp
		EnableClassicContextMenu
		EnableLocalAccount
		HideChatIcon
		HideWidgetsIcon
		TaskbarAlignment_Center2Left
		TaskbarSize
		StartMenu_SetupComplete
	) do (
		set "T_%%t=-"
		set %%t=
	)
)
goto :EOF

:StartReadingEnableFeatures
if "%IsSourceSelected%" equ "Yes" (

	set "StartReadingEnableFeatures=1"

	if "!DEF_List!" neq "" (
		for %%f in (!DEF_List!) do (
			set DEF_%%f=
			set DE_Feature_%%f=
			set DEFID_%%f=
			set %%f=
		)
		set DEF_List=
	)

	if "!DEF_List!" equ "" (
		rem echo.
		rem echo.DISM Enable Features ^(DEF^) List :
		rem for /f "tokens=*" %%f in ('%DISM% /Image:"%InstallMount%\!SpecifiedSourceIndex!" /Get-Features /Format:Table ^| findstr.exe /I /C:"Disable"') do (
		for /f "tokens=1 delims= " %%f in ('%DISM% /Image:"%InstallMount%\!SpecifiedSourceIndex!" /Get-Features /Format:Table ^| findstr.exe /I /C:"Disable"') do (
			if "!DE_Feature_%%f!" equ "" (
				rem echo.Feature    %%f
				set "DEF_%%f=-"
				set "DEF_List=!DEF_List!;%%f"
				set DEFID_%%f=
				set %%f=
			)
			set "DE_Feature_%%f=Present"
		)
		set "DEF_List=!DEF_List:~1!"
	)
)
goto :EOF

:StartReadingDisableFeatures
if "%IsSourceSelected%" equ "Yes" (

	set "StartReadingDisableFeatures=1"

	if "!DDF_List!" neq "" (
		for %%f in (!DDF_List!) do (
			set DDF_%%f=
			set DD_Feature_%%f=
			set DDFID_%%f=
			set %%f=
		)
		set DDF_List=
	)

	if "!DDF_List!" equ "" (
		rem echo.
		rem echo.DISM Disable Features ^(DDF^) List :
		rem for /f "tokens=*" %%f in ('%DISM% /Image:"%InstallMount%\!SpecifiedSourceIndex!" /Get-Features /Format:Table ^| findstr.exe /I /C:"Enable Pending"') do (
		for /f "tokens=1 delims= " %%f in ('%DISM% /Image:"%InstallMount%\!SpecifiedSourceIndex!" /Get-Features /Format:Table ^| findstr.exe /I /C:"Enable Pending"') do (
			if "!DD_Feature_%%f!" equ "" (
				rem echo.Feature    %%f
				set "DDF_%%f=+"
				set "DDF_List=!DDF_List!;%%f"
				set DDFID_%%f=
				set %%f=
			)
			set "DD_Feature_%%f=Present"
		)
		rem for /f "tokens=*" %%f in ('%DISM% /Image:"%InstallMount%\!SpecifiedSourceIndex!" /Get-Features /Format:Table ^| findstr.exe /I /C:"Enable" ^| findstr.exe /I /V " Pending"') do (
		for /f "tokens=1 delims= " %%f in ('%DISM% /Image:"%InstallMount%\!SpecifiedSourceIndex!" /Get-Features /Format:Table ^| findstr.exe /I /C:"Enable" ^| findstr.exe /I /V " Pending"') do (
			if "!DD_Feature_%%f!" equ "" (
				rem echo.Feature    %%f
				set "DDF_%%f=+"
				set "DDF_List=!DDF_List!;%%f"
				set DDFID_%%f=
				set %%f=
			)
			set "DD_Feature_%%f=Present"
		)
		set "DDF_List=!DDF_List:~1!"
	)
)
goto :EOF

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Pre-CleanUp Operation
::-------------------------------------------------------------------------------------------
:PreCleanUpOperation
cls
echo.
if exist "%Toolkitcfg%" (
	choice /C:YN /N /M "%txtpreclch01% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 (
		echo.
		echo.%txtprecl_line01%
		echo.
		echo.%txtprecl_line02%
		echo.%txtprecl_line03%
		echo.
		echo.    %txtprecl_line04%
		echo.    %txtprecl_line05%
		echo.    %txtprecl_line06%
		echo.    %txtprecl_line07%
		echo.    %txtprecl_line08%
		echo.
		pause
		call :StartUp
		call :SourceSelectedGetInfo
		pause
		goto :MainMenu
	)
)
echo.
echo.%txtprecl_msg01%
call :Cleanup
call :StartUp
pause
goto :MainMenu
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - StartUp function
::-------------------------------------------------------------------------------------------
:StartUp

:: Setting DOS character codepage
if /I "%HostLanguage%" equ "en-GB" chcp 437 >nul
if /I "%HostLanguage%" equ "en-US" chcp 437 >nul
if /I "%HostLanguage%" equ "pt-BR" chcp 860 >nul
if /I "%HostLanguage%" equ "pt-PT" chcp 860 >nul
if /I "%HostLanguage%" equ "zh-CN" chcp 936 >nul

cls
echo.===============================================================================
echo.%mnuStartUp%
echo.===============================================================================
echo.
echo.%statupmsg01%
echo.
echo.%HostOSName% %HostDisplayVersion% %FullHostVersion% %HostArchitecture% %HostLanguage%
echo.

echo.
echo.%statupmsg02%
echo.
echo.DISM.exe           =  %DISM%
call :CreateFolder "%DismScratch%"
set "DISM=%DISM% %DismFormat%"
echo.Imagex.exe         =  %Imagex%
echo.Oscdimg.exe        =  %Oscdimg%
echo.Dvdburn.exe        =  %Dvdburn%
echo.7zip.exe           =  %Zip%
echo.Dism++CUI.exe      =  %W10EsdDecrypter%
echo.EsdDecrypt.exe     =  %W81EsdDecrypter%
echo.ToolkitHelper.exe  =  %ToolkitHelper%
echo.ResourceHacker.exe =  %ResourceHacker%
echo.WimlibImagex.exe   =  %WimlibImagex%
echo.
echo.===============================================================================
echo.
goto :EOF
::-------------------------------------------------------------------------------------------

:SourceSelectedGetInfo
echo.-------------------------------------------------------------------------------
echo.%restoreprevmsg01%
echo.-------------------------------------------------------------------------------

:: Getting the previously saved Variable Setting Values from a Storage File.
call :GettingVariableSettingValues

if "!ImageIndexNo!" equ "" (
	:: Getting Image Index Number to Service
	call :GetImageIndexNo "%InstallWim%", 1
)

:: Getting Specified Source Index Information
call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul

:: Setting Selected Source OS version
call :SelectedSourceOS

:: Setting Package Build and Service Pack Build Version
call :PackageBuild_ServicePackBuild

:: Setting Package Index and Architecture
call :PackageIndex_Architecture

:: Checking whether the HOST OS is Windows 7 and selected Source OS is Windows 10/11
rem if "%HostVersion%" equ "6.1" if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
if "%HostVersion%" equ "6.1" if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	echo.
	echo.%restoreprevmsg02%
	echo.
	echo.%restoreprevmsg03%
	goto :StartUp
)

if "%IsBootImageSelected%" equ "" (
	echo.
	choice /C:YN /N /M "%txtbootimselch01% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 set "IsBootImageSelected=No"
	if errorlevel 1 set "IsBootImageSelected=Yes"
)
if "%IsRecoveryImageSelected%" equ "" (
	echo.
	choice /C:YNR /N /M "%txtbootreselch01% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%/'R'%GlobalChoice_Remove%] : "
	if errorlevel 3 set "RemoveWinRE=Yes"
	if errorlevel 2 set "IsRecoveryImageSelected=No"
	if errorlevel 1 set "IsRecoveryImageSelected=Yes"
)
echo.
echo.    %IsBootImageSelected_ChoiceMSG%     : ['%IsBootImageSelected%']
echo.    %IsRecoveryImageSelected_ChoiceMSG% : ['%IsRecoveryImageSelected%']
echo.
set "IsSourceSelected=Yes"
echo.    %IsSourceImageSelected_ChoiceMSG%   : ['%IsSourceSelected%']
echo.

:: Display Source Image Information
call :DisplaySourceImageInformation

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - %txtMainMenu%
::-------------------------------------------------------------------------------------------
:MainMenu

:: Resetting All Flags Status
call :EnvironmentVariables
call :IntegrateFlags
call :ComponentsFlags
call :TweaksFlags

cls
echo.===============================================================================
if "!Allowed!" equ "" (
	echo.                           MSMG Toolkit - %txtMainMenu%
) else (
	echo.!Allowed!                          MSMG Toolkit - %txtMainMenu%                           !Bypass!
)
echo.===============================================================================
echo.
echo.                             [1]   %txtMainMenu_1%
echo.
echo.                             [2]   %txtMainMenu_2%
echo.
echo.                             [3]   %txtMainMenu_3%
echo.
echo.                             [4]   %txtMainMenu_4%
echo.
echo.                             [5]   %txtMainMenu_5%
echo.
echo.                             [6]   %txtMainMenu_6%
echo.
echo.                             [7]   %txtMainMenu_7%
echo.
echo.
echo.                             [R]   %txtMainMenu_r_line1%
echo.                                   %txtMainMenu_r_line2%
echo.                             [Q]   %txtMainMenu_q%
echo.
echo.===============================================================================
choice /C:1234567RQPC90 /N /M "%GlobalEnterChoice% "
if errorlevel 13 (
	if "!Allowed!" equ "" (
		set "Allowed=I"
	) else (
		set "IsDialogsEnabled=Yes"
		set "Bypass=O"
		set Allowed=
		set CleanupSources=
		set "ImageFormat=WIM"
	)
	goto :MainMenu
)
if errorlevel 12 (
	if "!ImageFormat!" equ "WIM" (
		set "ImageFormat=ESD"
	)
	goto :MainMenu
)
if errorlevel 11 (
	if "!CleanupSources!" equ "" (
		set "CleanupSources=Enabled"
	)
	goto :MainMenu
)
if errorlevel 10 (
	set "Allowed=I"
	set "Bypass=I"
	set "Auto=1"

	if "%IsSourceSelected%" equ "No" (
		call :ExtractInstallMediaSource_Image

		set "ChosenSource=A"

		:: Checking for Image Index Validation
		if /i "!ChosenSource!" equ "A" (
			:: Getting Image Index Number to Service
			call :GetImageIndexNo "%InstallWim%", 1
		)

		if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! (
			call :ImageIndexDeletion
			set "ChosenSource=A"
			:: Getting Image Index Number to Service
			call :GetImageIndexNo "%InstallWim%", 1
		)

		set "IsBootImageSelected=Yes"
		set "IsRecoveryImageSelected=Yes"
		call :SelectSourceDVD
		goto :AutomatedProcess
	) else (
		goto :AutomatedProcess
	)
)
if errorlevel  9 goto :Quit
if errorlevel  8 (
	Start "" /I cmd.exe /C "%~f0"
	exit
)
if errorlevel  7 goto :ToolsMenu
if errorlevel  6 goto :TargetMenu
if errorlevel  5 goto :ApplyMenu
if errorlevel  4 goto :CustomizeMenu
if errorlevel  3 goto :RemoveMenu
if errorlevel  2 goto :IntegrateMenu
if errorlevel  1 goto :SourceMenu

:AutomatedProcess
:: Auto Integrate Menu
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
			rem IntInboxApps
		for %%f in (
			IntFeatures
			IntGames
			IntDaRT
			IntCustomFeatures
		) do (
			set "F_%%fMenu=+"
		)

		rem set "F_IntDirectX9c=+"
		set "F_IntWin32Calc=+"
		if "%ImageBuild%" equ "17763" (
			set "F_IntNetFX48=+"
		)
		if "%ImageBuild%" geq "14393" (
			set "F_IntNETCore31=+"
			set "F_IntNET6=+"
		)
		if "%ImageBuild%" leq "22000" (
			set "F_IntOpenSSH=+"
		)
		rem set "F_IntVCRuntime=+"
		rem set "F_IntPowerShell7=+"
		set "F_IntSysinternalsSuite=+"

		for %%g in (
			CariocaRummy
			HoldEm
			Sudoku
			Tinker

			ChessTitans
			FreeCell
			Hearts
			Inkball
			MahjongTitans
			Minesweeper
			Pinball
			PurblePlace
			Solitaire
			SpiderSolitaire
		) do (
			set %%g=
			set "G_%%g=+"
		)

		for %%f in (
			IntDaRTBoot
			IntDaRTRecovery
		) do (
			set "%%f=+"
		)

			rem GetHelp
			rem Calculator
			rem Photos
			rem ScreenSketch
			rem SoundRecorder
			rem StickyNotes
			rem XboxTCUI
			rem XboxGamingOverlay
			rem XboxGameOverlay
			rem XboxSpeechToTextOverlay
			rem XboxIdentityProvider
			rem StorePurchaseApp
			rem WindowsStore
		for %%# in (
			AV1VideoExtension
			DesktopAppInstaller
			VP9VideoExtensions
			HEIFImageExtension
			HEVCVideoExtension
			MPEG2VideoExtension
			WebMediaExtensions
			WebpImageExtension
		) do (
			set "InboxApp%%#=+"
		)

		rem if "%SelectedSourceOS%" equ "w10" (
		rem 	for %%# in (
		rem 		Paint3D
		rem 		Xbox
		rem 		MixedRealityViewer
		rem 	) do (
		rem 		set "InboxApp%%#=+"
		rem 	)
		rem 	if /i "%ImageArchitecture%" equ "x64" (
		rem 		for %%# in (
		rem 			MixedRealityPortal
		rem 		) do (
		rem 			set "InboxApp%%#=+"
		rem 		)
		rem 	)
		rem 	if "%ImageBuild%" lss "19041" (
		rem 		for %%# in (
		rem 			Print3D
		rem 		) do (
		rem 			set "InboxApp%%#=+"
		rem 		)
		rem 	)
		rem )

		if "%ImageBuild%" geq "19041" (
				rem PhotosMediaEngine
			for %%# in (
				DirectXRuntime
				Terminal
				D3DMappingLayers
			) do (
				set "InboxApp%%#=+"
			)
		)

		if "%SelectedSourceOS%" equ "w11" (
				rem Paint
				rem Gaming
				rem GamingServices
				rem Notepad
				rem PowerAutomateDesktop
				rem ClientWebExperience
			for %%# in (
				AmazonStore
				WindowsSubsystemForAndroid
				WindowsSubsystemForLinux
			) do (
				set "InboxApp%%#=+"
			)
		)
	)

	if "%ImageInstallationType%" neq "Server Core" (
			rem IntWMPMetroSkin
			rem IntWPVMetroSkin
			rem IntWIconsSkin
		for %%f in (
			IntCustomFiles
			IntWin32CalcMetroSkin
		) do (
			set %%f=
			set "F_%%f=+"
		)
	)
)
call :StartIntegration

:: Auto Remove Menu
set "RemovalMethod=ToolkitHelper"
call :RemoveWindowsComponentsList

rem call :CustomPreSets_RemoveWindowsComponents
	rem call :AccessibilityCustomSelection
	rem call :ConservativeGenericEditionCustomSelection
	rem call :LooksLikeLTSCEditionCustomSelection
	rem call :GamerEditionCustomSelection
	rem call :LiteEditionCustomSelection
	rem call :XtremeLiteEditionCustomSelection
	rem call :W7ExperienceEditionCustomSelection
rem call :PersonalPreSets_RemoveWindowsComponents
	rem call :PersonalFamilyCustomSelection
	rem call :PersonalWorkCustomSelection
		rem call :ListsandPreSets_Filter
		rem call :StartRemovingWindowsComponents

rem set "RemovalMethod=DISM"
rem call :RemoveWindowsComponentsList

:: Auto Customize Menu
set "RegistryTweaks=Allowed"

set "T_ExportInboxAppsAssociation=-"
set "T_RemoveInboxAppsAssociation=+"
set "T_ImportInboxAppsAssociation=+"
set "T_ImportStartMenuLayout=+"

rem set "CleanupSources=Enabled"
set StartReadingEnableFeatures=
set StartReadingDisableFeatures=
set "T_EnableFeatures=+"
call :StartReadingEnableFeatures
call :ReadEnableFeaturesList
set "T_DisableFeatures=+"
call :StartReadingDisableFeatures
call :ReadDisableFeaturesList

set "T_ImportCustomRegistry=+"

for %%t in (
	HiberbootEnabled
	Disable3RDPartyApps
	DisableCortanaApp
	DisableWindowsFirewall
	DisableWindowsDefender
	DisableDriversUpdates
	DisableWindowsUpdate
	HideTaskbarSearchbox
	HideTaskViewIcon
	TaskbarSize
) do (
	set "T_%%t=-"
	set %%t=
)
if "%SelectedSourceOS%" equ "w81" (
	for %%t in (
		CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
		DisableWindowsSmartScreen
		CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
		EnableCustomWindowsDriversUpdateTweaks
		CustomDisableWindowsUpdateTweaks
		DisableWindowsUpgrade
		EnableFMP3ProCodec
		EnablePhotoViewer
	) do (
		set "T_%%t=+"
		set %%t=
	)
)
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
		rem BlockAutoEdgeChromiumBasedDelivery
	for %%t in (
		EnableDarkThemeandTransparency
		ControlPanelnConfigsandSettingsforFastestWindows
		WindowsExplorer_PreferencesandPolicies
		SetQoSlimittozero_internetWithNoLimits
		SetLanmanWorkstationandDownloads_OptimizationConfigs
		CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
		SetCloudContentfor3RDPartyAppsandDataCollection_Policies
		SetWindowsSearchandCortana_PreferencesandPolicies
		DisableSIA_DebugTracing
		CustomWindowsErrorReporting_Policies
		DisableWindowsSmartScreen
		CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
		EnableCustomWindowsDriversUpdateTweaks
		CustomDisableWindowsUpdateTweaks
		DisableWindowsUpgrade
		DisableReservedStorage
		EnableFullResetBase
		EnableFMP3ProCodec
		EnablePhotoViewer
		HideCortanaIcon
		HideMeetNowIcon
		HideNewsAndInterests
		GeneralTweaks
	) do (
		set "T_%%t=+"
		set %%t=
	)
	if "%SelectedSourceOS%" equ "w10" (
			rem BugFix_WiFinoInternetConnection
		for %%t in (
			LegacyVerticalMixerVolumeControl
		) do (
			set "T_%%t=+"
			set %%t=
		)
	)
	if "%SelectedSourceOS%" equ "w11" (
			rem EnableClassicContextMenu
		for %%t in (
			BypassReq
			DisableTeamsApp
			EnableLocalAccount
			HideChatIcon
			HideWidgetsIcon
			TaskbarAlignment_Center2Left
		) do (
			set "T_%%t=+"
			set %%t=
		)
	)
)

set "T_StartMenu_SetupComplete=+"

call :ApplyTweaks

:: Auto Apply Menu
set "Cleaning=Enabled"
rem set "ImageFormat=ESD"
if "!EditionBase!" equ "Pass" (
	if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! set "TrimEditions=Enabled"
	set "AssignChosenVirtualEditions=1"
	set "VirtualCreate_ImageIndexEditions=Enabled"
	for %%e in (
		ProfessionalWorkstation
		ProfessionalWorkstationN
		ProfessionalEducationN
		ProfessionalEducation
		Enterprise
		EnterpriseN
		ServerRdsh
		EducationN
		Education
		IoTEnterprise
		IoTEnterpriseS
		CloudEdition
		CloudEditionN
		CoreSingleLanguage
	) do (
		set "VE_%%e=+"
	)
)
goto :SaveSource
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Select Source Menu
::-------------------------------------------------------------------------------------------
:SourceMenu

cls
echo.===============================================================================
echo.%txtSourceMenu%
echo.===============================================================================
echo.

:: Checking whether Source OS is selected
if "%IsSourceSelected%" equ "Yes" (
	set ImageVersion=
	set ImageBuild=
	set CurrentImageBuild=
	echo.%txtSourceMenu_msg01%
	:: Getting Specified Source Image Index Information
	call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul
	if exist "%Toolkitcfg%" (
		:: Getting the previously saved Variable Setting Values from a Storage File.
		call :GettingVariableSettingValues
	)
	:: Getting All Image Index Edition
	call :GettingAllImageIndexEditions
	:: Storing Variable Values on Storage File as a previous Setting to use when a code brake or crashing occurs.
	call :StoringVariableSettingValues
	:: Display Source Image Information
	call :DisplaySourceImageInformation
	:: Display Image Information
	call :ShowImageInfo
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

:: Checking whether Image Registry is loaded
if "%IsImageRegistryLoaded%" equ "Yes" (
	echo.%GlobalSourceOS_ImageRegistryLoaded%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

echo.  [1]   %txtSourceMenu_op01pt01% ^<%InstallMedia%^> %GlobalFolder2%
echo.
echo.  [2]   %txtSourceMenu_op02%
echo.
echo.  [3]   %txtSourceMenu_op03%
echo.
echo.  [4]   %txtSourceMenu_op04%
echo.
echo.  [5]   %txtSourceMenu_op05pt01%
echo.        %txtSourceMenu_op05pt02%
echo.
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:12345PX /N /M "%GlobalEnterChoice% "
if errorlevel 7 goto :MainMenu
if errorlevel 6 (
	set "Allowed=I"
	set "Bypass=I"
	call :ExtractInstallMediaSource_Image
	goto :SourceMenu
)
if errorlevel 5 call :ExtractSourceESD
if errorlevel 4 call :ExtractSourceStoreESD
if errorlevel 3 call :ExtractInstallMediaSource_Image
if errorlevel 2 call :CopySourceDVDUSB
if errorlevel 1 call :SelectSourceDVD

goto :MainMenu
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Integrate Menu
::-------------------------------------------------------------------------------------------
:IntegrateMenu

set "CurrentMenu=IntegrateMenu"

cls
echo.===============================================================================
if "!Allowed!" equ "" (
	echo.%txtIntegrateMenu%
) else (
	echo.!Allowed!%txtIntegrateMenu%                       !Bypass!
	if "%Finished%" equ "Features" (
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMenu_msg01%
		echo.-------------------------------------------------------------------------------
		echo.
		set Finished=
	)
)
echo.===============================================================================
echo.
:: Checking whether Source OS is selected
if "%IsSourceSelected%" equ "No" (
	echo.%txtIntegrateMenu_msg02%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

:: Checking whether Image Registry is loaded
if "%IsImageRegistryLoaded%" equ "Yes" (
	echo.%GlobalSourceOS_ImageRegistryLoaded%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

echo.  [1] ^(!F_IntLanguagePacksMenu!^)%txtIntegrateMenu_op01%
echo.
echo.  [2] ^(!F_IntDriversMenu!^)%txtIntegrateMenu_op02%
echo.
echo.  [3] ^(!F_IntFeaturesMenu!^)%txtIntegrateMenu_op03%
echo.
echo.  [4] ^(!F_IntUpdatesMenu!^)%txtIntegrateMenu_op04%
echo.
echo.  [5] ^(!F_IntCustomFeaturesMenu!^)%txtIntegrateMenu_op05%
echo.
echo.
echo.  [S] %txtIntegrateMenu_start%
echo.
echo.  [R] %txtIntegrateMenu_reset%
echo.
echo.  [X] %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:12345SRXP0 /N /M "%GlobalEnterChoice% "
if errorlevel 10 (
	if "!Allowed!" equ "" (
		set "Allowed=I"
		set "Bypass=I"
		set "IsDialogsEnabled=No"
		set "F_PersonalLists=+"
	) else (
		set "IsDialogsEnabled=Yes"
		set "Bypass=O"
		set Allowed=
		set F_PersonalLists=
	)
)
if errorlevel  9 (
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
		if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
				rem IntInboxApps
			for %%f in (
				IntFeatures
				IntGames
				IntDaRT
				IntCustomFeatures
			) do (
				set "F_%%fMenu=+"
			)

			rem set "F_IntDirectX9c=+"
			set "F_IntWin32Calc=+"
			if "%ImageBuild%" equ "17763" (
				set "F_IntNetFX48=+"
			)
			if "%ImageBuild%" geq "14393" (
				set "F_IntNETCore31=+"
				set "F_IntNET6=+"
			)
			if "%ImageBuild%" leq "22000" (
				set "F_IntOpenSSH=+"
			)
			rem set "F_IntVCRuntime=+"
			rem set "F_IntPowerShell7=+"
			set "F_IntSysinternalsSuite=+"

			for %%g in (
				CariocaRummy
				HoldEm
				Sudoku
				Tinker
				ChessTitans
				FreeCell
				Hearts
				Inkball
				MahjongTitans
				Minesweeper
				Pinball
				PurblePlace
				Solitaire
				SpiderSolitaire
			) do (
				set %%g=
				set "G_%%g=+"
			)

			for %%f in (
				IntDaRTBoot
				IntDaRTRecovery
			) do (
				set "%%f=+"
			)

				rem GetHelp
				rem Calculator
				rem Photos
				rem ScreenSketch
				rem SoundRecorder
				rem StickyNotes
				rem XboxTCUI
				rem XboxGamingOverlay
				rem XboxGameOverlay
				rem XboxSpeechToTextOverlay
				rem XboxIdentityProvider
				rem StorePurchaseApp
				rem WindowsStore
			for %%# in (
				AV1VideoExtension
				DesktopAppInstaller
				VP9VideoExtensions
				HEIFImageExtension
				HEVCVideoExtension
				MPEG2VideoExtension
				WebMediaExtensions
				WebpImageExtension
			) do (
				set "InboxApp%%#=+"
			)

			rem if "%SelectedSourceOS%" equ "w10" (
			rem 	for %%# in (
			rem 		Paint3D
			rem 		Xbox
			rem 		MixedRealityViewer
			rem 	) do (
			rem 		set "InboxApp%%#=+"
			rem 	)
			rem 	if /i "%ImageArchitecture%" equ "x64" (
			rem 		for %%# in (
			rem 			MixedRealityPortal
			rem 		) do (
			rem 			set "InboxApp%%#=+"
			rem 		)
			rem 	)
			rem 	if "%ImageBuild%" lss "19041" (
			rem 		for %%# in (
			rem 			Print3D
			rem 		) do (
			rem 			set "InboxApp%%#=+"
			rem 		)
			rem 	)
			rem )

			if "%ImageBuild%" geq "19041" (
					rem PhotosMediaEngine
				for %%# in (
					DirectXRuntime
					Terminal
					D3DMappingLayers
				) do (
					set "InboxApp%%#=+"
				)
			)

			if "%SelectedSourceOS%" equ "w11" (
					rem Paint
					rem Gaming
					rem GamingServices
					rem Notepad
					rem PowerAutomateDesktop
					rem ClientWebExperience
				for %%# in (
					AmazonStore
					WindowsSubsystemForAndroid
					WindowsSubsystemForLinux
				) do (
					set "InboxApp%%#=+"
				)
			)
		)

		if "%ImageInstallationType%" neq "Server Core" (
				rem IntWMPMetroSkin
				rem IntWPVMetroSkin
				rem IntWIconsSkin
			for %%f in (
				IntCustomFiles
				IntWin32CalcMetroSkin
			) do (
				set %%f=
				set "F_%%f=+"
			)
		)
	)
	call :StartIntegration
)
if errorlevel  8 goto :MainMenu
if errorlevel  7 (
	call :EnvironmentVariables
	call :IntegrateFlags
)
if errorlevel  6 call :StartIntegration
if errorlevel  5 (
	if "!F_IntCustomFeaturesMenu!" equ "-" (
		set "F_IntCustomFeaturesMenu=+"
		goto :IntCustomFeaturesMenu
	) else (
		set "F_IntCustomFeaturesMenu=-"
	)
)
if errorlevel  4 (
	if "!F_IntUpdatesMenu!" equ "-" (
		set "F_IntUpdatesMenu=+"
		goto :IntUpdatesMenu
	) else (
		set "F_IntUpdatesMenu=-"
	)
)
if errorlevel  3 (
	if "!F_IntFeaturesMenu!" equ "-" (
		set "F_IntFeaturesMenu=+"
		goto :IntFeaturesMenu
	) else (
		set "F_IntFeaturesMenu=-"
	)
)
if errorlevel  2 (
	if "!F_IntDriversMenu!" equ "-" (
		set "F_IntDriversMenu=+"
		call :IntDriversMenu
	) else (
		set "F_IntDriversMenu=-"
	)
)
if errorlevel  1 (
	if "!F_IntLanguagePacksMenu!" equ "-" (
		set "F_IntLanguagePacksMenu=+"
		call :IntLanguagePacksMenu
	) else (
		set "F_IntLanguagePacksMenu=-"
	)
)

goto :IntegrateMenu
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Integrate Windows Features Menu
::-------------------------------------------------------------------------------------------
:IntFeaturesMenu

set "CurrentMenu=IntFeaturesMenu"

cls
echo.===============================================================================
echo.%txtIntegrateFeaturesMenu%
echo.===============================================================================

:: Checking whether the selected Source OS is correct for every Component
set /A count=1
for %%n in (
	IntNetFX35
	IntNetFX462
	IntNetFX48
	IntNETCore31
	IntNET6
	IntDaRTMenu
	IntInboxAppsMenu
	IntDirectX9c
	IntEdgeClassic
	IntEdgeChromium
	IntIE11
	IntGamesMenu
	IntOfficeUWPAppsMenu
	IntVCRuntime
	IntWin32Calc
	IntOpenSSH
	IntRDP81
	IntRSATMenu
	IntSysinternalsSuite
	IntBraille
	IntDedup
	IntWMF
	IntMediaFeaturePack
	IntWMR
	IntMMRC
	IntPortableDevices
	IntPowerShell7
	IntSidebar
	IntWSL
	IntSystemRestore
	IntThinPCpkgsMenu
	IntWinToGo
) do (
	if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
	if !count! gtr 9 set "OptionID=!count!"

	if "%%n" equ "IntNetFX35" (
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageArchitecture%" neq "arm" if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "17134" (
				if /i "%ImageArchitecture%" equ "arm64" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" leq "19044" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType%" equ "Server Core" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
			if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" (
			echo. [!OptionID!] ^(!F_IntNetFX35!^)%txtIntegrateMenu_net35%
			if "!F_IntNetFX35!" equ "+" (
				echo.         %txtIntegrateMenu_net35msgline01%
				echo.         %txtIntegrateMenu_net35msgline02%
				echo.         %txtIntegrateMenu_net35msgline03%
				echo.         %txtIntegrateMenu_net35msgline04%
			)
		)
	)

	if "%%n" equ "IntNetFX462" (
		if "%SelectedSourceOS%" equ "w10" if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586"  if "%ImageInstallationType%" equ "Client" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntNetFX462!^)%txtIntegrateMenu_net462%
	)

	if "%%n" equ "IntNetFX48" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageArchitecture%" equ "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "17134" (
				if "%ImageBuild%" leq "17763" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType%" equ "Server Core" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntNetFX48!^)%txtIntegrateMenu_net48%
	)

	if "%%n" equ "IntNETCore31" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "17134" (
				if /i "%ImageArchitecture%" equ "arm64" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" leq "19044" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType%" equ "Server Core" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
			if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntNETCore31!^)%txtIntegrateMenu_net31%
	)

	if "%%n" equ "IntNET6" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "17134" (
				if /i "%ImageArchitecture%" equ "arm64" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" leq "19044" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType%" equ "Server Core" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
			if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntNET6!^)%txtIntegrateMenu_net6%
	)

	if "%%n" equ "IntDaRTMenu" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntDaRTMenu!^)%txtIntegrateMenu_dart7%
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageArchitecture%" neq "arm" if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntDaRTMenu!^)%txtIntegrateMenu_dart81%
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "17134" (
				rem if /i "%ImageArchitecture%" equ "arm64" (
				rem 	set "%%n=!count!"
				rem )
				if "%ImageBuild%" leq "19044" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType%" equ "Server Core" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
			if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntDaRTMenu!^)%txtIntegrateMenu_dart10%
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntDaRTMenu!^)%txtIntegrateMenu_dart11%
		)
	)

	if "%%n" equ "IntInboxAppsMenu" (
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageArchitecture%" equ "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageInstallationType%" neq "Server Core" (
				if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "17134" (
					if /i "%ImageArchitecture%" equ "arm64" (
						set "%%n=!count!"
					)
					if "%ImageBuild%" leq "19044" (
						if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
							set "%%n=!count!"
						)
						rem if "%ImageInstallationType%" equ "Server Core" (
						rem 	set "%%n=!count!"
						rem )
						if "%ImageInstallationType:~,6%" equ "Server" (
							set "%%n=!count!"
						)
					)
				)
				if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntInboxAppsMenu!^)%txtIntegrateMenu_inbappx%
	)

	if "%%n" equ "IntDirectX9c" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "17134" (
				if "%ImageBuild%" leq "19044" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType%" equ "Server Core" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
			if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntDirectX9c!^)%txtIntegrateMenu_drx9%
	)

	if "%%n" equ "IntEdgeClassic" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" equ "10240" if "%ImageInstallationType%" equ "Client" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" equ "14393" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" equ "17763" if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "15063" if "%ImageBuild%" leq "19044" if "%ImageInstallationType:~,6%" equ "Server" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntEdgeClassic!^)%txtIntegrateMenu_edgeclas%
	)

	if "%%n" equ "IntEdgeChromium" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageInstallationType%" neq "Server Core" (
				if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "17134" (
					rem if /i "%ImageArchitecture%" equ "arm64" (
					rem 	set "%%n=!count!"
					rem )
					if "%ImageBuild%" leq "19044" (
						if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
							set "%%n=!count!"
						)
						rem if "%ImageInstallationType%" equ "Server Core" (
						rem 	set "%%n=!count!"
						rem )
						if "%ImageInstallationType:~,6%" equ "Server" (
							set "%%n=!count!"
						)
					)
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntEdgeChromium!^)%txtIntegrateMenu_edgechrom%
	)

	if "%%n" equ "IntGamesMenu" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageInstallationType%" neq "Server Core" (
				if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "17134" (
					if "%ImageBuild%" leq "19044" (
						if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
							set "%%n=!count!"
						)
						rem if "%ImageInstallationType%" equ "Server Core" (
						rem 	set "%%n=!count!"
						rem )
						if "%ImageInstallationType:~,6%" equ "Server" (
							set "%%n=!count!"
						)
					)
				)
				if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntGamesMenu!^)%txtIntegrateMenu_game%
	)

	if "%%n" equ "IntIE11" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntIE11!^)%txtIntegrateMenu_ie%
	)

	if "%%n" equ "IntOfficeUWPAppsMenu" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "17134" (
				if "%ImageBuild%" leq "19044" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntOfficeUWPAppsMenu!^)%txtIntegrateMenu_offdesk%
	)

	if "%%n" equ "IntVCRuntime" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "17134" (
				if "%ImageBuild%" leq "19044" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType%" equ "Server Core" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
			if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntVCRuntime!^)%txtIntegrateMenu_c++%
	)

	if "%%n" equ "IntWin32Calc" (
		if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
			if "%SelectedSourceOS%" equ "w10" (
				if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "19044" (
					set "%%n=!count!"
				)
			)
			if "%SelectedSourceOS%" equ "w11" (
				if "%ImageBuild%" geq "21996" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWin32Calc!^)%txtIntegrateMenu_win32calc%
	)

	if "%%n" equ "IntOpenSSH" (
		if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
			if "%SelectedSourceOS%" equ "w10" (
				if "%ImageBuild%" geq "16299" if "%ImageBuild%" leq "21996" (
					set "%%n=!count!"
				)
			)
			if "%SelectedSourceOS%" equ "w11" (
				if "%ImageBuild%" geq "21996" if "%ImageBuild%" leq "22000" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntOpenSSH!^)%txtIntegrateMenu_ssh%
	)

	if "%%n" equ "IntRDP81" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntRDP81!^)%txtIntegrateMenu_rdp8%
	)

	if "%%n" equ "IntRSATMenu" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageInstallationType%" equ "Client" (
				if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" equ "17134" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntRSATMenu!^)%txtIntegrateMenu_rsat%
	)

	if "%%n" equ "IntSysinternalsSuite" (
		if /i "%ImageArchitecture%" neq "arm" (
			if "%SelectedSourceOS%" equ "w7" (
				if "%ImageInstallationType:~,6%" neq "Server" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
					set "%%n=!count!"
				)
			)
			if "%SelectedSourceOS%" neq "w7" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntSysinternalsSuite!^)%txtIntegrateMenu_sysintern%
	)

	if "%%n" equ "IntBraille" (
		if "%ImageInstallationType%" equ "Client" (
			if "%SelectedSourceOS%" equ "w10" (
				if "%ImageBuild%" geq "15063" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "17134" (
					if "%ImageBuild%" leq "21996" (
						if /i "%ImageArchitecture%" neq "arm64" (
							set "%%n=!count!"
						)
					)
				)
			)
			if "%SelectedSourceOS%" equ "w11" (
				if "%ImageBuild%" geq "21996" (
					if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntBraille!^)%txtIntegrateMenu_braille%
	)

	if "%%n" equ "IntDedup" (
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageInstallationType%" equ "Client" (
				if "%ImageBuild%" geq "10586" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "17134" (
					if "%ImageBuild%" leq "19044" (
						if /i "%ImageArchitecture%" neq "arm64" (
							set "%%n=!count!"
						)
					)
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntDedup!^)%txtIntegrateMenu_dataduplic%
	)

	if "%%n" equ "IntWMF" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWMF!^)%txtIntegrateMenu_wmf51dep48%
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWMF!^)%txtIntegrateMenu_wmf51%
		)
	)

	if "%%n" equ "IntMediaFeaturePack" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
		)
		if "%ImageInstallationType%" equ "Client" (
			if "%SelectedSourceOS%" equ "w10" (
				if "%ImageBuild%" geq "10586" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "17134" (
					if "%ImageBuild%" leq "19044" (
						if /i "%ImageArchitecture%" neq "arm64" (
							set "%%n=!count!"
						)
					)
				)
			)
			if "%SelectedSourceOS%" equ "w11" (
				if "%ImageBuild%" geq "21996" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntMediaFeaturePack!^)%txtIntegrateMenu_mediafeatpack%
	)

	if "%%n" equ "IntWMR" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" equ "17763" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWMR!^)%txtIntegrateMenu_mixrealy%
	)

	if "%%n" equ "IntMMRC" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" equ "14393" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" equ "17763" if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "15063" if "%ImageBuild%" leq "19044" if "%ImageInstallationType:~,6%" equ "Server" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntMMRC!^)%txtIntegrateMenu_mediarestrictcod%
	)

	if "%%n" equ "IntPortableDevices" (
		if "%ImageInstallationType%" equ "Client" (
			if "%SelectedSourceOS%" equ "w10" (
				if "%ImageBuild%" geq "17763" if "%ImageBuild%" leq "19044" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
			)
			if "%SelectedSourceOS%" equ "w11" (
				if "%ImageBuild%" geq "21996" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntPortableDevices!^)%txtIntegrateMenu_portbdevice%
	)

	if "%%n" equ "IntPowerShell7" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType:~,6%" neq "Server" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			rem if /i "%ImageArchitecture%" equ "arm" (
			rem 	set "%%n=!count!"
			rem )
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
				set "%%n=!count!"
			)
			if "%ImageBuild%" geq "17134" (
				rem if /i "%ImageArchitecture%" equ "arm64" (
				rem 	set "%%n=!count!"
				rem )
				if "%ImageBuild%" leq "19044" (
					if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType%" equ "Server Core" (
						set "%%n=!count!"
					)
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
			if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntPowerShell7!^)%txtIntegrateMenu_powershel7%
	)

	if "%%n" equ "IntSidebar" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Client" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageInstallationType%" neq "Server Core" (
				if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "17134" (
					if "%ImageBuild%" leq "19044" (
						if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
							set "%%n=!count!"
						)
						rem if "%ImageInstallationType%" equ "Server Core" (
						rem 	set "%%n=!count!"
						rem )
						if "%ImageInstallationType:~,6%" equ "Server" (
							set "%%n=!count!"
						)
					)
				)
				if "%ImageBuild%" geq "20348" if "%ImageBuild%" lss "21996" (
					if "%ImageInstallationType:~,6%" equ "Server" (
						set "%%n=!count!"
					)
				)
			)
		)
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntSidebar!^)%txtIntegrateMenu_sidebar%
	)

	if "%%n" equ "IntWSL" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "19044" (
				if "%ImageInstallationType%" equ "Server Core" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType:~,6%" equ "Server" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWSL!^)%txtIntegrateMenu_wsl%
	)

	if "%%n" equ "IntSystemRestore" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Client" if "%ImageInstallationType%" neq "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "17763" if "%ImageInstallationType:~,6%" equ "Server" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntSystemRestore!^)%txtintegratemensysrestor%
	)

	if "%%n" equ "IntThinPCpkgsMenu" (
		if "%SelectedSourceOS%" equ "w7" if /i "%ImageArchitecture%" equ "x86" if "%ImageInstallationType:~,6%" neq "Server" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntThinPCpkgsMenu!^)%txtintegratementhinpc%
	)

	if "%%n" equ "IntWinToGo" (
		if "%SelectedSourceOS%" equ "w81" (
			if "%ImageInstallationType:~,6%" neq "Server" if /i "%ImageArchitecture%" neq "arm" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageInstallationType%" neq "Server Core" (
				if "%ImageBuild%" geq "10240" if "%ImageBuild%" leq "10586" if "%ImageInstallationType%" equ "Client" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "16299" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "17134" (
					if "%ImageBuild%" lss "19041" (
						if "%ImageInstallationType%" equ "Client" if /i "%ImageArchitecture%" neq "arm64" (
							set "%%n=!count!"
						)
						rem if "%ImageInstallationType%" equ "Server Core" (
						rem 	set "%%n=!count!"
						rem )
						if "%ImageInstallationType:~,6%" equ "Server" (
							set "%%n=!count!"
						)
					)
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWinToGo!^)%txtintegratementogowork%
	)

	if "!%%n!" neq "" (
		set /A count+=1
	)
)

echo.
echo.  [P]    %txtIntegratePersonalFeatures_P%
echo.
echo.  [S]    %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntegrateMenu
	if /i "%%c" equ "D" (
		for %%f in (
			NetFX35
			NetFX462
			NetFX48
			NETCore31
			NET6
			DaRTMenu
			InboxAppsMenu
			DirectX9c
			EdgeClassic
			EdgeChromium
			IE11
			GamesMenu
			OfficeUWPAppsMenu
			VCRuntime
			Win32Calc
			OpenSSH
			RDP81
			RSATMenu
			SysinternalsSuite
			Braille
			Dedup
			WMF
			MediaFeaturePack
			WMR
			MMRC
			PortableDevices
			PowerShell7
			Sidebar
			WSL
			SystemRestore
			ThinPCpkgsMenu
			WinToGo
		) do (
			set "F_Int%%f=-"
		)
	)
	if /i "%%c" equ "P" (
		for %%p in (
			NetFX48
			Win32Calc
			OpenSSH
			PowerShell7
			NETCore31
			NET6
			GamesMenu
			DaRTMenu
			SysinternalsSuite
		) do (
			if "!Int%%p!" neq "" if "%%p" neq "PowerShell7" (
				set "F_Int%%p=+"
			)
		)
		if "!F_IntGamesMenu!" equ "+" set "WLegacyGames_Pack=+"
		if "!F_IntDaRTMenu!" equ "+" set "IntDaRT_Selection=+"
	)
	if /i "%%c" equ "S" (
		for %%f in (
			NetFX35
			NetFX462
			NetFX48
			NETCore31
			NET6
			DaRTMenu
			InboxAppsMenu
			DirectX9c
			EdgeClassic
			EdgeChromium
			IE11
			GamesMenu
			OfficeUWPAppsMenu
			VCRuntime
			Win32Calc
			OpenSSH
			RDP81
			RSATMenu
			SysinternalsSuite
			Braille
			Dedup
			WMF
			MediaFeaturePack
			WMR
			MMRC
			PortableDevices
			PowerShell7
			Sidebar
			WSL
			SystemRestore
			ThinPCpkgsMenu
			WinToGo
		) do (
			if "!Int%%f!" neq "" set "F_Int%%f=+"
		)
	)

	if "%%c" equ "!IntNetFX35!" (
		if "!F_IntNetFX35!" equ "-" (
			set "F_IntNetFX35=+"
		) else (
			set "F_IntNetFX35=-"
		)
	)
	if "%%c" equ "!IntNetFX462!" (
		if "!F_IntNetFX462!" equ "-" (
			set "F_IntNetFX462=+"
		) else (
			set "F_IntNetFX462=-"
		)
	)
	if "%%c" equ "!IntNetFX48!" (
		if "!F_IntNetFX48!" equ "-" (
			set "F_IntNetFX48=+"
		) else (
			set "F_IntNetFX48=-"
		)
	)
	if "%%c" equ "!IntNETCore31!" (
		if "!F_IntNETCore31!" equ "-" (
			set "F_IntNETCore31=+"
		) else (
			set "F_IntNETCore31=-"
		)
	)
	if "%%c" equ "!IntNET6!" (
		if "!F_IntNET6!" equ "-" (
			set "F_IntNET6=+"
		) else (
			set "F_IntNET6=-"
		)
	)
	if "%%c" equ "!IntDaRTMenu!" (
		if "!F_IntDaRTMenu!" equ "-" (
			set "F_IntDaRTMenu=+"
			call :IntDaRTMenu
		) else (
			set "F_IntDaRTMenu=-"
		)
	)
	if "%%c" equ "!IntInboxAppsMenu!" (
		if "!F_IntInboxAppsMenu!" equ "-" (
			set "F_IntInboxAppsMenu=+"
			call :IntInboxAppsMenu
		) else (
			set "F_IntInboxAppsMenu=-"
		)
	)
	if "%%c" equ "!IntDirectX9c!" (
		if "!F_IntDirectX9c!" equ "-" (
			set "F_IntDirectX9c=+"
		) else (
			set "F_IntDirectX9c=-"
		)
	)
	if "%%c" equ "!IntEdgeClassic!" (
		if "!F_IntEdgeClassic!" equ "-" (
			set "F_IntEdgeClassic=+"
		) else (
			set "F_IntEdgeClassic=-"
		)
	)
	if "%%c" equ "!IntEdgeChromium!" (
		if "!F_IntEdgeChromium!" equ "-" (
			set "F_IntEdgeChromium=+"
		) else (
			set "F_IntEdgeChromium=-"
		)
	)
	if "%%c" equ "!IntGamesMenu!" (
		if "!F_IntGamesMenu!" equ "-" (
			set "F_IntGamesMenu=+"
			call :IntGamesMenu
		) else (
			set "F_IntGamesMenu=-"
		)
	)
	if "%%c" equ "!IntIE11!" (
		if "!F_IntIE11!" equ "-" (
			set "F_IntIE11=+"
		) else (
			set "F_IntIE11=-"
		)
	)
	if "%%c" equ "!IntOfficeUWPAppsMenu!" (
		if "!F_IntOfficeUWPAppsMenu!" equ "-" (
			set "F_IntOfficeUWPAppsMenu=+"
			call :IntOfficeUWPAppsMenu
		) else (
			set "F_IntOfficeUWPAppsMenu=-"
		)
	)
	if "%%c" equ "!IntVCRuntime!" (
		if "!F_IntVCRuntime!" equ "-" (
			set "F_IntVCRuntime=+"
		) else (
			set "F_IntVCRuntime=-"
		)
	)
	if "%%c" equ "!IntWin32Calc!" (
		if "!F_IntWin32Calc!" equ "-" (
			set "F_IntWin32Calc=+"
		) else (
			set "F_IntWin32Calc=-"
		)
	)
	if "%%c" equ "!IntOpenSSH!" (
		if "!F_IntOpenSSH!" equ "-" (
			set "F_IntOpenSSH=+"
		) else (
			set "F_IntOpenSSH=-"
		)
	)
	if "%%c" equ "!IntRDP81!" (
		if "!F_IntRDP81!" equ "-" (
			set "F_IntRDP81=+"
		) else (
			set "F_IntRDP81=-"
		)
	)
	if "%%c" equ "!IntRSATMenu!" (
		if "!F_IntRSATMenu!" equ "-" (
			set "F_IntRSATMenu=+"
			call :IntRSATMenu
		) else (
			set "F_IntRSATMenu=-"
		)
	)
	if "%%c" equ "!IntSysinternalsSuite!" (
		if "!F_IntSysinternalsSuite!" equ "-" (
			set "F_IntSysinternalsSuite=+"
		) else (
			set "F_IntSysinternalsSuite=-"
		)
	)
	if "%%c" equ "!IntBraille!" (
		if "!F_IntBraille!" equ "-" (
			set "F_IntBraille=+"
		) else (
			set "F_IntBraille=-"
		)
	)
	if "%%c" equ "!IntDedup!" (
		if "!F_IntDedup!" equ "-" (
			set "F_IntDedup=+"
		) else (
			set "F_IntDedup=-"
		)
	)
	if "%%c" equ "!IntMediaFeaturePack!" (
		if "!F_IntMediaFeaturePack!" equ "-" (
			set "F_IntMediaFeaturePack=+"
		) else (
			set "F_IntMediaFeaturePack=-"
		)
	)
	if "%%c" equ "!IntWMR!" (
		if "!F_IntWMR!" equ "-" (
			set "F_IntWMR=+"
		) else (
			set "F_IntWMR=-"
		)
	)
	if "%%c" equ "!IntMMRC!" (
		if "!F_IntMMRC!" equ "-" (
			set "F_IntMMRC=+"
		) else (
			set "F_IntMMRC=-"
		)
	)
	if "%%c" equ "!IntPortableDevices!" (
		if "!F_IntPortableDevices!" equ "-" (
			set "F_IntPortableDevices=+"
		) else (
			set "F_IntPortableDevices=-"
		)
	)
	if "%%c" equ "!IntPowerShell7!" (
		if "!F_IntPowerShell7!" equ "-" (
			set "F_IntPowerShell7=+"
		) else (
			set "F_IntPowerShell7=-"
		)
	)
	if "%%c" equ "!IntWMF!" (
		if "!F_IntWMF!" equ "-" (
			set "F_IntWMF=+"
		) else (
			set "F_IntWMF=-"
		)
	)
	if "%%c" equ "!IntSidebar!" (
		if "!F_IntSidebar!" equ "-" (
			set "F_IntSidebar=+"
		) else (
			set "F_IntSidebar=-"
		)
	)
	if "%%c" equ "!IntWSL!" (
		if "!F_IntWSL!" equ "-" (
			set "F_IntWSL=+"
		) else (
			set "F_IntWSL=-"
		)
	)
	if "%%c" equ "!IntSystemRestore!" (
		if "!F_IntSystemRestore!" equ "-" (
			set "F_IntSystemRestore=+"
		) else (
			set "F_IntSystemRestore=-"
		)
	)
	if "%%c" equ "!IntThinPCpkgsMenu!" (
		if "!F_IntThinPCpkgsMenu!" equ "-" (
			set "F_IntThinPCpkgsMenu=+"
			call :IntThinPCpkgsMenu
		) else (
			set "F_IntThinPCpkgsMenu=-"
		)
	)
	if "%%c" equ "!IntWinToGo!" (
		if "!F_IntWinToGo!" equ "-" (
			set "F_IntWinToGo=+"
		) else (
			set "F_IntWinToGo=-"
		)
	)
)

:: Returning to Integrate Features Menu
rem goto :IntFeaturesMenu
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Integrate Windows Custom Features Menu
::-------------------------------------------------------------------------------------------
:IntCustomFeaturesMenu

cls
echo.===============================================================================
echo.%txtIntegrateCustomFeaturesMenu%
echo.===============================================================================

if "%IsDialogsEnabled%" equ "Yes" if "!CustomFeatures_Warning!" equ "" (
	cls
	echo.===============================================================================
	echo.%txtIntegrateCustomFeaturesMenu%
	echo.===============================================================================
	echo.
	echo.
	echo.
	echo.                                %GlobalWARNING%
	echo.                                =============
	echo.
	echo.   %txtIntegrateCustomMenu_msg01%
	echo.   %txtIntegrateCustomMenu_msg02%
	echo.   %txtIntegrateCustomMenu_msg03%
	echo.
	echo.
	echo.
	echo.
	echo.
	echo.
	echo.   %GlobalDisableDialogs_line01%
	echo.   %GlobalDisableDialogs_line02%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%GlobalChoice_continue% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "CustomFeatures_Warning=0"
)

set "CurrentMenu=IntCustomFeaturesMenu"

cls
echo.===============================================================================
echo.%txtIntegrateCustomFeaturesMenu%
echo.===============================================================================

:: Checking whether the selected Source OS is correct for every Component
set /A count=1
for %%n in (
	IntWMCGActTokens
	IntPreActTokens
	IntUAP
	IntCustomFonts
	IntCustomFiles
	IntCustomUxTheme
	IntCustomRecoveryImage
	IntCustomTerminalServer
	IntWin32CalcMetroSkin
	IntWMPMetroSkin
	IntWPVMetroSkin
	IntWIconsSkin
) do (
	if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
	if !count! gtr 9 set "OptionID=!count!"

	if "%%n" equ "IntWMCGActTokens" (
		if "%SelectedSourceOS%" equ "w81" if /i "%ImageEdition%" equ "ProfessionalWMC" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWMCGActTokens!^)%txtIntegrateCustomMenu_mediacent%
	)

	if "%%n" equ "IntPreActTokens" (
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntPreActTokens!^)%txtIntegrateCustomMenu_w8actv%
	)

	if "%%n" equ "IntUAP" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Embedded" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntUAP!^)%txtIntegrateCustomMenu_uspic%
	)

	if "%%n" equ "IntCustomFonts" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Embedded" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Embedded" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntCustomFonts!^)%txtIntegrateCustomMenu_fon%
	)

	if "%%n" equ "IntCustomFiles" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Embedded" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Embedded" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntCustomFiles!^)%txtIntegrateCustomMenu_sysfl%
	)

	if "%%n" equ "IntCustomUxTheme" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Embedded" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Embedded" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntCustomUxTheme!^)%txtIntegrateCustomMenu_thm%
	)

	if "%%n" equ "IntCustomRecoveryImage" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Embedded" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntCustomRecoveryImage!^)%txtIntegrateCustomMenu_winre%
	)

	if "%%n" equ "IntCustomTerminalServer" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Embedded" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Embedded" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" equ "Server Core" (
				set "%%n=!count!"
			)
			if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntCustomTerminalServer!^)%txtIntegrateCustomMenu_termin%
	)

	if "%%n" equ "IntWin32CalcMetroSkin" (
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType%" neq "Server Core" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWin32CalcMetroSkin!^)%txtIntegrateCustomMenu_w32sk%
	)

	if "%%n" equ "IntWMPMetroSkin" (
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType%" neq "Server Core" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWMPMetroSkin!^)%txtIntegrateCustomMenu_medsk%
	)

	if "%%n" equ "IntWPVMetroSkin" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Embedded" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWPVMetroSkin!^)%txtIntegrateCustomMenu_phsk%
	)

	if "%%n" equ "IntWIconsSkin" (
		if "%SelectedSourceOS%" equ "w7" (
			if "%ImageInstallationType%" neq "Embedded" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" equ "w81" (
			if /i "%ImageFlag%" neq "ProfessionalWMC" if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
			if /i "%ImageEdition%" equ "ProfessionalWMC" (
				set "%%n=!count!"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" neq "Server Core" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!F_IntWIconsSkin!^)%txtIntegrateCustomMenu_sunsk%
	)

	if "!%%n!" neq "" (
		set /A count+=1
	)
)

echo.
echo.  [P]    %txtIntegratePersonalCustomFeatures_P%
echo.
echo.  [S]    %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntegrateMenu
	if /i "%%c" equ "D" (
		for %%f in (
			WMCGActTokens
			PreActTokens
			UAP
			CustomFonts
			CustomFiles
			CustomUxTheme
			CustomRecoveryImage
			CustomTerminalServer
			Win32CalcMetroSkin
			WMPMetroSkin
			WPVMetroSkin
			WIconsSkin
		) do (
			set "F_Int%%f=-"
		)
	)
	if /i "%%c" equ "P" (
			rem WMPMetroSkin
			rem WPVMetroSkin
			rem WIconsSkin
		for %%p in (
			CustomFiles
			Win32CalcMetroSkin
		) do (
			if "!Int%%p!" neq "" (
				set "F_Int%%p=+"
			)
		)
	)
	if /i "%%c" equ "S" (
		for %%f in (
			WMCGActTokens
			PreActTokens
			UAP
			CustomFonts
			CustomFiles
			CustomUxTheme
			CustomRecoveryImage
			CustomTerminalServer
			Win32CalcMetroSkin
			WMPMetroSkin
			WPVMetroSkin
			WIconsSkin
		) do (
			if "!Int%%p!" neq "" (
				set "F_Int%%f=+"
			)
		)
	)
	if "%%c" equ "!IntWMCGActTokens!" (
		if "!F_IntWMCGActTokens!" equ "-" (
			set "F_IntWMCGActTokens=+"
		) else (
			set "F_IntWMCGActTokens=-"
		)
	)
	if "%%c" equ "!IntPreActTokens!" (
		if "!F_IntPreActTokens!" equ "-" (
			set "F_IntPreActTokens=+"
		) else (
			set "F_IntPreActTokens=-"
		)
	)
	if "%%c" equ "!IntUAP!" (
		if "!F_IntUAP!" equ "-" (
			set "F_IntUAP=+"
		) else (
			set "F_IntUAP=-"
		)
	)
	if "%%c" equ "!IntCustomFonts!" (
		if "!F_IntCustomFonts!" equ "-" (
			set "F_IntCustomFonts=+"
		) else (
			set "F_IntCustomFonts=-"
		)
	)
	if "%%c" equ "!IntCustomFiles!" (
		if "!F_IntCustomFiles!" equ "-" (
			set "F_IntCustomFiles=+"
		) else (
			set "F_IntCustomFiles=-"
		)
	)
	if "%%c" equ "!IntCustomUxTheme!" (
		if "!F_IntCustomUxTheme!" equ "-" (
			set "F_IntCustomUxTheme=+"
		) else (
			set "F_IntCustomUxTheme=-"
		)
	)
	if "%%c" equ "!IntCustomRecoveryImage!" (
		if "!F_IntCustomRecoveryImage!" equ "-" (
			set "F_IntCustomRecoveryImage=+"
		) else (
			set "F_IntCustomRecoveryImage=-"
		)
	)
	if "%%c" equ "!IntCustomTerminalServer!" (
		if "!F_IntCustomTerminalServer!" equ "-" (
			set "F_IntCustomTerminalServer=+"
		) else (
			set "F_IntCustomTerminalServer=-"
		)
	)
	if "%%c" equ "!IntWin32CalcMetroSkin!" (
		if "!F_IntWin32CalcMetroSkin!" equ "-" (
			set "F_IntWin32CalcMetroSkin=+"
		) else (
			set "F_IntWin32CalcMetroSkin=-"
		)
	)
	if "%%c" equ "!IntWMPMetroSkin!" (
		if "!F_IntWMPMetroSkin!" equ "-" (
			set "F_IntWMPMetroSkin=+"
		) else (
			set "F_IntWMPMetroSkin=-"
		)
	)
	if "%%c" equ "!IntWPVMetroSkin!" (
		if "!F_IntWPVMetroSkin!" equ "-" (
			set "F_IntWPVMetroSkin=+"
		) else (
			set "F_IntWPVMetroSkin=-"
		)
	)
	if "%%c" equ "!IntWIconsSkin!" (
		if "!F_IntWIconsSkin!" equ "-" (
			set "F_IntWIconsSkin=+"
		) else (
			set "F_IntWIconsSkin=-"
		)
	)
)

:: Returning to Integrate Custom Features Menu
rem goto :IntCustomFeaturesMenu
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Assigning Chosen Features --^> a CheckList
::-------------------------------------------------------------------------------------------
:: And Integrate The Chosen Features
::-------------------------------------------------------------------------------------------
:StartIntegration

set Features=

cls
echo.
echo.===============================================================================
echo.               %txtAssignChosenFeaturesCheckList%
echo.===============================================================================
echo.

::Features
echo.
echo.%txtFeatureNamesList%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtfeatur%
echo.-------------------------------------------------------------------------------
echo.

if "!IntLanguagePacksBoot!" equ "-" if "!IntLanguagePacksInstall!" equ "-" if "!IntLanguagePacksRecovery!" equ "-" (
	set "F_IntLanguagePacksMenu=-"
)

if "!IntDriversBoot!" equ "-" if "!IntDriversInstall!" equ "-" if "!IntDriversRecovery!" equ "-" (
	set "F_IntDriversMenu=-"
)

for %%i in (
	IntLanguagePacks
	IntDrivers
) do (
	if "!F_%%iMenu!" equ "+" (
		set "Features=!Features!;%%i"
		echo.%%iMenu
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtintfeatur%
echo.-------------------------------------------------------------------------------
echo.

if "%IsBootImageSelected%" equ "No" if "%IsRecoveryImageSelected%" equ "No" (
	set "F_IntDaRTMenu=-"
	set "IntDaRT_Selection=-"
)

if "!F_IntFeaturesMenu!" equ "+" (
	for %%i in (
		IntIE11
		IntRDP81
		IntSidebar
		IntDirectX9c
		IntWin32Calc
		IntEdgeClassic
		IntEdgeChromium
		IntBraille
		IntPortableDevices
		IntDedup
		IntMediaFeaturePack
		IntMMRC
		IntSystemRestore
		IntWinToGo
		IntWMF
		IntWMR
		IntWSL
		IntOpenSSH
		IntVCRuntime
		IntNetFX35
		IntNetFX462
		IntNetFX48
		IntNETCore31
		IntNET6
		IntPowerShell7
		IntSysinternalsSuite
	) do (
		if "!F_%%i!" equ "+" (
			set "Features=!Features!;%%i"
			echo.%%i
		)
	)

	for %%i in (
		IntRSAT
		IntThinPCpkgs
		IntGames
		IntDaRT
		IntOfficeUWPApps
		IntInboxApps
	) do (
		if "!F_%%iMenu!" equ "+" (
			set "Features=!Features!;%%i"
			echo.%%iMenu
		)
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtintwinup%
echo.-------------------------------------------------------------------------------
echo.

if "%IsBootImageSelected%" equ "No" (
	set "F_IntWindowsSetupMediaUpdates=-"
)

if "!F_IntWHDBaseLineBoot!" equ "-" if "!F_IntWHDBaseLineInstall!" equ "-" if "!F_IntWHDBaseLineInstallRecovery!" equ "-" if "!F_IntWHDBaseLineBootInstallRecovery!" equ "-" (
	set "F_IntWHDBaseLineMenu=-"
)

if "!F_IntUpdatesMenu!" equ "+" (
	if "!F_IntWHDUpdatesMenu!" equ "+" (
		echo.IntWHDUpdatesMenu
		echo.
		if "!F_IntUpdatesWUpdates!" equ "+" (
			set "F_IntUpdates=1"
			set "IntUpdates=!IntUpdates!;WUpdates"
			echo.IntUpdates "WUpdates"
			echo.
			echo.
		)
		if "!F_IntWHDBaseLineMenu!" equ "+" (
			echo.IntWHDBaseLineMenu
			echo.
			for %%# in (
				Boot
				Install
				InstallRecovery
				BootInstallRecovery
			) do (
				if "!F_IntWHDBaseLine%%#!" equ "+" (
					set "F_IntWHDBaseLine=1"
					set "IntWHDBaseLine=%%#"
					echo.IntWHDBaseLine "%%#"
				)
			)
			echo.
			echo.
		)

		for %%# in (
			General
			Hotfix
			Security
			ESU
		) do (
			if "!F_IntUpdates%%#!" equ "+" (
				set "F_IntUpdates=1"
				set "IntUpdates=!IntUpdates!;%%#"
				echo.IntUpdates "%%#"
			)
		)

		if "!F_IntWHDAdditionalMenu!" equ "+" (
			for %%# in (
				NET35
				Windows10
				WAT
				WinPE
				WUSatisfy
			) do (
				if "!F_IntUpdates%%#!" equ "+" (
					set "F_IntUpdates=1"
					set "IntUpdates=!IntUpdates!;%%#"
					echo.IntUpdates "%%#"
				)
			)
		)
		if "!F_IntWHDExtraMenu!" equ "+" (
			for %%# in (
				ADLDS
				FMApi
				VirtualPC
				Features
				WorkFolders
			) do (
				if "!F_IntUpdates%%#!" equ "+" (
					set "F_IntUpdates=1"
					set "IntUpdates=!IntUpdates!;%%#"
					echo.IntUpdates "%%#"
				)
			)
		)

		if "!F_IntUpdates!" equ "1" set "Features=!Features!;IntUpdates"
		if "!F_IntWHDBaseLine!" equ "1" set "Features=!Features!;IntWHDBaseLine"

		for %%i in (
			IntWindowsSetupMediaUpdates
		) do (
			if "!F_%%i!" equ "+" (
				if "%%i" equ "IntWindowsSetupMediaUpdates" (
					if "%IsBootImageSelected%" equ "Yes" set "Features=!Features!;%%i"
				) else (
					set "Features=!Features!;%%i"
				)
				echo.%%i
			)
		)
		echo.
		echo.
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtintcustfeat%
echo.-------------------------------------------------------------------------------
echo.
if "!F_IntCustomFeaturesMenu!" equ "+" (
	for %%i in (
		IntWMCGActTokens
		IntPreActTokens
		IntCustomTerminalServer
		IntCustomUxTheme
		IntUAP
		IntCustomFonts
		IntCustomFiles
		IntWMPMetroSkin
		IntWPVMetroSkin
		IntWin32CalcMetroSkin
		IntWIconsSkin
		IntCustomRecoveryImage
	) do (
		if "!F_%%i!" equ "+" (
			set "Features=!Features!;%%i"
			echo.%%i
		)
	)
)

if "!Features!" neq "" (
	set "Features=!Features:~1!"
	set "IntUpdates=!IntUpdates:~1!"
) else (
	echo.%txtintcustfeatno%
	goto :Stop
)
if "!Bypass!" equ "O" (
	echo.===============================================================================
	echo.
	echo. [C] %GlobalOption_Continue%
	echo.
	echo. [R] %GlobalOption_Return2Change%
	echo.
	echo.===============================================================================
	echo.
	choice /C:CR /N /M "%GlobalEnterChoice% "
	if errorlevel 2 goto :!CurrentMenu!
)

cls
echo.===============================================================================
echo.%txtIntegrateFeatures%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegrateFeatures%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.

if exist "%InstallMount%\!SpecifiedSourceIndex!" (
	:: Getting Specified Source Image Index Information
	call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul
	:: Getting Install Image Index Architecture
	rem call :GetImageArchitecture "%InstallWim%", !SpecifiedSourceIndex! >nul
)

for %%i in (!Features!) do (
	call :EnvironmentVariables

	setlocal

	if "%%i" neq "IntUpdates" if "%%i" neq "IntWHDBaseLine" call :%%i

	if "!F_IntUpdatesWUpdates!" equ "+" (
		call :%%i "WUpdates"
	)

	if "%%i" equ "IntWHDBaseLine" (
		call :%%i "!%%i!"
	)

	if "%%i" equ "IntUpdates" (
		for %%# in (!IntUpdates!) do (
			if "%%#" neq "WUpdates" if "!IntUpdates%%#!" equ "+" call :%%i "%%#"
		)
	)

	endlocal

	if "!F_IntGamesMenu!" equ "+" set "IntegratedGames=Yes"

	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	for %%f in (ResourceHacker.exe; ResourceHacker.ini; ResourceHacker.log) do (
		call :RemoveFile "%_TMP%\%%f"
	)
	if "%%i" equ "IntWMPMetroSkin" (
		for %%f in (setup_wm; setup_wm32; wmpconfig; wmpconfig32; wmplayer; wmplayer32; wmpshare; wmpshare32; WMPSideShowGadget; WMPSideShowGadget32; wmploc; wmploc_wow64) do (
			call :RemoveFile "%_TMP%\%%f"
			call :RemoveFile "%_TMP%\%%f.bak"
			call :RemoveFile "%_TMP%\%%f.dll"
			call :RemoveFile "%_TMP%\%%f.exe"
		)
	)
	if "%%i" equ "IntWPVMetroSkin" (
		for %%f in (PhotoViewer.bak; PhotoViewer.dll; PhotoViewer32.bak; PhotoViewer32.dll; photowiz.bak; photowiz.dll; photowiz_wow64.bak; photowiz_wow64.dll) do (
			call :RemoveFile "%_TMP%\%%f"
		)
	)
	if "%%i" equ "IntWin32CalcMetroSkin" (
		for %%f in (Win32Calc.bak; Win32Calc.exe; Win32Calc_wow64.bak; Win32Calc_wow64.exe) do (
			call :RemoveFile "%_TMP%\%%f"
		)
	)
	if "%%i" equ "IntWIconsSkin" (
		for %%f in (cmd; cmd_wow64; imageres; imageres_wow64; imagesp1; imagesp1_wow64; SnippingTool; SnippingTool_wow64; shell32; shell32_wow64; taskmgr; taskmgr_wow64; Win32Calc; Win32Calc_wow64; zipfldr; zipfldr_wow64) do (
			call :RemoveFile "%_TMP%\%%f"
			call :RemoveFile "%_TMP%\%%f.bak"
			call :RemoveFile "%_TMP%\%%f.dll"
			call :RemoveFile "%_TMP%\%%f.exe"
			call :RemoveFile "%_TMP%\%%f.dll.mun"
			call :RemoveFile "%_TMP%\%%f.exe.mun"
		)
	)
)

:: Setting Package Build and Service Pack Build Version
call :PackageBuild_ServicePackBuild

:: Setting Package Index and Architecture
call :PackageIndex_Architecture

:: Resetting All Flags Status
call :EnvironmentVariables

if "!Allowed!" equ "I" set "Finished=Features"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Remove Menu
::-------------------------------------------------------------------------------------------
:RemoveMenu

set "CurrentMenu=RemoveMenu"

if exist "%InstallMount%\!SpecifiedSourceIndex!" (
	:: Getting Specified Source Image Index Information
	call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul
)

if /i "%ImageFlag%" equ "EnterpriseSN" (
	set "FlagedEnterprise=Enterprise"
)
if /i "%ImageFlag%" equ "EnterpriseS" (
	set "FlagedEnterprise=Enterprise"
)

cls
echo.===============================================================================
if "!Allowed!" equ "" (
	echo.                          MSMG Toolkit - %txtRemoveMenu%
) else (
	echo.!Allowed!                         MSMG Toolkit - %txtRemoveMenu%                        !Bypass!
)
echo.===============================================================================
echo.

:: Checking whether Source OS is selected
if "%IsSourceselected%" equ "No" (
	echo.%GlobalSourceOS_NotSelected%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

:: Checking whether Image Registry is loaded
if "%IsImageRegistryLoaded%" equ "Yes" (
	echo.%GlobalSourceOS_ImageRegistryLoaded%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

:: Checking the selected Source OS to display Options
set /A count=1
for %%n in (
	RemoveWindowsComponentsMenu
	RemoveWindowsAppsList
	RemoveWindowsComponentsListMenu
) do (
	set "OptionID=!count!"

	if "%%n" equ "RemoveWindowsComponentsMenu" (
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageInstallationType%" equ "Client" (
				if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "21996" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "21996" if "%ImageBuild%" leq "22621" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo.  [!OptionID!]   %txtRemoveMenuwincomp%
	)

	if "%%n" equ "RemoveWindowsAppsList" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" leq "17134" (
				if "%ImageInstallationType%" equ "Client" if "!FlagedEnterprise!" equ "" (
					set "%%n=!count!"
				)
			)
			if "%ImageInstallationType%" equ "Client" (
				if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "21996" (
					if "!FlagedEnterprise!" equ "" (
						set "%%n=!count!"
					)
				)
				if "%ImageBuild%" geq "21996" if "%ImageBuild%" leq "22621" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" gtr "22621" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo.  [!OptionID!]   %txtRemoveWinAppspListRemove%
	)

	if "%%n" equ "RemoveWindowsComponentsListMenu" (
		if "%SelectedSourceOS%" equ "w7" (
			set "%%n=!count!"
		)
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" leq "17134" (
				if "!FlagedEnterprise!" neq "" (
					set "%%n=!count!"
				)
				if "%ImageInstallationType%" equ "Client" if "!FlagedEnterprise!" equ "" (
					set "%%n=!count!"
				)
			)
			if "%ImageInstallationType%" equ "Client" (
				if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "21996" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" geq "21996" if "%ImageBuild%" leq "22621" (
					set "%%n=!count!"
				)
				if "%ImageBuild%" gtr "22621" (
					set "%%n=!count!"
				)
			)
			if "%ImageInstallationType:~,6%" equ "Server" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo.  [!OptionID!]   %Globalmenuremovepackcomplist%
	)

	if "!%%n!" neq "" (
		echo.
		set /A count+=1
	)
)

echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
:: Checking whether the selected Source OS is Windows 7 Source OS
if "%SelectedSourceOS%" equ "w7" (
	choice /C:1X /N /M "%GlobalEnterChoice% "
	if errorlevel 2 goto :MainMenu
	if errorlevel 1 goto :RemoveWindowsComponentsListMenu
)

:: Checking whether the selected Source OS is Windows 8.1 Source OS
if "%SelectedSourceOS%" equ "w81" (
	choice /C:12X /N /M "%GlobalEnterChoice% "
	if errorlevel 3 goto :MainMenu
	if errorlevel 2 goto :RemoveWindowsComponentsListMenu
	if errorlevel 1 goto :RemoveWindowsAppsList
)

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%ImageBuild%" leq "17134" (
		:: Checking whether the selected Source OS is a Windows 10 Enterprise 2015/2016 LTSB Edition
		rem if /i "%ImageFlag%" equ "EnterpriseS" (
		:: Checking whether the selected Source OS is a Windows 10 Enterprise N 2015/2016 LTSB Edition
		rem if /i "%ImageFlag%" equ "EnterpriseSN" (
		if "!FlagedEnterprise!" neq "" (
			choice /C:1X /N /M "%GlobalEnterChoice% "
			if errorlevel 2 goto :MainMenu
			if errorlevel 1 goto :RemoveWindowsComponentsListMenu
		)

		:: Checking whether the selected Source OS is Windows 10 v1507/v1511/v1607/v1703/v1709/v1803 Client Edition
		if "%ImageInstallationType%" equ "Client" if "!FlagedEnterprise!" equ "" (
			choice /C:12X /N /M "%GlobalEnterChoice% "
			if errorlevel 3 goto :MainMenu
			if errorlevel 2 goto :RemoveWindowsComponentsListMenu
			if errorlevel 1 goto :RemoveWindowsAppsList
		)
	)

	if "%ImageInstallationType%" equ "Client" (
		if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "21996" (
			:: Checking whether the selected Source OS is a Windows 10 Enterprise 2019/2021 LTSC Edition
			rem if /i "%ImageFlag%" equ "EnterpriseS" (
			:: Checking whether the selected Source OS is a Windows 10 Enterprise N 2019/2021 LTSC Edition
			rem if /i "%ImageFlag%" equ "EnterpriseSN" (
			if "!FlagedEnterprise!" neq "" (
				choice /C:12X0P /N /M "%GlobalEnterChoice% "
				if errorlevel 5 (
					rem call :CustomPreSets_RemoveWindowsComponents
					call :PersonalPreSets_RemoveWindowsComponents
					goto :RemoveWindowsComponentsMenu
				)
				if errorlevel 4 (
					set "Allowed=I"
					set "Bypass=I"
					set "RemovalMethod=ToolkitHelper"
					call :RemoveWindowsComponentsList
				)
				if errorlevel 3 goto :MainMenu
				if errorlevel 2 goto :RemoveWindowsComponentsListMenu
				if errorlevel 1 goto :RemoveWindowsComponentsMenu
			)
			:: Checking whether the selected Source OS is a Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2 Client Edition
			rem if /i "%ImageFlag%" neq "EnterpriseS" if /i "%ImageFlag%" neq "EnterpriseSN" (
			if "!FlagedEnterprise!" equ "" (
				choice /C:123X0P /N /M "%GlobalEnterChoice% "
				if errorlevel 6 (
					rem call :CustomPreSets_RemoveWindowsComponents
					call :PersonalPreSets_RemoveWindowsComponents
					goto :RemoveWindowsComponentsMenu
				)
				if errorlevel 5 (
					set "Allowed=I"
					set "Bypass=I"
					set "RemovalMethod=ToolkitHelper"
					call :RemoveWindowsComponentsList
				)
				if errorlevel 4 goto :MainMenu
				if errorlevel 3 goto :RemoveWindowsComponentsListMenu
				if errorlevel 2 goto :RemoveWindowsAppsList
				if errorlevel 1 goto :RemoveWindowsComponentsMenu
			)
		)

		:: Checking whether the selected Source OS is a Windows 11 v21H2/v22H2 Client Edition
		if "%ImageBuild%" geq "21996" if "%ImageBuild%" leq "22621" (
			choice /C:123X0P /N /M "%GlobalEnterChoice% "
			if errorlevel 6 (
				rem call :CustomPreSets_RemoveWindowsComponents
				call :PersonalPreSets_RemoveWindowsComponents
				goto :RemoveWindowsComponentsMenu
			)
			if errorlevel 5 (
				set "Allowed=I"
				set "Bypass=I"
				set "RemovalMethod=ToolkitHelper"
				call :RemoveWindowsComponentsList
			)
			if errorlevel 4 goto :MainMenu
			if errorlevel 3 goto :RemoveWindowsComponentsListMenu
			if errorlevel 2 goto :RemoveWindowsAppsList
			if errorlevel 1 goto :RemoveWindowsComponentsMenu
		)

		:: Checking whether the selected Source OS is a Windows 11 v23H2 Client Edition
		if "%ImageBuild%" gtr "22621" (
			choice /C:12X0P /N /M "%GlobalEnterChoice% "
			if errorlevel 5 (
				set "Allowed=I"
				set "Bypass=I"
				set "RemovalMethod=DISM"
				call :RemoveWindowsComponentsList
			)
			if errorlevel 4 (
				set "Allowed=I"
				set "Bypass=I"
				set "RemovalMethod=DISM"
				call :RemoveWindowsComponentsList
			)
			if errorlevel 3 goto :MainMenu
			if errorlevel 2 goto :RemoveWindowsComponentsListMenu
			if errorlevel 1 goto :RemoveWindowsAppsList
		)
	)

	:: Checking whether the selected Source OS is a Windows Server Edition
	if "%ImageInstallationType:~,6%" equ "Server" (
		choice /C:1X0P /N /M "%GlobalEnterChoice% "
		if errorlevel 4 (
			set "Allowed=I"
			set "Bypass=I"
			set "RemovalMethod=ToolkitHelper"
			call :RemoveWindowsComponentsList
		)
		if errorlevel 3 (
			set "Allowed=I"
			set "Bypass=I"
			set "RemovalMethod=ToolkitHelper"
			call :RemoveWindowsComponentsList
		)
		if errorlevel 2 goto :MainMenu
		if errorlevel 1 goto :RemoveWindowsComponentsListMenu
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Customize Menu
::-------------------------------------------------------------------------------------------
:CustomizeMenu

set "CurrentMenu=CustomizeMenu"

cls
echo.===============================================================================
if "!Allowed!" equ "" (
	echo.                         MSMG Toolkit - %Globalcustomenu%
) else (
	echo.!Allowed!                        MSMG Toolkit - %Globalcustomenu%                        !Bypass!
	if "%Finished%" equ "Tweaks" (
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%Globalfinishappltw%
		echo.-------------------------------------------------------------------------------
		echo.
		set Finished=
	)
)
echo.===============================================================================
echo.
:: Checking whether Source OS is selected
if "%IsSourceselected%" equ "No" (
	echo.%GlobalSourceOS_NotSelected%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

:: Checking whether Image Registry is loaded
if "%IsImageRegistryLoaded%" equ "Yes" (
	echo.%GlobalSourceOS_ImageRegistryLoaded%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

if "%SelectedSourceOS%" equ "w7" (
	echo.  [1] ^(!T_EnableFeaturesMenu!^)%GlobalEnableFeaturesMenu%
	echo.  [2] ^(!T_DisableFeaturesMenu!^)%GlobalDisableFeaturesMenu%
	echo.  [3] ^(!T_EnableFeaturesList!^)%GlobalEnableFeaturesList%
	echo.  [4] ^(!T_DisableFeaturesList!^)%GlobalDisableFeaturesList%
	echo.  [5] ^(!T_ImportCustomRegistry!^)%Globalimportreglist%
	echo.
	echo.  [A] ^(!T_StartMenu_SetupComplete!^)%txtstartMenusetupcompop%
	echo.         %txtstartMenusetupcomp01%
	echo.               %txtstartMenusetupcomp02%
	echo.
	echo.  [S] %Globalstartapltwlist%
	echo.  [D] %Globalresetalsellist%
	echo.
	echo.  [X] %GlobalOption_GoBack%
	echo.
	echo.===============================================================================
	echo.
	choice /C:12345ASDXP0 /N /M "%GlobalEnterChoice% "
	if errorlevel 11 (
		if "!Allowed!" equ "" (
			set "Allowed=I"
			set "Bypass=I"
			set "IsDialogsEnabled=No"
		) else (
			set "IsDialogsEnabled=Yes"
			set "Bypass=O"
			set Allowed=
		)
	)
	if errorlevel 10 (
		set "RegistryTweaks=Allowed"

		rem set "CleanupSources=Enabled"
		set StartReadingEnableFeatures=
		set StartReadingDisableFeatures=
		set "T_EnableFeatures=+"
		call :StartReadingEnableFeatures
		call :ReadEnableFeaturesList
		set "T_DisableFeatures=+"
		call :StartReadingDisableFeatures
		call :ReadDisableFeaturesList

		set "T_ImportCustomRegistry=+"

		set "T_StartMenu_SetupComplete=+"

		call :ApplyTweaks
	)
	if errorlevel  9 goto :MainMenu
	if errorlevel  8 (
		call :EnvironmentVariables
		call :TweaksFlags
	)
	if errorlevel  7 (
		call :ApplyTweaks
	)
	if errorlevel  6 (
		if "!T_StartMenu_SetupComplete!" equ "-" (
			set "T_StartMenu_SetupComplete=+"
		) else (
			set "T_StartMenu_SetupComplete=-"
		)
	)
	if errorlevel  5 (
		if "!T_ImportCustomRegistry!" equ "-" (
			set "T_ImportCustomRegistry=+"
			set "RegistryTweaks=Allowed"
		) else (
			set "T_ImportCustomRegistry=-"
		)
	)
	if errorlevel  4 (
		if "!T_DisableFeaturesList!" equ "-" (
			set "T_DisableFeaturesMenu=-"
			set "T_DisableFeaturesList=+"
		) else (
			set "T_DisableFeaturesList=-"
		)
	)
	if errorlevel  3 (
		if "!T_EnableFeaturesList!" equ "-" (
			set "T_EnableFeaturesMenu=-"
			set "T_EnableFeaturesList=+"
		) else (
			set "T_EnableFeaturesList=-"
		)
	)
	if errorlevel  2 (
		set "T_DisableFeaturesMenu=-"
		goto :DisableFeaturesAutomatedMenu
	)
	if errorlevel  1 (
		set "T_EnableFeaturesMenu=-"
		goto :EnableFeaturesAutomatedMenu
	)
)

if "%SelectedSourceOS%" neq "w7" (
	echo.  [1] ^(!T_ExportInboxAppsAssociation!^)%txtexpapptofile%
	echo.  [2] ^(!T_RemoveInboxAppsAssociation!^)%txtremovassoapp%
	echo.  [3] ^(!T_ImportInboxAppsAssociation!^)%txtimpassoapp%
	echo.  [4] ^(!T_ImportStartMenuLayout!^)%txtimpcutmenlay%
	echo.  [5] ^(!T_EnableFeaturesMenu!^)%GlobalEnableFeaturesMenu%
	echo.  [6] ^(!T_DisableFeaturesMenu!^)%GlobalDisableFeaturesMenu%
	echo.  [7] ^(!T_EnableFeaturesList!^)%GlobalEnableFeaturesList%
	echo.  [8] ^(!T_DisableFeaturesList!^)%GlobalDisableFeaturesList%
	echo.  [9] ^(!T_ImportCustomRegistry!^)%Globalimportreglist%
	echo.
	echo.  [O]    %txtselofftw%
	echo.  [C]    %txtselcusttw%
	echo.
	echo.  [A] ^(!T_StartMenu_SetupComplete!^)%txtstartMenusetupcompop%
	echo.         %txtstartMenusetupcomp01%
	echo.               %txtstartMenusetupcomp02%
	echo.
	echo.  [S] %Globalstartapltwlist%
	echo.  [D] %Globalresetalsellist%
	echo.
	echo.  [X] %GlobalOption_GoBack%
	echo.
	echo.===============================================================================
	echo.
	choice /C:123456789OCASDXP0 /N /M "%GlobalEnterChoice% "
	if errorlevel 17 (
		if "!Allowed!" equ "" (
			set "Allowed=I"
			set "Bypass=I"
			set "IsDialogsEnabled=No"
		) else (
			set "IsDialogsEnabled=Yes"
			set "Bypass=O"
			set Allowed=
		)
	)
	if errorlevel 16 (
		set "RegistryTweaks=Allowed"

		set "T_ExportInboxAppsAssociation=-"
		set "T_RemoveInboxAppsAssociation=+"
		set "T_ImportInboxAppsAssociation=+"
		set "T_ImportStartMenuLayout=+"

		rem set "CleanupSources=Enabled"
		set StartReadingEnableFeatures=
		set StartReadingDisableFeatures=
		set "T_EnableFeatures=+"
		call :StartReadingEnableFeatures
		call :ReadEnableFeaturesList
		set "T_DisableFeatures=+"
		call :StartReadingDisableFeatures
		call :ReadDisableFeaturesList

		set "T_ImportCustomRegistry=+"

		for %%t in (
			HiberbootEnabled
			Disable3RDPartyApps
			DisableCortanaApp
			DisableWindowsFirewall
			DisableWindowsDefender
			DisableDriversUpdates
			DisableWindowsUpdate
			HideTaskbarSearchbox
			HideTaskViewIcon
			TaskbarSize
		) do (
			set "T_%%t=-"
		)
		if "%SelectedSourceOS%" equ "w81" (
			for %%t in (
				CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
				DisableWindowsSmartScreen
				CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
				EnableCustomWindowsDriversUpdateTweaks
				CustomDisableWindowsUpdateTweaks
				DisableWindowsUpgrade
				EnableFMP3ProCodec
				EnablePhotoViewer
			) do (
				set "T_%%t=+"
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
				rem BlockAutoEdgeChromiumBasedDelivery
			for %%t in (
				EnableDarkThemeandTransparency
				ControlPanelnConfigsandSettingsforFastestWindows
				WindowsExplorer_PreferencesandPolicies
				SetQoSlimittozero_internetWithNoLimits
				SetLanmanWorkstationandDownloads_OptimizationConfigs
				CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
				SetCloudContentfor3RDPartyAppsandDataCollection_Policies
				SetWindowsSearchandCortana_PreferencesandPolicies
				DisableSIA_DebugTracing
				CustomWindowsErrorReporting_Policies
				DisableWindowsSmartScreen
				CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
				EnableCustomWindowsDriversUpdateTweaks
				CustomDisableWindowsUpdateTweaks
				DisableWindowsUpgrade
				DisableReservedStorage
				EnableFullResetBase
				EnableFMP3ProCodec
				EnablePhotoViewer
				HideCortanaIcon
				HideMeetNowIcon
				HideNewsAndInterests
				GeneralTweaks
			) do (
				set "T_%%t=+"
				set %%t=
			)
			if "%SelectedSourceOS%" equ "w10" (
					rem BugFix_WiFinoInternetConnection
				for %%t in (
					LegacyVerticalMixerVolumeControl
				) do (
					set "T_%%t=+"
					set %%t=
				)
			)
			if "%SelectedSourceOS%" equ "w11" (
					rem EnableClassicContextMenu
				for %%t in (
					BypassReq
					DisableTeamsApp
					HideChatIcon
					EnableLocalAccount
					HideWidgetsIcon
					TaskbarAlignment_Center2Left
				) do (
					set "T_%%t=+"
					set %%t=
				)
			)
		)

		set "T_StartMenu_SetupComplete=+"

		call :ApplyTweaks
	)
	if errorlevel 15 goto :MainMenu
	if errorlevel 14 (
		call :EnvironmentVariables
		call :TweaksFlags
	)
	if errorlevel 13 (
		call :ApplyTweaks
	)
	if errorlevel 12 (
		if "!T_StartMenu_SetupComplete!" equ "-" (
			set "T_StartMenu_SetupComplete=+"
		) else (
			set "T_StartMenu_SetupComplete=-"
		)
	)
	if errorlevel 11 goto :SelectCustomTweaksMenu
	if errorlevel 10 goto :SelectTweaksMenu
	if errorlevel  9 (
		if "!T_ImportCustomRegistry!" equ "-" (
			set "T_ImportCustomRegistry=+"
			set "RegistryTweaks=Allowed"
		) else (
			set "T_ImportCustomRegistry=-"
		)
	)
	if errorlevel  8 (
		if "!T_DisableFeaturesList!" equ "-" (
			set "T_DisableFeaturesMenu=-"
			set "T_DisableFeaturesList=+"
		) else (
			set "T_DisableFeaturesList=-"
		)
	)
	if errorlevel  7 (
		if "!T_EnableFeaturesList!" equ "-" (
			set "T_EnableFeaturesMenu=-"
			set "T_EnableFeaturesList=+"
		) else (
			set "T_EnableFeaturesList=-"
		)
	)
	if errorlevel  6 (
		set "T_DisableFeaturesMenu=-"
		goto :DisableFeaturesAutomatedMenu
	)
	if errorlevel  5 (
		set "T_EnableFeaturesMenu=-"
		goto :EnableFeaturesAutomatedMenu
	)
	if errorlevel  4 (
		if "!T_ImportStartMenuLayout!" equ "-" (
			set "T_ImportStartMenuLayout=+"
		) else (
			set "T_ImportStartMenuLayout=-"
		)
	)
	if errorlevel  3 (
		if "!T_ImportInboxAppsAssociation!" equ "-" (
			set "T_ImportInboxAppsAssociation=+"
		) else (
			set "T_ImportInboxAppsAssociation=-"
		)
	)
	if errorlevel  2 (
		if "!T_RemoveInboxAppsAssociation!" equ "-" (
			set "T_RemoveInboxAppsAssociation=+"
		) else (
			set "T_RemoveInboxAppsAssociation=-"
		)
	)
	if errorlevel  1 (
		if "!T_ExportInboxAppsAssociation!" equ "-" (
			set "T_ExportInboxAppsAssociation=+"
		) else (
			set "T_ExportInboxAppsAssociation=-"
		)
	)
)
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

:EnableFeaturesAutomatedMenu

if "!StartReadingEnableFeatures!" equ "" call :StartReadingEnableFeatures

cls
echo.
echo.===============================================================================
echo.%txtDISMEnableFeaturesAutomatedMenu%
echo.===============================================================================
echo.
echo.   [R]  %txtredfetlistpre%
echo.
set /A count=1
for %%d in (!DEF_List!) do (
	set DEFCID_%%d=
	if !count! geq 1 if !count! leq 9 set "OptionID=  !count!"
	if !count! gtr 9 if !count! leq 99 set "OptionID= !count!"
	if !count! gtr 99 set "OptionID=!count!"
	if "!DEFCID_%%d!" equ "" set "DEFCID_%%d=!count!"
	if "!DEFCID_%%d!" neq "" (
		echo. [!OptionID!]  ^(!DEF_%%d!^) %%d
		set /A count+=1
	)
)
echo.
echo.
echo.   [A]  %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [X]  %Globalgobaselapl%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" (
		for %%# in (!DEF_List!) do (
			if "!DEF_%%#!" equ "+" (
				set "T_EnableFeaturesList=-"
				set "T_EnableFeaturesMenu=+"
			)
		)
		set StartReadingEnableFeatures=
		goto :!CurrentMenu!
	)
	if /I "%%c" equ "R" (
		call :ReadEnableFeaturesList
	)
	if /I "%%c" equ "D" (
		for %%# in (!DEF_List!) do (
			set "DEF_%%#=-"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!DEF_List!) do (
			set "DEF_%%#=+"
		)
	)
	for %%# in (!DEF_List!) do (
		if "%%c" equ "!DEFCID_%%#!" (
			if "!DEF_%%#!" equ "-" (
				set "DEF_%%#=+"
			) else (
				set "DEF_%%#=-"
			)
		)
	)
)
goto :EnableFeaturesAutomatedMenu

:ReadEnableFeaturesList
if exist "%EnableFeaturesList%" for /f "eol=# tokens=*" %%z in ('type "%EnableFeaturesList%" 2^>nul') do (
	set "DEF_%%z=+"
)
goto :EOF
::-------------------------------------------------------------------------------------------

:DisableFeaturesAutomatedMenu

if "!StartReadingDisableFeatures!" equ "" call :StartReadingDisableFeatures

cls
echo.
echo.===============================================================================
echo.%txtDISMDisableFeaturesAutomatedMenu%
echo.===============================================================================
echo.
echo.   [R]  %txtredfetlistpredis%
echo.
set /A count=1
for %%d in (!DDF_List!) do (
	set DDFCID_%%d=
	if !count! geq 1 if !count! leq 9 set "OptionID=  !count!"
	if !count! gtr 9 if !count! leq 99 set "OptionID= !count!"
	if !count! gtr 99 set "OptionID=!count!"
	if "!DDFCID_%%d!" equ "" set "DDFCID_%%d=!count!"
	if "!DDFCID_%%d!" neq "" (
		echo. [!OptionID!]  ^(!DDF_%%d!^) %%d
		set /A count+=1
	)
)
echo.
echo.
echo.   [A]  %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [X]  %Globalgobaselapl%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" (
		for %%# in (!DDF_List!) do (
			if "!DDF_%%#!" equ "-" (
				set "T_DisableFeaturesList=-"
				set "T_DisableFeaturesMenu=+"
			)
		)
		set StartReadingDisableFeatures=
		goto :!CurrentMenu!
	)
	if /I "%%c" equ "R" (
		call :ReadDisableFeaturesList
	)
	if /I "%%c" equ "D" (
		for %%# in (!DDF_List!) do (
			set "DDF_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!DDF_List!) do (
			set "DDF_%%#=-"
		)
	)
	for %%# in (!DDF_List!) do (
		if "%%c" equ "!DDFCID_%%#!" (
			if "!DDF_%%#!" equ "+" (
				set "DDF_%%#=-"
			) else (
				set "DDF_%%#=+"
			)
		)
	)
)
goto :DisableFeaturesAutomatedMenu

:ReadDisableFeaturesList
if exist "%DisableFeaturesList%" for /f "eol=# tokens=*" %%z in ('type "%DisableFeaturesList%" 2^>nul') do (
	set "DDF_%%z=-"
)
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Apply Source Menu
::-------------------------------------------------------------------------------------------
:ApplyMenu

set "CurrentMenu=ApplyMenu"

cls
echo.===============================================================================
if "!Allowed!" equ "" (
	echo.                       MSMG Toolkit - %txtapplymensou%
) else (
	echo.!Allowed!                      MSMG Toolkit - %txtapplymensou%                       !Bypass!
)
echo.===============================================================================

:: Checking whether Source OS is selected
if "%IsSourceSelected%" equ "No" (
	set "Auto=1"
	set "ChosenSource=A"

	:: Checking whether Windows Source DVD folder is empty
	if not exist "%DVD%\sources\*.wim" (
		call :ExtractInstallMediaSource_Image
	)

	:: Checking for Image Index Validation
	if /i "!ChosenSource!" equ "A" (
		:: Getting Image Index Number to Service
		call :GetImageIndexNo "%InstallWim%", 1
	)
	echo.===============================================================================
	echo.%GlobalSourceOS_NotSelected%
	echo.%txtvirtcreimed%
	echo.===============================================================================
	echo.%txtvirtcreimedline01%
	echo.%txtvirtcreimedline02%
	echo.%txtvirtcreimedline03%
	echo.
	echo.%txtvirtcreimedline04%
	echo.%txtvirtcreimedline05%
	echo.
	echo.%txtvirtcreimedline06%
	echo.%txtvirtcreimedline07%
	echo.===============================================================================
	echo.
	echo.%txtvirtcreimedop% "!ImageIndexNo!"
	if "!EditionBase!" equ "Pass" (
		set "VirtualCreate_ImageIndexEditions=Enabled"
		echo.  [1] "!ImageFormat!" %txtvirtcreimedformop1line01%
		echo.      %txtvirtcreimedformop1line02%
		echo.
		echo.  [C] %txtvirtcreimedformopcline01%
		echo.      %txtvirtcreimedformopcline02%
		for %%p in (HomeCoreEditionBase;HomeCoreNEditionBase;ProfessionalEditionBase;ProfessionalNEditionBase) do (
			if !%%p! equ 1 (
				if "%%p" equ "HomeCoreEditionBase" (
					echo.            --^>  Home Core     %GlobalBasedEditions%  ^<--
				)
				if "%%p" equ "HomeCoreNEditionBase" (
					echo.            --^>  Home CoreN    %GlobalBasedEditions%  ^<--
				)
				if "%%p" equ "ProfessionalEditionBase" (
					echo.            --^>  Professional  %GlobalBasedEditions%  ^<--
				)
				if "%%p" equ "ProfessionalNEditionBase" (
					echo.            --^>  ProfessionalN %GlobalBasedEditions%  ^<--
				)
			)
		)
		echo.      %txtvirtcreimedformomsgline01%
		echo.                      %txtvirtcreimedformomsgline02%
	) else (
		echo.  %txtvirtcreimedformomsgline03% !VirtualCreate_ImageIndexEditions!
	)
	echo.
	echo.
	echo.  [X]   %GlobalGoBack2MainMenu%
	echo.===============================================================================
	choice /C:1CPX /N /M "%GlobalEnterChoice% "
	if errorlevel 4 (
		set /A ChosenCount=0
		set ChosenSource=
		set ImageIndexNo=
		set AutoImageIndexNo=
		set Auto=
		set SpecifiedSourceIndex=

		goto :MainMenu
	)
	if errorlevel 3 (
		if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! (
			call :ImageIndexDeletion
			set "ChosenSource=A"

			:: Getting Image Index Number to Service
			call :GetImageIndexNo "%InstallWim%", 1
		)

		:: Getting Specified Source Index Information
		call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul

		if "!EditionBase!" equ "Pass" (
			set "AssignChosenVirtualEditions=1"
			for %%e in (
				ProfessionalWorkstation
				ProfessionalWorkstationN
				ProfessionalEducationN
				ProfessionalEducation
				Enterprise
				EnterpriseN
				ServerRdsh
				EducationN
				Education
				IoTEnterprise
				IoTEnterpriseS
				CloudEdition
				CloudEditionN
				CoreSingleLanguage
			) do (
				set "%%e=+"
			)
			goto :VirtualCreate_ImageIndexEditions
		)
	)
	if errorlevel 2 (
		if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! (
			call :ImageIndexDeletion
			set "ChosenSource=A"

			:: Getting Image Index Number to Service
			call :GetImageIndexNo "%InstallWim%", 1
		)

		:: Getting Specified Source Index Information
		call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul

		if "!EditionBase!" equ "Pass" goto :VirtualCreate_ImageIndexEditions
	)
	if errorlevel 1 (
		if "!ImageFormat!" equ "WIM" (
			set "ImageFormat=ESD"
		) else (
			set "ImageFormat=WIM"
		)
		goto :!CurrentMenu!
	)
)

:: Checking whether Image Registry is loaded
if "%IsImageRegistryLoaded%" equ "Yes" (
	echo.%GlobalSourceOS_ImageRegistryLoaded%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

if "%IsSourceselected%" equ "Yes" (
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
		if "!EditionBase!" equ "Pass" (
			echo.  [C] ^(!VirtualCreate_ImageIndexEditions!^) %txtvirtcreimedindex%
			if !ChosenCount! equ !ImageCount! (
				echo.       %txtvirtcreimedformopcline02%
			)
			if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! (
				echo.       %txtvirtcreimedformopcline02%
			)
			for %%p in (HomeCoreEditionBase;HomeCoreNEditionBase;ProfessionalEditionBase;ProfessionalNEditionBase) do (
				if !%%p! equ 1 (
					if "%%p" equ "HomeCoreEditionBase" (
						echo.               --^>  Home Core     %GlobalBasedEditions%  ^<--
					)
					if "%%p" equ "HomeCoreNEditionBase" (
						echo.               --^>  Home CoreN    %GlobalBasedEditions%  ^<--
					)
					if "%%p" equ "ProfessionalEditionBase" (
						echo.               --^>  Professional  %GlobalBasedEditions%  ^<--
					)
					if "%%p" equ "ProfessionalNEditionBase" (
						echo.               --^>  ProfessionalN %GlobalBasedEditions%  ^<--
					)
				)
			)
			echo.      %txtvirtcreimedformomsgline01%
			if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! (
				echo.       %txtvirtcreimedindextrim%
			)
		)
	)
	if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
		echo.
		echo.         %txtvirtcreimedformomsgline01%
		echo.                      %txtvirtcreimedformomsgline02%
		echo.
	)
	if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! (
		echo.
		echo.  [T] ^(!TrimEditions!^) %txtvirtcreimedindextrimop%
		echo.
		echo.
	) else (
		echo.
	)

	set /A count=1
	for %%n in (
		Cleanup
		ImageExtension
		ApplySave
		Discard
	) do (
		set "OptionID=!count!"

		if "%%n" equ "Cleanup" (
			if "%SelectedSourceOS%" neq "w7" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" (
				echo.  [!OptionID!]   %txtCleanUpSourceImage_op%
				if "%ImageBuild%" gtr "17763" if "!Bypass!" neq "O" (
					echo.        %txtCleanUpSourceImage_msg01%
					echo.              %txtCleanUpSourceImage_msg02%
					echo.              %txtCleanUpSourceImage_msg03%
				)
			)
		)
		if "%%n" equ "ImageExtension" (
			set "%%n=!count!"
			if "!%%n!" neq "" (
				echo.  [!OptionID!]   "!ImageFormat!" %txtimagextensmsg01%
				echo.        %txtimagextensmsg02%
			)
		)
		if "%%n" equ "ApplySave" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!]   %txtapplysavechop%
		)
		if "%%n" equ "Discard" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!]   %txtdiscartcahngeop%
		)

		if "!%%n!" neq "" (
			echo.
			set /A count+=1
		)
	)

	echo.
	echo.
	echo.  [X]   %GlobalOption_GoBack%
	echo.
	echo.===============================================================================
	echo.
	if "%SelectedSourceOS%" equ "w7" (
		choice /C:123TX0 /N /M "%GlobalEnterChoice% "
		if errorlevel 6 (
			if "!Allowed!" equ "" (
				set "Allowed=I"
				set "Bypass=I"
				set "Cleaning=Enabled"
				set "IsDialogsEnabled=No"
			) else (
				set "IsDialogsEnabled=Yes"
				set Cleaning=
				set "Bypass=O"
				set Allowed=
			)
		)
		if errorlevel 5 (
			set "TrimEditions=Disabled"
			goto :MainMenu
		)
		if errorlevel 4 (
			if "!TrimEditions!" equ "Disabled" (
				if !ImageCount! gtr 1 set "TrimEditions=Enabled"
			) else (
				set "TrimEditions=Disabled"
			)
		)
		if errorlevel 3 goto :DiscardSource
		if errorlevel 2 goto :SaveSource
		if errorlevel 1 (
			if "!ImageFormat!" equ "WIM" (
				set "ImageFormat=ESD"
			) else (
				set "ImageFormat=WIM"
			)
		)
	) else (
		choice /C:1234CTPX0 /N /M "%GlobalEnterChoice% "
		if errorlevel 9 (
			if "!Allowed!" equ "" (
				set "Allowed=I"
				set "Bypass=I"
				set "Cleaning=Enabled"
				set "IsDialogsEnabled=No"
			) else (
				set "IsDialogsEnabled=Yes"
				set Cleaning=
				set "Bypass=O"
				set Allowed=
			)
		)
		if errorlevel 8 (
			set "TrimEditions=Disabled"
			set "VirtualCreate_ImageIndexEditions=Disabled"
			goto :MainMenu
		)
		if errorlevel 7 (
			set "Allowed=I"
			set "Bypass=I"
			set "Auto=1"
			set "Cleaning=Enabled"
			rem set "ImageFormat=ESD"
			if "!EditionBase!" equ "Pass" (
				set "AssignChosenVirtualEditions=1"
				set "VirtualCreate_ImageIndexEditions=Enabled"
				if !ImageCount! gtr 1 set "TrimEditions=Enabled"
				for %%e in (
					ProfessionalWorkstation
					ProfessionalWorkstationN
					ProfessionalEducationN
					ProfessionalEducation
					Enterprise
					EnterpriseN
					ServerRdsh
					EducationN
					Education
					IoTEnterprise
					IoTEnterpriseS
					CloudEdition
					CloudEditionN
					CoreSingleLanguage
				) do (
					set "%%e=+"
				)
			)
			goto :SaveSource
		)
		if errorlevel 6 (
			if "!TrimEditions!" equ "Disabled" (
				if !ImageCount! gtr 1 set "TrimEditions=Enabled"
			) else (
				set "TrimEditions=Disabled"
				rem set "VirtualCreate_ImageIndexEditions=Disabled"
			)
		)
		if errorlevel 5 (
			if "!EditionBase!" equ "Pass" if "!VirtualCreate_ImageIndexEditions!" equ "Disabled" (
				set "VirtualCreate_ImageIndexEditions=Enabled"
				if !ImageCount! gtr 1 set "TrimEditions=Enabled"
			) else (
				set "VirtualCreate_ImageIndexEditions=Disabled"
			)
		)
		if errorlevel 4 goto :DiscardSource
		if errorlevel 3 (
			if "!Bypass!" equ "I" set "Cleaning=Enabled"
			goto :SaveSource
		)
		if errorlevel 2 (
			if "!ImageFormat!" equ "WIM" (
				set "ImageFormat=ESD"
			) else (
				set "ImageFormat=WIM"
			)
		)
		if errorlevel 1 (
			call :CleanupSource
		)
	)
	goto :!CurrentMenu!
)

::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Select Target Menu
::-------------------------------------------------------------------------------------------
:TargetMenu

set "CurrentMenu=TargetMenu"

cls
echo.===============================================================================
echo.%txtSelectTargetMenu%
echo.===============================================================================
echo.
:: Checking whether Source OS is selected
if "%IsSourceselected%" equ "Yes" (
	echo.%txtSelectTarget_msg%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
	rem goto :ApplyMenu
)

echo.  [1]   %txtSelectTargetMenu_op01%
echo.
echo.  [2]   %txtSelectTargetMenu_op02%
echo.
echo.  [3]   %txtSelectTargetMenu_op03%
echo.
echo.  [4]   %txtSelectTargetMenu_op04%
echo.
echo.  [5]   %txtSelectTargetMenu_op05%
echo.
echo.  [6]   %txtSelectTargetMenu_op06%
echo.
echo.
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:123456X /N /M "%GlobalEnterChoice% "
if errorlevel 7 goto :MainMenu
if errorlevel 6 goto :FormatUSB
if errorlevel 5 goto :BurnUSB
if errorlevel 4 goto :SyncUSB
if errorlevel 3 goto :CopyUSB
if errorlevel 2 goto :BurnISO
if errorlevel 1 goto :MakeISO
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Tools Menu
::-------------------------------------------------------------------------------------------
:ToolsMenu

set "CurrentMenu=ToolsMenu"

cls
echo.===============================================================================
echo.%txtToolsMenu%
echo.===============================================================================
echo.
echo.  [1]   %txtToolsMenu_op01%
echo.
echo.  [2]   %txtToolsMenu_op02%
echo.
echo.  [3]   %txtToolsMenu_op03%
echo.
echo.  [4]   %txtToolsMenu_op04ln1%
echo.
if "%IsRecoveryImageSelected%" equ "No" (
	set "MountSource=1"
	echo.
	echo.  [4]   ^(!MountWinREwim!^)%txtToolsMenu_op04ln2%
)else (
	echo.
	echo.
)
if "%IsBootImageSelected%" equ "No" (
	set "MountSource=1"
	echo.
	echo.  [5]   ^(!MountBOOTwim!^)%txtToolsMenu_op05%
)else (
	echo.
)
echo.
echo.
if "!MountSource!" neq "" (
	echo.  [S]   %txtToolsMenu_op_s%
) else (
	echo.
)
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:123456SX /N /M "%GlobalEnterChoice% "
if errorlevel 8 goto :MainMenu
if errorlevel 7 (
	if "!MountWinREwim!" equ "+" (
		set "IsRecoveryImageSelected=Yes"
		call :MountWinREwim
	)
	if "!MountBOOTwim!" equ "+" (
		set "IsBootImageSelected=Yes"
		call :MountBOOTwim
	)
	set "MountBOOTwim=-"
	set "MountWinREwim=-"
	set MountSource=
	call :StoringVariableSettingValues
	goto :MainMenu
)
if errorlevel 6 (
	if "!MountBOOTwim!" equ "-" (
		set "MountBOOTwim=+"
	) else (
		set "MountBOOTwim=-"
	)
)
if errorlevel 5 (
	if "!MountWinREwim!" equ "-" (
		set "MountWinREwim=+"
	) else (
		set "MountWinREwim=-"
	)
)
if errorlevel 4 goto :Options
if errorlevel 3 goto :Debug
if errorlevel 2 goto :WIMManager
if errorlevel 1 (
	call :ImageIndexDeletion
	set "ChosenSource=A"

	:: Getting Image Index Number to Service
	call :GetImageIndexNo "!InstallImageFile!", 1
)

goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Select Source from <DVD> folder
::-------------------------------------------------------------------------------------------
:SelectSourceDVD

cls
echo.
echo.===============================================================================
echo.%SelectWIMinInstallMediaFolder% %InstallMedia%
echo.===============================================================================

:: Checking whether Windows Source Boot Image exist
if not exist "%BootWim%" (
	echo.%txtselsouinstmsg01op01% ^<%DVD%\Sources^> %GlobalFolder3%
	echo.
	echo.%txtselsouinstmsg02op01% ^<%DVD%\Sources^> %GlobalFolder3%
	goto :Stop
)

:: Checking whether Windows Source Install Image is a ESD Image
if exist "%InstallEsd%" (
	echo.
	echo.%txtselsouinstmsg03%
	echo.%txtselsouinstmsg04%
	echo.
	echo.%txtselsouinstmsg05%
	echo.%txtselsouinstmsg06%
	echo.
	echo.%txtselsouinstmsg07%
	echo.%txtselsouinstmsg08%
	goto :Stop
)

:: Checking whether Windows Source Install Image exist
if not exist "%InstallWim%" (
	echo.%txtselsouinstmsg09op01% ^<%DVD%\Sources^> %GlobalFolder3%
	echo.
	echo.%txtselsouinstmsg10op01% ^<%DVD%\Sources^> %GlobalFolder3%
	goto :Stop
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtselsouinstmnu02%
echo.-------------------------------------------------------------------------------

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Image Index Number to Service
	call :GetImageIndexNo "%InstallWim%", 1
)

if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! (
	echo.
	echo.%txtselsouinstmsg001%
	echo.    %txtselsouinstmsg002%
	echo.    %txtselsouinstmsg003%
	echo.    %txtselsouinstmsg004%
	echo.    %txtselsouinstmsg005%
	echo.
	echo.    %txtselsouinstmsg006%
	echo.    %txtselsouinstmsg007%
	echo.
	echo.    %txtselsouinstmsg008%
	echo.          %txtselsouinstmsg009%
	echo.          %txtselsouinstmsg010%
	echo.          %txtselsouinstmsg011%
	echo.
	echo.    %txtselsouinstmsg012%
	echo.          %txtselsouinstmsg013%
	echo.          %txtselsouinstmsg014%
	echo.
	choice /C:NY /N /M "%GlobalEnterChoice% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 (
		call :ImageIndexDeletion
		set "ChosenSource=A"

		:: Getting Image Index Number to Service
		call :GetImageIndexNo "%InstallWim%", 1
	)
) else (
	if "!ImageIndexNo!" equ "" call :GetImageIndexNo "%InstallWim%", 1
)

:: Getting Specified Source Image Index Information
call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul

:: Setting Selected Source OS version
call :SelectedSourceOS

:: Setting Package Build and Service Pack Build Version
call :PackageBuild_ServicePackBuild

:: Setting Package Index and Architecture
call :PackageIndex_Architecture

:: Checking whether the HOST OS is Windows 7 and selected Source OS is Windows 10/11
rem if "%HostVersion%" equ "6.1" if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
if "%HostVersion%" equ "6.1" if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	echo.
	echo.%restoreprevmsg02%
	echo.
	echo.%restoreprevmsg03%
	goto :Stop
)

if "%IsBootImageSelected%" equ "" (
	echo.
	choice /C:YN /N /M "%txtbootimselch01% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 set "IsBootImageSelected=No"
	if errorlevel 1 set "IsBootImageSelected=Yes"
)
if "%IsRecoveryImageSelected%" equ "" (
	echo.
	choice /C:YNR /N /M "%txtbootreselch01% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%/'R'%GlobalChoice_Remove%] : "
	if errorlevel 3 set "RemoveWinRE=Yes"
	if errorlevel 2 set "IsRecoveryImageSelected=No"
	if errorlevel 1 set "IsRecoveryImageSelected=Yes"
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtmoutsourimamsg01%
echo.-------------------------------------------------------------------------------
echo.
:: Mounting Source Install Image Indexes to Service
for %%i in (!ImageIndexNo!) do (
	call :CreateFolder "%InstallMount%\%%i"

	echo.-------------------------------------------------------------------------------
	if %%i leq 9 echo.%txtMountingSourceImage% [install.wim, %GlobalIndex% :  %%i - %GlobalEdition% : !ImageEdition%%i!]
	if %%i gtr 9 echo.%txtMountingSourceImage% [install.wim, %GlobalIndex% : %%i - %GlobalEdition% : !ImageEdition%%i!]
	echo.                           %txtmoutsourimamsg02pos02% ^<%InstallMount%\%%i^>...
	echo.-------------------------------------------------------------------------------
	call :MountImage "%InstallWim%", %%i, "%InstallMount%\%%i"
)

:: Remove Source Recovery Image to all install.wim Mounted Indexes.
call :RemoveWinRE

:: Mounting Chosen Windows Source Recovery Image Index to Service
call :MountWinREwim

:: Mounting Windows Source Setup Boot Image Index 1 and 2 to Service
call :MountBOOTwim

set "IsSourceSelected=Yes"

if "!InstallMedia_ImageFileName!" equ "" call :InstallMedia_ImageFileName
if "!InstallMedia_ImageFileName!" neq "" set "NewInstallMediaFileName=!InstallMedia_ImageFileName!.iso"

:: Display Source Image Information
call :DisplaySourceImageInformation

:: Storing Variable Values on Storage File as a previous Setting to use when a code brake or crashing occurs.
call :StoringVariableSettingValues

echo.
echo.-------------------------------------------------------------------------------
echo.%txtmoutsourimamsg03%
echo.-------------------------------------------------------------------------------

:Stop
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

:: Returning to Main Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Remove Windows Source Recovery Image Index from install.wim
::-------------------------------------------------------------------------------------------
:RemoveWinRE
echo.
if "!RemoveWinRE!" neq "" (
	for /l %%i in (1, 1, !ImageCount!) do (
		if exist "%InstallMount%\%%i\%WinReWim%" (
			echo.-------------------------------------------------------------------------------
			echo.%txtremovimamsg01pos01% %%i -^> WinRE.wim] %txtremovimamsg01pos02%
			echo.-------------------------------------------------------------------------------
			:: Remove Source Recovery Image to all install.wim Mounted Indexes.
			call :RemoveFile "%InstallMount%\%%i\%WinReWim%"
		)
	)
	set RemoveWinRE=
	set "IsRecoveryImageSelected=No"
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Mount Chosen Windows Source Recovery Image Index to Service
::-------------------------------------------------------------------------------------------
:MountWinREwim
echo.
if "%IsRecoveryImageSelected%" equ "Yes" (
	if exist "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%" (
		call :CreateFolder "%WinReMount%"

		echo.-------------------------------------------------------------------------------
		echo.%txtmoutsourimamsg02pos01% !SpecifiedSourceIndex! -^> WinRE.wim] %txtmoutsourimamsg02pos02% ^<%WinReMount%^>...
		echo.-------------------------------------------------------------------------------
		call :MountImage "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%", 1, "%WinReMount%"
	) else (
		set "IsRecoveryImageSelected=No"
	)
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Mount Windows Source Setup Boot Image Index 1 and 2 to Service
::-------------------------------------------------------------------------------------------
:MountBOOTwim
echo.
if "%IsBootImageSelected%" equ "Yes" (
	for /l %%i in (1, 1, 2) do (
		call :CreateFolder "%BootMount%\%%i"

		echo.-------------------------------------------------------------------------------
		echo.%txtmoutsourimaboo02pos01% %%i] %txtmoutsourimaboo02pos02% ^<%BootMount%\%%i^>...
		echo.-------------------------------------------------------------------------------
		call :MountImage "%BootWim%", %%i, "%BootMount%\%%i"
	)
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Copy Source from Install Media Drive to ^<Install Media^> folder
::-------------------------------------------------------------------------------------------
:CopySourceDVDUSB

setlocal

set DriveLetter=

cls
echo.===============================================================================
echo.%txtCopySource_fr01%
echo.===============================================================================
echo.

:: Checking whether Windows Source DVD folder is empty
if exist "%DVD%\sources\*.wim" (
	echo.%txtCopySource_fr02pos01% ^<%DVD%^> %txtCopySource_fr02pos02%
	echo.
	choice /C:YN /N /M "%txtCopySource_frop% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingCopyingSource%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtGettingDVDDriveOptions%
echo.-------------------------------------------------------------------------------
echo.
:: Show Available DVD Drive or USB Flash Drives.
echo.%txtListingAvailableDVDDrive%
call :ListDisks

if !CountLoop! lss 3 (
	for %%# in (%DriveLetters%) do (
		call :InstallMediaInfo %%#
	)
)
if !CountLoop! equ 3 (
	for /F "tokens=*" %%# in ('^(echo.LIST VOLUME^) ^| DiskPart.exe ^| findstr.exe /I "Remov Amovible 可移动"') do for /F "tokens=3 delims= " %%s in ("%%#") do (
		set "DriveLetter=%%s"
	)
)
if !CountLoop! gtr 3 (
	set DriveLetter=

	:: Getting DVD Drive Letter
	set /p "DriveLetter=%txtEnterDVDDriveUSBFlash% "
)

if !CountLoop! geq 3 call :InstallMediaInfo !DriveLetter!

:: Checking whether the specified DVD Drive letter is empty
if not exist "!DriveLetter!:\sources\boot.wim" (
	echo.%txtCantFindWindowsOSInstallation%
	echo.
	echo.%txtPleaseEnterCorrectDVD%
	goto :Stop
)

:: Checking whether the specified DVD Drive Letter is empty
if not exist "!DriveLetter!:\sources\install.*" (
	echo.%txtCantFindWindowsOSInstallation%
	echo.
	echo.%txtPleaseEnterCorrectDVD%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtCopyingSourceFromInstallMedia%
echo.-------------------------------------------------------------------------------
echo.
call :RemoveFolder "%DVD%"
echo.%txtCopyingSourceFromInstallMediaDrivepos01% ^<!DriveLetter!:^> %txtCopyingSourceFromInstallMediaDrivepos02% ^<%DVD%^> %GlobalFolder%
echo.
echo.%txtCopyingFromInstallMedia%
%XCopy% !DriveLetter!: "%DVD%" >nul
echo.
echo.%txtCopyingComplete%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedCopyingSourceFromInstallMedia%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	pause
)

set DriveLetter=

endlocal

:: Returning to Main Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Extract Source from: Install Media ISO or OEM IMG file to <DVD> folder
::-------------------------------------------------------------------------------------------
:ExtractInstallMediaSource_Image

cls
echo.===============================================================================
echo. %txtExtractSource_01%
echo.                 %txtExtractSource_02%
echo.===============================================================================
echo.

:: Checking whether Install Media Image folder is empty
call :CheckInstallMediaFolder

if "!InstallMediaSourceImage_IsPresent!" equ "" (
	echo.%GlobalCantFindWindowsInstallMedia%
	if "!InstallMediaISOSource!" equ "O" echo.    ^<%ISOsource%^> %GlobalFolder%
	if "!InstallMediaISO!" equ "O" echo.    ^<%ISO%^> %GlobalFolder%
	echo.
	echo.%GlobalPleasePutWindowsInstallMediaISO%
	echo.%GlobalIntoOneOfTheRespectiveFolders%
	goto :Stop
)

:: Checking whether Windows Source DVD folder is empty
if "!Bypass!" equ "O" if exist "%DVD%\sources\install.*" (
	echo.%txtExtractSource_07op01% ^<%DVD%^> %txtExtractSource_07op02%
	echo.
	choice /C:YN /N /M "%txtCopySource_frop% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :Stop
)

:: Getting ^<Install Media^> Source Image File Name
if "!InstallMediaSource_ImageFileName!" equ "" call :GettingInstallMediaSource_ImageFileName

echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_08%
echo.           %txtExtractSource_09%
echo.-------------------------------------------------------------------------------
echo.
call :RemoveFolder "%DVD%"

echo.%txtExtractSource_10op01% ^<%DVD%^> %GlobalFolder%
echo.
echo.%txtExtractSource_11%
"%Zip%" x -y "!InstallMedia_ImageFolderPath!\!InstallMediaSource_ImageFileName!" -o"%DVD%" >nul
echo.
set /a n=0
if exist "%DVD%\sources\boot.wim" set /a n+=1
if exist "%DVD%\sources\install.wim" set /a n+=1
if exist "%DVD%\sources\install.esd" set /a n+=1
if !n! equ 2 (
	echo.%txtExtractSource_12%
) else (
	echo.%txtExtractSource_13%
)
echo.

echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_14%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	pause
)

set InstallMediaSourceImage_IsPresent=
set InstallMediaIMGSource=
set InstallMediaIMG=
set InstallMediaISOSource=
set InstallMediaISO=

:: Returning to Main Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Extract Source from Windows Store ESD Install Image
::-------------------------------------------------------------------------------------------
:ExtractSourceStoreESD

setlocal

set ImageBuild=

cls
echo.===============================================================================
echo.%txtExtractSource_esd01%
echo.===============================================================================
echo.

:: Checking whether Windows Source DVD folder is empty
if not exist "%InstallEsd%" (
	echo.%txtExtractSource_esd02pos01% ^<%DVD%\Sources^> %GlobalFolder%
	echo.
	echo.%txtExtractSource_esd03pos01% ^<%DVD%\Sources^> %GlobalFolder%
	goto :Stop
)
echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_esd04%
echo.-------------------------------------------------------------------------------

:: Checking for Image Index Validation
if !ImageCount! geq 4 (
	if "!ImageIndexNo!" equ "" (
		:: Getting Single or Multi Image Index to WIM Convert
		call :GetImageIndexNo "%InstallEsd%", 4
		rem set "ImageIndexNo=3,!ImageIndexNo!"
	)
) else (
	echo.%txtExtractSource_esd05% [ !ImageCount! ]
	echo.%txtExtractSource_esd06%
	echo.%txtExtractSource_esd07%
	goto :Stop
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_esd08%
echo.-------------------------------------------------------------------------------
echo.
echo.%txtExtractSource_esd09%
attrib -r -h -s -a "%InstallEsd%" >nul
for /f "skip=1 tokens=4 delims=:." %%e in ('%DISM% /Get-ImageInfo /ImageFile:"%InstallEsd%" /Index:4 ^| find.exe /I "Version"') do set /A "ImageBuild=%%e"
if %ImageBuild% equ 9600 "%W81EsdDecrypter%" "%InstallEsd%" 2>nul
if %ImageBuild% neq 7601 if %ImageBuild% neq 9200 if %ImageBuild% neq 9600 "%W10EsdDecrypter%" "%InstallEsd%" >nul
echo.
echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_esd10%
echo.-------------------------------------------------------------------------------
:: Creating Windows Setup Installation Media folder "%_TMP%\DVD"
call :RemoveFolder "%_TMP%\DVD"
call :CreateFolder "%_TMP%\DVD"
call :ApplyImage "%InstallEsd%", 1, "%_TMP%\DVD"
rem move /y "%DVD%\sources\*.wim" "%_TMP%\DVD\sources" >nul

for /l %%i in (2 1 3) do (
	echo.-------------------------------------------------------------------------------
	echo.%txtExtractSource_esd11pos01% %%i] %txtExtractSource_esd11pos02%...
	echo.-------------------------------------------------------------------------------
	rem call :ExportImageIndex "%InstallEsd%", %%i, "%_TMP%\DVD\sources\boot.wim", "WIM", "Yes"
	echo.
	"%WimlibImagex%" export "%InstallEsd%" %%i "%_TMP%\DVD\sources\boot.wim" --boot --compress=LZX
	echo.
)
:: Deleting the First Empty Index
call :DeleteImage "%_TMP%\DVD\sources\boot.wim", 1 >nul

if %ImageBuild% equ 9600 (
	echo.-------------------------------------------------------------------------------
	echo.%txtExtractSource_esd12%
	echo.-------------------------------------------------------------------------------
	rem call :ExportImageIndex "%InstallEsd%", 4, "%_TMP%\DVD\sources\install.wim", "WIM", "No"
	echo.
	"%WimlibImagex%" export "%InstallEsd%" 4 "%_TMP%\DVD\sources\install.wim" --compress=LZX
	echo.
)

if %ImageBuild% neq 7601 if %ImageBuild% neq 9200 if %ImageBuild% neq 9600 (
	for %%i in (!ImageIndexNo!) do (
		echo.-------------------------------------------------------------------------------
		echo.%txtExtractSource_esd13pos01% %%i] %txtExtractSource_esd13pos02%
		echo.-------------------------------------------------------------------------------
		rem call :ExportImageIndex "%InstallEsd%", %%i, "%_TMP%\DVD\sources\install.wim", "WIM", "No"
		echo.
		"%WimlibImagex%" export "%InstallEsd%" %%i "%_TMP%\DVD\sources\install.wim" --compress=LZX
		echo.
	)
)

:: Moving ESD to WIM converted folder <Temp\DVD> to <DVD> Source Folder
call :RemoveFolder "%DVD%"
move /y "%_TMP%\DVD" "%WorkingFolder%" >nul

:: Deal with EI.cfg file
call :EIcfg

:: Cleaning Up Unwanted files from Source folder
call :RemoveFile "%DVD%\MediaMeta.xml"
echo.
echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_esd14%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

set ImageBuild=

if "%IsSourceSelected%" equ "No" (
	set ChosenSource=
	set /A ChosenCount=0
	set ImageIndexNo=
	set AutoImageIndexNo=
	set Auto=
	set SpecifiedSourceIndex=
)

endlocal

:: Returning to Main Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Extract Source from:
::                Microsoft's Media Creation Tool or Custom ESD Image
::-------------------------------------------------------------------------------------------
:ExtractSourceESD

setlocal

cls
echo.===============================================================================
echo.%txtExtractSource_esd15%
echo.%txtExtractSource_esd16%
echo.===============================================================================
echo.

:: Checking whether Windows Source Boot Image exist
if not exist "%BootWim%" (
	echo.%txtselsouinstmsg01op01% ^<%DVD%\Sources^> %GlobalFolder3%
	echo.
	echo.%txtselsouinstmsg02op01% ^<%DVD%\Sources^> %GlobalFolder3%
	goto :Stop
)

:: Checking whether Windows Source ESD Install Image exist
if not exist "%InstallEsd%" (
	echo.%txtExtractSource_esd02pos01% ^<%DVD%\Sources^> %GlobalFolder%
	echo.
	echo.%txtExtractSource_esd03pos01% ^<%DVD%\Sources^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_esd19%
echo.-------------------------------------------------------------------------------

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Image Index Number to Extract Source ESD
	call :GetImageIndexNo "%InstallEsd%", 1
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_esd20%
echo.-------------------------------------------------------------------------------

:: Converting Windows Media Creation Tool or Custom ESD Install Image to WIM Image
if !ChosenCount! equ !ImageCount! (
	echo.-------------------------------------------------------------------------------
	echo.%txtExtractSource_esd21%
	echo.-------------------------------------------------------------------------------
	rem call :ExportImage "%InstallEsd%", "%InstallWim%", "WIM", "No"
	echo.
	"%WimlibImagex%" export "%InstallEsd%" all "%InstallWim%" --compress=LZX
	echo.
) else (
	for %%i in (!ImageIndexNo!) do (
		echo.-------------------------------------------------------------------------------
		echo.%txtExtractSource_esd22pos01% %%i] %txtExtractSource_esd22pos02%
		echo.-------------------------------------------------------------------------------
		rem call :ExportImageIndex "%InstallEsd%", %%i, "%InstallWim%", "WIM", "No"
		echo.
		"%WimlibImagex%" export "%InstallEsd%" %%i "%InstallWim%" --compress=LZX
		echo.
	)
)

:: Deleting original Source MCT or Custom ESD Install Image
call :RemoveFile "%InstallEsd%"

echo.-------------------------------------------------------------------------------
echo.%txtExtractSource_esd23%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

if "%IsSourceSelected%" equ "No" (
	set ChosenSource=
	set /A ChosenCount=0
	set ImageIndexNo=
	set AutoImageIndexNo=
	set Auto=
	set SpecifiedSourceIndex=
)

endlocal

:: Returning to Main Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Language Packs Menu
::-------------------------------------------------------------------------------------------
:IntLanguagePacksMenu

if "%IsDialogsEnabled%" equ "Yes" if "!LanguagePacks_Warning!" equ "" (
	cls
	echo.===============================================================================
	echo.%txtIntegrateLangPack_01%
	echo.===============================================================================
	echo.
	echo.
	echo.
	echo.                                %Globalmsgwarnig%
	echo.                                =============
	echo.
	echo.   %txtIntegrateLangPack_02%
	echo.   %txtIntegrateLangPack_03%
	echo.   %txtIntegrateLangPack_04%
	echo.   %txtIntegrateLangPack_05%
	echo.   %txtIntegrateLangPack_06%
	echo.   %txtIntegrateLangPack_07%
	echo.
	echo.
	echo.
	echo.   %Globaldisabledialog_line01%
	echo.   %Globaldisabledialog_line02%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%Globalchcontinue% ['Y'%Globalchyes%/'N'%Globalchno%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "LanguagePacks_Warning=0"
)

set "CurrentMenu=IntLanguagePacksMenu"

cls
echo.===============================================================================
echo.%txtIntegrateLangPack_08%
echo.===============================================================================
echo.

set /A count=1
for %%n in (
	LanguagePacksBoot
	LanguagePacksInstall
	LanguagePacksRecovery
) do (
	set "OptionID=!count!"

	if "%%n" equ "LanguagePacksBoot" (
		if "%IsBootImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!IntLanguagePacksBoot!^)%txtIntegrateDrivers_01%
	)
	if "%%n" equ "LanguagePacksInstall" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!IntLanguagePacksInstall!^)%txtIntegrateDrivers_02%
	)
	if "%%n" equ "LanguagePacksRecovery" (
		if "%IsRecoveryImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!IntLanguagePacksRecovery!^)%txtIntegrateDrivers_03%
	)

	if "!%%n!" neq "" (
		echo.
		set /A count+=1
	)
)

if "%IsBootImageSelected%" equ "No" (
	echo.
	echo.         %GlobalCantIntegrate%
	echo.                                %txtBootImageOptions%
	echo.
	echo.         %txtIntegrateLangPack_10%
	echo.         %txtIntegrateLangPack_11%
	echo.
)
if "%IsRecoveryImageSelected%" equ "No" (
	echo.
	echo.         %GlobalCantIntegrate%
	echo.                                %txtInstallandWinReImageOptions%
	echo.
	echo.         %GlobalWinREnoMounted%
	echo.         %GlobalGoToolsMenuMountWinRE%
	echo.
)
echo.
echo.
echo.
echo.
echo.  [S]    %GlobalOption_SelectAll% ^| [D] %GlobalOption_Revert2Default%
echo.
echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntegrateMenu
	if /i "%%c" equ "D" (
		for %%i in (
			F_IntLanguagePacksMenu
			LanguagePacksBoot
			LanguagePacksInstall
			LanguagePacksRecovery
		) do (
			set "%%i=%%i"
			if "!%%i:~,2!" equ "F_" (
				set "%%i=-"
			) else (
				set "Int%%i=-"
				set %%i=
			)
		)
	)
	if /i "%%c" equ "S" (
		for %%i in (
			LanguagePacksBoot
			LanguagePacksInstall
			LanguagePacksRecovery
		) do (
			if "!%%i!" neq "" (
				set "Int%%i=+"
			)
		)
	)
	if "%%c" equ "!LanguagePacksBoot!" (
		if "!IntLanguagePacksBoot!" equ "-" (
			set "IntLanguagePacksBoot=+"
		) else (
			set "IntLanguagePacksBoot=-"
		)
	)
	if "%%c" equ "!LanguagePacksInstall!" (
		if "!IntLanguagePacksInstall!" equ "-" (
			set "IntLanguagePacksInstall=+"
		) else (
			set "IntLanguagePacksInstall=-"
		)
	)
	if "%%c" equ "!LanguagePacksRecovery!" (
		if "!IntLanguagePacksRecovery!" equ "-" (
			set "IntLanguagePacksRecovery=+"
		) else (
			set "IntLanguagePacksRecovery=-"
		)
	)
)

:: Return to IntLanguagePacksMenu
goto :!CurrentMenu!

:IntLanguagePacks

cls
echo.===============================================================================
echo.%txtIntegrateLangPack_15%
echo.===============================================================================
echo.

if "!LanguagePackCode!" equ "" (
	echo.===============================================================================
	echo.%txtIntegrateLangPack_16%
	echo.===============================================================================

	if "%SelectedSourceOS%" equ "w7" (
		echo. %txtIntegrateLangPack_Choice01%[ar-SA]    %txtIntegrateLangPack_Choice26%[lv-LV]
		echo. %txtIntegrateLangPack_Choice02%[bg-BG]    %txtIntegrateLangPack_Choice27%[lt-LT]
		echo. %txtIntegrateLangPack_Choice03%[zh-HK]    %txtIntegrateLangPack_Choice28%[nb-NO]
		echo. %txtIntegrateLangPack_Choice04%[zh-CN]    %txtIntegrateLangPack_Choice29%[pl-PL]
		echo. %txtIntegrateLangPack_Choice05%[zh-TW]    %txtIntegrateLangPack_Choice30%[pt-BR]
		echo. %txtIntegrateLangPack_Choice06%[hr-HR]    %txtIntegrateLangPack_Choice31%[pt-PT]
		echo. %txtIntegrateLangPack_Choice07%[cs-CZ]    %txtIntegrateLangPack_Choice32%[ro-RO]
		echo. %txtIntegrateLangPack_Choice08%[da-DK]    %txtIntegrateLangPack_Choice33%[ru-RU]
		echo. %txtIntegrateLangPack_Choice09%[nl-NL]    %txtIntegrateLangPack_Choice34%[sr-Latn-CS]
		echo. %txtIntegrateLangPack_Choice10%[en-US]    %txtIntegrateLangPack_Choice35%[sk-SK]
		echo. %txtIntegrateLangPack_Choice11%[et-EE]    %txtIntegrateLangPack_Choice36%[sl-SI]
		echo. %txtIntegrateLangPack_Choice12%[fi-FI]    %txtIntegrateLangPack_Choice37%[es-ES]
		echo. %txtIntegrateLangPack_Choice13%[fr-FR]    %txtIntegrateLangPack_Choice38%[sv-SE]
		echo. %txtIntegrateLangPack_Choice14%[de-DE]    %txtIntegrateLangPack_Choice39%[th-TH]
		echo. %txtIntegrateLangPack_Choice15%[el-GR]    %txtIntegrateLangPack_Choice40%[tr-TR]
		echo. %txtIntegrateLangPack_Choice16%[he-IL]    %txtIntegrateLangPack_Choice41%[uk-UA]
		echo. %txtIntegrateLangPack_Choice17%[hu-HU]
		echo. %txtIntegrateLangPack_Choice18%[it-IT]
		echo. %txtIntegrateLangPack_Choice19%[ja-JP]
		echo. %txtIntegrateLangPack_Choice20%[ko-KR]    [X] %Globaloptiongoback%
	)

	if "%SelectedSourceOS%" equ "w81" (
		echo. %txtIntegrateLangPack_Choice01%[ar-SA]    %txtIntegrateLangPack_Choice20%[ko-KR]
		echo. %txtIntegrateLangPack_Choice02%[bg-BG]    %txtIntegrateLangPack_Choice26%[lv-LV]
		echo. %txtIntegrateLangPack_Choice03%[zh-HK]    %txtIntegrateLangPack_Choice27%[lt-LT]
		echo. %txtIntegrateLangPack_Choice04%[zh-CN]    %txtIntegrateLangPack_Choice28%[nb-NO]
		echo. %txtIntegrateLangPack_Choice05%[zh-TW]    %txtIntegrateLangPack_Choice29%[pl-PL]
		echo. %txtIntegrateLangPack_Choice06%[hr-HR]    %txtIntegrateLangPack_Choice30%[pt-BR]
		echo. %txtIntegrateLangPack_Choice07%[cs-CZ]    %txtIntegrateLangPack_Choice31%[pt-PT]
		echo. %txtIntegrateLangPack_Choice08%[da-DK]    %txtIntegrateLangPack_Choice32%[ro-RO]
		echo. %txtIntegrateLangPack_Choice09%[nl-NL]    %txtIntegrateLangPack_Choice33%[ru-RU]
		echo. %txtIntegrateLangPack_Choice21%[en-GB]    %txtIntegrateLangPack_Choice34%[sr-Latn-CS]
		echo. %txtIntegrateLangPack_Choice10%[en-US]    %txtIntegrateLangPack_Choice35%[sk-SK]
		echo. %txtIntegrateLangPack_Choice11%[et-EE]    %txtIntegrateLangPack_Choice36%[sl-SI]
		echo. %txtIntegrateLangPack_Choice12%[fi-FI]    %txtIntegrateLangPack_Choice37%[es-ES]
		echo. %txtIntegrateLangPack_Choice13%[fr-FR]    %txtIntegrateLangPack_Choice38%[sv-SE]
		echo. %txtIntegrateLangPack_Choice14%[de-DE]    %txtIntegrateLangPack_Choice39%[th-TH]
		echo. %txtIntegrateLangPack_Choice15%[el-GR]    %txtIntegrateLangPack_Choice40%[tr-TR]
		echo. %txtIntegrateLangPack_Choice16%[he-IL]    %txtIntegrateLangPack_Choice41%[uk-UA]
		echo. %txtIntegrateLangPack_Choice17%[hu-HU]
		echo. %txtIntegrateLangPack_Choice18%[it-IT]
		echo. %txtIntegrateLangPack_Choice19%[ja-JP]    [X] %Globaloptiongoback%
	)

	if "%SelectedSourceOS%" equ "w10" (
		echo. %txtIntegrateLangPack_Choice01%[ar-SA]    %txtIntegrateLangPack_Choice19%[ja-JP]
		echo. %txtIntegrateLangPack_Choice02%[bg-BG]    %txtIntegrateLangPack_Choice20%[ko-KR]
		echo. %txtIntegrateLangPack_Choice03%[zh-HK]    %txtIntegrateLangPack_Choice26%[lv-LV]
		echo. %txtIntegrateLangPack_Choice04%[zh-CN]    %txtIntegrateLangPack_Choice27%[lt-LT]
		echo. %txtIntegrateLangPack_Choice05%[zh-TW]    %txtIntegrateLangPack_Choice28%[nb-NO]
		echo. %txtIntegrateLangPack_Choice06%[hr-HR]    %txtIntegrateLangPack_Choice29%[pl-PL]
		echo. %txtIntegrateLangPack_Choice07%[cs-CZ]    %txtIntegrateLangPack_Choice30%[pt-BR]
		echo. %txtIntegrateLangPack_Choice08%[da-DK]    %txtIntegrateLangPack_Choice31%[pt-PT]
		echo. %txtIntegrateLangPack_Choice09%[nl-NL]    %txtIntegrateLangPack_Choice32%[ro-RO]
		echo. %txtIntegrateLangPack_Choice21%[en-GB]    %txtIntegrateLangPack_Choice33%[ru-RU]
		echo. %txtIntegrateLangPack_Choice10%[en-US]    %txtIntegrateLangPack_Choice34%[sr-Latn-RS]
		echo. %txtIntegrateLangPack_Choice11%[et-EE]    %txtIntegrateLangPack_Choice35%[sk-SK]
		echo. %txtIntegrateLangPack_Choice12%[fi-FI]    %txtIntegrateLangPack_Choice36%[sl-SI]
		echo. %txtIntegrateLangPack_Choice44%[fr-CA]    %txtIntegrateLangPack_Choice42%[es-MX]
		echo. %txtIntegrateLangPack_Choice13%[fr-FR]    %txtIntegrateLangPack_Choice37%[es-ES]
		echo. %txtIntegrateLangPack_Choice14%[de-DE]    %txtIntegrateLangPack_Choice38%[sv-SE]
		echo. %txtIntegrateLangPack_Choice15%[el-GR]    %txtIntegrateLangPack_Choice39%[th-TH]
		echo. %txtIntegrateLangPack_Choice16%[he-IL]    %txtIntegrateLangPack_Choice40%[tr-TR]
		echo. %txtIntegrateLangPack_Choice17%[hu-HU]    %txtIntegrateLangPack_Choice41%[uk-UA]
		echo. %txtIntegrateLangPack_Choice18%[it-IT]    [X] %Globaloptiongoback%
	)

	if "%SelectedSourceOS%" equ "w11" (
		echo. %txtIntegrateLangPack_Choice01%[ar-SA]    %txtIntegrateLangPack_Choice18%[it-IT]
		echo. %txtIntegrateLangPack_Choice22%[eu-ES]    %txtIntegrateLangPack_Choice19%[ja-JP]
		echo. %txtIntegrateLangPack_Choice02%[bg-BG]    %txtIntegrateLangPack_Choice20%[ko-KR]
		echo. %txtIntegrateLangPack_Choice23%[ca-ES]    %txtIntegrateLangPack_Choice26%[lt-LT]
		echo. %txtIntegrateLangPack_Choice04%[zh-CN]    %txtIntegrateLangPack_Choice27%[lv-LV]
		echo. %txtIntegrateLangPack_Choice05%[zh-TW]    %txtIntegrateLangPack_Choice28%[nb-NO]
		echo. %txtIntegrateLangPack_Choice06%[hr-HR]    %txtIntegrateLangPack_Choice29%[pl-PL]
		echo. %txtIntegrateLangPack_Choice07%[cs-CZ]    %txtIntegrateLangPack_Choice30%[pt-BR]
		echo. %txtIntegrateLangPack_Choice08%[da-DK]    %txtIntegrateLangPack_Choice31%[pt-PT]
		echo. %txtIntegrateLangPack_Choice09%[nl-NL]    %txtIntegrateLangPack_Choice32%[ro-RO]
		echo. %txtIntegrateLangPack_Choice21%[en-GB]    %txtIntegrateLangPack_Choice33%[ru-RU]
		echo. %txtIntegrateLangPack_Choice10%[en-US]    %txtIntegrateLangPack_Choice34%[sr-Latn-RS]
		echo. %txtIntegrateLangPack_Choice11%[et-EE]    %txtIntegrateLangPack_Choice35%[sk-SK]
		echo. %txtIntegrateLangPack_Choice12%[fi-FI]    %txtIntegrateLangPack_Choice36%[sl-SI]
		echo. %txtIntegrateLangPack_Choice44%[fr-CA]    %txtIntegrateLangPack_Choice42%[es-MX]
		echo. %txtIntegrateLangPack_Choice13%[fr-FR]    %txtIntegrateLangPack_Choice37%[es-ES]
		echo. %txtIntegrateLangPack_Choice24%[gl-ES]    %txtIntegrateLangPack_Choice38%[sv-SE]
		echo. %txtIntegrateLangPack_Choice14%[de-DE]    %txtIntegrateLangPack_Choice39%[th-TH]
		echo. %txtIntegrateLangPack_Choice15%[el-GR]    %txtIntegrateLangPack_Choice40%[tr-TR]
		echo. %txtIntegrateLangPack_Choice16%[he-IL]    %txtIntegrateLangPack_Choice41%[uk-UA]
		echo. %txtIntegrateLangPack_Choice17%[hu-HU]    %txtIntegrateLangPack_Choice43%[vi-VN]
		echo. %txtIntegrateLangPack_Choice25%[id-ID]    [X] %Globaloptiongoback%
	)
	echo.===============================================================================
	set /p "LanguagePackCode=%txtIntegrateLangPack_Select% '[' ']' : "
)

cls
echo.===============================================================================
echo.%txtIntegrateLangPack_01%
echo.===============================================================================
echo.

if /i "!LanguagePackCode!" equ "X" (
	set LanguagePackCode=
	goto :Stop
)

if "!LanguagePackCode!" equ "" (
	set LanguagePackCode=
	goto :Stop
)

for %%# in (
	IntLanguagePacksBoot
	IntLanguagePacksInstall
	IntLanguagePacksRecovery
) do (
	if "!%%#!" equ "+" (
		cls
		echo.===============================================================================
		if "%%#" equ "IntLanguagePacksBoot" echo.%txtIntegrateLangPack_17%
		if "%%#" equ "IntLanguagePacksInstall" echo.%txtIntegrateLangPack_18%
		if "%%#" equ "IntLanguagePacksRecovery" echo.%txtIntegrateLangPack_19%
		echo.===============================================================================
		echo.

		:: Getting Source Image Index Architecture
		if "%%#" equ "IntLanguagePacksBoot" (
			call :GetImageArchitecture "%BootWim%", 1 >nul
		) else (
			call :GetImageArchitecture "%InstallWim%", !SpecifiedSourceIndex! >nul
		)

		:: Settings Windows Language Packs folder path
		if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" set "LanguagePacks=%Packs%\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!"
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" set "LanguagePacks=%Packs%\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!"

		:: Checking whether Windows PE Language Packs folder is empty
		if "%%#" equ "IntLanguagePacksBoot" (
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType:~,6%" neq "Server" if not exist "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType:~,6%" equ "Server" if not exist "!LanguagePacks!\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%PackageArchitecture%" neq "arm" if not exist "!LanguagePacks!\WinPE-Rejuv-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Rejuv-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" neq "Server" if not exist "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" equ "Server" if not exist "!LanguagePacks!\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%PackageArchitecture%" neq "arm" if not exist "!LanguagePacks!\WinPE-StorageWMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-StorageWMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-ATBroker-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-ATBroker-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-AudioCore-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-AudioCore-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-AudioDrivers-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-AudioDrivers-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-Narrator-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Narrator-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType:~,6%" neq "Server" if not exist "%BootMount%\2\Windows\servicing\Packages\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" if not exist "%Packs%\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (

				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType:~,6%" neq "Server" if not exist "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType:~,6%" equ "Server" if not exist "%BootMount%\2\Windows\servicing\Packages\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" if not exist "%Packs%\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType:~,6%" equ "Server" if not exist "!LanguagePacks!\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "%BootMount%\2\Windows\servicing\Packages\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" if not exist "%Packs%\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (

				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if "%ImageBuild%" leq "22621" (
				for /d %%i in (de-DE, en-GB, es-ES, es-MX, fr-CA, fr-FR, it-IT, ja-JP, ko-KR, pl-PL, pt-BR, pt-PT, ru-RU, zh-CN, zh-HK, zh-TW) do (
					if "!LanguagePackCode!" equ "%%i" if not exist "!LanguagePacks!\WinPE-Speech-TTS-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
						echo.%Globalintegratlangpack01%
						echo.
						echo."WinPE-Speech-TTS-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
						echo.
						echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
						goto :Stop
					)
				)
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-Speech-TTS-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Speech-TTS-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-SRH-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SRH-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
		)

		:: Checking whether Windows Language or Language Features Packs folder is empty
		if "%%#" equ "IntLanguagePacksInstall" (
			if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType%" equ "Client" if not exist "!LanguagePacks!\Microsoft-Windows-Client-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-Client-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType%" equ "Embedded" if not exist "!LanguagePacks!\Microsoft-Windows-Embedded-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-Embedded-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType:~,6%" equ "Server" if not exist "!LanguagePacks!\Microsoft-Windows-Server-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-Server-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" neq "Server" if not exist "!LanguagePacks!\Microsoft-Windows-Client-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-Client-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" equ "Server" if not exist "!LanguagePacks!\Microsoft-Windows-Server-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-Server-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType%" equ "Client" if not exist "!LanguagePacks!\Microsoft-Windows-Client-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-Client-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType:~,6%" equ "Server" if not exist "!LanguagePacks!\Microsoft-Windows-Server-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-Server-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
		)

		:: Checking whether Windows PE Language Packs folder is empty
		if "%%#" equ "IntLanguagePacksRecovery" (
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w7" if not exist "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-Rejuv-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Rejuv-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%PackageArchitecture%" neq "arm" if "%ImageInstallationType:~,6%" neq "Server" if not exist "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" equ "Server" if not exist "!LanguagePacks!\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if "%PackageArchitecture%" neq "arm" if not exist "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-StorageWMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-StorageWMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" equ "w81" if not exist "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "22621" if not exist "!LanguagePacks!\WinPE-AppxDeployment-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-AppxDeployment-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17134" if not exist "!LanguagePacks!\WinPE-AppxPackaging-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-AppxPackaging-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-ATBroker-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-ATBroker-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-AudioCore-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-AudioCore-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-AudioDrivers-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-AudioDrivers-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-HTA-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-HTA-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-Narrator-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Narrator-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17134" if not exist "!LanguagePacks!\WinPE-OpcServices-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-OpcServices-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-Rejuv-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Rejuv-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if "%ImageBuild%" leq "22621" (
				for /d %%i in (de-DE, en-GB, es-ES, es-MX, fr-CA, fr-FR, it-IT, ja-JP, ko-KR, pl-PL, pt-BR, pt-PT, ru-RU, zh-CN, zh-HK, zh-TW) do (
					if "!LanguagePackCode!" equ "%%i" if not exist "!LanguagePacks!\WinPE-Speech-TTS-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
						echo.%Globalintegratlangpack01%
						echo.
						echo."WinPE-Speech-TTS-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
						echo.
						echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
						goto :Stop
					)
				)
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-Speech-TTS-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-Speech-TTS-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if not exist "!LanguagePacks!\WinPE-SRH-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SRH-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-StorageWMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-StorageWMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "14393" if not exist "!LanguagePacks!\WinPE-WiFi-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WiFi-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "22621" if not exist "!LanguagePacks!\WinPE-WindowsUpdate-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WindowsUpdate-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.%Globalintegratlangpack01%
				echo.
				echo."WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.
				echo.%GlobalPleaseCopyFileto% ^<Packs\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\!LanguagePackCode!^> %GlobalFolder%
				goto :Stop
			)
		)
		echo.-------------------------------------------------------------------------------
		if "%%#" equ "IntLanguagePacksBoot" echo.%txtIntegrateLangPack_20%
		if "%%#" equ "IntLanguagePacksInstall" echo.%txtIntegrateLangPack_21%
		if "%%#" equ "IntLanguagePacksRecovery" echo.%txtIntegrateLangPack_22%
		echo.-------------------------------------------------------------------------------
		echo.
		if "%%#" equ "IntLanguagePacksBoot" (
			echo.    %GlobalImage% boot.wim
			echo.    %GlobalImageIndex% 1, 2
		)
		if "%%#" equ "IntLanguagePacksInstall" (
			echo.    %GlobalImage% install.wim
			echo.    %GlobalImageIndex% %ImageIndexNo%
		)
		if "%%#" equ "IntLanguagePacksRecovery" (
			echo.    %GlobalImage% WinRE.wim
			echo.    %GlobalImageIndex% 1
		)
		echo.    %GlobalImageArchitecture% %ImageArchitecture%
		echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
		echo.
		echo.-------------------------------------------------------------------------------
		if "%%#" equ "IntLanguagePacksBoot" echo.%txtIntegrateLangPack_27%
		if "%%#" equ "IntLanguagePacksInstall" echo.%txtIntegrateLangPack_28%
		if "%%#" equ "IntLanguagePacksRecovery" echo.%txtIntegrateLangPack_29%
		echo.-------------------------------------------------------------------------------
		echo.
		if "%%#" equ "IntLanguagePacksBoot" (
			for /l %%i in (1, 1, 2) do (
				echo.=============================[%GlobalBootWimIndex% %%i]=============================
				echo.
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_30pos01% [!LanguagePackCode!] %Globalintegratlangpack03%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"

				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
					call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

					if "%ImageBuild%" geq "15063" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateLangPack_31% [!LanguagePackCode!] %Globalintegratlangpack03%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-ATBroker-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateLangPack_32% [!LanguagePackCode!] %Globalintegratlangpack03%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-AudioCore-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateLangPack_33% [!LanguagePackCode!] %Globalintegratlangpack03%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-AudioDrivers-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
					)
				)

				if "%SelectedSourceOS%" neq "w7" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_34% [!LanguagePackCode!] %Globalintegratlangpack03%
					echo.-------------------------------------------------------------------------------
					if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
					if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_35% [!LanguagePackCode!] %Globalintegratlangpack03%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-Narrator-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				if "%SelectedSourceOS%" equ "w81" if exist "!LanguagePacks!\WinPE-IbsProvider-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_36% [!LanguagePackCode!] %Globalintegratlangpack03%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-IbsProvider-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				)

				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_37% [!LanguagePackCode!] %Globalintegratlangpack03%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

				if "%SelectedSourceOS%" neq "w7" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_38% [!LanguagePackCode!] %Globalintegratlangpack03%
					echo.-------------------------------------------------------------------------------
					if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
					if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)
			)

			echo.=============================[%GlobalBootWimIndex% 2]=============================
			echo.
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "%BootMount%\2\Windows\servicing\Packages\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_39%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%BootMount%\2", "%Packs%\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_40% [!LanguagePackCode!] %Globalintegratlangpack03%
			echo.-------------------------------------------------------------------------------
			if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

			if "%ImageInstallationType:~,6%" neq "Server" (
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "%BootMount%\2\Windows\servicing\Packages\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_41%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%BootMount%\2", "%Packs%\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_42% [!LanguagePackCode!] %Globalintegratlangpack03%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			if "%ImageInstallationType:~,6%" equ "Server" (
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "%BootMount%\2\Windows\servicing\Packages\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_43%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%BootMount%\2", "%Packs%\LanguagePacks\%SelectedSourceOS%\%PackageVersion%\%ImageArchitecture%\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_44% [!LanguagePackCode!] %Globalintegratlangpack03%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\2", "!LanguagePacks!\WinPE-Setup-Server-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			for /l %%i in (1, 1, 2) do (
				echo.=============================[%GlobalBootWimIndex% %%i]=============================
				echo.
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if "%ImageBuild%" leq "22621" (
					for /d %%z in (de-DE, en-GB, es-ES, es-MX, fr-CA, fr-FR, it-IT, ja-JP, ko-KR, pl-PL, pt-BR, pt-PT, ru-RU, zh-CN, zh-HK, zh-TW) do (
						if "!LanguagePackCode!" equ "%%z" (
							echo.-------------------------------------------------------------------------------
							echo.%txtIntegrateLangPack_45% [!LanguagePackCode!] %Globalintegratlangpack03%
							echo.-------------------------------------------------------------------------------
							call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-Speech-TTS-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
						)
					)
				)

				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_45% [!LanguagePackCode!] %Globalintegratlangpack03%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-Speech-TTS-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_46% [!LanguagePackCode!] %Globalintegratlangpack03%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-SRH-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_47% [!LanguagePackCode!] %Globalintegratlangpack03%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_48% [!LanguagePackCode!] %Globalintegratlangpack03%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_49% [!LanguagePackCode!] %Globalintegratlangpack03%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

				for /d %%z in (ja-JP, ko-KR, zh-HK, zh-CN, zh-TW) do (
					if "!LanguagePackCode!" equ "%%z" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateLangPack_50% [!LanguagePackCode!] %Globalintegratlangpack03%
						echo.-------------------------------------------------------------------------------
						if "%SelectedSourceOS%" equ "w7" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-FontSupport-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
						if "%SelectedSourceOS%" equ "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-FontSupport-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
						if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%BootMount%\%%i", "!LanguagePacks!\WinPE-FontSupport-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
					)
				)

				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_51%
				echo.-------------------------------------------------------------------------------
				echo.
				echo.%txtIntegrateLangPack_52%
				call :GetPackages "%BootMount%\%%i", "Boot-%%i.txt"
				echo.
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_53%
			echo.-------------------------------------------------------------------------------
			%DISM% /Image:"%BootMount%\2" /Gen-LangINI /Distribution:"%DVD%"
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_54pos01% [!LanguagePackCode!] %txtIntegrateLangPack_54pos02%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.%txtIntegrateLangPack_55pos01% [!LanguagePackCode!] %txtIntegrateLangPack_55pos02%
			call :RemoveFolder "%_TMP%\LanguagePack"
			call :CreateFolder "%_TMP%\LanguagePack"

			if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
				if "%SelectedSourceOS%" equ "w7" expand "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
				if "%SelectedSourceOS%" equ "w81" expand "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
				echo.
				echo.%Globalintegratlangpack04%
				call :CreateFolder "%DVD%\sources\!LanguagePackCode!"
				if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" neq "Server" call :CreateFolder "%DVD%\sources\cli"
				if /i "%ImageArchitecture%" equ "x86" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				if "%SelectedSourceOS%" equ "w81" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\etwproviders\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
				if "%SelectedSourceOS%" equ "w81" call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				if "%SelectedSourceOS%" equ "w81" call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
				if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" neq "Server" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\cli\*.*" "%DVD%\sources\cli" >nul
				if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				if "%SelectedSourceOS%" equ "w81" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
				if "%SelectedSourceOS%" equ "w81" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				if "%SelectedSourceOS%" equ "w81" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				echo.
			)

			if "%SelectedSourceOS%" equ "w10" if "%ImageBuild%" leq "15063" (
				expand "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
				echo.
				echo.%Globalintegratlangpack04%
				call :CreateFolder "%DVD%\sources\!LanguagePackCode!"
				if "%ImageBuild%" leq "10586" if "%ImageInstallationType:~,6%" neq "Server" call :CreateFolder "%DVD%\sources\cli\!LanguagePackCode!"
				if /i "%ImageArchitecture%" equ "x86" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-shmig-dl\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\etwproviders\!LanguagePackCode!"
				if "%ImageBuild%" neq "10240" if "%ImageBuild%" neq "10586" if /i "%ImageArchitecture%" equ "x64" call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
				if "%ImageBuild%" leq "10586" if "%ImageInstallationType:~,6%" neq "Server" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\cli\*.*" "%DVD%\sources\cli\!LanguagePackCode!" >nul
				if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-shmig-dl\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-shmig-dl\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
				if "%ImageBuild%" neq "10240" if "%ImageBuild%" neq "10586" if /i "%ImageArchitecture%" equ "x64" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-fabric-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-shmig\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				echo.
			)

			if "%SelectedSourceOS%" equ "w10" if "%ImageBuild%" geq "16299" if "%ImageBuild%" leq "17763" if "!LanguagePackCode!" neq "en-US" (
				expand "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
				echo.
				echo.%Globalintegratlangpack04%
				call :CreateFolder "%DVD%\sources\!LanguagePackCode!"
				if "%ImageBuild%" leq "17134" if /i "%ImageArchitecture%" equ "x86" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!"
				if "%ImageBuild%" leq "17134" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\etwproviders\!LanguagePackCode!"
				if "%ImageBuild%" equ "16299" if /i "%ImageArchitecture%" equ "x64" call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!"
				if "%ImageBuild%" leq "17134" call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
				if "%ImageBuild%" leq "17134" if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
				if "%ImageBuild%" leq "17134" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
				if "%ImageBuild%" equ "16299" if /i "%ImageArchitecture%" equ "x64" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-fabric-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-shmig\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!" >nul
				if "%ImageBuild%" leq "17134" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				echo.
			)

			echo.%txtIntegrateLangPack_56%
			copy /y "%DVD%\sources\lang.ini" "%BootMount%\2\sources\lang.ini" >nul
			echo.
		)

		if "%%#" equ "IntLanguagePacksInstall" (
			for /l %%i in (1, 1, !ImageCount!) do (
				if exist "%InstallMount%\%%i\" (
					call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_57% [!LanguagePackCode!]...
					echo.-------------------------------------------------------------------------------
					if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType%" equ "Client" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-Client-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
					if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType%" equ "Embedded" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-Embedded-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
					if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType:~,6%" equ "Server" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-Server-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
					if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType%" equ "Client" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-Client-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
					if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" equ "Server" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-Server-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"

					if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
						if "%ImageInstallationType%" equ "Client" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-Client-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
						if "%ImageInstallationType:~,6%" equ "Server" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-Server-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

						if exist "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Basic-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
							echo.-------------------------------------------------------------------------------
							echo.%txtIntegrateLangPack_58% [!LanguagePackCode!]...
							echo.-------------------------------------------------------------------------------
							if "%ImageBuild%" leq "17134" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Basic-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"

							if "%ImageBuild%" geq "17763" (
								call :CreateFolder "%_TMP%\LanguagePacks"
								copy /y "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Basic-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-Basic-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul
								call :AddPackage "%InstallMount%\%%i", "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-Basic-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
							)
						)

						if exist "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Handwriting-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
							echo.-------------------------------------------------------------------------------
							echo.%txtIntegrateLangPack_59% [!LanguagePackCode!]...
							echo.-------------------------------------------------------------------------------
							if "%ImageBuild%" leq "17134" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Handwriting-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"

							if "%ImageBuild%" geq "17763" (
								call :CreateFolder "%_TMP%\LanguagePacks"
								copy /y "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Handwriting-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-Handwriting-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul
								call :AddPackage "%InstallMount%\%%i", "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-Handwriting-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
							)
						)

						if exist "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-OCR-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
							echo.-------------------------------------------------------------------------------
							echo.%txtIntegrateLangPack_60% [!LanguagePackCode!]...
							echo.-------------------------------------------------------------------------------
							if "%ImageBuild%" leq "17134" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-OCR-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"

							if "%ImageBuild%" geq "17763" (
								call :CreateFolder "%_TMP%\LanguagePacks"
								copy /y "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-OCR-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-OCR-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul
								call :AddPackage "%InstallMount%\%%i", "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-OCR-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
							)
						)

						if exist "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-TextToSpeech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
							echo.-------------------------------------------------------------------------------
							echo.%txtIntegrateLangPack_61% [!LanguagePackCode!]...
							echo.-------------------------------------------------------------------------------
							if "%ImageBuild%" leq "17134" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-TextToSpeech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"

							if "%ImageBuild%" geq "17763" (
								call :CreateFolder "%_TMP%\LanguagePacks"
								copy /y "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-TextToSpeech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-TextToSpeech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul
								call :AddPackage "%InstallMount%\%%i", "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-TextToSpeech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
							)
						)

						if exist "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Speech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
							echo.-------------------------------------------------------------------------------
							echo.%txtIntegrateLangPack_62% [!LanguagePackCode!]...
							echo.-------------------------------------------------------------------------------
							if "%ImageBuild%" leq "17134" call :AddPackage "%InstallMount%\%%i", "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Speech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"

							if "%ImageBuild%" geq "17763" (
								call :CreateFolder "%_TMP%\LanguagePacks"
								copy /y "!LanguagePacks!\Microsoft-Windows-LanguageFeatures-Speech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-Speech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul
								call :AddPackage "%InstallMount%\%%i", "%_TMP%\LanguagePacks\Microsoft-Windows-LanguageFeatures-Speech-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
							)
						)
					)

					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_63%
					echo.-------------------------------------------------------------------------------
					%DISM% /Image:"%InstallMount%\%%i" /Gen-LangINI /Distribution:"%DVD%"
					echo.
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_64%
					echo.-------------------------------------------------------------------------------
					echo.
					echo.%txtIntegrateLangPack_65%
					call :GetPackages "%InstallMount%\%%i", "LanguagePacks_Install-%%i.txt"
					echo.
				)
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_54pos01% [!LanguagePackCode!] %txtIntegrateLangPack_54pos02%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.%txtIntegrateLangPack_66pos01% [!LanguagePackCode!] %txtIntegrateLangPack_55pos02%
			call :RemoveFolder "%_TMP%\LanguagePack"
			call :CreateFolder "%_TMP%\LanguagePack"
			if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType%" equ "Client" expand "!LanguagePacks!\Microsoft-Windows-Client-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
			if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType%" equ "Embedded" expand "!LanguagePacks!\Microsoft-Windows-Embedded-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
			if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType:~,6%" equ "Server" expand "!LanguagePacks!\Microsoft-Windows-Server-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
			if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType%" equ "Client" expand "!LanguagePacks!\Microsoft-Windows-Client-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
			if "%SelectedSourceOS%" equ "w81" if "%ImageInstallationType:~,6%" equ "Server" expand "!LanguagePacks!\Microsoft-Windows-Server-Refresh-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType%" equ "Client" expand "!LanguagePacks!\Microsoft-Windows-Client-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageInstallationType:~,6%" equ "Server" expand "!LanguagePacks!\Microsoft-Windows-Server-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" -f:* "%_TMP%\LanguagePack" >nul
			echo.
			echo.%Globalintegratlangpack04%
			call :CreateFolder "%DVD%\sources\!LanguagePackCode!"

			if "%SelectedSourceOS%" equ "w7" (
				if /i "%ImageArchitecture%" equ "x86" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\etwproviders\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
				if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul

				if "%ImageInstallationType%" neq "Embedded" (
					call :CreateFolder "%DVD%\sources\sp1\!LanguagePackCode!"
					call :CreateFolder "%DVD%\sources\sp1\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!"
					call :CreateFolder "%DVD%\sources\sp1\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
					call :CreateFolder "%DVD%\sources\sp1\etwproviders\!LanguagePackCode!"
					call :CreateFolder "%DVD%\sources\sp1\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
					xcopy /y "%_TMP%\LanguagePack\sp1\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\sp1\!LanguagePackCode!" >nul
					if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\sp1\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\sp1\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\sp1\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\sp1\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\sp1\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\sp1\etwproviders\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\sp1\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\sp1\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
					echo.%txtCopyingLocalizedWindowsSetup%
					call :CreateFolder "%DVD%\sources\license\!LanguagePackCode!"
					call :CreateFolder "%DVD%\sources\sp1\license\!LanguagePackCode!"
					xcopy /y "%_TMP%\LanguagePack\sources\license\!LanguagePackCode!\*.*" "%DVD%\sources\license\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\sp1\sources\license\!LanguagePackCode!\*.*" "%DVD%\sources\sp1\license\!LanguagePackCode!" >nul
				)
			)

			if "%SelectedSourceOS%" equ "w81" (
				if "%ImageInstallationType:~,6%" neq "Server" call :CreateFolder "%DVD%\sources\cli\!LanguagePackCode!"
				if /i "%ImageArchitecture%" equ "x86" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\etwproviders\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
				if "%ImageInstallationType:~,6%" neq "Server" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\cli\*.*" "%DVD%\sources\cli\!LanguagePackCode!" >nul
				if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
			)

			if "%SelectedSourceOS%" equ "w10" if "%ImageBuild%" leq "15063" (
				if "%ImageBuild%" leq "10586" if "%ImageInstallationType:~,6%" neq "Server" call :CreateFolder "%DVD%\sources\cli\!LanguagePackCode!"
				if /i "%ImageArchitecture%" equ "x86" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-shmig-dl\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\etwproviders\!LanguagePackCode!"
				if "%ImageBuild%" neq "10240" if "%ImageBuild%" neq "10586" if /i "%ImageArchitecture%" equ "x64" call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!"
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
				if "%ImageBuild%" leq "10586" if "%ImageInstallationType:~,6%" neq "Server" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\cli\*.*" "%DVD%\sources\cli\!LanguagePackCode!" >nul
				if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-shmig-dl\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-shmig-dl\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
				if "%ImageBuild%" neq "10240" if "%ImageBuild%" neq "10586" if /i "%ImageArchitecture%" equ "x64" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-fabric-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-shmig\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
				xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
			)

			if "%SelectedSourceOS%" equ "w10" if "%ImageBuild%" geq "16299" if "%ImageBuild%" leq "20348" (
				if /i "%ImageArchitecture%" equ "x86" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!"
				if "%ImageBuild%" leq "17134" call :CreateFolder "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\etwproviders\!LanguagePackCode!"
				if "%ImageBuild%" equ "16299" if /i "%ImageArchitecture%" equ "x64" call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!"
				if "%ImageBuild%" leq "17134" call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!"

				if "!LanguagePackCode!" neq "en-US" (
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
					if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
					if "%ImageBuild%" leq "17134" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
					if "%ImageBuild%" equ "16299" if /i "%ImageArchitecture%" equ "x64" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-fabric-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-shmig\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!" >nul
					if "%ImageBuild%" leq "17134" xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				)

				if "!LanguagePackCode!" equ "en-US" (
					xcopy /y "%_TMP%\LanguagePack\setup\sources\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
					if /i "%ImageArchitecture%" equ "x86" xcopy /y "%_TMP%\LanguagePack\setup\sources\dlmanifests\microsoft-windows-iasserver-migplugin\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-iasserver-migplugin\!LanguagePackCode!" >nul
					if "%ImageBuild%" leq "17134" xcopy /y "%_TMP%\LanguagePack\setup\sources\dlmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\dlmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
					if "%ImageBuild%" equ "16299" if /i "%ImageArchitecture%" equ "x64" xcopy /y "%_TMP%\LanguagePack\setup\sources\replacementmanifests\microsoft-windows-fabric-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-fabric-core\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\replacementmanifests\microsoft-windows-shmig\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!" >nul
					if "%ImageBuild%" leq "17134" xcopy /y "%_TMP%\LanguagePack\setup\sources\replacementmanifests\microsoft-windows-storagemigration\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-storagemigration\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				)
			)

			if "%SelectedSourceOS%" equ "w11" (
				call :CreateFolder "%DVD%\sources\etwproviders\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!"
				call :CreateFolder "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!"

				if "!LanguagePackCode!" neq "en-US" (
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-shmig\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\!LanguagePackCode!\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				)

				if "!LanguagePackCode!" equ "en-US" (
					xcopy /y "%_TMP%\LanguagePack\setup\sources\*.*" "%DVD%\sources\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\etwproviders\*.*" "%DVD%\sources\etwproviders\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\replacementmanifests\microsoft-windows-offlinefiles-core\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-offlinefiles-core\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\replacementmanifests\microsoft-windows-shmig\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-shmig\!LanguagePackCode!" >nul
					xcopy /y "%_TMP%\LanguagePack\setup\sources\replacementmanifests\microsoft-windows-sxs\*.*" "%DVD%\sources\replacementmanifests\microsoft-windows-sxs\!LanguagePackCode!" >nul
				)
			)
			echo.
		)

		if "%%#" equ "IntLanguagePacksRecovery" if "%IsRecoveryImageSelected%" equ "Yes" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_30pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
			echo.-------------------------------------------------------------------------------
			if "%SelectedSourceOS%" equ "w7" call :AddPackage "%WinReMount%", "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"

			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
				call :AddPackage "%WinReMount%", "!LanguagePacks!\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

				if "%ImageBuild%" geq "17134" (
					if exist "!LanguagePacks!\Microsoft-Windows-WinPE-AppxPackaging-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateLangPack_68pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%WinReMount%", "!LanguagePacks!\Microsoft-Windows-WinPE-AppxPackaging-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
					)

					if exist "!LanguagePacks!\Microsoft-Windows-WinPE-OpcServices-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateLangPack_69pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%WinReMount%", "!LanguagePacks!\Microsoft-Windows-WinPE-OpcServices-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
					)

					if "%ImageBuild%" geq "22621" if exist "!LanguagePacks!\WinPE-AppxDeployment-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateLangPack_70pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-AppxDeployment-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
					)

					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_68pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-AppxPackaging-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				if "%ImageBuild%" geq "15063" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_31% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-ATBroker-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_32% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-AudioCore-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_33% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-AudioDrivers-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)
			)

			if "%SelectedSourceOS%" neq "w7" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_34% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-EnhancedStorage-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			for /d %%z in (ja-JP, ko-KR, zh-HK, zh-CN, zh-TW) do (
				if "!LanguagePackCode!" equ "%%z" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_50% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
					echo.-------------------------------------------------------------------------------
					if "%SelectedSourceOS%" equ "w7" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-FontSupport-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
					if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-FontSupport-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
					if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-FontSupport-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)
			)

			if "%SelectedSourceOS%" equ "w81" if exist "!LanguagePacks!\WinPE-IbsProvider-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_71pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-IbsProvider-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
			)

			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_72pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-HTA-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

				if "%ImageBuild%" geq "15063" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_35% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Narrator-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				if "%ImageBuild%" geq "17134" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateLangPack_69pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-OpcServices-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				)
			)

			if "%SelectedSourceOS%" neq "w7" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_73pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Rejuv-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Rejuv-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_37% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
			echo.-------------------------------------------------------------------------------
			if "%SelectedSourceOS%" equ "w7" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Scripting-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

			if "%SelectedSourceOS%" equ "w7" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_40% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Setup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_42% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Setup-Client-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
			)

			if "%SelectedSourceOS%" neq "w7" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_38% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-SecureStartup-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" if "%ImageBuild%" leq "22621" (
				for /d %%z in (de-DE, en-GB, es-ES, es-MX, fr-CA, fr-FR, it-IT, ja-JP, ko-KR, pl-PL, pt-BR, pt-PT, ru-RU, zh-CN, zh-HK, zh-TW) do (
					if "!LanguagePackCode!" equ "%%z" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateLangPack_45% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Speech-TTS-!LanguagePackCode!-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
					)
				)
			)

			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "15063" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_45% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-Speech-TTS-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_46% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-SRH-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_47% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
			echo.-------------------------------------------------------------------------------
			if "%SelectedSourceOS%" equ "w7" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-SRT-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

			if "%SelectedSourceOS%" neq "w7" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_49% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-StorageWMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
				if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-StorageWMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_48% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
			echo.-------------------------------------------------------------------------------
			if "%SelectedSourceOS%" equ "w7" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-WDS-Tools-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if exist "!LanguagePacks!\WinPE-WiFi-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_74pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-WiFi-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "22621" if exist "!LanguagePacks!\WinPE-WindowsUpdate-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateLangPack_754pos01% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-WindowsUpdate-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_49% [!LanguagePackCode!] %txtIntegrateLangPack_67pos02%
			echo.-------------------------------------------------------------------------------
			if "%SelectedSourceOS%" equ "w7" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.1.7601.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" equ "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~6.3.9600.%PackageServicePackBuild%.cab"
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :AddPackage "%WinReMount%", "!LanguagePacks!\WinPE-WMI-Package~31bf3856ad364e35~%PackageArchitecture%~!LanguagePackCode!~%PackageVersion%.%PackageServicePackBuild%.cab"

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateLangPack_76%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.%txtIntegrateLangPack_77%
			echo.
			call :GetPackages "%WinReMount%", "LanguagePacks_Install_WinRE.txt"
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateLangPack_78%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%txtIntegrateLangPackCleaningUpTemporary%
		call :RemoveFolder "%_TMP%\LanguagePacks"
		echo.
		echo.-------------------------------------------------------------------------------
		if "%%#" equ "IntLanguagePacksBoot" echo.%txtIntegrateLangPack_79%
		if "%%#" equ "IntLanguagePacksInstall" echo.%txtIntegrateLangPack_80%
		if "%%#" equ "IntLanguagePacksRecovery" echo.%txtIntegrateLangPack_81%
		echo.-------------------------------------------------------------------------------
	)
)

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Drivers Menu
::-------------------------------------------------------------------------------------------
:IntDriversMenu

set "CurrentMenu=IntDriversMenu"

cls
echo.===============================================================================
echo.%txtIntegrateDriversMenu%
echo.===============================================================================
echo.

set /A count=1
for %%n in (
	DriversBoot
	DriversInstall
	DriversRecovery
	ExportHostDrivers
) do (
	set "OptionID=!count!"

	if "%%n" equ "DriversBoot" (
		if "%IsBootImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!IntDriversBoot!^)%txtIntegrateDrivers_01%
	)
	if "%%n" equ "DriversInstall" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!IntDriversInstall!^)%txtIntegrateDrivers_02%
	)
	if "%%n" equ "DriversRecovery" (
		if "%IsRecoveryImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!IntDriversRecovery!^)%txtIntegrateDrivers_03%
	)
	if "%%n" equ "ExportHostDrivers" (
		set "%%n=!count!"
		if "!%%n!" neq "" (
			echo.
			echo.  [!OptionID!]    %txtIntegrateDrivers_04%
		)
	)

	if "!%%n!" neq "" (
		echo.
		set /A count+=1
	)
)

if "%IsBootImageSelected%" equ "No" (
	echo.
	echo.         %GlobalCantIntegrate%
	echo.                                %txtBootImageOptions%
	echo.
	echo.         %GlobalIntegrateDriversBootNoMouted%
	echo.         %GlobalGoToolsMenuMountBoot%
	echo.
)
if "%IsRecoveryImageSelected%" equ "No" (
	echo.
	echo.         %GlobalCantIntegrate%
	echo.                                %txtInstallandWinReImageOptions%
	echo.
	echo.         %GlobalWinREnoMounted%
	echo.         %GlobalGoToolsMenuMountWinRE%
	echo.
)
echo.
echo.
echo.
echo.
echo.  [S]    %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.
echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntegrateMenu
	if /i "%%c" equ "D" (
		for %%i in (
			F_IntDriversMenu
			DriversBoot
			DriversInstall
			DriversRecovery
		) do (
			set "%%i=%%i"
			if "!%%i:~,2!" equ "F_" (
				set "%%i=-"
			) else (
				set "Int%%i=-"
				set %%i=
			)
		)
	)
	if /i "%%c" equ "S" (
		for %%i in (
			DriversBoot
			DriversInstall
			DriversRecovery
		) do (
			if "!%%i!" neq "" (
				set "Int%%i=+"
			)
		)
	)
	if "%%c" equ "!DriversBoot!" (
		if "!IntDriversBoot!" equ "-" (
			set "IntDriversBoot=+"
		) else (
			set "IntDriversBoot=-"
		)
	)
	if "%%c" equ "!DriversInstall!" (
		if "!IntDriversInstall!" equ "-" (
			set "IntDriversInstall=+"
		) else (
			set "IntDriversInstall=-"
		)
	)
	if "%%c" equ "!DriversRecovery!" (
		if "!IntDriversRecovery!" equ "-" (
			set "IntDriversRecovery=+"
		) else (
			set "IntDriversRecovery=-"
		)
	)
	if "%%c" equ "!ExportHostDrivers!" (
		call :ExportHostDrivers
	)
)

:: Return to IntDriversMenu
rem goto :IntDriversMenu
goto :!CurrentMenu!

:IntDrivers

cls

for %%d in (IntDriversBoot;IntDriversInstall;IntDriversRecovery) do (
	if "!%%#!" neq "-" set "IntDrivers=1"
)

if "!IntDrivers!" equ "" (
	echo.%txtIntegrateDriversNoDriversSelected%
	goto :Stop
)

for %%d in (IntDriversBoot;IntDriversInstall;IntDriversRecovery) do (
	if "!%%d!" equ "+" (
		cls
		echo.===============================================================================
		if "%%d" equ "IntDriversBoot" echo.%txtIntegrateDrivers_11%
		if "%%d" equ "IntDriversInstall" echo.%txtIntegrateDrivers_12%
		if "%%d" equ "IntDriversRecovery" echo.%txtIntegrateDrivers_13%
		echo.===============================================================================
		echo.

		:: Getting Source Image Index Architecture
		if "%%d" equ "IntDriversBoot" (
			call :GetImageArchitecture "%BootWim%", 1 >nul
		) else (
			call :GetImageArchitecture "%InstallWim%", !SpecifiedSourceIndex! >nul
		)

		:: Settings Windows Drivers folder path
		if "%%d" neq "IntDriversInstall" set "Drivers=%Drivers%\WinPE\%SelectedSourceOS%\%ImageArchitecture%"
		if "%%d" equ "IntDriversInstall" set "Drivers=%Drivers%\Install\%SelectedSourceOS%\%ImageArchitecture%"

		:: Checking whether Windows Drivers folder is empty
		for /f %%i in ('dir /b /s /a:-d "!Drivers!\*.*" 2^>nul ^| find.exe /I /v /c ""') do (
			if "%%i" equ "0" (
				if "%%d" equ "IntDriversBoot" echo.%txtIntegrateDrivers_14pos01% ^<Drivers\WinPE\%SelectedSourceOS%\%ImageArchitecture%^> %txtIntegrateDrivers_14pos02%
				if "%%d" equ "IntDriversInstall" echo.%txtIntegrateDrivers_14pos01% ^<Drivers\Install\%SelectedSourceOS%\%ImageArchitecture%^> %txtIntegrateDrivers_14pos02%
				if "%%d" equ "IntDriversRecovery" echo.%txtIntegrateDrivers_14pos01% ^<Drivers\WinPE\%SelectedSourceOS%\%ImageArchitecture%^> %txtIntegrateDrivers_14pos02%
				echo.
				echo.%txtIntegrateDrivers_15%
				goto :Stop
			)
		)

		echo.-------------------------------------------------------------------------------
		if "%%d" equ "IntDriversBoot" echo.%txtIntegrateDrivers_16%
		if "%%d" equ "IntDriversInstall" echo.%txtIntegrateDrivers_17%
		if "%%d" equ "IntDriversRecovery" echo.%txtIntegrateDrivers_18%
		echo.-------------------------------------------------------------------------------
		echo.
		if "%%d" equ "IntDriversBoot" (
			echo.    %GlobalImage% boot.wim
			echo.    %GlobalImageIndex% 2
		)
		if "%%d" equ "IntDriversInstall" (
			echo.    %GlobalImage% install.wim
			echo.    %GlobalImageIndex% !ImageIndexNo!
		)
		if "%%d" equ "IntDriversRecovery" (
			echo.    %GlobalImage% WinRE.wim
			echo.    %GlobalImageIndex% !SpecifiedSourceIndex!
		)
		echo.    %GlobalImageArchitecture% %ImageArchitecture%
		echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
		echo.
		echo.-------------------------------------------------------------------------------
		if "%%d" equ "IntDriversBoot" echo.%txtIntegrateDrivers_19%
		if "%%d" equ "IntDriversInstall" echo.%txtIntegrateDrivers_20%
		if "%%d" equ "IntDriversRecovery" echo.%txtIntegrateDrivers_21%
		echo.-------------------------------------------------------------------------------
		echo.

		if "%%d" equ "IntDriversBoot" (
			call :AddDriver "%BootMount%\2", "!Drivers!"
		)

		if "%%d" equ "IntDriversInstall" (
			for %%i in (!ImageIndexNo!) do (
				if exist "%InstallMount%\%%i\" (
					call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
					call :AddDriver "%InstallMount%\%%i", "!Drivers!"
				)
			)
		)

		if "%%d" equ "IntDriversRecovery" (
			if exist "%WinReMount%\Windows" (
				call :AddDriver "%WinReMount%", "!Drivers!"
			)
		)

		echo.-------------------------------------------------------------------------------
		if "%%d" equ "IntDriversBoot" echo.%txtIntegrateDrivers_22%
		if "%%d" equ "IntDriversInstall" echo.%txtIntegrateDrivers_23%
		if "%%d" equ "IntDriversRecovery" echo.%txtIntegrateDrivers_24%
		echo.-------------------------------------------------------------------------------
	)
)

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Export HostOS Drivers
::-------------------------------------------------------------------------------------------
:ExportHostDrivers

:: Checking whether or not it is possible to integrate the Drivers to be Exported.
if "%HostVersion%" equ "7 SP1" (
	set "DriverHostOS=w7"
	if "%SelectedSourceOS%" equ "w7" set "EnableOption=0"
	if "%SelectedSourceOS%" equ "w81" set "EnableOption=1"
	if "%SelectedSourceOS%" equ "w10" set "EnableOption=3"
	if "%SelectedSourceOS%" equ "w11" set "EnableOption=3"
)

if "%HostVersion%" equ "8.1" (
	set "DriverHostOS=w81"
	if "%SelectedSourceOS%" equ "w7" set "EnableOption=2"
	if "%SelectedSourceOS%" equ "w81" set "EnableOption=0"
	if "%SelectedSourceOS%" equ "w10" set "EnableOption=1"
	if "%SelectedSourceOS%" equ "w11" set "EnableOption=3"
)

if "%HostVersion%" equ "10" (
	set "DriverHostOS=w10"
	if "%SelectedSourceOS%" equ "w7" set "EnableOption=2"
	if "%SelectedSourceOS%" equ "w81" set "EnableOption=2"
	if "%SelectedSourceOS%" equ "w10" set "EnableOption=0"
	if "%SelectedSourceOS%" equ "w11" set "EnableOption=1"
)

if "%HostVersion%" equ "11" (
	set "DriverHostOS=w11"
	if "%SelectedSourceOS%" equ "w7" set "EnableOption=2"
	if "%SelectedSourceOS%" equ "w81" set "EnableOption=2"
	if "%SelectedSourceOS%" equ "w10" set "EnableOption=2"
	if "%SelectedSourceOS%" equ "w11" set "EnableOption=0"
)

if "%HostArchitecture%" neq "%ImageArchitecture%" (
	echo.
	echo.%txtIntegrateDrivers_25%
	echo.%txtIntegrateDrivers_26%
	echo.
	set "EnableOption=0"
	pause
)

if "!EnableOption!" equ "3" (
	echo.
	echo.%txtIntegrateDrivers_25%
	echo.%txtIntegrateDrivers_27% %HostVersion%.
	echo.
	set "EnableOption=0"
	pause
)

if "!EnableOption!" equ "2" (
	echo.
	echo.%txtIntegrateDrivers_25%
	echo.%txtIntegrateDrivers_27% %HostVersion%.
	echo.
	set "EnableOption=0"
	pause
)

set "HostOS_DriversPath=%Drivers%\Install\!DriverHostOS!\%HostArchitecture%"
set "SourceOS_DriversPath=%Drivers%\Install\%SelectedSourceOS%\%HostArchitecture%"

:: Decide whether you want to backup or integrate Drivers from the previous OS version.
if "!EnableOption!" equ "1" (
	echo.===============================================================================
	echo.%txtExportDrivers_01line01%
	echo.%txtExportDrivers_01line02%
	echo.===============================================================================
	echo. %txtExportDrivers_02line01%
	echo.       %txtExportDrivers_02line02pos01% %HostVersion% %txtExportDrivers_02line02pos02% "%HostBuild%" %txtExportDrivers_02line02pos03%
	echo.
	echo. %txtExportDrivers_03line01%
	echo. ^<.\Toolkit\Drivers\Install\%SelectedSourceOS%\%HostArchitecture%^> %txtExportDrivers_03line02%
	echo. %txtExportDrivers_03line03%
	echo.
	echo. [1]   %txtExportDrivers_04%
	echo.       %txtExportDrivers_05%
	echo.       %txtExportDrivers_06%
	echo.
	echo. [2]   %txtExportDrivers_05%
	echo.       %txtExportDrivers_07%
	echo.
	echo. [3]   %txtExportDrivers_07%
	echo.
	echo.
	echo. [R]   %GlobalOption_Return2Change%
	echo.
	echo.===============================================================================
	choice /C:321R /N /M "%GlobalEnterChoice% "
	if errorlevel 4 goto :!CurrentMenu!
	if errorlevel 3 (
		if exist "!HostOS_DriversPath!" (
			set /A Count=0
			for /f %%i in ('dir /b "!HostOS_DriversPath!\*.inf" 2^>nul') do (set /A Count+=1)
			if "!Count!" gtr "0" set BackupHostOS_DriversFolder=1
		)
		if exist "!SourceOS_DriversPath!" (
			set /A Count=0
			for /f %%i in ('dir /b "!SourceOS_DriversPath!\*.inf" 2^>nul') do (set /A Count+=1)
			if "!Count!" gtr "0" set BackupSourceOS_DriversFolder=1
		)
		set "CopyExportedDrivers=1"
	)
	if errorlevel 2 set "CopyExportedDrivers=1"
)

if "!BackupHostOS_DriversFolder!" neq "" (
	:: DateTime Version Stamp
	call :DateTimeStamp
	echo.
	echo.%txtExportDrivers_09%
	echo."!HostOS_DriversPath!"
	echo.        ^<".\Toolkit\Drivers\Install\!DriverHostOS!\%HostArchitecture%^>" ...
	echo.     %GlobalTo%
	echo.        ^<".\Toolkit\Drivers\Install\!DriverHostOS!\%HostArchitecture%_[!DateTimeStamp!]^>" ...
	ren "!HostOS_DriversPath!" "%HostArchitecture%_[!DateTimeStamp!]" >nul 2>&1
	echo.
)

if "!BackupSourceOS_DriversFolder!" neq "" (
	:: DateTime Version Stamp
	call :DateTimeStamp
	echo.
	echo.%txtExportDrivers_09%
	echo."!SourceOS_DriversPath!"
	echo.        ^<".\Toolkit\Drivers\Install\%SelectedSourceOS%\%HostArchitecture%^>" ...
	echo.     %GlobalTo%
	echo.        ^<".\Toolkit\Drivers\Install\%SelectedSourceOS%\%HostArchitecture%_[!DateTimeStamp!]^>" ...
	ren "!SourceOS_DriversPath!" "%HostArchitecture%_[!DateTimeStamp!]" >nul 2>&1
	echo.
)

call :CreateFolder "!HostOS_DriversPath!"
%DISM% /Online /Export-Driver /Destination:"!HostOS_DriversPath!"
echo.
if "!CopyExportedDrivers!" neq "" (
	call :CreateFolder "!SourceOS_DriversPath!"
	echo.%txtCopyingAllExportedDrivers%
	echo.        ^<".\Toolkit\Drivers\Install\!DriverHostOS!\%HostArchitecture%^>" ...
	echo.     %GlobalTo%
	echo.        ^<".\Toolkit\Drivers\Install\%SelectedSourceOS%\%HostArchitecture%^>" ...
	%XCopy% "!HostOS_DriversPath!\*.*" "!SourceOS_DriversPath!" >nul
	echo.
	echo.%txtExportDrivers_11%
	echo.
)

set BackupHostOS_DriversFolder=
set BackupSourceOS_DriversFolder=
set CopyExportedDrivers=
set HostOS_DriversPath=
set SourceOS_DriversPath=

if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

:: Return to Integrate Drivers Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft .NET Framework 3.5
::-------------------------------------------------------------------------------------------
:IntNetFX35

if "!T_EnableFeatures!" equ "-" cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_01%
echo.===============================================================================
echo.

:: Setting Microsoft .NET Framework 3.5 Feature Pack folder path according to Source Image Architecture
if "%SelectedSourceOS%" equ "w81" (
	if exist "%DVD%\sources\sxs" (
		set "NetFX35=%DVD%\sources\sxs"
	) else (
		set "NetFX35=%NetFX35%\%SelectedSourceOS%\%ImageArchitecture%"
	)
)
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if exist "%DVD%\sources\sxs\*.cab" (
		set NetFX35=
		set NetFX35_Lang=
		for /f "tokens=*" %%# in ('dir /B "%DVD%\sources\sxs\*.*" ^| findstr.exe /I "NetFX3"') do (
			if "%ImageBuild%" leq "16299" set "NetFX35=%DVD%\sources\sxs\%%~nx#"
			if "%ImageBuild%" geq "17134" (
				echo.%%#|findstr.exe /I "%PackageArchitecture% %ImageDefaultLanguage%"|findstr.exe /I /V "~~" >nul && (set "NetFX35_Lang=%DVD%\sources\sxs\%%~nx#")
				echo.%%#|findstr.exe /I "%PackageArchitecture% ~~"|findstr.exe /I /V "%ImageDefaultLanguage%" >nul && (set "NetFX35=%DVD%\sources\sxs\%%~nx#")
			)
		)
	) else (
		set "NetFX35=%NetFX35%\%SelectedSourceOS%\%PackageVersion%\Microsoft-Windows-NetFx3-OnDemand-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
	)
)

:: Checking whether Microsoft .NET Framework 3.5 Feature Pack folder exist
if "%SelectedSourceOS%" equ "w81" if not exist "%NetFX35%\msil_system.net_b03f5f7f11d50a3a_6.3.9600.16384_none_78f2900af99c8442\system.net.dll" (
	echo.%txtIntegrateFrameworkandOthers_02%
	echo.
	echo.%txtIntegrateFrameworkandOthers_03% ^<Packs\NetFX35\w81\%ImageArchitecture%^> %GlobalFolder%
	echo.
	goto :Stop
)

:: Checking whether Microsoft .NET Framework 3.5 Feature Pack folder exist
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if not exist %NetFX35% (
		echo.%txtIntegrateFrameworkandOthers_04%
		echo.
		if "%ImageBuild%" leq "16299" echo.%txtIntegrateFrameworkandOthers_04line2pos1% "microsoft-windows-netfx3-OnDemand-package.cab" %txtIntegrateFrameworkandOthers_04line2pos2%
		if "%ImageBuild%" geq "17134" echo.%txtIntegrateFrameworkandOthers_04line2pos1% "microsoft-windows-netfx3-OnDemand-package~31bf3856ad364e35~%PackageArchitecture%~~.cab" %txtIntegrateFrameworkandOthers_04line2pos2%
		echo.
		echo.%txtIntegrateFrameworkandOthers_05% ^<Packs\NetFX35\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		echo.
		echo."Microsoft-Windows-NetFx3-OnDemand-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		goto :Stop
	)

	if "%ImageBuild%" geq "17763" if "%NetFX35%" neq "%DVD%\sources\sxs\microsoft-windows-netfx3-OnDemand-package~31bf3856ad364e35~%PackageArchitecture%~~.cab" if exist %NetFX35% (
		copy /Y %NetFX35% "%_TMP%\microsoft-windows-netfx3-OnDemand-package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul
		set "NetFX35=%_TMP%\microsoft-windows-netfx3-OnDemand-package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_06%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_07%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_08%
		echo.-------------------------------------------------------------------------------
		echo.
		if "%SelectedSourceOS%" equ "w81" (
			%DISM% /Image:"%InstallMount%\%%i" /Get-FeatureInfo /FeatureName:NetFX3 | findstr.exe /I /C:"State : Enable Pending" >nul
			if errorlevel 1 (
				echo.%txtIntegrateFrameworkandOthers_09%
				echo.
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_10%
				echo.-------------------------------------------------------------------------------
				%DISM% /Image:"%InstallMount%\%%i" /Enable-Feature /All /LimitAccess /FeatureName:NetFX3 /Source:"%NetFX35%"
			) else (
				echo.%txtIntegrateFrameworkandOthers_11%
			)
		)
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			%DISM% /Image:"%InstallMount%\%%i" /Get-FeatureInfo /FeatureName:NetFx3 | findstr.exe /I /C:"State : Enabled" >nul
			if errorlevel 1 (
				echo.%txtIntegrateFrameworkandOthers_09%
				echo.
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_10%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!NetFX35!"
				if "!NetFX35_Lang!" neq "" if exist "!NetFX35_Lang!" call :AddPackage "%InstallMount%\%%i", "!NetFX35_Lang!"
			) else (
				echo.%txtIntegrateFrameworkandOthers_11%
			)
		)
	)
)

call :RemoveFile "%_TMP%\microsoft-windows-netfx3-OnDemand-package~31bf3856ad364e35~%PackageArchitecture%~~.cab"

echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_12%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft .NET Framework 4.6.2 for Windows 10 v1507 & v1511 Source OS
::-------------------------------------------------------------------------------------------
:IntNetFX462

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_13%
echo.===============================================================================
echo.

:: Checking whether Microsoft .NET Framework 4.6.2 Pack file exist
if not exist "%NetFX462%\Microsoft-Windows-NetFX462-Package~31bf3856ad364e35~%PackageArchitecture%.cab" (
	echo.%txtIntegrateFrameworkandOthers_14%
	echo.
	echo."Microsoft-Windows-NetFX462-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\NetFX462^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft .NET Framework 4.6.2 Pack file exist
if "%ImageBuild%" equ "10240" if /i "%ImageEdition:~,4%" neq "Core" if /i "%ImageEdition:~,9%" neq "Education" if /i "%ImageEdition:~,12%" neq "Professional" if /i "%ImageEdition:~,10%" neq "Enterprise" (
	if not exist "%NetFX462%\Windows10.0-KB4051600-%ImageArchitecture%.cab" (
		echo.%txtIntegrateFrameworkandOthers_14%
		echo.
		echo."Windows10.0-KB4051600-%ImageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\NetFX462^> %GlobalFolder%
		goto :Stop
	)
)

:: Checking whether Microsoft .NET Framework 4.6.2 Pack file exist
if "%ImageBuild%" equ "10586" if /i "%ImageEdition:~,4%" neq "Core" if /i "%ImageEdition:~,12%" neq "Professional" (
	if not exist "%NetFX462%\Windows10.0-KB4054057-%ImageArchitecture%.cab" (
		echo.%txtIntegrateFrameworkandOthers_14%
		echo.
		echo."Windows10.0-KB4054057-%ImageArchitecture%.cab""
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\NetFX462^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_15%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_16%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_18%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "%NetFX462%\Microsoft-Windows-NetFX462-Package~31bf3856ad364e35~%PackageArchitecture%.cab"

		if exist "%NetFX462%\Microsoft-Windows-NetFX462-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%.cab" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_19% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%NetFX462%\Microsoft-Windows-NetFX462-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%.cab"
		)

		if "%ImageBuild%" equ "10240" if /i "!ImageEdition%%i:~,4!" neq "Core" if /i "!ImageEdition%%i:~,9!" neq "Education" if /i "!ImageEdition%%i:~,12!" neq "Professional" if /i "!ImageEdition%%i:~,10!" neq "Enterprise" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_21%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%NetFX462%\Windows10.0-KB4051600-%ImageArchitecture%.cab"
		)

		if "%ImageBuild%" equ "10586" if /i "!ImageEdition%%i:~,4!" neq "Core" if /i "!ImageEdition%%i:~,12!" neq "Professional" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_21%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%NetFX462%\Windows10.0-KB4054057-%ImageArchitecture%.cab"
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_22%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft .NET Framework 4.8
::-------------------------------------------------------------------------------------------
:IntNetFX48

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_23%
echo.===============================================================================
echo.

:: Setting Microsoft .NET Framework 4.8 Pack folder path
set "NetFX48=%NetFX48%\%SelectedSourceOS%"

:: Setting Image Package ServicePackBuildLevel
if "%SelectedSourceOS%" equ "w10" (
	if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "15063" (
		set "NetFX48Pkg=Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0.cab"
		set "NetFX48LpPkg=Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~10.0.14393.0.cab"
	)

	if "%ImageBuild%" geq "16299" if "%ImageBuild%" leq "17763" (
		set "NetFX48Pkg=Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15.cab"
		set "NetFX48LpPkg=Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~10.0.16299.15.cab"
	)
)

if "%SelectedSourceOS%" equ "w7" (
	:: Checking whether Microsoft .NET Framework 4.8 Pack file exist
	if not exist "!NetFX48!\Windows6.1-KB4019990-%ImageArchitecture%.cab" (
		echo.%txtIntegrateFrameworkandOthers_24%
		echo.
		echo."Windows6.1-KB4019990-%ImageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\NetFX48\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Microsoft .NET Framework 4.8 Pack file exist
	if not exist "!NetFX48!\NetFX48.tpk" (
		echo.%txtIntegrateFrameworkandOthers_24%
		echo.
		echo."NetFX48.tpk"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\NetFX48\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Microsoft .NET Framework 4.8 Pack file exist
	if not exist "!NetFX48!\NetFX48_%ImageArchitecture%.reg" (
		echo.%txtIntegrateFrameworkandOthers_24%
		echo.
		echo."NetFX48_%ImageArchitecture%.reg"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\NetFX48\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)
)

:: Checking whether Microsoft .NET Framework 4.8 Pack file exist
if "%SelectedSourceOS%" equ "w81" if not exist "!NetFX48!\Microsoft-Windows-NetFx48-Package~31bf3856ad364e35~%PackageArchitecture%~~6.3.9600.16384.cab" (
	echo.%txtIntegrateFrameworkandOthers_24%
	echo.
	echo."Microsoft-Windows-NetFx48-Package~31bf3856ad364e35~%PackageArchitecture%~~6.3.9600.16384.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\NetFX48\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft .NET Framework 4.8 Pack file exist
if "%SelectedSourceOS%" equ "w10" if not exist "!NetFX48!\!NetFX48Pkg!" (
	echo.%txtIntegrateFrameworkandOthers_24%
	echo.
	echo."!NetFX48Pkg!"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\NetFX48\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_25%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_26%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		if "%SelectedSourceOS%" equ "w7" (
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_27%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!NetFX48!\Windows6.1-KB4019990-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_28%
			echo.-------------------------------------------------------------------------------
			call :ApplyImage "!NetFX48!\NetFX48.tpk", %PackageIndex%, "%InstallMount%\%%i"

			if exist "!NetFX48!\NetFX48_%ImageDefaultLanguage%.tpk" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_29% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
				echo.-------------------------------------------------------------------------------
				call :ApplyImage "!NetFX48!\NetFX48_%ImageDefaultLanguage%.tpk", %PackageIndex%, "%InstallMount%\%%i"
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_30%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.%GlobalMountingImageRegistry%
			call :MountImageRegistry "%InstallMount%\%%i"
			echo.%GlobalImportingRegistrySettings2ImageRegistry%
			call :ImportRegistry2Image "!NetFX48!\NetFX48_%ImageArchitecture%.reg"

			if exist "!NetFX48!\NetFX48_%ImageArchitecture%_%ImageDefaultLanguage%.reg" call :ImportRegistry2Image "!NetFX48!\NetFX48_%ImageArchitecture%_%ImageDefaultLanguage%.reg"

			echo.
			echo.
			echo.%GlobalUnMountingImageRegistry%
			call :UnMountImageRegistry
			echo.
		)

		if "%SelectedSourceOS%" equ "w81" (
			if not exist "!NetFX48!\Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~6.3.9600.16384.cab" (
				call :AddPackage "%InstallMount%\%%i", "!NetFX48!\Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~~6.3.9600.16384.cab"
			)

			if exist "!NetFX48!\Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~6.3.9600.16384.cab" (
				echo.
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_28%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!NetFX48!\Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~~6.3.9600.16384.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_29% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!NetFX48!\Microsoft-Windows-NetFX48-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~6.3.9600.16384.cab"
			)
		)

		if "%SelectedSourceOS%" equ "w10" (
			if not exist "!NetFX48!\!NetFX48LpPkg!" call :AddPackage "%InstallMount%\%%i", "!NetFX48!\!NetFX48Pkg!"

			if exist "!NetFX48!\!NetFX48LpPkg!" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_28%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!NetFX48!\!NetFX48Pkg!"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_29% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!NetFX48!\!NetFX48LpPkg!"
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_31%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft .NET Core Desktop Runtime 3.1
::-------------------------------------------------------------------------------------------
:IntNETCore31

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_32%
echo.===============================================================================
echo.

:: Getting Install Image Index Architecture
call :GetImageArchitecture "%InstallWim%", %DefaultIndexNo% >nul

:: Checking whether Microsoft .NET Core Desktop Runtime 3.1 Pack file exist
if not exist "%NETCore31%\NETCore31_%SelectedSourceOS%.tpk" (
	echo.%txtIntegrateFrameworkandOthers_33%
	echo.
	echo."NETCore31_%SelectedSourceOS%.tpk"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\NETCore31^> %GlobalFolder%
	goto :Stop
)

if not exist "%NETCore31%\NETCore31_%SelectedSourceOS%_%ImageArchitecture%.reg" (
	echo.%txtIntegrateFrameworkandOthers_33%
	echo.
	echo."NETCore31_%SelectedSourceOS%_%ImageArchitecture%.reg"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\NETCore31^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_34%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% Install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_35%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_36%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "%NETCore31%\NETCore31_%SelectedSourceOS%.tpk", %PackageIndex%, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_37%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		call :ImportRegistry2Image "%NETCore31%\NETCore31_%SelectedSourceOS%_%ImageArchitecture%.reg"

		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
		echo.
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_38%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft .NET Desktop Runtime 6
::-------------------------------------------------------------------------------------------
:IntNET6

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_39%
echo.===============================================================================
echo.

:: Checking whether Microsoft .NET Desktop Runtime 6 Pack file exist
if not exist "%NET6%\NET6_%SelectedSourceOS%.tpk" (
	echo.%txtIntegrateFrameworkandOthers_40%
	echo.
	echo."NET6_%SelectedSourceOS%.tpk"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\NET6^> %GlobalFolder%
	goto :Stop
)

if not exist "%NET6%\NET6_%SelectedSourceOS%_%ImageArchitecture%.reg" (
	echo.%txtIntegrateFrameworkandOthers_40%
	echo.
	echo."NET6_%SelectedSourceOS%_%ImageArchitecture%.reg"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\NET6^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_41%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_42%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_43%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "%NET6%\NET6_%SelectedSourceOS%.tpk", %PackageIndex%, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_44%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		call :ImportRegistry2Image "%NET6%\NET6_%SelectedSourceOS%_%ImageArchitecture%.reg"

		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
		echo.
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_45%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft Internet Explorer 11
::-------------------------------------------------------------------------------------------
:IntIE11

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_46%
echo.===============================================================================
echo.

:: Checking whether Microsoft Internet Explorer 11 Pack file exist
if not exist "%IE11%\Microsoft-Windows-PlatformUpdate-Win7-SRV08R2-Package~31bf3856ad364e35~%PackageArchitecture%.cab" (
	echo.%txtIntegrateFrameworkandOthers_47%
	echo.
	echo."Microsoft-Windows-PlatformUpdate-Win7-SRV08R2-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\IE11^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft Internet Explorer 11 Pack file exist
if not exist "%IE11%\Microsoft-Windows-InternetExplorer-Package~31bf3856ad364e35~%PackageArchitecture%.cab" (
	echo.%txtIntegrateFrameworkandOthers_47%
	echo.
	echo."Microsoft-Windows-InternetExplorer-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\IE11^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft Internet Explorer 11 Pack file exist
if "%ImageDefaultLanguage%" equ "en-US" if not exist "%IE11%\Microsoft-Windows-IE-Hyphenation-Package~31bf3856ad364e35~en-US.cab" (
	echo.%txtIntegrateFrameworkandOthers_47%
	echo.
	echo."Microsoft-Windows-IE-Hyphenation-Package~31bf3856ad364e35~en-US.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\IE11^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft Internet Explorer 11 Pack file exist
if "%ImageDefaultLanguage%" equ "en-US" if not exist "%IE11%\Microsoft-Windows-IE-Spelling-Package~31bf3856ad364e35~en-US.cab" (
	echo.%txtIntegrateFrameworkandOthers_47%
	echo.
	echo."Microsoft-Windows-IE-Spelling-Package~31bf3856ad364e35~en-US.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\IE11^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft Internet Explorer 11 Pack file exist
if "%ImageDefaultLanguage%" neq "en-US" if not exist "%IE11%\Microsoft-Windows-InternetExplorer-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%.cab" (
	echo.%txtIntegrateFrameworkandOthers_47%
	echo.
	echo."Microsoft-Windows-InternetExplorer-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\IE11^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_48%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_49%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_50%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-PlatformUpdate-Win7-SRV08R2-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_51%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-InternetExplorer-Package~31bf3856ad364e35~%PackageArchitecture%.cab"

		if "%ImageDefaultLanguage%" equ "en-US" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_52%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-IE-Hyphenation-Package~31bf3856ad364e35~en-US.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_53%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-IE-Spelling-Package~31bf3856ad364e35~en-US.cab"
		) else (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_54% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-InternetExplorer-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%.cab"

			if exist "%IE11%\Microsoft-Windows-IE-Hyphenation-Package~31bf3856ad364e35~%ImageDefaultLanguage%.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_55%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-IE-Hyphenation-Package~31bf3856ad364e35~%ImageDefaultLanguage%.cab"
			) else (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_55%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-IE-Hyphenation-Package~31bf3856ad364e35~en-US.cab"
			)

			if exist "%IE11%\Microsoft-Windows-IE-Spelling-Package~31bf3856ad364e35~%ImageDefaultLanguage%.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_53%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-IE-Spelling-Package~31bf3856ad364e35~%ImageDefaultLanguage%.cab"
			) else (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_53%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%IE11%\Microsoft-Windows-IE-Spelling-Package~31bf3856ad364e35~en-US.cab"
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_56%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Remote Desktop Protocol (RDP) 8.0 & 8.1
::-------------------------------------------------------------------------------------------
:IntRDP81

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_57%
echo.===============================================================================
echo.

:: Checking whether Remote Desktop Protocol (RDP) 8.0 & 8.1 Pack file exist
if not exist "%RDP81%\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%.cab" (
	echo.%txtIntegrateFrameworkandOthers_58%
	echo.
	echo."Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\RDP81^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Remote Desktop Protocol (RDP) 8.0 & 8.1 Pack file exist
if not exist "%RDP81%\Microsoft-Windows-RDP-WinIP-Package~31bf3856ad364e35~%PackageArchitecture%.cab" (
	echo.%txtIntegrateFrameworkandOthers_58%
	echo.
	echo."Microsoft-Windows-RDP-WinIP-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\RDP81^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Remote Desktop Protocol (RDP) 8.0 & 8.1 Pack file exist
if not exist "%RDP81%\Microsoft-Windows-RDP-BlueIP-Package~31bf3856ad364e35~%PackageArchitecture%.cab" (
	echo.%txtIntegrateFrameworkandOthers_58%
	echo.
	echo."Microsoft-Windows-RDP-BlueIP-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\RDP81^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_59%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_60%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_61%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "%RDP81%\Microsoft-Windows-WinPE-LanguagePack-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_61%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "%RDP81%\Microsoft-Windows-RDP-WinIP-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_62%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "%RDP81%\Microsoft-Windows-RDP-BlueIP-Package~31bf3856ad364e35~%PackageArchitecture%.cab"
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_63%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Management Framework (WMF) 5.1
::-------------------------------------------------------------------------------------------
:IntWMF

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_64%
echo.===============================================================================
echo.

:: Setting Windows Management Framework (WMF) 5.1 Pack folder path accroding to selected Source OS
set "WMF=%WMF%\%SelectedSourceOS%"

if "%SelectedSourceOS%" equ "w7" (
	:: Checking whether Windows Management Framework (WMF) 5.1 Pack file exist
	if /i "%ImageArchitecture%" equ "x64" if not exist "!WMF!\Windows6.1-KB2809215-%ImageArchitecture%.cab" (
		echo.%txtIntegrateFrameworkandOthers_65%
		echo.
		echo."Windows6.1-KB2809215-%ImageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WMF\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Management Framework (WMF) 5.1 Pack file exist
	if not exist "!WMF!\Windows6.1-KB2872035-%ImageArchitecture%.cab" (
		echo.%txtIntegrateFrameworkandOthers_65%
		echo.
		echo."Windows6.1-KB2872035-%ImageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WMF\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Management Framework (WMF) 5.1 Pack file exist
	if not exist "!WMF!\Windows6.1-KB3033929-%ImageArchitecture%.cab" (
		echo.%txtIntegrateFrameworkandOthers_65%
		echo.
		echo."Windows6.1-KB3033929-%ImageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WMF\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Management Framework (WMF) 5.1 Pack file exist
	if not exist "!WMF!\Windows6.1-KB3191566-%ImageArchitecture%.cab" (
		echo.%txtIntegrateFrameworkandOthers_65%
		echo.
		echo."Windows6.1-KB3191566-%ImageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WMF\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)
)

:: Checking whether Windows Management Framework (WMF) 5.1 Pack file exist
if "%SelectedSourceOS%" equ "w81" if not exist "!WMF!\Windows8.1-KB3191564-%ImageArchitecture%.cab" (
	echo.%txtIntegrateFrameworkandOthers_65%
	echo.
	echo."Windows8.1-KB3191564-%ImageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\WMF\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_66%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_67%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		if "%SelectedSourceOS%" equ "w7" (
			if /i "%ImageArchitecture%" equ "x64" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_68%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!WMF!\Windows6.1-KB2809215-%ImageArchitecture%.cab"
			)

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_68%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!WMF!\Windows6.1-KB2872035-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_68%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!WMF!\Windows6.1-KB3033929-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_68line2%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!WMF!\Windows6.1-KB3191566-%ImageArchitecture%.cab"
		)

		if "%SelectedSourceOS%" equ "w81" call :AddPackage "%InstallMount%\%%i", "!WMF!\Windows8.1-KB3191564-%ImageArchitecture%.cab"
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_69%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft Win32 Calculator
::-------------------------------------------------------------------------------------------
:IntWin32Calc

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_70%
echo.===============================================================================
echo.

:: Checking whether Microsoft Win32 Calculator Pack file exist
if not exist "%Win32Calc%\Win32Calc.tpk" (
	echo.%txtIntegrateFrameworkandOthers_71%
	echo.
	echo."Win32Calc.tpk"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Win32Calc^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft Win32 Calculator Pack file exist
if /i "%ImageArchitecture%" neq "arm64" if not exist "%Win32Calc%\Win32Calc_%ImageDefaultLanguage%.tpk" (
	echo.%txtIntegrateFrameworkandOthers_71%
	echo.
	echo."Win32Calc_%ImageDefaultLanguage%.tpk"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Win32Calc^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft Win32 Calculator Pack file exist
if not exist "%Win32Calc%\Win32Calc_%ImageArchitecture%.reg" (
	echo.%txtIntegrateFrameworkandOthers_71%
	echo.
	echo."Win32Calc_%ImageArchitecture%.reg"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Win32Calc^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_72%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_73%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_74%
		echo.-------------------------------------------------------------------------------
		if /i "%ImageArchitecture%" neq "arm64" call :ApplyImage "%Win32Calc%\Win32Calc.tpk", %PackageIndex%, "%InstallMount%\%%i"
		if /i "%ImageArchitecture%" equ "arm64" call :ApplyImage "%Win32Calc%\Win32Calc.tpk", 3, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------

		if /i "%ImageArchitecture%" neq "arm64" (
			echo.%txtIntegratingMicrosoftWin32Calculator% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :ApplyImage "%Win32Calc%\Win32Calc_%ImageDefaultLanguage%.tpk", %PackageIndex%, "%InstallMount%\%%i"
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_75%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		call :ImportRegistry2Image "%Win32Calc%\Win32Calc_%ImageArchitecture%.reg"
		echo.
		echo.
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
		echo.
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_76%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Data Deduplication
::-------------------------------------------------------------------------------------------
:IntDedup

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_77%
echo.===============================================================================
echo.

set "FSSMRESReg=%Dedup%\fssmres.dll.reg"

:: Setting Windows Data Deduplication Pack folder path accroding to selected Source OS
if "%SelectedSourceOS%" equ "w81" set "Dedup=%Dedup%\%SelectedSourceOS%"
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" set "Dedup=%Dedup%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether the Source OS architecture is not 64-bit
if /i "%ImageArchitecture%" neq "x64" (
	echo.%txtIntegrateFrameworkandOthers_78%
	goto :Stop
)

if "%SelectedSourceOS%" equ "w81" (
	:: Checking whether Windows Data Deduplication Pack file exist
	if not exist "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~~6.3.9600.16384.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~~6.3.9600.16384.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if not exist "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~6.3.9600.16384.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~6.3.9600.16384.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~6.3.9600.16384.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~6.3.9600.16384.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~6.3.9600.16384.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~6.3.9600.16384.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)
)

if "%SelectedSourceOS%" equ "w10" (
	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "10586" if not exist "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "10586" if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "10586" if "%ImageDefaultLanguage%" neq "de-DE" if "%ImageDefaultLanguage%" neq "es-ES" if "%ImageDefaultLanguage%" neq "fr-FR" if "%ImageDefaultLanguage%" neq "it-IT" if "%ImageDefaultLanguage%" neq "ja-JP" if "%ImageDefaultLanguage%" neq "ko-KR" if "%ImageDefaultLanguage%" neq "pt-BR" if "%ImageDefaultLanguage%" neq "ru-RU" if "%ImageDefaultLanguage%" neq "tr-TR" if "%ImageDefaultLanguage%" neq "zh-CN" if "%ImageDefaultLanguage%" neq "zh-TW" (
		if not exist "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab" (
			echo.%txtIntegrateFrameworkandOthers_79%
			echo.
			echo."Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
			goto :Stop
		)

		if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab" (
			echo.%txtIntegrateFrameworkandOthers_79%
			echo.
			echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
			goto :Stop
		)
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "10586" (
		for %%j in (de-DE, es-ES, fr-FR, it-IT, ja-JP, ko-KR, pt-BR, ru-RU, tr-TR, zh-CN, zh-TW) do (
			if "%ImageDefaultLanguage%" equ "%%j" (
				if not exist "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
					echo.%txtIntegrateFrameworkandOthers_79%
					echo.
					echo."Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
					echo.
					echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
					goto :Stop
				)

				if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
					echo.%txtIntegrateFrameworkandOthers_79%
					echo.
					echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
					echo.
					echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
					goto :Stop
				)
			)
		)
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "14393" if not exist "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "14393" if not exist "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "14393" if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "14393" if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "15063" if not exist "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "15063" if not exist "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "15063" if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" equ "15063" if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)
)

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" geq "16299" if not exist "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" geq "16299" if not exist "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" geq "16299" if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Data Deduplication Pack file exist
	if "%ImageBuild%" geq "16299" if not exist "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_79%
		echo.
		echo."Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Dedup\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_80%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_81%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		if "%SelectedSourceOS%" equ "w81" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_82%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~~6.3.9600.16384.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_84% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~6.3.9600.16384.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_83%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~6.3.9600.16384.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_85% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~6.3.9600.16384.cab"
		)

		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" equ "10586" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_82%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------

				if "%ImageDefaultLanguage%" neq "de-DE" if "%ImageDefaultLanguage%" neq "es-ES" if "%ImageDefaultLanguage%" neq "fr-FR" if "%ImageDefaultLanguage%" neq "it-IT" if "%ImageDefaultLanguage%" neq "ja-JP" if "%ImageDefaultLanguage%" neq "ko-KR" if "%ImageDefaultLanguage%" neq "pt-BR" if "%ImageDefaultLanguage%" neq "ru-RU" if "%ImageDefaultLanguage%" neq "tr-TR" if "%ImageDefaultLanguage%" neq "zh-CN" if "%ImageDefaultLanguage%" neq "zh-TW" (
					echo.%txtIntegrateFrameworkandOthers_84% [en-US] %txtIntegrateFrameworkandOthers_20%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				for %%j in (de-DE, es-ES, fr-FR, it-IT, ja-JP, ko-KR, pt-BR, ru-RU, tr-TR, zh-CN, zh-TW) do (
					if "%ImageDefaultLanguage%" equ "%%j" (
						echo.%txtIntegrateFrameworkandOthers_84% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
					)
				)

				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_83%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------

				if "%ImageDefaultLanguage%" neq "de-DE" if "%ImageDefaultLanguage%" neq "es-ES" if "%ImageDefaultLanguage%" neq "fr-FR" if "%ImageDefaultLanguage%" neq "it-IT" if "%ImageDefaultLanguage%" neq "ja-JP" if "%ImageDefaultLanguage%" neq "ko-KR" if "%ImageDefaultLanguage%" neq "pt-BR" if "%ImageDefaultLanguage%" neq "ru-RU" if "%ImageDefaultLanguage%" neq "tr-TR" if "%ImageDefaultLanguage%" neq "zh-CN" if "%ImageDefaultLanguage%" neq "zh-TW" (
					echo.%txtIntegrateFrameworkandOthers_85% [en-US] %txtIntegrateFrameworkandOthers_20%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab"
				)

				for %%j in (de-DE, es-ES, fr-FR, it-IT, ja-JP, ko-KR, pt-BR, ru-RU, tr-TR, zh-CN, zh-TW) do (
					if "%ImageDefaultLanguage%" equ "%%j" (
						echo.%txtIntegrateFrameworkandOthers_85% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
					)
				)
			)

			if "%ImageBuild%" equ "14393" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_86%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_90pos01% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_83%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_85% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"

				if exist "!Dedup!\Updates\*.cab" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateFrameworkandOthers_87%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!Dedup!\Updates"
				)
			)

			if "%ImageBuild%" equ "15063" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_86%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_88%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_83%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_89%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~en-US~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			if "%ImageBuild%" geq "16299" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_86%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_90pos01% [%ImageDefaultLanguage%] %GlobalPackage%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-FileServer-ServerCore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_83%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_85% [%ImageDefaultLanguage%] %GlobalPackage%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!Dedup!\Microsoft-Windows-Dedup-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
			)

			if exist "%Dedup%\Updates\*.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_91%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%Dedup%\Updates"
			)
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_92%
		echo.-------------------------------------------------------------------------------
		if "%SelectedSourceOS%" equ "w81" (
			call :EnableFeature "%InstallMount%\%%i", "Dedup-Core /All"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_93%
			echo.-------------------------------------------------------------------------------
			call :EnableFeature "%InstallMount%\%%i", "File-Services-Search-Service /All"
		)

		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" call :EnableFeature "%InstallMount%\%%i", "Dedup-Core /All"

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_94%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		call :ImportRegistry2Image "%FSSMRESReg%"
		echo.
		echo.
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
		echo.
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_95%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows To Go Workspace
::-------------------------------------------------------------------------------------------
:IntWinToGo

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_96%
echo.===============================================================================
echo.

:: Setting Windows To Go Workspace Pack path
if "%SelectedSourceOS%" equ "w81" set "WinToGo=%WinToGo%\%SelectedSourceOS%"
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" set "WinToGo=%WinToGo%\%SelectedSourceOS%\%PackageVersion%"

if "%SelectedSourceOS%" equ "w81" (
	:: Checking whether Windows To Go Workspace Pack file exist
	if not exist "!WinToGo!\WTG.tpk" (
		echo.%txtIntegrateFrameworkandOthers_97%
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WinToGo\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows To Go Workspace Pack file exist
	if not exist "!WinToGo!\WTG_%ImageDefaultLanguage%.tpk" (
		echo.%txtIntegrateFrameworkandOthers_98pos01% "WTG_%ImageDefaultLanguage%.tpk" %GlobalNotFound%
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WinToGo\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows To Go Workspace Pack file exist
	if not exist "!WinToGo!\WTG_%ImageArchitecture%.reg" (
		echo.%txtIntegrateFrameworkandOthers_98pos01% "WTG_%ImageArchitecture%.reg" %GlobalNotFound%
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WinToGo\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)
)

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	:: Checking whether Windows To Go Workspace Pack file exist
	if not exist "!WinToGo!\Microsoft-Windows-PortableWorkspaces-Creator-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_99%
		echo.
		echo.Microsoft-Windows-PortableWorkspaces-Creator-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WinToGo\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows To Go Workspace Pack file exist
	if not exist "!WinToGo!\Microsoft-Windows-PortableWorkspaces-Creator-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_99%
		echo.
		echo.Microsoft-Windows-PortableWorkspaces-Creator-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\WinToGo\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_100%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_101%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		if "%SelectedSourceOS%" equ "w81" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_101%
			echo.-------------------------------------------------------------------------------
			call :ApplyImage "!WinToGo!\WTG.tpk", %PackageIndex%, "%InstallMount%\%%i"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_102% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :ApplyImage "!WinToGo!\WTG_%ImageDefaultLanguage%.tpk", %PackageIndex%, "%InstallMount%\%%i"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_103%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.%GlobalMountingImageRegistry%
			call :MountImageRegistry "%InstallMount%\%%i"
			echo.%GlobalImportingRegistrySettings2ImageRegistry%
			call :ImportRegistry2Image "!WinToGo!\WTG_%ImageArchitecture%.reg"
			echo.
			echo.
			echo.%GlobalUnMountingImageRegistry%
			call :UnMountImageRegistry
			echo.
		)

		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_101%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", !WinToGo!\Microsoft-Windows-PortableWorkspaces-Creator-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_102% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", !WinToGo!\Microsoft-Windows-PortableWorkspaces-Creator-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_104%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows System Restore
::-------------------------------------------------------------------------------------------
:IntSystemRestore

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_105%
echo.===============================================================================
echo.

:: Setting Windows System Restore Pack Path
if "%SelectedSourceOS%" equ "w7" set "SystemRestore=%SystemRestore%\%SelectedSourceOS%"
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" set "SystemRestore=%SystemRestore%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether Windows System Restore Pack file exist
if not exist "%SystemRestore%\Microsoft-Windows-SystemRestore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_106%
	echo.
	echo."Microsoft-Windows-SystemRestore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	if "%SelectedSourceOS%" equ "w7" echo.%GlobalPleaseCopyFileto% ^<Packs\SystemRestore\%SelectedSourceOS%^> %GlobalFolder%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%GlobalPleaseCopyFileto% ^<Packs\SystemRestore\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows System Restore Pack file exist
if not exist "%SystemRestore%\Microsoft-Windows-SystemRestore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_106%
	echo.
	echo."Microsoft-Windows-SystemRestore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	if "%SelectedSourceOS%" equ "w7" echo.%GlobalPleaseCopyFileto% ^<Packs\SystemRestore\%SelectedSourceOS%^> %GlobalFolder%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%GlobalPleaseCopyFileto% ^<Packs\SystemRestore\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_107%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_108%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_109%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "%SystemRestore%\Microsoft-Windows-SystemRestore-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_110% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "%SystemRestore%\Microsoft-Windows-SystemRestore-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_111%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft Edge Classic Browser
::-------------------------------------------------------------------------------------------
:IntEdgeClassic

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_112%
echo.===============================================================================
echo.

:: Setting Microsoft Edge Classic Browser Pack path
set "EdgeClassic=%EdgeClassic%\%PackageVersion%"

if "%SelectedSourceOS%" equ "w10" (
	:: Checking whether Microsoft Edge Classic Browser Pack file exist
	if not exist "!EdgeClassic!\Microsoft-Windows-Internet-Browser-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_113%
		echo.
		echo."Microsoft-Windows-Internet-Browser-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\EdgeBrowser\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Microsoft Edge Classic Browser Pack file exist
	if not exist "!EdgeClassic!\Microsoft-Windows-Internet-Browser-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_113%
		echo.
		echo."Microsoft-Windows-Internet-Browser-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\EdgeBrowser\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_114%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_115%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_116%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "!EdgeClassic!\Microsoft-Windows-Internet-Browser-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_117% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "!EdgeClassic!\Microsoft-Windows-Internet-Browser-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"

		:: Importing Registry Fix to Enable Integrating Windows 10 Cumulative Update.
		if "%ImageBuild%" lss "17763" (
			for %%j in (EnterpriseS, ServerStandard, ServerDatacenter) do (
				if /i "%ImageEdition%" equ "%%j" if exist "%InstallMount%\%%i\Windows\servicing\packages\Microsoft-Windows-Internet-Browser-Package~31bf3856ad364e35~*.mum" (
					echo.
					echo.%GlobalMountingImageRegistry%
					call :MountImageRegistry "%InstallMount%\%%i"
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.mum" /f >nul
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs.bin.%PackageArchitecture%fre.dep\mergedcomponents\images\client\packages\\" /f >nul
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "Visibility" /t REG_DWORD /d "1" /f >nul
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallTimeHigh" /t REG_DWORD /d "30531506" /f >nul
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallTimeLow" /t REG_DWORD /d "76431985" /f >nul
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
					echo.
					echo.
					echo.%GlobalUnMountingImageRegistry%
					call :UnMountImageRegistry
					echo.
				)
			)

			if /i "%ImageEdition%" equ "EnterpriseSN" if exist "%InstallMount%\%%i\Windows\servicing\packages\Microsoft-Windows-Internet-Browser-Package~31bf3856ad364e35~*.mum" (
				echo.
				echo.%GlobalMountingImageRegistry%
				call :MountImageRegistry "%InstallMount%\%%i"
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.mum" /f >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs.bin.%PackageArchitecture%fre.dep\mergedcomponents\images\client\packages\\" /f >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "Visibility" /t REG_DWORD /d "1" /f >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallTimeHigh" /t REG_DWORD /d "30531506" /f >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallTimeLow" /t REG_DWORD /d "76431985" /f >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
				echo.
				echo.
				echo.%GlobalUnMountingImageRegistry%
				call :UnMountImageRegistry
				echo.
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_118%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft Edge Chromium Browser
::-------------------------------------------------------------------------------------------
:IntEdgeChromium

set "EdgeChrGPD=%EdgeChromium%\GroupPolicy"

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_119%
echo.===============================================================================
echo.

:: Setting Microsoft Edge Chromium Browser Pack Path
if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" set "EdgeChromium=%EdgeChromium%\%SelectedSourceOS%"
if "%SelectedSourceOS%" equ "w10" set "EdgeChromium=%EdgeChromium%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether Microsoft Edge Chromium Browser Pack file exist
if not exist "%EdgeChromium%\Windows*%ImageArchitecture%.cab" (
	echo.%txtIntegrateFrameworkandOthers_120%
	echo.
echo.%GlobalPleaseCopyFileto% ^<Packs\EdgeChromium\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

if "%SelectedSourceOS%" equ "w7" (
	for %%i in (KB4474419-v3,KB4490628,KB5006749,KB5001027) do (
		if not exist "%EdgeChromium%\Windows6.1-%%i-%ImageArchitecture%.cab" (
			echo.%txtIntegrateFrameworkandOthers_121%
			echo.
			echo."Windows6.1-%%i-%ImageArchitecture%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\EdgeChromium\%SelectedSourceOS%^> %GlobalFolder%
			goto :Stop
		)
	)
)

if "%SelectedSourceOS%" equ "w81" (
	if not exist "%EdgeChromium%\Windows8.1-KB5001027-%ImageArchitecture%.cab" (
		echo.%txtIntegrateFrameworkandOthers_121%
		echo.
		echo."Windows8.1-KB5001027-%ImageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\EdgeChromium\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)
)

if not exist "%EdgeChrGPD%\EdgeChrGPD.tpk" (
	echo.%txtIntegrateFrameworkandOthers_121%
	echo.
	echo.EdgeChrGPD.tpk
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\EdgeChromium\GroupPolicy^> %GlobalFolder%
	goto :Stop
)

for /d %%k in (cs-CZ,da-DK,de-DE,el-GR,en-US,es-ES,fi-FI,fr-FR,hu-HU,it-IT,ja-JP,ko-KR,nb-NO,nl-NL,pl-PL,pt-BR,pt-PT,ru-RU,sv-SE,tr-TR,zh-CN,zh-TW) do (
	if "%ImageDefaultLanguage%" equ "%%k" (
		if not exist "%EdgeChrGPD%\EdgeChrGPD_%%k.tpk" (
			echo.%txtIntegrateFrameworkandOthers_121%
			echo.
			echo.EdgeChrGPD_%%k.tpk
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\EdgeChromium\GroupPolicy^> %GlobalFolder%
			goto :Stop
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_122%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_123%
echo.-------------------------------------------------------------------------------
echo.
for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		if "%SelectedSourceOS%" equ "w7" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_124%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%EdgeChromium%\Windows6.1-KB4490628-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_125%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%EdgeChromium%\Windows6.1-KB5006749-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_126%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%EdgeChromium%\Windows6.1-KB4474419-v3-%ImageArchitecture%.cab"

			set EsuFoundation=
			if "%ImageInstallationType%" equ "Client" set "EsuFoundation=windowsfoundation_31bf3856ad364e35"
			if "%ImageInstallationType%" equ "Embedded" set "EsuFoundation=windowsembe..dfoundation_31bf3856ad364e35"
			if "%ImageInstallationType:~,6%" equ "Server" set "EsuFoundation=windowsserverfoundation_31bf3856ad364e35"

			:: Applying Windows 7 Extended Security Update (ESU) Suppressor Patch
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_127%
			echo.-------------------------------------------------------------------------------
			call :ApplyImage "%W7ESU%\ESU.tpk", %PackageIndex%, "%InstallMount%\%%i"

			call :MountImageRegistry "%InstallMount%\%%i"

			for /f "tokens=5 delims=\" %%a in ('reg.exe query "HKLM\TK_COMPONENTS\DerivedData\Components" ^| findstr.exe /I "%ImageArchitecture%_!EsuFoundation!"') do (set "EsuFoundation=%%a")

			if /i "%ImageArchitecture%" equ "x86" (
				reg.exe delete "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /f >nul 2>&1
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /v "identity" /t REG_BINARY /d "4D6963726F736F66742D57696E646F77732D534C432D436F6D706F6E656E742D457874656E64656453656375726974795570646174657341492C2043756C747572653D6E65757472616C2C2056657273696F6E3D362E312E373630332E32353030302C205075626C69634B6579546F6B656E3D333162663338353661643336346533352C2050726F636573736F724172636869746563747572653D7838362C2076657273696F6E53636F70653D4E6F6E537853" >nul
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /v "S256H" /t REG_BINARY /d "343B7E8DE2FE932E2FA1DB0CDFE69BB648BEE8E834B41728F1C83A12C1766ECB" >nul
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /v "c^!!EsuFoundation!" /t REG_BINARY /d "" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_none_b26c9b4c15d241fc" /ve /t REG_SZ /d "6.1" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_none_b26c9b4c15d241fc\6.1" /v "6.1.7603.25000" /t REG_BINARY /d "01" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_none_b26c9b4c15d241fc\6.1" /ve /t REG_SZ /d "6.1.7603.25000" >nul
			)

			if /i "%ImageArchitecture%" equ "x64" (
				reg.exe delete "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /f >nul 2>&1
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /v "identity" /t REG_BINARY /d "4D6963726F736F66742D57696E646F77732D534C432D436F6D706F6E656E742D457874656E64656453656375726974795570646174657341492C2043756C747572653D6E65757472616C2C2056657273696F6E3D362E312E373630332E32353030302C205075626C69634B6579546F6B656E3D333162663338353661643336346533352C2050726F636573736F724172636869746563747572653D616D6436342C2076657273696F6E53636F70653D4E6F6E537853" >nul
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /v "S256H" /t REG_BINARY /d "45D0AE442FD92CE32EE1DDC38EA3B875EAD9A53D6A17155A10FA9D9E16BEDEB2" >nul
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /v "c^!!EsuFoundation!" /t REG_BINARY /d "" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /ve /t REG_SZ /d "6.1" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228\6.1" /v "6.1.7603.25000" /t REG_BINARY /d "01" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228\6.1" /ve /t REG_SZ /d "6.1.7603.25000" >nul
			)

			call :UnMountImageRegistry

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_128%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%EdgeChromium%\Windows6.1-KB5001027-%ImageArchitecture%.cab"

			call :MountImageRegistry "%InstallMount%\%%i"

			if /i "%ImageArchitecture%" equ "x86" (
				del /f /q "%InstallMount%\%%i\Windows\WinSxS\Manifests\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2.manifest" >nul
				reg.exe delete "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_b26c9b4c15d241fc" /f >nul 2>&1
			)

			if /i "%ImageArchitecture%" equ "x64" (
				del /f /q "%InstallMount%\%%i\Windows\WinSxS\Manifests\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228.manifest" >nul
				reg.exe delete "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_none_0e8b36cfce2fb332" /f >nul 2>&1
			)

			call :UnMountImageRegistry
		)

		if "%SelectedSourceOS%" neq "w7" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_128%
			echo.-------------------------------------------------------------------------------
			for /f %%j IN ('dir /b "%EdgeChromium%\Windows*-%ImageArchitecture%.cab" 2^>nul') do (
				call :AddPackage "%InstallMount%\%%i", "%EdgeChromium%\%%j"
			)
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_129%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "%EdgeChrGPD%\EdgeChrGPD.tpk", 1, "%InstallMount%\%%i"

		for /d %%k in (cs-CZ,da-DK,de-DE,el-GR,en-US,es-ES,fi-FI,fr-FR,hu-HU,it-IT,ja-JP,ko-KR,nb-NO,nl-NL,pl-PL,pt-BR,pt-PT,ru-RU,sv-SE,tr-TR,zh-CN,zh-TW) do (
			if "%ImageDefaultLanguage%" equ "%%k" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_130pos01% [%%k] %GlobalPackage%
				echo.-------------------------------------------------------------------------------
				call :ApplyImage "%EdgeChrGPD%\EdgeChrGPD_%%k.tpk", 1, "%InstallMount%\%%i"
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_131%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Accessibility Braille
::-------------------------------------------------------------------------------------------
:IntBraille

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_132%
echo.===============================================================================
echo.

:: Setting Braille Pack Path
set "Braille=%Braille%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether Windows Accessibility Braille Pack file exist
if not exist "!Braille!\Microsoft-Windows-Accessibility-Braille-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_133%
	echo.
	echo."Microsoft-Windows-Accessibility-Braille-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Braille\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

call :RemoveFile "%_TMP%\Microsoft-Windows-Accessibility-Braille-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
if "%ImageBuild%" geq "17763" copy /Y "!Braille!\Microsoft-Windows-Accessibility-Braille-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" "%_TMP%\Microsoft-Windows-Accessibility-Braille-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_134%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_135%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		if "%ImageBuild%" leq "17134" call :AddPackage "%InstallMount%\%%i", "!Braille!\Microsoft-Windows-Accessibility-Braille-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
		if "%ImageBuild%" geq "17763" call :AddPackage "%InstallMount%\%%i", "%_TMP%\Microsoft-Windows-Accessibility-Braille-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
	)
)

call :RemoveFile "%_TMP%\Microsoft-Windows-Accessibility-Braille-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_136%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Multimedia Restricted Codecs
::-------------------------------------------------------------------------------------------
:IntMMRC

setlocal

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_137%
echo.===============================================================================
echo.

:: Getting Install Image Index Architecture
call :GetImageArchitecture "%InstallWim%", !SpecifiedSourceIndex! >nul

:: Setting Multimedia Restricted Codecs Pack path
set "MMRC=%MMRC%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether Windows Multimedia Restricted Codecs Pack file exist
if not exist "!MMRC!\Multimedia-RestrictedCodecsDolby-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_138%
	echo.
	echo."Multimedia-RestrictedCodecsDolby-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\MultimediaRestrictedCodecs\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

if /i "%ImageArchitecture%" equ "x64" if not exist "!MMRC!\Multimedia-RestrictedCodecsDolby-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_138%
	echo.
	echo."Multimedia-RestrictedCodecsDolby-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\MultimediaRestrictedCodecs\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

if "%ImageInstallationType:~,6%" equ "Server" (
	if not exist "!MMRC!\Multimedia-RestrictedCodecsExt-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_138%
		echo.
		echo."Multimedia-RestrictedCodecsExt-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\MultimediaRestrictedCodecs\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	if not exist "!MMRC!\Multimedia-RestrictedCodecsExt-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_138%
		echo.
		echo."Multimedia-RestrictedCodecsExt-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\MultimediaRestrictedCodecs\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	if /i "%ImageArchitecture%" equ "x64" if not exist "!MMRC!\Multimedia-RestrictedCodecsExt-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_138%
		echo.
		echo."Multimedia-RestrictedCodecsExt-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\MultimediaRestrictedCodecs\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)

	if /i "%ImageArchitecture%" equ "x64" if not exist "!MMRC!\Multimedia-RestrictedCodecsExt-WOW64-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
		echo.%txtIntegrateFrameworkandOthers_138%
		echo.
		echo."Multimedia-RestrictedCodecsExt-WOW64-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\MultimediaRestrictedCodecs\%PackageVersion%^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_139%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% %ImageIndexNo%
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_140%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_141%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "!MMRC!\Multimedia-RestrictedCodecsDolby-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_142% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "!MMRC!\Multimedia-RestrictedCodecsDolby-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.-------------------------------------------------------------------------------

		if /i "%ImageArchitecture%" equ "x64" (
			echo.%txtIntegrateFrameworkandOthers_144%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!MMRC!\Multimedia-RestrictedCodecsDolby-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_143% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!MMRC!\Multimedia-RestrictedCodecsDolby-WOW64-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		)

		if "%ImageInstallationType:~,6%" equ "Server" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_145%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!MMRC!\Multimedia-RestrictedCodecsExt-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_146% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "!MMRC!\Multimedia-RestrictedCodecsExt-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.-------------------------------------------------------------------------------

			if /i "%ImageArchitecture%" equ "x64" (
				echo.%txtIntegrateFrameworkandOthers_147%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!MMRC!\Multimedia-RestrictedCodecsExt-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateFrameworkandOthers_148% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!MMRC!\Multimedia-RestrictedCodecsExt-WOW64-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_149%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Subsystem for Linux ^(WSL^)
::-------------------------------------------------------------------------------------------
:IntWSL

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_150%
echo.===============================================================================
echo.

:: Setting Windows Subsystem for Linux (WSL) Pack Path
set "WSL=%WSL%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether Windows Subsystem for Linux (WSL) Pack file exist
if not exist "!WSL!\Microsoft-Windows-Lxss-Optional-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_151%
	echo.
	echo."Microsoft-Windows-Lxss-Optional-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\WSL\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Subsystem for Linux (WSL) Pack file exist
if not exist "!WSL!\Microsoft-Windows-Lxss-Optional-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_151%
	echo.
	echo."Microsoft-Windows-Lxss-Optional-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\WSL\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_152%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_153%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_154%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "!WSL!\Microsoft-Windows-Lxss-Optional-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_155% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%InstallMount%\%%i", "!WSL!\Microsoft-Windows-Lxss-Optional-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_156%
		echo.-------------------------------------------------------------------------------
		call :EnableFeature "%InstallMount%\%%i", "Microsoft-Windows-Subsystem-Linux /All"
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_157%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Open Secure Shell (SSH) Client & Server
::-------------------------------------------------------------------------------------------
:IntOpenSSH

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_158%
echo.===============================================================================
echo.

:: Setting Open Secure Shell Pack Path
set "OpenSSH=%OpenSSH%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether Open Secure Shell (SSH) Client Pack file exist
if not exist "!OpenSSH!\OpenSSH-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_159%
	echo.
	echo."OpenSSH-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\OpenSSH\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Open Secure Shell (SSH) Server Pack file exist
if not exist "!OpenSSH!\OpenSSH-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%txtIntegrateFrameworkandOthers_159%
	echo.
	echo."OpenSSH-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\OpenSSH\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

call :RemoveFile "%_TMP%\OpenSSH-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
call :RemoveFile "%_TMP%\OpenSSH-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"

if "%ImageBuild%" geq "17763" (
	copy /Y "!OpenSSH!\OpenSSH-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" "%_TMP%\OpenSSH-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul
	copy /Y "!OpenSSH!\OpenSSH-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" "%_TMP%\OpenSSH-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab" >nul
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_160%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_161%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_162%
		echo.-------------------------------------------------------------------------------
		if "%ImageBuild%" leq "17134" call :AddPackage "%InstallMount%\%%i", "!OpenSSH!\OpenSSH-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
		if "%ImageBuild%" geq "17763" call :AddPackage "%InstallMount%\%%i", "%_TMP%\OpenSSH-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateFrameworkandOthers_163%
		echo.-------------------------------------------------------------------------------
		if "%ImageBuild%" leq "17134" call :AddPackage "%InstallMount%\%%i", "!OpenSSH!\OpenSSH-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
		if "%ImageBuild%" geq "17763" call :AddPackage "%InstallMount%\%%i", "%_TMP%\OpenSSH-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
	)
)

call :RemoveFile "%_TMP%\OpenSSH-Client-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"
call :RemoveFile "%_TMP%\OpenSSH-Server-Package~31bf3856ad364e35~%PackageArchitecture%~~.cab"

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_164%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Media Feature Pack
::-------------------------------------------------------------------------------------------
:IntMediaFeaturePack

cls
echo.===============================================================================
echo.%txtIntegrateFrameworkandOthers_165%
echo.===============================================================================
echo.

:: Checking whether exists N Editions supported for Windows Media Feature Pack Integration are selected as source.
set /A ImageEditionCount=0
for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		for /d %%j in (StarterN, StarterKN, HomeBasicN, HomeBasicKN, CoreN, CloudN, ProfessionalN, ProfessionalKN, ProfessionalEducationN, ProfessionalEducationKN, EnterpriseN, EnterpriseKN, EnterpriseSN, EnterpriseGN, UltimateN, UltimateKN, EducationN, EducationKN) do (
			if /i "!ImageEdition%%i!" equ "%%j" (
				set /A ImageEditionCount+=1
			) else (
				call :MountImageRegistry "%InstallMount%\%%i"
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Setup\WindowsFeatures\WindowsMediaVersion" /ve /t REG_SZ /d "1" /f >nul 2>&1
				call :UnMountImageRegistry
			)
		)
	)
)
if %ImageEditionCount% equ 0 (
	echo.%txtIntegrateFrameworkandOthers_166%
	echo.
	goto :Stop
)

:: Setting Windows Media Feature Pack folder path according to selected Source OS
if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" set "MediaFeaturePack=%MediaFeaturePack%\%SelectedSourceOS%"
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" set "MediaFeaturePack=%MediaFeaturePack%\%SelectedSourceOS%\%PackageVersion%"

if "%SelectedSourceOS%" equ "w7" (
	:: Checking whether Windows Media Feature Pack file exist
	if not exist "!MediaFeaturePack!\Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.1.7600.16385.cab" (
		echo.%GlobalWindowsFeaturePackMissing%
		echo.
		echo."Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.1.7600.16385.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Media Feature Pack file exist
	if not exist "!MediaFeaturePack!\Microsoft-Windows-Media-Format-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.1.7600.16385.cab" (
		echo.%GlobalWindowsFeaturePackMissing%
		echo.
		echo."Microsoft-Windows-Media-Format-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.1.7600.16385.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)
)

:: Checking whether Windows Media Feature Pack file exist
if "%SelectedSourceOS%" equ "w81" if not exist "!MediaFeaturePack!\Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.3.9600.16384.cab" (
	echo.%GlobalWindowsFeaturePackMissing%
	echo.
	echo."Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.3.9600.16384.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

if "%SelectedSourceOS%" equ "w10" (
	if "%ImageBuild%" leq "17763" (
		:: Checking whether Windows Media Feature Pack file exist
		if not exist "!MediaFeaturePack!\Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
			echo.%GlobalWindowsFeaturePackMissing%
			echo.
			echo."Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
			goto :Stop
		)

		:: Checking whether Windows Media Feature Pack file exist
		if not exist "!MediaFeaturePack!\Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
			echo.%GlobalWindowsFeaturePackMissing%
			echo.
			echo."Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
			goto :Stop
		)
	)
)

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%ImageBuild%" gtr "17763" (
		:: Checking whether Windows Media Feature Pack file exist
		if not exist "!MediaFeaturePack!\Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
			echo.%GlobalWindowsFeaturePackMissing%
			echo.
			echo."Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
			goto :Stop
		)

		:: Checking whether Windows Media Feature Pack file exist
		if not exist "!MediaFeaturePack!\Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
			echo.%GlobalWindowsFeaturePackMissing%
			echo.
			echo."Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
			goto :Stop
		)

		:: Checking whether Windows Media Feature Pack file exist
		if /i "%ImageArchitecture%" equ "x64" if not exist "!MediaFeaturePack!\Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~wow64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
			echo.%GlobalWindowsFeaturePackMissing%
			echo.
			echo."Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~wow64~~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
			goto :Stop
		)

		:: Checking whether Windows Media Feature Pack file exist
		if /i "%ImageArchitecture%" equ "x64" if not exist "!MediaFeaturePack!\Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~wow64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
			echo.%GlobalWindowsFeaturePackMissing%
			echo.
			echo."Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~wow64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\MediaFeaturePack\%SelectedSourceOS%\%PackageVersion%^> %GlobalFolder%
			goto :Stop
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_167%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_168%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		for /d %%j in (StarterN, StarterKN, HomeBasicN, HomeBasicKN, CoreN, CloudN, ProfessionalN, ProfessionalKN, ProfessionalEducationN, ProfessionalEducationKN, EnterpriseN, EnterpriseKN, EnterpriseSN, EnterpriseGN, UltimateN, UltimateKN, EducationN, EducationKN) do (
			if /i "%ImageEdition%" equ "%%j" (
				if "%SelectedSourceOS%" equ "w7" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateFrameworkandOthers_169%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!MediaFeaturePack!\Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.1.7600.16385.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateFrameworkandOthers_170%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!MediaFeaturePack!\Microsoft-Windows-Media-Format-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.1.7600.16385.cab"
				)

				if "%SelectedSourceOS%" equ "w81" call :AddPackage "%InstallMount%\%%i", "!MediaFeaturePack!\Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~6.3.9600.16384.cab"

				if "%SelectedSourceOS%" equ "w10" (
					if "%ImageBuild%" leq "17763" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateFrameworkandOthers_169%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "!MediaFeaturePack!\Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateFrameworkandOthers_171pos01% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_171pos02%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "!MediaFeaturePack!\Microsoft-Windows-MediaFeaturePack-OOB-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
					)
				)

				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
					if "%ImageBuild%" gtr "17763" (
						call :RemoveFolder "%_TMP%\Updates\MediaFeaturePack"
						call :CreateFolder "%_TMP%\Updates\MediaFeaturePack"
						expand -R "!MediaFeaturePack!\Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" -F:* "%_TMP%\Updates\MediaFeaturePack" >nul

						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateFrameworkandOthers_172%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\MediaFeaturePack"
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegrateFrameworkandOthers_173pos01% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_173pos02%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "!MediaFeaturePack!\Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"

						if /i "%ImageArchitecture%" equ "x64" (
							echo.-------------------------------------------------------------------------------
							echo.%txtIntegrateFrameworkandOthers_174%
							echo.-------------------------------------------------------------------------------
							call :AddPackage "%InstallMount%\%%i", "!MediaFeaturePack!\Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~wow64~~%PackageVersion%.%PackageServicePackBuild%.cab"
							echo.-------------------------------------------------------------------------------
							echo.%txtIntegrateFrameworkandOthers_175pos01% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_175pos02%
							echo.-------------------------------------------------------------------------------
							call :AddPackage "%InstallMount%\%%i", "!MediaFeaturePack!\Microsoft-Windows-Media-Features-Package~31bf3856ad364e35~wow64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
						)

						call :RemoveFolder "%_TMP%\Updates"
					)
				)
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateFrameworkandOthers_176%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set ImageEditionCount=

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Mixed Reality
::-------------------------------------------------------------------------------------------
:IntWMR

cls
echo.===============================================================================
echo.%txtIntegrateWinMixedReality%
echo.===============================================================================
echo.

:: Setting Windows Mixed Reality folder path according to selected Source OS
set "WMR=%WMR%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether Windows Mixed Reality file exist
if not exist "!WMR!\Microsoft-Windows-Holographic-Desktop-FOD-Package~31bf3856ad364e35~amd64~~.cab" (
	echo.%txtIntegrateWinMixedReality002%
	echo.
	echo."Microsoft-Windows-Holographic-Desktop-FOD-Package~31bf3856ad364e35~amd64~~.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\WMR\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinMixedReality003%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinMixedReality004%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		call :AddPackage "%InstallMount%\%%i", "!WMR!\Microsoft-Windows-Holographic-Desktop-FOD-Package~31bf3856ad364e35~amd64~~.cab"
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinMixedReality005%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Portable Devices
::-------------------------------------------------------------------------------------------
:IntPortableDevices

cls
echo.===============================================================================
echo.%txtIntegrateWinPortableDevices001%
echo.===============================================================================
echo.

:: Checking whether exists N Editions supported for Windows Portable Devices Integration are selected as source.
set /A ImageEditionCount=0
for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		for /d %%j in (StarterN, StarterKN, HomeBasicN, HomeBasicKN, CoreN, CloudN, ProfessionalN, ProfessionalKN, ProfessionalEducationN, ProfessionalEducationKN, EnterpriseN, EnterpriseKN, EnterpriseSN, EnterpriseGN, UltimateN, UltimateKN, EducationN, EducationKN) do (
			if /i "!ImageEdition%%i!" equ "%%j" (
				set /A ImageEditionCount+=1
			)
		)
	)
)
if %ImageEditionCount% equ 0 (
	echo.%txtIntegrateFrameworkandOthers_166%
	echo.
	goto :Stop
)

:: Setting Windows Portable Devices Pack Path
set "PortableDevices=%PortableDevices%\%SelectedSourceOS%\%PackageVersion%"

:: Checking whether Windows Portable Devices Pack file exist
if not exist "!PortableDevices!\Microsoft-Windows-Portable-Devices-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%GlobalIntegrateWinPortableDevicesMissing%
	echo.
	echo."Microsoft-Windows-Portable-Devices-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PortableDevices\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Portable Devices Pack file exist
if not exist "!PortableDevices!\Microsoft-Windows-Portable-Devices-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%GlobalIntegrateWinPortableDevicesMissing%
	echo.
	echo."Microsoft-Windows-Portable-Devices-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PortableDevices\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Portable Devices Pack file exist
if /i "%ImageArchitecture%" equ "x64" if not exist "!PortableDevices!\Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%GlobalIntegrateWinPortableDevicesMissing%
	echo.
	echo."Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PortableDevices\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Portable Devices Pack file exist
if /i "%ImageArchitecture%" equ "x64" if not exist "!PortableDevices!\Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%GlobalIntegrateWinPortableDevicesMissing%
	echo.
	echo."Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PortableDevices\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Portable Devices Pack file exist
if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" if /i "%ImageArchitecture%" equ "x64" if not exist "!PortableDevices!\Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~wow64~~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%GlobalIntegrateWinPortableDevicesMissing%
	echo.
	echo."Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~wow64~~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PortableDevices\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Portable Devices Pack file exist
if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" if /i "%ImageArchitecture%" equ "x64" if not exist "!PortableDevices!\Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~wow64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab" (
	echo.%GlobalIntegrateWinPortableDevicesMissing%
	echo.
	echo."Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~wow64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PortableDevices\%PackageVersion%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinPortableDevices002%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinPortableDevices003%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		for /d %%j in (StarterN,StarterKN,HomeBasicN,HomeBasicKN,CoreN,CloudN,ProfessionalN,ProfessionalKN,ProfessionalEducationN,ProfessionalEducationKN,EnterpriseN,EnterpriseKN,EnterpriseSN,EnterpriseGN,UltimateN,UltimateKN,EducationN,EducationKN) do (
			if /i "%ImageEdition%" equ "%%j" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateWinPortableDevices004%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!PortableDevices!\Microsoft-Windows-Portable-Devices-Package~31bf3856ad364e35~%PackageArchitecture%~~%PackageVersion%.%PackageServicePackBuild%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateWinPortableDevices005pos01% [%ImageDefaultLanguage%] %txtIntegrateFrameworkandOthers_20%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "!PortableDevices!\Microsoft-Windows-Portable-Devices-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"

				if /i "%ImageArchitecture%" equ "x64" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateWinPortableDevices006%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!PortableDevices!\Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~amd64~~%PackageVersion%.%PackageServicePackBuild%.cab"
					if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" call :AddPackage "%InstallMount%\%%i", "!PortableDevices!\Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~wow64~~%PackageVersion%.%PackageServicePackBuild%.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateWinPortableDevices007pos01% [%ImageDefaultLanguage%] %txtIntegrateWinPortableDevices007pos02%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!PortableDevices!\Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~amd64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
					if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" call :AddPackage "%InstallMount%\%%i", "!PortableDevices!\Microsoft-Windows-Portable-Devices-WOW64-Package~31bf3856ad364e35~wow64~%ImageDefaultLanguage%~%PackageVersion%.%PackageServicePackBuild%.cab"
				)
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinPortableDevices008%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows PowerShell 7
::-------------------------------------------------------------------------------------------
:IntPowerShell7

cls
echo.===============================================================================
echo.%txtIntegrateWinPowerShell%
echo.===============================================================================
echo.

:: Checking whether Windows PowerShell 7 Pack file exist
if not exist "%PowerShell7%\PowerShell7_%SelectedSourceOS%.tpk" (
	echo.%GlobalIntegrateWinPowerShellMissing%
	echo.
	echo."PowerShell7_%SelectedSourceOS%.tpk"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PowerShell7^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows PowerShell 7 Pack file exist
if not exist "%PowerShell7%\PowerShell7_%SelectedSourceOS%_%ImageArchitecture%.reg" (
	echo.%GlobalIntegrateWinPowerShellMissing%
	echo.
	echo."PowerShell7_%SelectedSourceOS%_%ImageArchitecture%.reg"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PowerShell7^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows PowerShell 7 Pack file exist
if "%SelectedSourceOS%" equ "w7" if not exist "%PowerShell7%\Windows6.1-KB3118401-%ImageArchitecture%.cab" (
	echo.%GlobalIntegrateWinPowerShellMissing%
	echo.
	echo."Windows6.1-KB3118401-%ImageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PowerShell7^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows PowerShell 7 Pack file exist
if "%SelectedSourceOS%" equ "w81" if not exist "%PowerShell7%\Windows8.1-KB3118401-%ImageArchitecture%.cab" (
	echo.%GlobalIntegrateWinPowerShellMissing%
	echo.
	echo."Windows8.1-KB3118401-%ImageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\PowerShell7^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinPowerShell002%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinPowerShell003%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateWinPowerShell004%
			echo.-------------------------------------------------------------------------------
			if "%SelectedSourceOS%" equ "w7" call :AddPackage "%InstallMount%\%%i", "%PowerShell7%\Windows6.1-KB3118401-%ImageArchitecture%.cab"
			if "%SelectedSourceOS%" equ "w81" call :AddPackage "%InstallMount%\%%i", "%PowerShell7%\Windows8.1-KB3118401-%ImageArchitecture%.cab"
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateWinPowerShell005%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "%PowerShell7%\PowerShell7_%SelectedSourceOS%.tpk", %PackageIndex%, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateWinPowerShell006%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		call :ImportRegistry2Image "%PowerShell7%\PowerShell7_%SelectedSourceOS%_%ImageArchitecture%.reg"
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWinPowerShell007%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Remote Server Administration Tool (RSAT)
::-------------------------------------------------------------------------------------------
:IntRSATMenu

if "%SelectedSourceOS%" equ "w10" (
	cls
	echo.===============================================================================
	echo.%txtIntegrateWin10RSAT%
	echo.===============================================================================
	echo.
	echo.  [1] ^(!IntRSATv1609!^)%txtIntegrateWin10RSATop1%
	echo.
	echo.  [2] ^(!IntRSATv1709!^)%txtIntegrateWin10RSATop2%
	echo.
	echo.  [3] ^(!IntRSATv1803!^)%txtIntegrateWin10RSATop3%
	echo.
	echo.
	echo.
	echo.  [D]    %GlobalOption_Revert2Default%
	echo.
	echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
	echo.
	echo.===============================================================================
	echo.
	choice /C:123DX /N /M "%GlobalEnterChoice% "
	if errorlevel 5 goto :IntFeaturesMenu
	if errorlevel 4 (
		for %%i in (
			F_IntRSATMenu
			IntRSATv1609
			IntRSATv1709
			IntRSATv1803
		) do (
			set "%%i=-"
		)
	)
	if errorlevel 3 (
		if "!IntRSATv1803!" equ "-" (
			set "IntRSATv1609=-"
			set "IntRSATv1709=-"
			set "IntRSATv1803=+"
		) else (
			set "IntRSATv1803=-"
		)
	)
	if errorlevel 2 (
		if "!IntRSATv1709!" equ "-" (
			set "IntRSATv1609=-"
			set "IntRSATv1709=+"
			set "IntRSATv1803=-"
		) else (
			set "IntRSATv1709=-"
		)
	)
	if errorlevel 1 (
		if "!IntRSATv1609!" equ "-" (
			set "IntRSATv1609=+"
			set "IntRSATv1709=-"
			set "IntRSATv1803=-"
		) else (
			set "IntRSATv1609=-"
		)
	)
)

goto :IntRSATMenu

:IntRSAT
cls
echo.===============================================================================
echo.%txtIntegrateWin7RSAT% 
echo.===============================================================================
echo.

:: Setting Windows Remote Server Administration Tool (RSAT) Pack folder path according to selected Source OS
set "RSAT=%RSAT%\%SelectedSourceOS%"

if "%SelectedSourceOS%" equ "w7" (
	:: Checking whether Windows Remote Server Administration Tool (RSAT) Pack file exist
	if not exist "!RSAT!\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab" (
		echo.%GlobalIntegrateWin7RSATMissing%
		echo.
		echo."Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\RSAT\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Remote Server Administration Tool (RSAT) for Streaming Media Services Pack file exist
	if not exist "!RSAT!\Microsoft-Windows-MediaServer-Admin-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab" (
		echo.%GlobalIntegrateWin7RSATMissing%
		echo.
		echo."Microsoft-Windows-MediaServer-Admin-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\RSAT\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)
)

:: Checking whether Windows Remote Server Administration Tool (RSAT) Pack file exist
if "%SelectedSourceOS%" equ "w81" if not exist "!RSAT!\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab" (
	echo.%GlobalIntegrateWin7RSATMissing%
	echo.
	echo."Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\RSAT\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

if "%SelectedSourceOS%" equ "w10" (
	:: Checking whether Windows Remote Server Administration Tool (RSAT) Pack file exist
	if "!IntRSATv1609!" equ "+" if not exist "!RSAT!\10.0.14393\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0.cab" (
		echo.%GlobalIntegrateWin7RSATMissing%
		echo.
		echo."Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\RSAT\%SelectedSourceOS%\10.0.14393^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Remote Server Administration Tool (RSAT) Pack file exist
	if "!IntRSATv1709!" equ "+" if not exist "!RSAT!\10.0.16299\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15.cab" (
		echo.%GlobalIntegrateWin7RSATMissing%
		echo.
		echo."Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\RSAT\%SelectedSourceOS%\10.0.16299^> %GlobalFolder%
		goto :Stop
	)

	:: Checking whether Windows Remote Server Administration Tool (RSAT) Pack file exist
	if "!IntRSATv1803!" equ "+" if not exist "!RSAT!\10.0.17134\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1.cab" (
		echo.%GlobalIntegrateWin7RSATMissing%
		echo.
		echo."Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1.cab"
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\RSAT\%SelectedSourceOS%\10.0.17134^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingWin7RSAT%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingWin7RSAT%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		:: Checking whether the selected Source OS is a valid editions
		if "%SelectedSourceOS%" equ "w7" (
			for /d %%j in (Professional,Ultimate) do (
				if /i "%ImageEdition%" equ "%%j" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindowsServerRSAT%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!RSAT!\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindowsRSAT%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "!RSAT!\Microsoft-Windows-MediaServer-Admin-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab"
				)
			)
		) else (
			for /d %%j in (Professional,Enterprise) do (
				if /i "%ImageEdition%" equ "%%j" (
					if "%SelectedSourceOS%" equ "w81" call :AddPackage "%InstallMount%\%%i", "!RSAT!\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%.cab"

					if "%SelectedSourceOS%" equ "w10" (
						if "!IntRSATv1609!" equ "+" call :AddPackage "%InstallMount%\%%i", "!RSAT!\10.0.14393\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0.cab"
						if "!IntRSATv1709!" equ "+" call :AddPackage "%InstallMount%\%%i", "!RSAT!\10.0.16299\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15.cab"
						if "!IntRSATv1803!" equ "+" call :AddPackage "%InstallMount%\%%i", "!RSAT!\10.0.17134\Microsoft-Windows-RemoteServerAdministrationTools-Client-Package-TopLevel~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1.cab"
					)
				)
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingWindowsRSAT%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft Diagnostics and Recovery Toolset ^(DaRT^) 7.0/8.1/10/11
::-------------------------------------------------------------------------------------------
:IntDaRTMenu

if "%IsDialogsEnabled%" equ "Yes" if "!DaRT_Warning!" equ "" (
	cls
	echo.===============================================================================
	if "%SelectedSourceOS%" equ "w7" echo.%txtIntegrateMicrosoftDart7%
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateMicrosoftDart8%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.               %txtIntegrateMicrosoftDartpos01% %OSID% %txtIntegrateMicrosoftDartpos02%
	echo.===============================================================================
	echo.
	echo.
	echo.                              %GlobalWARNING%
	echo.                              =============
	echo.
	echo. %txtIntegrateMicrosoftDartLine01%
	echo. %txtIntegrateMicrosoftDartLine02%
	echo. %txtIntegrateMicrosoftDartLine03%
	echo. %txtIntegrateMicrosoftDartLine04%
	echo. %txtIntegrateMicrosoftDartLine05%
	echo. %txtIntegrateMicrosoftDartLine06%
	echo. %txtIntegrateMicrosoftDartLine07%
	echo. %txtIntegrateMicrosoftDartLine08%
	echo.
	echo.
	echo.   %GlobalDisableDialogs_line01%
	echo.   %GlobalDisableDialogs_line02%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%GlobalChoice_continue% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "DaRT_Warning=0"
)

set "CurrentMenu=IntDaRTMenu"

cls
echo.===============================================================================
if "%SelectedSourceOS%" equ "w7" echo.%txtIntegrateMicrosoftDart7%
if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateMicrosoftDart8%
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateMicrosoftDartpos01% %OSID% %txtIntegrateMicrosoftDartpos02%
echo.===============================================================================
echo.

set /A count=1
for %%n in (
	DaRTBoot
	DaRTRecovery
) do (
	set "OptionID=!count!"

	if "%%n" equ "DaRTBoot" (
		if "%IsBootImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" (
			echo.  [!OptionID!] ^(!IntDaRTBoot!^)%txtIntegrateDrivers_01%
		)
	)
	if "%%n" equ "DaRTRecovery" (
		if "%IsRecoveryImageSelected%" equ "Yes" (
			if "%SelectedSourceOS%" equ "w7" (
				if "%ImageInstallationType%" neq "Embedded" (
					set "%%n=!count!"
				)
			)
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!IntDaRTRecovery!^)%txtIntegrateDrivers_03%
	)

	if "!%%n!" neq "" (
		echo.
		set /A count+=1
	)
)

if "%IsBootImageSelected%" equ "No" (
	echo.
	echo.         %GlobalCantIntegrate%
	echo.                                %txtBootImageOptions%
	echo.
	echo.         %GlobalIntegrateDriversBootNoMouted%
	echo.         %GlobalGoToolsMenuMountBoot%
	echo.
)
if "%IsRecoveryImageSelected%" equ "No" (
	echo.
	echo.         %GlobalCantIntegrate%
	echo.                                %txtInstallandWinReImageOptions%
	echo.
	echo.         %GlobalWinREnoMounted%
	echo.         %GlobalGoToolsMenuMountWinRE%
	echo.
)
echo.
echo.
echo.
echo.
echo.  [S]    %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.
echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntegrateMenu
	if /i "%%c" equ "D" (
		for %%f in (
			F_IntDaRTMenu
			DaRTBoot
			DaRTRecovery
		) do (
			set "%%i=%%i"
			if "!%%i:~,2!" equ "F_" (
				set "%%i=-"
			) else (
				set "Int%%i=-"
				set %%i=
			)
		)
	)
	if /i "%%c" equ "S" (
		for %%f in (
			DaRTBoot
			DaRTRecovery
		) do (
			if "!%%f!" neq "" (
				set "Int%%f=+"
			)
		)
	)
	if "%%c" equ "!DaRTBoot!" (
		if "!IntDaRTBoot!" equ "-" (
			set "IntDaRTBoot=+"
		) else (
			set "IntDaRTBoot=-"
		)
	)
	if "%%c" equ "!DaRTRecovery!" (
		if "!IntDaRTRecovery!" equ "-" (
			set "IntDaRTRecovery=+"
		) else (
			set "IntDaRTRecovery=-"
		)
	)
)

:: Return to IntDaRTMenu
rem goto :IntDaRTMenu
goto :!CurrentMenu!

:IntDaRT

if "!IntDaRT_Selection!" equ "+" (
	for %%f in (
		IntDaRTBoot
		IntDaRTRecovery
	) do (
		set "%%f=+"
	)
)

cls
echo.===============================================================================
if "%SelectedSourceOS%" equ "w7" echo.%txtIntegrateMicrosoftDart7%
if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateMicrosoftDart8%
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateMicrosoftDartpos01% %OSID% %txtIntegrateMicrosoftDartpos02%
echo.===============================================================================
echo.

:: Setting Microsoft DaRT Tools Pack folder path
set "DaRT=%DaRT%\%SelectedSourceOS%"
if "%SelectedSourceOS%" neq "w11" (
	set "DebugTools=DebugTools_%PackageVersion%.tpk"
)
if "%SelectedSourceOS%" equ "w11" (
	if "%ImageBuild%" geq "21996" if "%ImageBuild%" lss "22563" (
		set "DebugTools=DebugTools_%PackageVersion%.tpk"
	)
	if "%ImageBuild%" geq "22563" if "%ImageBuild%" lss "25115" (
		set "DebugTools=DebugTools_10.0.22621.tpk"
	)
)

:: Setting Package Language
for /d %%l in (ar-SA,bg-BG,cs-CZ,da-DK,el-GR,en-GB,en-US,et-EE,fi-FI,he-IL,hr-HR,hu-HU,lt-LT,lv-LV,nb-NO,nl-NL,pl-PL,ro-RO,sk-SK,sl-SI,sr-Latn-CS,sr-Latn-RS,sv-SE,th-TH,tr-TR,uk-UA) do (
	if "%ImageDefaultLanguage%" equ "%%l" set "PackageLanguage=en-US"
)

for /d %%l in (de-DE,es-ES,fr-FR,it-IT,ja-JP,ko-KR,pt-BR,ru-RU,zh-CN,zh-TW) do (
	if "%ImageDefaultLanguage%" equ "%%l" set "PackageLanguage=%%l"
)

if "%ImageDefaultLanguage%" equ "es-MX" set "PackageLanguage=es-ES"
if "%ImageDefaultLanguage%" equ "fr-CA" set "PackageLanguage=fr-FR"
if "%ImageDefaultLanguage%" equ "pt-PT" set "PackageLanguage=pt-BR"
if "%ImageDefaultLanguage%" equ "zh-HK" set "PackageLanguage=zh-TW"

:: Checking whether Microsoft DaRT 7/8.1/10/11 Tools Base Package file exist
if not exist "!DaRT!\DaRT.tpk" (
	if "%SelectedSourceOS%" equ "w7" echo.%txtMicrosoftDart7% "DaRT.tpk" %GlobalNotFound%
	if "%SelectedSourceOS%" equ "w81" echo.%txtMicrosoftDart81% "DaRT.tpk" %GlobalNotFound%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtMicrosoftDartpos1% %OSID% %txtMicrosoftDartpos2% "DaRT.tpk" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\DaRT\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft DaRT 7/8.1/10/11 Tools Language Package file exist
if not exist "!DaRT!\DaRT_!PackageLanguage!.tpk" (
	if "%SelectedSourceOS%" equ "w7" echo.%txtMicrosoftDart7% "DaRT_!PackageLanguage!.tpk" %GlobalNotFound%
	if "%SelectedSourceOS%" equ "w81" echo.%txtMicrosoftDart81% "DaRT_!PackageLanguage!.tpk" %GlobalNotFound%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtMicrosoftDartpos1% %OSID% %txtMicrosoftDartpos2% "DaRT_!PackageLanguage!.tpk" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\DaRT\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft DaRT 10/11 Debug Tools Package file exist
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "%DaRT%\%DebugTools%" (
	echo.%txtMicrosoftDartToolspos1% %OSID% %txtMicrosoftDartToolspos2%
	echo.
	echo."!DebugTools!"
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\DaRT\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

echo.DaRT      : "!DaRT!"
echo.DebugTools: "!DebugTools!"
echo.

if "!IntDaRTBoot!" equ "+" (
	echo.
	echo.===============================================================================
	if "%SelectedSourceOS%" equ "w7" echo.%txtIntegrateMicrosoftDartBoot7%
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateMicrosoftDartBoot10%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateMicrosoftDartBootpos01% %OSID% %txtIntegrateMicrosoftDartBootpos02%
	echo.===============================================================================
	echo.

	:: Getting Boot Image Index Architecture
	call :GetImageArchitecture "%BootWim%", 2 >nul

	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w7" echo.%txtStartingIntegratingMicrosoftDaRT7%
	if "%SelectedSourceOS%" equ "w81" echo.%txtStartingIntegratingMicrosoftDaRT8%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtStartingIntegratingMicrosoftDaRTpos01% %OSID% %txtStartingIntegratingMicrosoftDaRTpos02%
	echo.-------------------------------------------------------------------------------
	echo.
	echo.    %GlobalImage% boot.wim
	echo.    %GlobalImageIndex% 2
	echo.    %GlobalImageArchitecture% %ImageArchitecture%
	echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
	echo.
	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w7" echo.%txtIntegratingMicrosoftDaRT7Boot%
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegratingMicrosoftDaRT8Boot%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegratingMicrosoftDaRTToolsBootpos01% %OSID% %txtIntegratingMicrosoftDaRTToolsBootpos02%
	echo.-------------------------------------------------------------------------------
	echo.
	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w7" echo.%txtIntegratingMicrosoftDart7%
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegratingMicrosoftDart8%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegratingMicrosoftDaRTBasepos01% %OSID% %txtIntegrateMicrosoftDart009pos02%
	echo.-------------------------------------------------------------------------------
	call :ApplyImage "!DaRT!\DaRT.tpk", %PackageIndex%, "%BootMount%\2"

	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "%BootMount%\2\Windows\System32\fmapi.dll" (
		for %%i in (!ImageIndexNo!) do (
			if exist "%InstallMount%\%%i\" copy /Y "%InstallMount%\%%i\Windows\System32\fmapi.dll" "%BootMount%\2\Windows\System32" >nul
		)
	)

	call :RemoveFile "%BootMount%\2\Windows\System32\winpeshl.ini"
	(
		echo.[LaunchApps]
		echo.%%WinDIR%%\system32\wpeinit.exe
		echo.%%WinDIR%%\system32\netstart.exe
		echo.%%systemdrive%%\setup.exe
	)>>"%BootMount%\2\Windows\System32\winpeshl.ini"
	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w7" echo.%txtIntegratingMicrosoftDaRT7pos01% [!PackageLanguage!] %GlobalFolder%
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegratingMicrosoftDaRT8pos01% [!PackageLanguage!] %GlobalFolder%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegratingMicrosoftDaRTToolspos01% %OSID% %txtIntegratingMicrosoftDaRTToolspos02% [!PackageLanguage!] %GlobalFolder%
	echo.-------------------------------------------------------------------------------
	call :ApplyImage "!DaRT!\DaRT_!PackageLanguage!.tpk", %PackageIndex%, "%BootMount%\2"

	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegratingMicrosoftDaRTpos01% %OSID% %txtIntegratingMicrosoftDaRTpos02%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "!DaRT!\!DebugTools!", %PackageIndex%, "%BootMount%\2"
	)

	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w7" echo.%txtFinishedIntegratingMicrosoftDaRT7%
	if "%SelectedSourceOS%" equ "w81" echo.%txtFinishedIntegratingMicrosoftDaRT8%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtFinishedIntegratingMicrosoftDaRTpos01% %OSID% %txtFinishedIntegratingMicrosoftDaRTpos02%
	echo.-------------------------------------------------------------------------------
	echo.
)

if "!IntDaRTRecovery!" equ "+" (
	if exist "%WinReMount%\Windows" (
		echo.
		echo.===============================================================================
		if "%SelectedSourceOS%" equ "w7" echo.%txtIntegrateMicrosoftDart7WinRe%
		if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateMicrosoftDart8WinRe%
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateMicrosoftDartWinRepos01% %OSID% %txtIntegrateMicrosoftDartWinRepos02%
		echo.===============================================================================
		echo.

		:: Getting Recovery Image Index Architecture
		call :GetImageArchitecture "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%", 1 >nul

		echo.-------------------------------------------------------------------------------
		if "%SelectedSourceOS%" equ "w7" echo.%txtStartingIntegratingMicrosoftDart7WinRe%
		if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateMicrosoftDartWinRe003%
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateMicrosoftDartWinRepos01% %OSID% %txtIntegrateMicrosoftDartWinRepos02%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.    %GlobalImage% WinRE.wim
		echo.    %GlobalImageIndex% !SpecifiedSourceIndex!
		echo.    %GlobalImageArchitecture% %ImageArchitecture%
		echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
		echo.
		echo.-------------------------------------------------------------------------------
		if "%SelectedSourceOS%" equ "w7" echo.%txtIntegratingMicrosoftDart7WinRe%
		if "%SelectedSourceOS%" equ "w81" echo.%txtIntegratingMicrosoftDart8WinRe%
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateMicrosoftDartWinRepos01% %OSID% Tools to %txtIntegrateMicrosoftDartWinRepos02%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.-------------------------------------------------------------------------------
		if "%SelectedSourceOS%" equ "w7" echo.%txtIntegratingMicrosoftDart7%
		if "%SelectedSourceOS%" equ "w81" echo.%txtIntegratingMicrosoftDart8%
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegratingMicrosoftDartpos01% %OSID% %txtIntegrateMicrosoftDartWinRe010pos02%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "!DaRT!\DaRT.tpk", %PackageIndex%, "%WinReMount%"
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "%WinReMount%\Windows\System32\fmapi.dll" copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\fmapi.dll" "%WinReMount%\Windows\System32" >nul

		call :RemoveFile "%WinReMount%\Windows\System32\winpeshl.ini"
		(
			echo.[LaunchApps]
			echo.%%WinDIR%%\system32\wpeinit.exe
			echo.%%WinDIR%%\system32\netstart.exe
			echo.%%systemdrive%%\sources\recovery\recenv.exe
		)>>"%WinReMount%\Windows\System32\winpeshl.ini"

		echo.-------------------------------------------------------------------------------
		if "%SelectedSourceOS%" equ "w7" echo.%txtIntegratingMicrosoftDart7pos01% [!PackageLanguage!] %GlobalFolder%
		if "%SelectedSourceOS%" equ "w81" echo.%txtIntegratingMicrosoftDart8pos01% [!PackageLanguage!] %GlobalFolder%
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegratingMicrosoftDartToolspos01% %OSID% %txtIntegratingMicrosoftDartToolspos02% [!PackageLanguage!] %GlobalFolder%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "!DaRT!\DaRT_!PackageLanguage!.tpk", %PackageIndex%, "%WinReMount%"

		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegratingMicrosoftDartDebugpos01% %OSID% %txtIntegratingMicrosoftDartDebugpos02%
			echo.-------------------------------------------------------------------------------
			call :ApplyImage "%DaRT%\%DebugTools%", %PackageIndex%, "%WinReMount%"
		)

		echo.-------------------------------------------------------------------------------
		if "%SelectedSourceOS%" equ "w7" echo.%txtFinishedIntegratingMicrosoftDart7%
		if "%SelectedSourceOS%" equ "w81" echo.%txtFinishedIntegratingMicrosoftDart8%
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtFinishedIntegratingMicrosoftDartpos01% %OSID% %txtFinishedIntegratingMicrosoftDartpos02%
		echo.-------------------------------------------------------------------------------
		echo.
	)
)

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Integrate Microsoft Default Inbox Apps
::-------------------------------------------------------------------------------------------
:IntInboxAppsMenu

set "CurrentMenu=IntInboxAppsMenu"

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu%
echo.===============================================================================
echo.

set /A count=1
for %%n in (
	Alarms
	AppInstaller
	BingFinance
	BingFoodDrink
	BingHealthFitness
	BingMaps
	BingNews
	BingSports
	BingTravel
	BingWeather
	Calculator
	CommunicationsApps
	Camera
	ClipChamp
	AV1VideoExtension
	VP9VideoExtensions
	HEIFImageExtension
	HEVCVideoExtension
	MPEG2VideoExtension
	RawImageExtension
	WebMediaExtensions
	WebpImageExtension
	Cortana
	DesktopAppInstaller
	DirectXRuntime
	FeedbackHub
	GetHelp
	FilmsTV
	GrooveMusic
	HelpAndTips
	MediaPlayer
	MoviesTV
	Maps
	Messaging
	Wallet
	MicrosoftPowerBI
	MinecraftEducationEdition
	MixedRealityPortal
	MixedRealityViewer
	OneConnect
	OfficeHub
	News
	Notepad
	OneNote
	D3DMappingLayers
	Paint3D
	Paint
	People
	YourPhone
	Photos
	remPhotosMediaEngine
	PowerAutomateDesktop
	Print3D
	QuickAssist
	Reader
	ReadingList
	Scan
	Skype
	ScreenSketch
	SolitaireCollection
	SoundRecorder
	StickyNotes
	StorePurchaseApp
	Teams
	Terminal
	Getstarted
	Todos
	VoiceRecorder
	Weather
	ClientWebExperience
	WindowsDefender
	WindowsMail
	WindowsStore
	AmazonStore
	WindowsSubsystemForAndroid
	WindowsSubsystemForLinux
	Whiteboard
	GamingServices
	Xbox
	Gaming
	XboxGamingOverlay
	XboxGameOverlay
	XboxIdentityProvider
	XboxSpeechToTextOverlay
	XboxLiveGames
	XboxTCUI
	ZuneMusic
	ZuneVideo
	AMDLink
	HPSupportAssistant
	IntelGraphicsCommandCenter
	IntelThunderboltController
	KillerControlCenter
	NVIDIAControlPanel
	RealtekAudioControl
	WavesMaxxAudioProforDell
) do (
	if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
	if !count! gtr 9 set "OptionID=!count!"

	if "%%n" equ "Alarms" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppAlarms!^)%txtAlarmsClock%
	)
	if "%%n" equ "AppInstaller" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppDesktopAppInstaller!^)%txtAppInstaller%
	)
	if "%%n" equ "BingFinance" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingFinance!^)%txtBingFinance%
	)
	if "%%n" equ "BingFoodDrink" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingFoodDrink!^)%txtBingFood%
	)
	if "%%n" equ "BingHealthFitness" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingHealthFitness!^)%txtBingHealth%
	)
	if "%%n" equ "BingMaps" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingMaps!^)%Bing Maps%
	)
	if "%%n" equ "BingNews" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingNews!^)%txtBingNews%
	)
	if "%%n" equ "BingSports" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingSports!^)%txtBingSports%
	)
	if "%%n" equ "BingTravel" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingTravel!^)%txtBingTravel%
	)
	if "%%n" equ "BingWeather" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingWeather!^)%txtBingWeather%
	)
	if "%%n" equ "Calculator" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppCalculator!^)%txtCalculator2%
	)
	if "%%n" equ "CommunicationsApps" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppCommunicationsApps!^)%txtCalenderMailPeople%
	)
	if "%%n" equ "Camera" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppCamera!^)%GlobalIntegrateMicrosoftDefaultInboxAppxCamera%
	)
	if "%%n" equ "ClipChamp" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "16299" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppClipChamp!^)%GlobalIntegrateMicrosoftDefaultInboxAppxClipChamp%
	)
	if "%%n" equ "AV1VideoExtension" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppAV1VideoExtension!^)%txtCodecPluginAOMedia%
	)
	if "%%n" equ "VP9VideoExtensions" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppVP9VideoExtensions!^)%GlobalIntegrateMicrosoftDefaultInboxCodecVP9%
	)
	if "%%n" equ "HEIFImageExtension" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppHEIFImageExtension!^)%GlobalIntegrateMicrosoftDefaultInboxCodecHEIF%
	)
	if "%%n" equ "HEVCVideoExtension" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppHEVCVideoExtension!^)%GlobalIntegrateMicrosoftDefaultInboxCodecHEVC%
	)
	if "%%n" equ "MPEG2VideoExtension" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppMPEG2VideoExtension!^)%GlobalIntegratePluginCodecMPEG2%
	)
	if "%%n" equ "RawImageExtension" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" gtr "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppRawImageExtension!^)%GlobalIntegrateMicrosoftDefaultInboxCodecRaw%
	)
	if "%%n" equ "WebMediaExtensions" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWebMediaExtensions!^)%GlobalIntegrateMicrosoftDefaultInboxCodecWeb%
	)
	if "%%n" equ "WebpImageExtension" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWebpImageExtension!^)%GlobalIntegrateMicrosoftDefaultInboxCodecWebImage%
	)
	if "%%n" equ "Cortana" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "19041" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppCortana!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu017%
	)
	if "%%n" equ "DesktopAppInstaller" (
		if "%SelectedSourceOS%" equ "w10" (
			rem if "%ImageBuild%" gtr "18362" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppDesktopAppInstaller!^)%GlobalIntegrateDesktopAppInstaller%
	)
	if "%%n" equ "DirectXRuntime" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppDirectXRuntime!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu018%
	)
	if "%%n" equ "FeedbackHub" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppFeedbackHub!^)%GlobalIntegrateFeedbackHub%
	)
	if "%%n" equ "GetHelp" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppGetHelp!^)%GlobalIntegrateGetHelp%
	)
	if "%%n" equ "FilmsTV" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" lss "19041" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppZuneVideo!^)%GlobalIntegrateFilmsTV%
	)
	if "%%n" equ "GrooveMusic" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppZuneMusic!^)%GlobalIntegrateGrooveMusic%
	)
	if "%%n" equ "HelpAndTips" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppHelpAndTips!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu019%
	)
	if "%%n" equ "MediaPlayer" (
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "21996" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppZuneMusic!^)%GlobalIntegrateMediaPlayer%
	)
	if "%%n" equ "MoviesTV" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "19041" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppZuneVideo!^)%GlobalIntegrateMoviesTV%
	)
	if "%%n" equ "Maps" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppMaps!^)%GlobalIntegrateMaps%
	)
	if "%%n" equ "Messaging" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" lss "19041" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppMessaging!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu020%
	)
	if "%%n" equ "Wallet" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWallet!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu021%
	)
	if "%%n" equ "MicrosoftPowerBI" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppMicrosoftPowerBI!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu022%
	)
	if "%%n" equ "MinecraftEducationEdition" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "16299" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppMinecraftEducationEdition!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu023%
	)
	if "%%n" equ "MixedRealityPortal" (
		if "%SelectedSourceOS%" equ "w10" (
			if /i "%ImageArchitecture%" neq "x86" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppMixedRealityPortal!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu024%
	)
	if "%%n" equ "MixedRealityViewer" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppMixedRealityViewer!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu025%
	)
	if "%%n" equ "OneConnect" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" lss "19041" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppOneConnect!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu026%
	)
	if "%%n" equ "OfficeHub" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppOfficeHub!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu027%
	)
	if "%%n" equ "News" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingNews!^)%GlobalIntegrateNews%
	)
	if "%%n" equ "Notepad" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppNotepad!^)%GlobalIntegrateNotepad%
	)
	if "%%n" equ "OneNote" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppOneNote!^)%GlobalIntegrateOneNote%
	)
	if "%%n" equ "D3DMappingLayers" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "19041" (
				if /i "%ImageArchitecture%" neq "x86" (
					set "%%n=!count!"
				)
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppD3DMappingLayers!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu028%
	)
	if "%%n" equ "Paint3D" (
		if "%SelectedSourceOS%" equ "w10" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppPaint3D!^)%GlobalIntegratePaint3D%
	)
	if "%%n" equ "Paint" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppPaint!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu029%
	)
	if "%%n" equ "People" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppPeople!^)%GlobalIntegratePeople%
	)
	if "%%n" equ "Photos" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppPhotos!^)%GlobalIntegratePhotos%
	)
	if "%%n" equ "PhotosMediaEngine" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "19041" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppPhotosMediaEngine!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu030%
	)
	if "%%n" equ "PowerAutomateDesktop" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppPowerAutomateDesktop!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu031%
	)
	if "%%n" equ "Print3D" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" lss "19041" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppPrint3D!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu032%
	)
	if "%%n" equ "QuickAssist" (
		if "%SelectedSourceOS%" equ "w11" (
			if "%ImageBuild%" geq "22563" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppQuickAssist!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu033%
	)
	if "%%n" equ "Reader" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppReader!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu034%
	)
	if "%%n" equ "ReadingList" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppReadingList!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu035%
	)
	if "%%n" equ "Scan" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppScan!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu036%
	)
	if "%%n" equ "Skype" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppSkype!^)%GlobalIntegrateSkype%
		)
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppSkype!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu037%
		)
	)
	if "%%n" equ "ScreenSketch" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" (
			if "%SelectedSourceOS%" equ "w10" echo. [!OptionID!] ^(!InboxAppScreenSketch!^)%GlobalIntegrateSnipSketch%
			if "%SelectedSourceOS%" equ "w11" echo. [!OptionID!] ^(!InboxAppScreenSketch!^)%GlobalIntegrateSnippingTool%
		)
	)
	if "%%n" equ "SolitaireCollection" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppSolitaireCollection!^)%GlobalIntegrateSolitaire%
	)
	if "%%n" equ "SoundRecorder" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppSoundRecorder!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu038%
	)
	if "%%n" equ "StickyNotes" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppStickyNotes!^)%GlobalIntegrateSticky%
	)
	if "%%n" equ "StorePurchaseApp" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppStorePurchaseApp!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu039%
	)
	if "%%n" equ "Teams" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppTeams!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu040%
	)
	if "%%n" equ "Terminal" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "19041" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppTerminal!^)%GlobalIntegrateTerminal%
	)
	if "%%n" equ "Getstarted" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppGetstarted!^)%GlobalIntegrateTips%
	)
	if "%%n" equ "Todos" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppTodos!^)%GlobalIntegrateTodos%
	)
	if "%%n" equ "VoiceRecorder" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppSoundRecorder!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu041%
	)
	if "%%n" equ "Weather" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppBingWeather!^)%GlobalIntegrateWeather%
	)
	if "%%n" equ "ClientWebExperience" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppClientWebExperience!^)%GlobalIntegrateWindowsWebExperience%
	)
	if "%%n" equ "WindowsDefender" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWindowsDefender!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu042%
	)
	if "%%n" equ "WindowsMail" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppCommunicationsApps!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu043%
	)
	if "%%n" equ "WindowsStore" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "14393" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWindowsStore!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu044%
	)
	if "%%n" equ "AmazonStore" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppAmazonStore!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu045%
	)
	if "%%n" equ "WindowsSubsystemForAndroid" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWindowsSubsystemForAndroid!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu046%
	)
	if "%%n" equ "WindowsSubsystemForLinux" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWindowsSubsystemForLinux!^)%GlobalSubsystem2Linux%
	)
	if "%%n" equ "Whiteboard" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWhiteboard!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu047%
	)
	if "%%n" equ "GamingServices" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppGamingServices!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu050%
	)
	if "%%n" equ "Xbox" (
		if "%SelectedSourceOS%" equ "w10" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppXbox!^)%GlobalIntegrateXboxConsoleCompanion%
	)
	if "%%n" equ "Gaming" (
		if "%SelectedSourceOS%" equ "w11" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppGaming!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu051%
	)
	if "%%n" equ "XboxGamingOverlay" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppXboxGamingOverlay!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu052%
	)
	if "%%n" equ "XboxGameOverlay" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppXboxGameOverlay!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu053%
	)
	if "%%n" equ "XboxIdentityProvider" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppXboxIdentityProvider!^)%GlobalIntegrateXboxIdentityProvider%
	)
	if "%%n" equ "XboxSpeechToTextOverlay" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppXboxSpeechToTextOverlay!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu054%
	)
	if "%%n" equ "XboxLiveGames" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppXboxLiveGames!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu055%
	)
	if "%%n" equ "XboxTCUI" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppXboxTCUI!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu056%
	)
	if "%%n" equ "YourPhone" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppYourPhone!^)%GlobalIntegratePhoneLink%
	)
	if "%%n" equ "ZuneMusic" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppZuneMusic!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu057%
	)
	if "%%n" equ "ZuneVideo" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppZuneVideo!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu058%
	)
	if "%%n" equ "AMDLink" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppAMDLink!^)%txtIntegrateMicrosoftDefaultInboxAppxAMDLink%
	)
	if "%%n" equ "HPSupportAssistant" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppHPSupportAssistant!^)%txtIntegrateMicrosoftDefaultInboxAppxHPSupportAssistant9%
	)
	if "%%n" equ "IntelGraphicsCommandCenter" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppIntelGraphicsCommandCenter!^)%txtIntegrateMicrosoftDefaultInboxAppxIntelGraphicsCommandCenter%
	)
	if "%%n" equ "IntelThunderboltController" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppIntelThunderboltController!^)%txtIntegrateMicrosoftDefaultInboxAppxIntelThunderboltController%
	)
	if "%%n" equ "KillerControlCenter" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppKillerControlCenter!^)%txtIntegrateMicrosoftDefaultInboxAppxRivetNetworksKillerControlCenter%
	)
	if "%%n" equ "NVIDIAControlPanel" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppNVIDIAControlPanel!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu048%
	)
	if "%%n" equ "RealtekAudioControl" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppRealtekAudioControl!^)%txtIntegrateMicrosoftDefaultInboxAppxMenu049%
	)
	if "%%n" equ "WavesMaxxAudioProforDell" (
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" geq "17763" (
				set "%%n=!count!"
			)
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!InboxAppWavesMaxxAudioProforDell!^)%txtIntegrateMicrosoftDefaultInboxAppxWavesMaxxAudioPro4Dell2020%
	)

	if "!%%n!" neq "" (
		set /A count+=1
	)
)

echo.
echo.  [S]    %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntFeaturesMenu
	if /i "%%c" equ "D" (
		for %%# in (
			F_IntInboxAppsMenu

			Alarms

			BingFinance
			BingFoodDrink
			BingHealthFitness
			BingMaps
			BingNews
			BingSports
			BingTravel
			BingWeather
			Calculator
			CommunicationsApps
			Camera
			ClipChamp
			AV1VideoExtension
			VP9VideoExtensions
			HEIFImageExtension
			HEVCVideoExtension
			MPEG2VideoExtension
			RawImageExtension
			WebMediaExtensions
			WebpImageExtension
			Cortana
			DesktopAppInstaller
			DirectXRuntime
			FeedbackHub
			GetHelp

			HelpAndTips

			Maps
			Messaging
			Wallet
			MicrosoftPowerBI
			MinecraftEducationEdition
			MixedRealityPortal
			MixedRealityViewer
			OneConnect

			OfficeHub
			Notepad
			OneNote
			D3DMappingLayers
			Paint3D
			Paint
			People
			YourPhone
			Photos
			PhotosMediaEngine
			PowerAutomateDesktop
			Print3D
			QuickAssist
			Reader
			ReadingList
			Scan
			Skype
			ScreenSketch
			SolitaireCollection
			SoundRecorder
			StickyNotes
			StorePurchaseApp
			Teams
			Terminal
			Getstarted
			Todos

			ClientWebExperience
			WindowsDefender

			WindowsStore
			AmazonStore
			WindowsSubsystemForAndroid
			WindowsSubsystemForLinux
			Whiteboard
			GamingServices
			Xbox
			Gaming
			XboxGamingOverlay
			XboxGameOverlay
			XboxIdentityProvider
			XboxSpeechToTextOverlay
			XboxLiveGames
			XboxTCUI
			ZuneMusic
			ZuneVideo

			AMDLink
			HPSupportAssistant
			IntelGraphicsCommandCenter
			IntelThunderboltController
			KillerControlCenter
			NVIDIAControlPanel
			RealtekAudioControl
			WavesMaxxAudioProforDell
		) do (
			rem set "%%#=!%%#:~,2!"
			set "%%#=%%#"
			rem echo.~,2 !%%#:~,2!
			if "!%%#:~,2!" equ "F_" (
				set "%%#=-"
			) else (
				set "InboxApp%%#=-"
				set %%#=
			)
		)
	)
	if /i "%%c" equ "S" (
		for %%# in (
			Alarms
			AppInstaller
			BingFinance
			BingFoodDrink
			BingHealthFitness
			BingMaps
			BingNews
			BingSports
			BingTravel
			BingWeather
			Calculator
			CommunicationsApps
			Camera
			ClipChamp
			AV1VideoExtension
			VP9VideoExtensions
			HEIFImageExtension
			HEVCVideoExtension
			MPEG2VideoExtension
			RawImageExtension
			WebMediaExtensions
			WebpImageExtension
			Cortana
			DesktopAppInstaller
			DirectXRuntime
			FeedbackHub
			GetHelp
			FilmsTV
			GrooveMusic
			HelpAndTips
			MediaPlayer
			MoviesTV
			Maps
			Messaging
			Wallet
			MicrosoftPowerBI
			MinecraftEducationEdition
			MixedRealityPortal
			MixedRealityViewer
			OneConnect

			OfficeHub
			News
			Notepad
			OneNote
			D3DMappingLayers
			Paint3D
			Paint
			People
			YourPhone
			Photos
			remPhotosMediaEngine
			PowerAutomateDesktop
			Print3D
			QuickAssist
			Reader
			ReadingList
			Scan
			Skype
			ScreenSketch
			SolitaireCollection
			SoundRecorder
			StickyNotes
			StorePurchaseApp
			Teams
			Terminal
			Getstarted
			Todos
			VoiceRecorder
			Weather
			ClientWebExperience
			WindowsDefender
			WindowsMail
			WindowsStore
			AmazonStore
			WindowsSubsystemForAndroid
			WindowsSubsystemForLinux
			Whiteboard
			GamingServices
			Xbox
			Gaming
			XboxGamingOverlay
			XboxGameOverlay
			XboxIdentityProvider
			XboxSpeechToTextOverlay
			XboxLiveGames
			XboxTCUI
			ZuneMusic
			ZuneVideo

			AMDLink
			HPSupportAssistant
			IntelGraphicsCommandCenter
			IntelThunderboltController
			KillerControlCenter
			NVIDIAControlPanel
			RealtekAudioControl
			WavesMaxxAudioProforDell
		) do (
			if "!%%#!" neq "" (
				if "%%#" neq "AppInstaller" if "%%#" neq "FilmsTV" if "%%#" neq "GrooveMusic" if "%%#" neq "MoviesTV" if "%%#" neq "MediaPlayer" if "%%#" neq "News" if "%%#" neq "VoiceRecorder" if "%%#" neq "Weather" if "%%#" neq "WindowsMail" (
					set "InboxApp%%#=+"
				)
				if "%%#" equ "AppInstaller" set "InboxAppDesktopAppInstaller=+"
				if "%%#" equ "FilmsTV" set "InboxAppZuneVideo=+"
				if "%%#" equ "GrooveMusic" set "InboxAppZuneMusic=+"
				if "%%#" equ "MediaPlayer" set "InboxAppZuneMusic=+"
				if "%%#" equ "MoviesTV" set "InboxAppZuneVideo=+"
				if "%%#" equ "News" set "InboxAppBingNews=+"
				if "%%#" equ "VoiceRecorder" set "InboxAppSoundRecorder=+"
				if "%%#" equ "Weather" set "InboxAppBingWeather=+"
				if "%%#" equ "WindowsMail" set "InboxAppCommunicationsApps=+"
			)
		)
	)
	if "%%c" equ "!Alarms!" (
		if "!InboxAppAlarms!" equ "-" (
			set "InboxAppAlarms=+"
		) else (
			set "InboxAppAlarms=-"
		)
	)
	if "%%c" equ "!AppInstaller!" (
		if "!InboxAppDesktopAppInstaller!" equ "-" (
			set "InboxAppDesktopAppInstaller=+"
		) else (
			set "InboxAppDesktopAppInstaller=-"
		)
	)
	if "%%c" equ "!BingFinance!" (
		if "!InboxAppBingFinance!" equ "-" (
			set "InboxAppBingFinance=+"
		) else (
			set "InboxAppBingFinance=-"
		)
	)
	if "%%c" equ "!BingFoodDrink!" (
		if "!InboxAppBingFoodDrink!" equ "-" (
			set "InboxAppBingFoodDrink=+"
		) else (
			set "InboxAppBingFoodDrink=-"
		)
	)
	if "%%c" equ "!BingHealthFitness!" (
		if "!InboxAppBingHealthFitness!" equ "-" (
			set "InboxAppBingHealthFitness=+"
		) else (
			set "InboxAppBingHealthFitness=-"
		)
	)
	if "%%c" equ "!BingMaps!" (
		if "!InboxAppBingMaps!" equ "-" (
			set "InboxAppBingMaps=+"
		) else (
			set "InboxAppBingMaps=-"
		)
	)
	if "%%c" equ "!BingNews!" (
		if "!InboxAppBingNews!" equ "-" (
			set "InboxAppBingNews=+"
		) else (
			set "InboxAppBingNews=-"
		)
	)
	if "%%c" equ "!BingSports!" (
		if "!InboxAppBingSports!" equ "-" (
			set "InboxAppBingSports=+"
		) else (
			set "InboxAppBingSports=-"
		)
	)
	if "%%c" equ "!BingTravel!" (
		if "!InboxAppBingTravel!" equ "-" (
			set "InboxAppBingTravel=+"
		) else (
			set "InboxAppBingTravel=-"
		)
	)
	if "%%c" equ "!BingWeather!" (
		if "!InboxAppBingWeather!" equ "-" (
			set "InboxAppBingWeather=+"
		) else (
			set "InboxAppBingWeather=-"
		)
	)
	if "%%c" equ "!Calculator!" (
		if "!InboxAppCalculator!" equ "-" (
			set "InboxAppCalculator=+"
		) else (
			set "InboxAppCalculator=-"
		)
	)
	if "%%c" equ "!CommunicationsApps!" (
		if "!InboxAppCommunicationsApps!" equ "-" (
			set "InboxAppCommunicationsApps=+"
		) else (
			set "InboxAppCommunicationsApps=-"
		)
	)
	if "%%c" equ "!Camera!" (
		if "!InboxAppCamera!" equ "-" (
			set "InboxAppCamera=+"
		) else (
			set "InboxAppCamera=-"
		)
	)
	if "%%c" equ "!ClipChamp!" (
		if "!InboxAppClipChamp!" equ "-" (
			set "InboxAppClipChamp=+"
		) else (
			set "InboxAppClipChamp=-"
		)
	)
	if "%%c" equ "!AV1VideoExtension!" (
		if "!InboxAppAV1VideoExtension!" equ "-" (
			set "InboxAppAV1VideoExtension=+"
		) else (
			set "InboxAppAV1VideoExtension=-"
		)
	)
	if "%%c" equ "!VP9VideoExtensions!" (
		if "!InboxAppVP9VideoExtensions!" equ "-" (
			set "InboxAppVP9VideoExtensions=+"
		) else (
			set "InboxAppVP9VideoExtensions=-"
		)
	)
	if "%%c" equ "!HEIFImageExtension!" (
		if "!InboxAppHEIFImageExtension!" equ "-" (
			set "InboxAppHEIFImageExtension=+"
		) else (
			set "InboxAppHEIFImageExtension=-"
		)
	)
	if "%%c" equ "!HEVCVideoExtension!" (
		if "!InboxAppHEVCVideoExtension!" equ "-" (
			set "InboxAppHEVCVideoExtension=+"
		) else (
			set "InboxAppHEVCVideoExtension=-"
		)
	)
	if "%%c" equ "!MPEG2VideoExtension!" (
		if "!InboxAppMPEG2VideoExtension!" equ "-" (
			set "InboxAppMPEG2VideoExtension=+"
		) else (
			set "InboxAppMPEG2VideoExtension=-"
		)
	)
	if "%%c" equ "!RawImageExtension!" (
		if "!InboxAppRawImageExtension!" equ "-" (
			set "InboxAppRawImageExtension=+"
		) else (
			set "InboxAppRawImageExtension=-"
		)
	)
	if "%%c" equ "!WebMediaExtensions!" (
		if "!InboxAppWebMediaExtensions!" equ "-" (
			set "InboxAppWebMediaExtensions=+"
		) else (
			set "InboxAppWebMediaExtensions=-"
		)
	)
	if "%%c" equ "!WebpImageExtension!" (
		if "!InboxAppWebpImageExtension!" equ "-" (
			set "InboxAppWebpImageExtension=+"
		) else (
			set "InboxAppWebpImageExtension=-"
		)
	)
	if "%%c" equ "!Cortana!" (
		if "!InboxAppCortana!" equ "-" (
			set "InboxAppCortana=+"
		) else (
			set "InboxAppCortana=-"
		)
	)
	if "%%c" equ "!DesktopAppInstaller!" (
		if "!InboxAppDesktopAppInstaller!" equ "-" (
			set "InboxAppDesktopAppInstaller=+"
		) else (
			set "InboxAppDesktopAppInstaller=-"
		)
	)
	if "%%c" equ "!DirectXRuntime!" (
		if "!InboxAppDirectXRuntime!" equ "-" (
			set "InboxAppDirectXRuntime=+"
		) else (
			set "InboxAppDirectXRuntime=-"
		)
	)
	if "%%c" equ "!FeedbackHub!" (
		if "!InboxAppFeedbackHub!" equ "-" (
			set "InboxAppFeedbackHub=+"
		) else (
			set "InboxAppFeedbackHub=-"
		)
	)
	if "%%c" equ "!GetHelp!" (
		if "!InboxAppGetHelp!" equ "-" (
			set "InboxAppGetHelp=+"
		) else (
			set "InboxAppGetHelp=-"
		)
	)
	if "%%c" equ "!FilmsTV!" (
		if "!InboxAppZuneVideo!" equ "-" (
			set "InboxAppZuneVideo=+"
		) else (
			set "InboxAppZuneVideo=-"
		)
	)
	if "%%c" equ "!GrooveMusic!" (
		if "!InboxAppZuneMusic!" equ "-" (
			set "InboxAppZuneMusic=+"
		) else (
			set "InboxAppZuneMusic=-"
		)
	)
	if "%%c" equ "!HelpAndTips!" (
		if "!InboxAppHelpAndTips!" equ "-" (
			set "InboxAppHelpAndTips=+"
		) else (
			set "InboxAppHelpAndTips=-"
		)
	)
	if "%%c" equ "!MediaPlayer!" (
		if "!InboxAppZuneMusic!" equ "-" (
			set "InboxAppZuneMusic=+"
		) else (
			set "InboxAppZuneMusic=-"
		)
	)
	if "%%c" equ "!MoviesTV!" (
		if "!InboxAppZuneVideo!" equ "-" (
			set "InboxAppZuneVideo=+"
		) else (
			set "InboxAppZuneVideo=-"
		)
	)
	if "%%c" equ "!Maps!" (
		if "!InboxAppMaps!" equ "-" (
			set "InboxAppMaps=+"
		) else (
			set "InboxAppMaps=-"
		)
	)
	if "%%c" equ "!Messaging!" (
		if "!InboxAppMessaging!" equ "-" (
			set "InboxAppMessaging=+"
		) else (
			set "InboxAppMessaging=-"
		)
	)
	if "%%c" equ "!Wallet!" (
		if "!InboxAppWallet!" equ "-" (
			set "InboxAppWallet=+"
		) else (
			set "InboxAppWallet=-"
		)
	)
	if "%%c" equ "!MicrosoftPowerBI!" (
		if "!InboxAppMicrosoftPowerBI!" equ "-" (
			set "InboxAppMicrosoftPowerBI=+"
		) else (
			set "InboxAppMicrosoftPowerBI=-"
		)
	)
	if "%%c" equ "!MinecraftEducationEdition!" (
		if "!InboxAppMinecraftEducationEdition!" equ "-" (
			set "InboxAppMinecraftEducationEdition=+"
		) else (
			set "InboxAppMinecraftEducationEdition=-"
		)
	)
	if "%%c" equ "!MixedRealityPortal!" (
		if "!InboxAppMixedRealityPortal!" equ "-" (
			set "InboxAppMixedRealityPortal=+"
		) else (
			set "InboxAppMixedRealityPortal=-"
		)
	)
	if "%%c" equ "!MixedRealityViewer!" (
		if "!InboxAppMixedRealityViewer!" equ "-" (
			set "InboxAppMixedRealityViewer=+"
		) else (
			set "InboxAppMixedRealityViewer=-"
		)
	)
	if "%%c" equ "!OneConnect!" (
		if "!InboxAppOneConnect!" equ "-" (
			set "InboxAppOneConnect=+"
		) else (
			set "InboxAppOneConnect=-"
		)
	)
	if "%%c" equ "!OfficeHub!" (
		if "!InboxAppOfficeHub!" equ "-" (
			set "InboxAppOfficeHub=+"
		) else (
			set "InboxAppOfficeHub=-"
		)
	)
	if "%%c" equ "!News!" (
		if "!InboxAppBingNews!" equ "-" (
			set "InboxAppBingNews=+"
		) else (
			set "InboxAppBingNews=-"
		)
	)
	if "%%c" equ "!Notepad!" (
		if "!InboxAppNotepad!" equ "-" (
			set "InboxAppNotepad=+"
		) else (
			set "InboxAppNotepad=-"
		)
	)
	if "%%c" equ "!OneNote!" (
		if "!InboxAppOneNote!" equ "-" (
			set "InboxAppOneNote=+"
		) else (
			set "InboxAppOneNote=-"
		)
	)
	if "%%c" equ "!D3DMappingLayers!" (
		if "!InboxAppD3DMappingLayers!" equ "-" (
			set "InboxAppD3DMappingLayers=+"
		) else (
			set "InboxAppD3DMappingLayers=-"
		)
	)
	if "%%c" equ "!Paint3D!" (
		if "!InboxAppPaint3D!" equ "-" (
			set "InboxAppPaint3D=+"
			set "InboxAppPaint=-"
		) else (
			set "InboxAppPaint3D=-"
		)
	)
	if "%%c" equ "!Paint!" (
		if "!InboxAppPaint!" equ "-" (
			set "InboxAppPaint=+"
			set "InboxAppPaint3D=-"
		) else (
			set "InboxAppPaint=-"
		)
	)
	if "%%c" equ "!People!" (
		if "!InboxAppPeople!" equ "-" (
			set "InboxAppPeople=+"
		) else (
			set "InboxAppPeople=-"
		)
	)
	if "%%c" equ "!YourPhone!" (
		if "!InboxAppYourPhone!" equ "-" (
			set "InboxAppYourPhone=+"
		) else (
			set "InboxAppYourPhone=-"
		)
	)
	if "%%c" equ "!Photos!" (
		if "!InboxAppPhotos!" equ "-" (
			set "InboxAppPhotos=+"
		) else (
			set "InboxAppPhotos=-"
		)
	)
	if "%%c" equ "!PhotosMediaEngine!" (
		if "!InboxAppPhotosMediaEngine!" equ "-" (
			set "InboxAppPhotosMediaEngine=+"
		) else (
			set "InboxAppPhotosMediaEngine=-"
		)
	)
	if "%%c" equ "!PowerAutomateDesktop!" (
		if "!InboxAppPowerAutomateDesktop!" equ "-" (
			set "InboxAppPowerAutomateDesktop=+"
		) else (
			set "InboxAppPowerAutomateDesktop=-"
		)
	)
	if "%%c" equ "!Print3D!" (
		if "!InboxAppPrint3D!" equ "-" (
			set "InboxAppPrint3D=+"
		) else (
			set "InboxAppPrint3D=-"
		)
	)
	if "%%c" equ "!QuickAssist!" (
		if "!InboxAppQuickAssist!" equ "-" (
			set "InboxAppQuickAssist=+"
		) else (
			set "InboxAppQuickAssist=-"
		)
	)
	if "%%c" equ "!Reader!" (
		if "!InboxAppReader!" equ "-" (
			set "InboxAppReader=+"
		) else (
			set "InboxAppReader=-"
		)
	)
	if "%%c" equ "!ReadingList!" (
		if "!InboxAppReadingList!" equ "-" (
			set "InboxAppReadingList=+"
		) else (
			set "InboxAppReadingList=-"
		)
	)
	if "%%c" equ "!Scan!" (
		if "!InboxAppScan!" equ "-" (
			set "InboxAppScan=+"
		) else (
			set "InboxAppScan=-"
		)
	)
	if "%%c" equ "!Skype!" (
		if "!InboxAppSkype!" equ "-" (
			set "InboxAppSkype=+"
		) else (
			set "InboxAppSkype=-"
		)
	)
	if "%%c" equ "!ScreenSketch!" (
		if "!InboxAppScreenSketch!" equ "-" (
			set "InboxAppScreenSketch=+"
		) else (
			set "InboxAppScreenSketch=-"
		)
	)
	if "%%c" equ "!SolitaireCollection!" (
		if "!InboxAppSolitaireCollection!" equ "-" (
			set "InboxAppSolitaireCollection=+"
		) else (
			set "InboxAppSolitaireCollection=-"
		)
	)
	if "%%c" equ "!SoundRecorder!" (
		if "!InboxAppSoundRecorder!" equ "-" (
			set "InboxAppSoundRecorder=+"
		) else (
			set "InboxAppSoundRecorder=-"
		)
	)
	if "%%c" equ "!StickyNotes!" (
		if "!InboxAppStickyNotes!" equ "-" (
			set "InboxAppStickyNotes=+"
		) else (
			set "InboxAppStickyNotes=-"
		)
	)
	if "%%c" equ "!StorePurchaseApp!" (
		if "!InboxAppStorePurchaseApp!" equ "-" (
			set "InboxAppStorePurchaseApp=+"
		) else (
			set "InboxAppStorePurchaseApp=-"
		)
	)
	if "%%c" equ "!Teams!" (
		if "!InboxAppTeams!" equ "-" (
			set "InboxAppTeams=+"
		) else (
			set "InboxAppTeams=-"
		)
	)
	if "%%c" equ "!Terminal!" (
		if "!InboxAppTerminal!" equ "-" (
			set "InboxAppTerminal=+"
		) else (
			set "InboxAppTerminal=-"
		)
	)
	if "%%c" equ "!Getstarted!" (
		if "!InboxAppGetstarted!" equ "-" (
			set "InboxAppGetstarted=+"
		) else (
			set "InboxAppGetstarted=-"
		)
	)
	if "%%c" equ "!Todos!" (
		if "!InboxAppTodos!" equ "-" (
			set "InboxAppTodos=+"
		) else (
			set "InboxAppTodos=-"
		)
	)
	if "%%c" equ "!VoiceRecorder!" (
		if "!InboxAppSoundRecorder!" equ "-" (
			set "InboxAppSoundRecorder=+"
		) else (
			set "InboxAppSoundRecorder=-"
		)
	)
	if "%%c" equ "!Weather!" (
		if "!InboxAppBingWeather!" equ "-" (
			set "InboxAppBingWeather=+"
		) else (
			set "InboxAppBingWeather=-"
		)
	)
	if "%%c" equ "!ClientWebExperience!" (
		if "!InboxAppClientWebExperience!" equ "-" (
			set "InboxAppClientWebExperience=+"
		) else (
			set "InboxAppClientWebExperience=-"
		)
	)
	if "%%c" equ "!WindowsDefender!" (
		if "!InboxAppWindowsDefender!" equ "-" (
			set "InboxAppWindowsDefender=+"
		) else (
			set "InboxAppWindowsDefender=-"
		)
	)
	if "%%c" equ "!WindowsMail!" (
		if "!InboxAppCommunicationsApps!" equ "-" (
			set "InboxAppCommunicationsApps=+"
		) else (
			set "InboxAppCommunicationsApps=-"
		)
	)
	if "%%c" equ "!WindowsStore!" (
		if "!InboxAppWindowsStore!" equ "-" (
			set "InboxAppWindowsStore=+"
		) else (
			set "InboxAppWindowsStore=-"
		)
	)
	if "%%c" equ "!AmazonStore!" (
		if "!InboxAppAmazonStore!" equ "-" (
			set "InboxAppAmazonStore=+"
		) else (
			set "InboxAppAmazonStore=-"
		)
	)
	if "%%c" equ "!WindowsSubsystemForAndroid!" (
		if "!InboxAppWindowsSubsystemForAndroid!" equ "-" (
			set "InboxAppWindowsSubsystemForAndroid=+"
		) else (
			set "InboxAppWindowsSubsystemForAndroid=-"
		)
	)
	if "%%c" equ "!WindowsSubsystemForLinux!" (
		if "!InboxAppWindowsSubsystemForLinux!" equ "-" (
			set "InboxAppWindowsSubsystemForLinux=+"
		) else (
			set "InboxAppWindowsSubsystemForLinux=-"
		)
	)
	if "%%c" equ "!Whiteboard!" (
		if "!InboxAppWhiteboard!" equ "-" (
			set "InboxAppWhiteboard=+"
		) else (
			set "InboxAppWhiteboard=-"
		)
	)
	if "%%c" equ "!GamingServices!" (
		if "!InboxAppGamingServices!" equ "-" (
			set "InboxAppGamingServices=+"
		) else (
			set "InboxAppGamingServices=-"
			set "InboxAppGaming=-"
		)
	)
	if "%%c" equ "!Xbox!" (
		if "!InboxAppXbox!" equ "-" (
			set "InboxAppXbox=+"
		) else (
			set "InboxAppXbox=-"
		)
	)
	if "%%c" equ "!Gaming!" (
		if "!InboxAppGaming!" equ "-" (
			set "InboxAppGaming=+"
			set "InboxAppGamingServices=+"
			set "InboxAppDirectXRuntime=+"
		) else (
			set "InboxAppDirectXRuntime=-"
			set "InboxAppGamingServices=-"
			set "InboxAppGaming=-"
		)
	)
	if "%%c" equ "!XboxGamingOverlay!" (
		if "!InboxAppXboxGamingOverlay!" equ "-" (
			set "InboxAppXboxGamingOverlay=+"
		) else (
			set "InboxAppXboxGamingOverlay=-"
		)
	)
	if "%%c" equ "!XboxGameOverlay!" (
		if "!InboxAppXboxGameOverlay!" equ "-" (
			set "InboxAppXboxGameOverlay=+"
		) else (
			set "InboxAppXboxGameOverlay=-"
		)
	)
	if "%%c" equ "!XboxIdentityProvider!" (
		if "!InboxAppXboxIdentityProvider!" equ "-" (
			set "InboxAppXboxIdentityProvider=+"
		) else (
			set "InboxAppXboxIdentityProvider=-"
		)
	)
	if "%%c" equ "!XboxLiveGames!" (
		if "!InboxAppXboxLiveGames!" equ "-" (
			set "InboxAppXboxLiveGames=+"
		) else (
			set "InboxAppXboxLiveGames=-"
		)
	)
	if "%%c" equ "!XboxSpeechToTextOverlay!" (
		if "!InboxAppXboxSpeechToTextOverlay!" equ "-" (
			set "InboxAppXboxSpeechToTextOverlay=+"
		) else (
			set "InboxAppXboxSpeechToTextOverlay=-"
		)
	)
	if "%%c" equ "!XboxTCUI!" (
		if "!InboxAppXboxTCUI!" equ "-" (
			set "InboxAppXboxTCUI=+"
		) else (
			set "InboxAppXboxTCUI=-"
		)
	)
	if "%%c" equ "!ZuneMusic!" (
		if "!InboxAppZuneMusic!" equ "-" (
			set "InboxAppZuneMusic=+"
		) else (
			set "InboxAppZuneMusic=-"
		)
	)
	if "%%c" equ "!ZuneVideo!" (
		if "!InboxAppZuneVideo!" equ "-" (
			set "InboxAppZuneVideo=+"
		) else (
			set "InboxAppZuneVideo=-"
		)
	)
	if "%%c" equ "!AMDLink!" (
		if "!InboxAppAMDLink!" equ "-" (
			set "InboxAppAMDLink=+"
		) else (
			set "InboxAppAMDLink=-"
		)
	)
	if "%%c" equ "!HPSupportAssistant!" (
		if "!InboxAppHPSupportAssistant!" equ "-" (
			set "InboxAppHPSupportAssistant=+"
		) else (
			set "InboxAppHPSupportAssistant=-"
		)
	)
	if "%%c" equ "!IntelGraphicsCommandCenter!" (
		if "!InboxAppIntelGraphicsCommandCenter!" equ "-" (
			set "InboxAppIntelGraphicsCommandCenter=+"
		) else (
			set "InboxAppIntelGraphicsCommandCenter=-"
		)
	)
	if "%%c" equ "!IntelThunderboltController!" (
		if "!InboxAppIntelThunderboltController!" equ "-" (
			set "InboxAppIntelThunderboltController=+"
		) else (
			set "InboxAppIntelThunderboltController=-"
		)
	)
	if "%%c" equ "!KillerControlCenter!" (
		if "!InboxAppKillerControlCenter!" equ "-" (
			set "InboxAppKillerControlCenter=+"
		) else (
			set "InboxAppKillerControlCenter=-"
		)
	)
	if "%%c" equ "!NVIDIAControlPanel!" (
		if "!InboxAppNVIDIAControlPanel!" equ "-" (
			set "InboxAppNVIDIAControlPanel=+"
		) else (
			set "InboxAppNVIDIAControlPanel=-"
		)
	)
	if "%%c" equ "!RealtekAudioControl!" (
		if "!InboxAppRealtekAudioControl!" equ "-" (
			set "InboxAppRealtekAudioControl=+"
		) else (
			set "InboxAppRealtekAudioControl=-"
		)
	)
	if "%%c" equ "!WavesMaxxAudioProforDell!" (
		if "!InboxAppWavesMaxxAudioProforDell!" equ "-" (
			set "InboxAppWavesMaxxAudioProforDell=+"
		) else (
			set "InboxAppWavesMaxxAudioProforDell=-"
		)
	)
)
goto :!CurrentMenu!

:IntInboxApps

set InboxApps=
set /A Count=0

if "!AppInstaller!" neq "" set "DesktopAppInstaller=!AppInstaller!"
if "!FilmsTV!" neq "" set "ZuneVideo=!FilmsTV!"
if "!GrooveMusic!" neq "" set "ZuneMusic=!GrooveMusic!"
if "!MediaPlayer!" neq "" set "ZuneMusic=!MediaPlayer!"
if "!MoviesTV!" neq "" set "ZuneVideo=!MoviesTV!"
if "!News!" neq "" set "BingNews=!News!"
if "!VoiceRecorder!" neq "" set "SoundRecorder=!VoiceRecorder!"
if "!Weather!" neq "" set "BingWeather=!Weather!"

:: Setting Default Inbox Apps Appx and License files path
if exist "%Apps%\w10_w11" (
	set "Apps=%Apps%\w10_w11"
) else (
	set "Apps=%Apps%\%SelectedSourceOS%"
)

set "Alarms_License=/LicensePath:%AppLicense%\Microsoft.WindowsAlarms_8wekyb3d8bbwe.xml"
set "AmazonStore_License=/LicensePath:%AppLicense%\Amazon.comServicesLLC.AmazonAppstore_bvztej1py64t8.xml"
set "AV1VideoExtension_License=/LicensePath:%AppLicense%\Microsoft.AV1VideoExtension_8wekyb3d8bbwe.%ImageArchitecture%.xml"
set "BingFinance_License=/LicensePath:%AppLicense%\Microsoft.BingFinance_8wekyb3d8bbwe.xml"
set "BingFoodDrink_License=/LicensePath:%AppLicense%\Microsoft.BingFoodAndDrink_8wekyb3d8bbwe.xml"
set "BingHealthFitness_License=/LicensePath:%AppLicense%\Microsoft.BingHealthAndFitness_8wekyb3d8bbwe.xml"
set "BingMaps_License=/LicensePath:%AppLicense%\Microsoft.BingMaps_8wekyb3d8bbwe.xml"
set "BingNews_License=/LicensePath:%AppLicense%\Microsoft.BingNews_8wekyb3d8bbwe.xml"
set "BingSports_License=/LicensePath:%AppLicense%\Microsoft.BingSports_8wekyb3d8bbwe.xml"
set "BingTravel_License=/LicensePath:%AppLicense%\Microsoft.BingTravel_8wekyb3d8bbwe.xml"
set "BingWeather_License=/LicensePath:%AppLicense%\Microsoft.BingWeather_8wekyb3d8bbwe.xml"
set "Calculator_License=/LicensePath:%AppLicense%\Microsoft.WindowsCalculator_8wekyb3d8bbwe.xml"
set "Camera_License=/LicensePath:%AppLicense%\Microsoft.WindowsCamera_8wekyb3d8bbwe.xml"
set "ClipChamp_License=/LicensePath:%AppLicense%\ClipChamp.ClipChamp_yxz26nhyzhsrt.xml"
set "ClientWebExperience_License=/LicensePath:%AppLicense%\MicrosoftWindows.Client.WebExperience_cw5n1h2txyewy.xml"
set "CommunicationsApps_License=/LicensePath:%AppLicense%\Microsoft.WindowsCommunicationsApps_8wekyb3d8bbwe.xml"
set "Cortana_License=/LicensePath:%AppLicense%\Microsoft.549981c3f5f10_8wekyb3d8bbwe.xml"
set "D3DMappingLayers_License=/LicensePath:%AppLicense%\Microsoft.D3DMappingLayers_8wekyb3d8bbwe.%ImageArchitecture%.xml"
set "DesktopAppInstaller_License=/LicensePath:%AppLicense%\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.xml"
set "DirectXRuntime_License=/LicensePath:%AppLicense%\Microsoft.DirectXRuntime_8wekyb3d8bbwe.xml"
set "FeedbackHub_License=/LicensePath:%AppLicense%\Microsoft.WindowsFeedbackHub_8wekyb3d8bbwe.xml"
set "Gaming_License=/LicensePath:%AppLicense%\Microsoft.GamingApp_8wekyb3d8bbwe.xml"
set "GamingServices_License=/LicensePath:%AppLicense%\Microsoft.GamingServices_8wekyb3d8bbwe.xml"
set "GetHelp_License=/LicensePath:%AppLicense%\Microsoft.GetHelp_8wekyb3d8bbwe.xml"
set "Getstarted_License=/LicensePath:%AppLicense%\Microsoft.Getstarted_8wekyb3d8bbwe.xml"
set "HEIFImageExtension_License=/LicensePath:%AppLicense%\Microsoft.HEIFImageExtension_8wekyb3d8bbwe.%ImageArchitecture%.xml"
set "HelpAndTips_License=/LicensePath:%AppLicense%\Microsoft.HelpAndTips_8wekyb3d8bbwe.xml"
set "HEVCVideoExtension_License=/LicensePath:%AppLicense%\Microsoft.HEVCVideoExtension_8wekyb3d8bbwe.%ImageArchitecture%.xml"
set "Maps_License=/LicensePath:%AppLicense%\Microsoft.WindowsMaps_8wekyb3d8bbwe.xml"
set "Messaging_License=/LicensePath:%AppLicense%\Microsoft.Messaging_8wekyb3d8bbwe.xml"
set "MicrosoftPowerBI_License=/LicensePath:%AppLicense%\Microsoft.MicrosoftPowerBIForWindows_8wekyb3d8bbwe.xml"
set "MinecraftEducationEdition_License=/LicensePath:%AppLicense%\Microsoft.MinecraftEducationEdition_8wekyb3d8bbwe.xml"
set "MixedRealityPortal_License=/LicensePath:%AppLicense%\Microsoft.MixedReality.Portal_8wekyb3d8bbwe.xml"
set "MixedRealityViewer_License=/LicensePath:%AppLicense%\Microsoft.Microsoft3DViewer_8wekyb3d8bbwe.xml"
set "MPEG2VideoExtension_License=/LicensePath:%AppLicense%\Microsoft.MPEG2VideoExtension_8wekyb3d8bbwe.%ImageArchitecture%.xml"
set "Notepad_License=/LicensePath:%AppLicense%\Microsoft.WindowsNotepad_8wekyb3d8bbwe.xml"
set "OfficeHub_License=/LicensePath:%AppLicense%\Microsoft.MicrosoftOfficeHub_8wekyb3d8bbwe.xml"
set "OneConnect_License=/LicensePath:%AppLicense%\Microsoft.OneConnect_8wekyb3d8bbwe.xml"
set "OneNote_License=/LicensePath:%AppLicense%\Microsoft.Office.OneNote_8wekyb3d8bbwe.xml"
set "Paint3D_License=/LicensePath:%AppLicense%\Microsoft.MSPaint_8wekyb3d8bbwe.xml"
set "Paint_License=/LicensePath:%AppLicense%\Microsoft.Paint_8wekyb3d8bbwe.xml"
set "People_License=/LicensePath:%AppLicense%\Microsoft.People_8wekyb3d8bbwe.xml"
set "YourPhone_License=/LicensePath:%AppLicense%\Microsoft.YourPhone_8wekyb3d8bbwe.xml"
set "Photos_License=/LicensePath:%AppLicense%\Microsoft.Windows.Photos_8wekyb3d8bbwe.xml"
set "PhotosMediaEngine_License=/LicensePath:%AppLicense%\Microsoft.Photos.MediaEngineDLC_8wekyb3d8bbwe.xml"
set "PowerAutomateDesktop_License=/LicensePath:%AppLicense%\Microsoft.PowerAutomateDesktop_8wekyb3d8bbwe.xml"
set "Print3D_License=/LicensePath:%AppLicense%\Microsoft.Print3D_8wekyb3d8bbwe.xml"
set "QuickAssist_License=/LicensePath:%AppLicense%\MicrosoftCorporationII.QuickAssist_8wekyb3d8bbwe.xml"
set "RawImageExtension_License=/LicensePath:%AppLicense%\Microsoft.RawImageExtension_8wekyb3d8bbwe.xml"
set "Reader_License=/LicensePath:%AppLicense%\Microsoft.Reader_8wekyb3d8bbwe.xml"
set "ReadingList_License=/LicensePath:%AppLicense%\Microsoft.WindowsReadingList_8wekyb3d8bbwe.xml"
set "Scan_License=/LicensePath:%AppLicense%\Microsoft.WindowsScan_8wekyb3d8bbwe.xml"
set "ScreenSketch_License=/LicensePath:%AppLicense%\Microsoft.ScreenSketch_8wekyb3d8bbwe.xml"
set "Skype_License=/LicensePath:%AppLicense%\Microsoft.SkypeApp_kzf8qxf38zg5c.xml"
set "SolitaireCollection_License=/LicensePath:%AppLicense%\Microsoft.MicrosoftSolitaireCollection_8wekyb3d8bbwe.xml"
set "SoundRecorder_License=/LicensePath:%AppLicense%\Microsoft.WindowsSoundRecorder_8wekyb3d8bbwe.xml"
set "StickyNotes_License=/LicensePath:%AppLicense%\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe.xml"
set "StorePurchaseApp_License=/LicensePath:%AppLicense%\Microsoft.StorePurchaseApp_8wekyb3d8bbwe.xml"
set "Teams_License=/LicensePath:%AppLicense%\MicrosoftTeams_8wekyb3d8bbwe.xml"
set "Terminal_License=/LicensePath:%AppLicense%\Microsoft.WindowsTerminal_8wekyb3d8bbwe.xml"
set "Todos_License=/LicensePath:%AppLicense%\Microsoft.Todos_8wekyb3d8bbwe.xml"
set "VP9VideoExtensions_License=/LicensePath:%AppLicense%\Microsoft.VP9VideoExtensions_8wekyb3d8bbwe.%ImageArchitecture%.xml"
set "Wallet_License=/LicensePath:%AppLicense%\Microsoft.Wallet_8wekyb3d8bbwe.xml"
set "WebMediaExtensions_License=/LicensePath:%AppLicense%\Microsoft.WebMediaExtensions_8wekyb3d8bbwe.xml"
set "WebpImageExtension_License=/LicensePath:%AppLicense%\Microsoft.WebpImageExtension_8wekyb3d8bbwe.%ImageArchitecture%.xml"
set "Whiteboard_License=/LicensePath:%AppLicense%\Microsoft.Whiteboard_8wekyb3d8bbwe.xml"
rem set "WindowsDefender_License=/LicensePath:%AppLicense%\Microsoft.SecHealthUI_8wekyb3d8bbwe.xml"
set "WindowsDefender_License=/LicensePath:%AppLicense%\Microsoft.SecHealthUI_cw5n1h2txyewy.xml"
set "WindowsStore_License=/LicensePath:%AppLicense%\Microsoft.WindowsStore_8wekyb3d8bbwe.xml"
set "WindowsSubsystemForAndroid_License=/LicensePath:%AppLicense%\MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe.xml"
set "WindowsSubsystemForLinux_License=/LicensePath:%AppLicense%\MicrosoftCorporationII.WindowsSubsystemForLinux_8wekyb3d8bbwe.xml"
set "Xbox_License=/LicensePath:%AppLicense%\Microsoft.XboxApp_8wekyb3d8bbwe.xml"
set "XboxGamingOverlay_License=/LicensePath:%AppLicense%\Microsoft.XboxGamingOverlay_8wekyb3d8bbwe.xml"
set "XboxGameOverlay_License=/LicensePath:%AppLicense%\Microsoft.XboxGameOverlay_8wekyb3d8bbwe.xml"
set "XboxIdentityProvider_License=/LicensePath:%AppLicense%\Microsoft.XboxIdentityProvider_8wekyb3d8bbwe.xml"
set "XboxLiveGames_License=/LicensePath:%AppLicense%\Microsoft.XboxLIVEGames_8wekyb3d8bbwe.xml"
set "XboxSpeechToTextOverlay_License=/LicensePath:%AppLicense%\Microsoft.XboxSpeechToTextOverlay_8wekyb3d8bbwe.xml"
set "XboxTCUI_License=/LicensePath:%AppLicense%\Microsoft.Xbox.TCUI_8wekyb3d8bbwe.xml"
set "ZuneMusic_License=/LicensePath:%AppLicense%\Microsoft.ZuneMusic_8wekyb3d8bbwe.xml"
set "ZuneVideo_License=/LicensePath:%AppLicense%\Microsoft.ZuneVideo_8wekyb3d8bbwe.xml"

set "AMDLink_License=/LicensePath:%AppLicense%\AdvancedMicroDevicesInc-2.AMDLink_0a9344xs7nr4m.xml"
set "HPSupportAssistant_License=/LicensePath:%AppLicense%\AD2F1837.HPSupportAssistant_v10z8vjag6ke6.xml"
set "IntelGraphicsCommandCenter_License=/LicensePath:%AppLicense%\AppUp.IntelGraphicsExperience_8j3eq9eme6ctt.xml"
set "IntelThunderboltController_License=/LicensePath:%AppLicense%\AppUp.ThunderboltControlCenter_8j3eq9eme6ctt.xml"
set "KillerControlCenter_License=/LicensePath:%AppLicense%\RivetNetworks.KillerControlCenter_rh07ty8m5nkag.xml"
set "NVIDIAControlPanel_License=/LicensePath:%AppLicense%\NVIDIACorp.NVIDIAControlPanel_56jybvy8sckqj.xml"
set "RealtekAudioControl_License=/LicensePath:%AppLicense%\RealtekSemiconductorCorp.RealtekAudioControl_dt26b99r8h8gj.xml"
set "WavesMaxxAudioProforDell_License=/LicensePath:%AppLicense%\WavesAudio.MaxxAudioProforDell2020_fh4rh281wavaa.xml"

:: Getting Install Image Index Architecture
call :GetImageArchitecture "%InstallWim%", !SpecifiedSourceIndex! >nul

:: Checking whether Microsoft Default Inbox Apps folder is empty
if not exist "!Apps!\*.appx" (
	echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu059%
	echo.
	echo.%GlobalCopyMissingFiles% ^<Packs\Apps\%SelectedSourceOS%^> %GlobalFolder%
	echo.
	goto :Stop
)

if not exist "%AppLicense%\*.xml" (
	echo.%txtintegrateMicrosoftDefaultInboxAppsXmlLicenseFilesMissing%
	echo.
	echo.%GlobalCopyMissingFiles% ^<Bin\AppLicense^> %GlobalFolder%
	echo.
	goto :Stop
)

:: Getting Microsoft Default Inbox Apps files full pathnames
cd /D "!Apps!\" >nul

for /f %%i IN ('dir /b "*3DViewer*.*xbundle" 2^>nul') do if exist %%i set "MixedRealityViewer_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Alarms*.*xbundle" 2^>nul') do if exist %%i set "Alarms_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*AmazonAppstore*.*xbundle" 2^>nul') do if exist %%i set "AmazonStore_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*AV1VideoExtension*.appx" 2^>nul') do if exist %%i set "AV1VideoExtension_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*BingFinance*.*xbundle" 2^>nul') do if exist %%i set "BingFinance_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*BingFoodAndDrink*.*xbundle" 2^>nul') do if exist %%i set "BingFoodDrink_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*BingHealthAndFitness*.*xbundle" 2^>nul') do if exist %%i set "BingHealthFitness_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*BingMaps*.*xbundle" 2^>nul') do if exist %%i set "BingMaps_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*BingNews*.*xbundle" 2^>nul') do if exist %%i set "BingNews_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*BingSports*.*xbundle" 2^>nul') do if exist %%i set "BingSports_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*BingTravel*.*xbundle" 2^>nul') do if exist %%i set "BingTravel_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*BingWeather*.*xbundle" 2^>nul') do if exist %%i set "BingWeather_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Calculator*.*xbundle" 2^>nul') do if exist %%i set "Calculator_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Camera*.*xbundle" 2^>nul') do if exist %%i set "Camera_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*ClipChamp*.*xbundle" 2^>nul') do if exist %%i set "ClipChamp_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Client.WebExperience*.*xbundle" 2^>nul') do if exist %%i set "ClientWebExperience_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*CommunicationsApps*.*xbundle" 2^>nul') do if exist %%i set "CommunicationsApps_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Microsoft.549981C3F5F10*.*xbundle" 2^>nul') do if exist %%i set "Cortana_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*D3DMappingLayers*.*appx" 2^>nul') do if exist %%i set "D3DMappingLayers_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*DesktopAppInstaller*.*xbundle" 2^>nul') do if exist %%i set "DesktopAppInstaller_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*DirectXRuntime*%ImageArchitecture%*.appx" 2^>nul') do if exist %%i set "DirectXRuntime_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*FeedbackHub*.*xbundle" 2^>nul') do if exist %%i set "FeedbackHub_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*GamingApp*.*xbundle" 2^>nul') do if exist %%i set "Gaming_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*GamingServices*.*xbundle" 2^>nul') do if exist %%i set "GamingServices_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*GetHelp*.*xbundle" 2^>nul') do if exist %%i set "GetHelp_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Getstarted*.*xbundle" 2^>nul') do if exist %%i set "Getstarted_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*HEIFImageExtension*%ImageArchitecture%*.appx" 2^>nul') do if exist %%i set "HEIFImageExtension_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*HelpAndTips*.*xbundle" 2^>nul') do if exist %%i set "HelpAndTips_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*HEVCVideoExtension*%ImageArchitecture%*.appx" 2^>nul') do if exist %%i set "HEVCVideoExtension_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*WindowsMaps*.*xbundle" 2^>nul') do if exist %%i set "Maps_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Messaging*.*xbundle" 2^>nul') do if exist %%i set "Messaging_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Microsoft.MicrosoftPowerBIForWindows*.*xbundle" 2^>nul') do if exist %%i set "MicrosoftPowerBI_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Microsoft.MinecraftEducationEdition*.*xbundle" 2^>nul') do if exist %%i set "MinecraftEducationEdition_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*MixedReality.Portal*.*xbundle" 2^>nul') do if exist %%i set "MixedRealityPortal_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*MPEG2VideoExtension*%ImageArchitecture%*.appx" 2^>nul') do if exist %%i set "MPEG2VideoExtension_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Microsoft.Paint*.*xbundle" 2^>nul') do if exist %%i set "Paint_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*MSPaint*.*xbundle" 2^>nul') do if exist %%i set "Paint3D_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*WindowsNotepad*.*xbundle" 2^>nul') do if exist %%i set "Notepad_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*OfficeHub*.*xbundle" 2^>nul') do if exist %%i set "OfficeHub_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*OneConnect*.*xbundle" 2^>nul') do if exist %%i set "OneConnect_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*OneNote*.*xbundle" 2^>nul') do if exist %%i set "OneNote_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*People*.*xbundle" 2^>nul') do if exist %%i set "People_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*YourPhone*.*xbundle" 2^>nul') do if exist %%i set "YourPhone_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Photos.MediaEngineDLC*.*xbundle" 2^>nul') do if exist %%i set "PhotosMediaEngine_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Windows.Photos*.*xbundle" 2^>nul') do if exist %%i set "Photos_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*PowerAutomateDesktop*.*xbundle" 2^>nul') do if exist %%i set "PowerAutomateDesktop_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Print3D*.*xbundle" 2^>nul') do if exist %%i set "Print3D_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*QuickAssist*.*xbundle" 2^>nul') do if exist %%i set "QuickAssist_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*RawImageExtension*.*xbundle" 2^>nul') do if exist %%i set "RawImageExtension_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Reader*.*xbundle" 2^>nul') do if exist %%i set "Reader_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*ReadingList*.*xbundle" 2^>nul') do if exist %%i set "ReadingList_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Scan*.*xbundle" 2^>nul') do if exist %%i set "Scan_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*ScreenSketch*.*xbundle" 2^>nul') do if exist %%i set "ScreenSketch_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Skype*.*xbundle" 2^>nul') do if exist %%i set "Skype_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*SolitaireCollection*.*xbundle" 2^>nul') do if exist %%i set "SolitaireCollection_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*SoundRecorder*.*xbundle" 2^>nul') do if exist %%i set "SoundRecorder_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*StickyNotes*.*xbundle" 2^>nul') do if exist %%i set "StickyNotes_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*StorePurchaseApp*.*xbundle" 2^>nul') do if exist %%i set "StorePurchaseApp_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Teams*.*msix" 2^>nul') do if exist %%i set "Teams_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Terminal*.*xbundle" 2^>nul') do if exist %%i set "Terminal_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Todos*.*xbundle" 2^>nul') do if exist %%i set "Todos_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*VP9VideoExtensions*%ImageArchitecture%*.appx" 2^>nul') do if exist %%i set "VP9VideoExtensions_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Wallet*.*xbundle" 2^>nul') do if exist %%i set "Wallet_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*WebMediaExtensions*.*xbundle" 2^>nul') do if exist %%i set "WebMediaExtensions_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*WebpImageExtension*%ImageArchitecture%*.appx" 2^>nul') do if exist %%i set "WebpImageExtension_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Microsoft.Whiteboard*.*xbundle" 2^>nul') do if exist %%i set "Whiteboard_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Microsoft.SecHealthUI*%ImageArchitecture%*.appx" 2^>nul') do if exist %%i set "WindowsDefender_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*WindowsStore*.*xbundle" 2^>nul') do if exist %%i set "WindowsStore_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*WindowsSubsystemForAndroid*.*xbundle" 2^>nul') do if exist %%i set "WindowsSubsystemForAndroid_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*WindowsSubsystemForLinux*.*xbundle" 2^>nul') do if exist %%i set "WindowsSubsystemForLinux_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*Xbox.TCUI*.*xbundle" 2^>nul') do if exist %%i set "XboxTCUI_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*XboxApp*.*xbundle" 2^>nul') do if exist %%i set "Xbox_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*XboxGamingOverlay*.*xbundle" 2^>nul') do if exist %%i set "XboxGamingOverlay_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*XboxGameOverlay*.*xbundle" 2^>nul') do if exist %%i set "XboxGameOverlay_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*XboxIdentityProvider*.*xbundle" 2^>nul') do if exist %%i set "XboxIdentityProvider_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*XboxLIVEGames*.*xbundle" 2^>nul') do if exist %%i set "XboxLiveGames_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*XboxSpeechToTextOverlay*.*xbundle" 2^>nul') do if exist %%i set "XboxSpeechToTextOverlay_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*ZuneMusic*.*xbundle" 2^>nul') do if exist %%i set "ZuneMusic_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*ZuneVideo*.*xbundle" 2^>nul') do if exist %%i set "ZuneVideo_Appx=!Apps!\%%i"

for /f %%i IN ('dir /b "*AMDLink*.*msix" 2^>nul') do if exist %%i set "AMDLink_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*HPSupportAssistant*.*xbundle" 2^>nul') do if exist %%i set "HPSupportAssistant_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*IntelGraphicsExperience*.*xbundle" 2^>nul') do if exist %%i set "IntelGraphicsCommandCenter_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*ThunderboltControlCenter*.*xbundle" 2^>nul') do if exist %%i set "IntelThunderboltController_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*KillerControlCenter*.*xbundle" 2^>nul') do if exist %%i set "KillerControlCenter_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*NVIDIAControlPanel*%ImageArchitecture%*.appx" 2^>nul') do if exist %%i set "NVIDIAControlPanel_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*RealtekAudioControl*.*xbundle" 2^>nul') do if exist %%i set "RealtekAudioControl_Appx=!Apps!\%%i"
for /f %%i IN ('dir /b "*MaxxAudioProforDell*.*xbundle" 2^>nul') do if exist %%i set "WavesMaxxAudioProforDell_Appx=!Apps!\%%i"

for /f %%i IN ('dir /b "Microsoft.Advertising.Xaml*%ImageArchitecture%*.Appx" 2^>nul') do set "AdvertisingXaml_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "*PlayReadyClient*%ImageArchitecture%*.Appx" 2^>nul') do set "MediaPlayReadyClient2_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Framework.1.3*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeFramework13_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Framework.1.6*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeFramework16_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Framework.1.7*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeFramework17_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Framework.2.1*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeFramework21_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Framework.2.2*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeFramework22_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Runtime.1.3*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeRuntime13_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Runtime.1.4*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeRuntime14_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Runtime.1.6*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeRuntime16_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Runtime.1.7*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeRuntime17_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Runtime.2.1*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeRuntime21_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.NET.Native.Runtime.2.2*%ImageArchitecture%*.Appx" 2^>nul') do set "NETNativeRuntime22_Appx=/DependencyPackagePath:!Apps!\%%i"

if /i "%ImageArchitecture%" equ "arm" for /f %%i IN ('dir /b "Microsoft.Services.Store.Engagement*arm*.Appx" 2^>nul') do set "ServicesStoreEngagement_Appx=/DependencyPackagePath:!Apps!\%%i"
if /i "%ImageArchitecture%" equ "arm64" for /f %%i IN ('dir /b "Microsoft.Services.Store.Engagement*arm64*.Appx" 2^>nul') do set "ServicesStoreEngagement_Appx=/DependencyPackagePath:!Apps!\%%i"
if /i "%ImageArchitecture%" equ "x86" for /f %%i IN ('dir /b "Microsoft.Services.Store.Engagement*x86*.Appx" 2^>nul') do set "ServicesStoreEngagement_Appx=/DependencyPackagePath:!Apps!\%%i"
if /i "%ImageArchitecture%" equ "x64" (
	for /f %%i IN ('dir /b "Microsoft.Services.Store.Engagement*x86*.Appx" 2^>nul') do set "ServicesStoreEngagement_Appx=/DependencyPackagePath:!Apps!\%%i"
	for /f %%i IN ('dir /b "Microsoft.Services.Store.Engagement*x64*.Appx" 2^>nul') do set "ServicesStoreEngagement_Appx=!ServicesStoreEngagement_Appx! /DependencyPackagePath:!Apps!\%%i"
)

for /f %%i IN ('dir /b "Microsoft.UI.Xaml.2.0*%ImageArchitecture%*.Appx" 2^>nul') do set "UIXaml20_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.UI.Xaml.2.1*%ImageArchitecture%*.Appx" 2^>nul') do set "UIXaml21_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.UI.Xaml.2.2*%ImageArchitecture%*.Appx" 2^>nul') do set "UIXaml22_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.UI.Xaml.2.3*%ImageArchitecture%*.Appx" 2^>nul') do set "UIXaml23_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.UI.Xaml.2.4*%ImageArchitecture%*.Appx" 2^>nul') do set "UIXaml24_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.UI.Xaml.2.5*%ImageArchitecture%*.Appx" 2^>nul') do set "UIXaml25_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.UI.Xaml.2.6*%ImageArchitecture%*.Appx" 2^>nul') do set "UIXaml26_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.UI.Xaml.2.7*%ImageArchitecture%*.Appx" 2^>nul') do set "UIXaml27_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.VCLibs.110.00.UWPDesktop*%ImageArchitecture%*.Appx" 2^>nul') do set "VCLibsUWPDesktop11_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.VCLibs.120.00.UWPDesktop*%ImageArchitecture%*.Appx" 2^>nul') do set "VCLibsUWPDesktop12_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.VCLibs.140.00.UWPDesktop*%ImageArchitecture%*.Appx" 2^>nul') do set "VCLibsUWPDesktop14_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.VCLibs.120.00_*%ImageArchitecture%*.Appx" 2^>nul') do set "VCLibs12_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.VCLibs.140.00_*%ImageArchitecture%*.Appx" 2^>nul') do set "VCLibs14_Appx=/DependencyPackagePath:!Apps!\%%i"
for /f %%i IN ('dir /b "Microsoft.WinJS.2*.Appx" 2^>nul') do set "WinJS20_Appx=/DependencyPackagePath:!Apps!\%%i"

cd /D "%ROOT%" >nul

cls
echo.
echo.===============================================================================
echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu060%
echo.===============================================================================
echo.

::Inbox Apps
echo.%txtInboxAppsChosenList%
for %%# in (
	Alarms

	BingFinance
	BingFoodDrink
	BingHealthFitness
	BingMaps
	BingNews
	BingSports
	BingTravel
	BingWeather
	Calculator
	CommunicationsApps
	Camera
	ClipChamp
	AV1VideoExtension
	VP9VideoExtensions
	HEIFImageExtension
	HEVCVideoExtension
	MPEG2VideoExtension
	RawImageExtension
	WebMediaExtensions
	WebpImageExtension
	Cortana
	DesktopAppInstaller
	DirectXRuntime
	FeedbackHub
	GetHelp

	HelpAndTips

	Maps
	Messaging
	Wallet
	MicrosoftPowerBI
	MinecraftEducationEdition
	MixedRealityPortal
	MixedRealityViewer
	OneConnect

	OfficeHub
	Notepad
	OneNote
	D3DMappingLayers
	Paint3D
	Paint
	People
	YourPhone
	Photos
	PhotosMediaEngine
	PowerAutomateDesktop
	Print3D
	QuickAssist
	Reader
	ReadingList
	Scan
	Skype
	ScreenSketch
	SolitaireCollection
	SoundRecorder
	StickyNotes
	StorePurchaseApp
	Teams
	Terminal
	Getstarted
	Todos

	ClientWebExperience
	WindowsDefender

	WindowsStore
	AmazonStore
	WindowsSubsystemForAndroid
	WindowsSubsystemForLinux
	Whiteboard
	GamingServices
	Xbox
	Gaming
	XboxGamingOverlay
	XboxGameOverlay
	XboxIdentityProvider
	XboxSpeechToTextOverlay
	XboxLiveGames
	XboxTCUI
	ZuneMusic
	ZuneVideo

	AMDLink
	HPSupportAssistant
	IntelGraphicsCommandCenter
	IntelThunderboltController
	KillerControlCenter
	NVIDIAControlPanel
	RealtekAudioControl
	WavesMaxxAudioProforDell
) do (
	if "!InboxApp%%#!" equ "+" (
		if exist "!%%#_Appx!" (
			set "InboxApps=!InboxApps!;%%#"
			echo.
			echo.%%#
		) else (
			echo.
			echo.%%# %txtIntegrateMicrosoftDefaultInboxAppxMenu061%
		)
	)
)
if "!Count!" gtr "0" (
	echo.
	echo.
	echo.%GlobalCopyMissingFiles% ^<Packs\Apps\%SelectedSourceOS%^> %GlobalFolder%
)

if "!Bypass!" equ "I" if "!F_PersonalLists!" equ "+" (
	:: DateTime Version Stamp
	call :DateTimeStamp
	set "IntegratedInboxAppNamesList=IntegratedInboxAppNamesList(%ImageArchitecture%)_%ImageVersion%_[!DateTimeStamp!]"
)

if "!InboxApps!" neq "" (
	set "InboxApps=!InboxApps:~1!"

	if "!Bypass!" equ "I" if "!F_PersonalLists!" equ "+" (
		call :CreateFolder "!PersonalLists!"
		for %%# in (!InboxApps!) do (
			if "!InboxApp%%#!" equ "+" (
				echo.%%#
			)>>"!PersonalLists!\!IntegratedInboxAppNamesList!.txt"
		)
	)
) else (
	echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu062%
	goto :Stop
)
if "!Bypass!" equ "O" (
	echo.===============================================================================
	echo.
	echo. [C] %GlobalOption_Continue%
	echo.
	echo. [R] %GlobalOption_Return2Change%
	echo.
	echo.===============================================================================
	echo.
	choice /C:CR /N /M "%GlobalEnterChoice% "
	if errorlevel 2 goto :!CurrentMenu!
)

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu063%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu064%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% !ImageVersion!.!ImageServicePackBuild!.!ImageServicePackLevel!
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu065%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		:: Integrating Windows 8.1 Default Inbox Apps to Install Image File
		if "%SelectedSourceOS%" equ "w81" (
			if "!InboxAppAlarms!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Alarms and Clock", "!Alarms_Appx!", "!VCLibs12_Appx!", "!Alarms_License!"
			if "!InboxAppBingFinance!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Bing Finance", "!BingFinance_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!BingFinance_License!"
			if "!InboxAppBingFoodDrink!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Bing Food and Drink", "!BingFoodDrink_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!BingFoodDrink_License!"
			if "!InboxAppBingHealthFitness!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Bing Health and Fitness", "!BingHealthFitness!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!BingHealthFitness_License!"
			if "!InboxAppBingMaps!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Bing Maps", "!BingMaps_Appx!", "!VCLibs12_Appx!", "!BingMaps_License!"
			if "!InboxAppBingNews!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Bing News", "!BingNews_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!BingNews_License!"
			if "!InboxAppBingSports!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Bing Sports", "!BingSports_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!BingSports_License!"
			if "!InboxAppBingTravel!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Bing Travel", "!BingTravel_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!BingTravel_License!"
			if "!InboxAppBingWeather!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Bing Weather", "!BingWeather_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!BingWeather_License!"
			if "!InboxAppCalculator!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Calculator", "!Calculator_Appx!", "!VCLibs12_Appx!", "!Calculator_License!"
			if "!InboxAppCommunicationsApps!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Calender, Mail and People", "!CommunicationsApps_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!CommunicationsApps_License!"
			if "!InboxAppHelpAndTips!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Help and Tips", "!HelpAndTips_Appx!", "!VCLibs12_Appx!", "!HelpAndTips_License!"
			if "!InboxAppOneNote!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Office OneNote", "!OneNote_Appx!", "!VCLibs12_Appx!", "!OneNote_License!"
			if "!InboxAppReader!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Reader", "!Reader_Appx!", "!VCLibs12_Appx!", "!Reader_License!"
			if "!InboxAppReadingList!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Reading List", "!ReadingList_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!ReadingList_License!"
			if "!InboxAppScan!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Scan", "!Scan_Appx!", "!VCLibs12_Appx!", "!Scan_License!"
			if "!InboxAppSkype!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Skype App", "!Skype_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!Skype_License!"
			if "!InboxAppSoundRecorder!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Sound Recorder", "!SoundRecorder_Appx!", "!VCLibs12_Appx!", "!SoundRecorder_License!"
			if "!InboxAppXboxLiveGames!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Xbox Live Games", "!XboxLiveGames_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!XboxLiveGames_License!"
			if "!InboxAppZuneMusic!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Zune Music", "!ZuneMusic_Appx!", "!MediaPlayReadyClient2_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!ZuneMusic_License!"
			if "!InboxAppZuneVideo!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Zune Video", "!ZuneVideo_Appx!", "!MediaPlayReadyClient2_Appx!", "!VCLibs12_Appx!", "!WinJS20_Appx!", "!ZuneVideo_License!"
		)

		:: Integrating Windows 10/11 Default Inbox Apps to Install Image
		if "%SelectedSourceOS%" neq "w81" (
			if "!InboxAppAlarms!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Alarms and Clock", "!Alarms_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml24_Appx! !VCLibs14_Appx!", "!Alarms_License!"
				if "%SelectedSourceOS%" equ "w11" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Alarms and Clock", "!Alarms_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!Alarms_License!"
			)

			if "!InboxAppAmazonStore!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Amazon App Store", "!AmazonStore_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "/SkipLicense"
			if "!InboxAppAV1VideoExtension!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "AV1 Video Codec Plugin", "!AV1VideoExtension_Appx!", "!VCLibs14_Appx!", "!AV1VideoExtension_License!"
			if "!InboxAppBingNews!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "News", "!BingNews_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml21_Appx! !VCLibs14_Appx!", "!BingNews_License!"
			if "!InboxAppBingWeather!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Weather", "!BingWeather_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml21_Appx! !VCLibs14_Appx!", "!BingWeather_License!"

			if "!InboxAppCalculator!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Calculator", "!Calculator_Appx!", "!UIXaml24_Appx! !VCLibs14_Appx!", "!Calculator_License!"
				if "%SelectedSourceOS%" equ "w11" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Calculator", "!Calculator_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!Calculator_License!"
			)

			if "!InboxAppCamera!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Camera", "!Camera_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!Camera_License!"

			if "!InboxAppClipChamp!" equ "+" (
				if "%ImageBuild%" geq "16299" if "%ImageBuild%" lss "19041" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "ClipChamp Video Editor", "!ClipChamp_Appx!", "!VCLibsUWPDesktop14_Appx!", "!ClipChamp_License!"
				if "%ImageBuild%" geq "18362" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "ClipChamp Video Editor", "!ClipChamp_Appx!", "", "!ClipChamp_License!"
			)

			if "!InboxAppClientWebExperience!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Widgets", "!ClientWebExperience_Appx!", "!VCLibs14_Appx!", "!ClientWebExperience_License!"
			if "!InboxAppCommunicationsApps!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Windows Mail", "!CommunicationsApps_Appx!", "!UIXaml27_Appx! !VCLibs14_Appx!", "!CommunicationsApps_License!"
			if "!InboxAppCortana!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Cortana", "!Cortana_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!Cortana_License!"
			if "!InboxAppD3DMappingLayers!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "OpenCL and OpenGL Compatibility Pack ^(D3DMappingLayers^)", "!D3DMappingLayers_Appx!", "", "!D3DMappingLayers_License!"

			if "!InboxAppDesktopAppInstaller!" equ "+" (
				if "%ImageBuild%" lss "17763" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "App Installer", "!DesktopAppInstaller_Appx!", "!VCLibsUWPDesktop14_Appx!", "!DesktopAppInstaller_License!"
				if "%ImageBuild%" geq "17763" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "App Installer", "!DesktopAppInstaller_Appx!", "!UIXaml27_Appx! !VCLibsUWPDesktop14_Appx!", "!DesktopAppInstaller_License!"
			)

			if "!InboxAppDirectXRuntime!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "DirectX Runtime", "!DirectXRuntime_Appx!", "", "/SkipLicense"
			if "!InboxAppFeedbackHub!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Feedback Hub", "!FeedbackHub_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!FeedbackHub_License!"
			if "!InboxAppGetHelp!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Get Help", "!GetHelp_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!GetHelp_License!"
			if "!InboxAppGetstarted!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Tips", "!Getstarted_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!Getstarted_License!"
			if "!InboxAppHEIFImageExtension!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "HEIF Image Codec Plugin", "!HEIFImageExtension_Appx!", "!VCLibs14_Appx!", "!HEIFImageExtension_License!"
			if "!InboxAppHEVCVideoExtension!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "HEVC Video Codec Plugin", "!HEVCVideoExtension_Appx!", "!VCLibs14_Appx!", "!HEVCVideoExtension_License!"
			if "!InboxAppMaps!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Maps", "!Maps_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml23_Appx! !VCLibs14_Appx!", "!Maps_License!"
			if "!InboxAppMessaging!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Messaging", "!Messaging_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml24_Appx! !VCLibs14_Appx!", "!Messaging_License!"
			if "!InboxAppMicrosoftPowerBI!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Microsoft Power BI for Windows", "!MicrosoftPowerBI_Appx!", "!NETNativeFramework17_Appx! !NETNativeRuntime17_Appx! !UIXaml25_Appx! !VCLibs14_Appx!", "!MicrosoftPowerBI_License!"
			if "!InboxAppMinecraftEducationEdition!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Minecraft Education Edition", "!MinecraftEducationEdition_Appx!", "!VCLibsUWPDesktop14_Appx!", "!MinecraftEducationEdition_License!"
			if "!InboxAppMixedRealityPortal!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Mixed Reality Portal", "!MixedRealityPortal_Appx!", "!VCLibs14_Appx!", "!MixedRealityPortal_License!"
			if "!InboxAppMixedRealityViewer!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "3D Viewer", "!MixedRealityViewer_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml21_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!MixedRealityViewer_License!"
			if "!InboxAppMPEG2VideoExtension!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "MPEG-2 Video Codec Plugin", "!MPEG2VideoExtension_Appx!", "!VCLibs14_Appx!", "!MPEG2VideoExtension_License!"
			if "!InboxAppNotepad!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Notepad", "!Notepad_Appx!", "!UIXaml27_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!Notepad_License!"
			if "!InboxAppOfficeHub!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "My Office", "!OfficeHub_Appx!", "!VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!OfficeHub_License!"
			if "!InboxAppOneConnect!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Mobile Plans", "!OneConnect_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!OneConnect_License!"
			if "!InboxAppOneNote!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Office OneNote", "!OneNote_Appx!", "!VCLibs14_Appx!", "!OneNote_License!"
			if "!InboxAppPaint3D!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Paint 3D", "!Paint3D_Appx!", "!UIXaml20_Appx! !VCLibs14_Appx!", "!Paint3D_License!"
			if "!InboxAppPaint!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Paint", "!Paint_Appx!", "!UIXaml27_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!Paint_License!"
			if "!InboxAppPeople!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "People", "!People_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!People_License!"
			if "!InboxAppYourPhone!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Phone Link", "!YourPhone_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!YourPhone_License!"

			if "!InboxAppPhotos!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Photos", "!Photos_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml24_Appx! !VCLibs14_Appx!", "!Photos_License!"
				if "%SelectedSourceOS%" equ "w11" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Photos", "!Photos_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!Photos_License!"
			)

			if "!InboxAppPhotosMediaEngine!" equ "+" if "%ImageBuild%" geq "15063" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Photos Media Engine Add-on", "!PhotosMediaEngine_Appx!", "!VCLibs14_Appx!", "/SkipLicense"
			if "!InboxAppPowerAutomateDesktop!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Power Automate Desktop", "!PowerAutomateDesktop_Appx!", "!VCLibsUWPDesktop14_Appx!", "!PowerAutomateDesktop_License!"
			if "!InboxAppPrint3D!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Print 3D", "!Print3D_Appx!", "!VCLibs14_Appx!", "!Print3D_License!"
			if "!InboxAppQuickAssist!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Quick Assist", "!QuickAssist_Appx!", "", "!QuickAssist_License!"

			if "!InboxAppRawImageExtension!" equ "+" (
				if "%ImageBuild%" leq "22000" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Raw Image Extension", "!RawImageExtension_Appx!", "!VCLibs14_Appx!", "!RawImageExtension_License!"
				if "%ImageBuild%" geq "22563" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Raw Image Extension", "!RawImageExtension_Appx!", "", "!RawImageExtension_License!"
			)

			if "!InboxAppScreenSketch!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Snip and Sketch", "!ScreenSketch_Appx!", "!UIXaml24_Appx! !VCLibs14_Appx!", "!ScreenSketch_License!"
				if "%SelectedSourceOS%" equ "w11" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Snipping Tool", "!ScreenSketch_Appx!", "!UIXaml27_Appx! !VCLibs14_Appx!", "!ScreenSketch_License!"
			)

			if "!InboxAppSkype!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Skype", "!Skype_Appx!", "", "!Skype_License!"
			if "!InboxAppSolitaireCollection!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Solitaire Collection", "!SolitaireCollection_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!SolitaireCollection_License!"
			if "!InboxAppSoundRecorder!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Voice Recorder", "!SoundRecorder_Appx!", "!UIXaml23_Appx! !VCLibs14_Appx!", "!SoundRecorder_License!"
				if "%SelectedSourceOS%" equ "w11" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Voice Recorder", "!SoundRecorder_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!SoundRecorder_License!"
			)
			if "!InboxAppStickyNotes!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Sticky Notes", "!StickyNotes_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!StickyNotes_License!"
			if "!InboxAppStorePurchaseApp!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Store Experience Host", "!StorePurchaseApp_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!StorePurchaseApp_License!"
			if "!InboxAppTeams!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Teams Chat", "!Teams_Appx!", "", "/SkipLicense"

			if "!InboxAppTerminal!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Terminal", "!Terminal_Appx!", "!VCLibsUWPDesktop14_Appx!", "!Terminal_License!"
				if "%SelectedSourceOS%" equ "w11" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Terminal", "!Terminal_Appx!", "!UIXaml27_Appx! !VCLibsUWPDesktop14_Appx!", "!Terminal_License!"
				call :MountImageRegistry "%InstallMount%\%%i"
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\condrv" /v "Start" /t REG_DWORD /d "2" /f >nul
				call :UnMountImageRegistry
			)

			if "!InboxAppTodos!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Todos", "!Todos_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!Todos_License!"
			if "!InboxAppVP9VideoExtensions!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Google's VP9 WebM Video Codec Plugin", "!VP9VideoExtensions_Appx!", "!VCLibs14_Appx!", "!VP9VideoExtensions_License!"
			if "!InboxAppWallet!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Microsoft Pay", "!Wallet_Appx!", "!NETNativeFramework17_Appx! !NETNativeRuntime17_Appx! !VCLibs14_Appx!", "!Wallet_License!"
			if "!InboxAppWebMediaExtensions!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Web Media Codec Plugin", "!WebMediaExtensions_Appx!", "!VCLibs14_Appx!", "!WebMediaExtensions_License!"
			if "!InboxAppWebpImageExtension!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "WebP Image Codec Plugin", "!WebpImageExtension_Appx!", "!VCLibs14_Appx!", "!WebpImageExtension_License!"
			if "!InboxAppWhiteboard!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Whiteboard", "!Whiteboard_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!Whiteboard_License!"
			if "!InboxAppWindowsDefender!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Windows Defender Dashboard", "!WindowsDefender_Appx!", "!UIXaml24_Appx! !VCLibs14_Appx!", "!WindowsDefender_License!"

			if "!InboxAppWindowsStore!" equ "+" (
				if "%ImageBuild%" geq "14393" if "%ImageBuild%" leq "15063" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Windows Store", "!WindowsStore_Appx!", "!NETNativeFramework17_Appx! !NETNativeRuntime17_Appx! !VCLibs14_Appx!", "!WindowsStore_License!"
				if "%ImageBuild%" geq "16299" if "%ImageBuild%" leq "18362" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Windows Store", "!WindowsStore_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml24_Appx! !VCLibs14_Appx!", "!WindowsStore_License!"
				if "%ImageBuild%" geq "18363"                               call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Windows Store", "!WindowsStore_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!WindowsStore_License!"
			)

			if "!InboxAppWindowsSubsystemForAndroid!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Windows Subsystem For Android", "!WindowsSubsystemForAndroid_Appx!", "!UIXaml26_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "/SkipLicense"
			if "!InboxAppWindowsSubsystemForLinux!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Windows Subsystem For Linux", "!WindowsSubsystemForLinux_Appx!", "", "!WindowsSubsystemForLinux_License!"
			if "!InboxAppXbox!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Xbox Console Companion", "!Xbox_Appx!", "!NETNativeFramework17_Appx! !NETNativeRuntime17_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!Xbox_License!"
			if "!InboxAppGamingServices!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Gaming Services", "!GamingServices_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "/SkipLicense"
			if "!InboxAppGaming!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Gaming App", "!Gaming_Appx!", "!UIXaml27_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!Gaming_License!"
			if "!InboxAppXboxGamingOverlay!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Xbox Game Bar", "!XboxGamingOverlay_Appx!", "!UIXaml24_Appx! !VCLibsUWPDesktop14_Appx! !VCLibs14_Appx!", "!XboxGamingOverlay_License!"
			if "!InboxAppXboxGameOverlay!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Xbox Game Bar Plugin", "!XboxGameOverlay_Appx!", "!VCLibs14_Appx!", "!XboxGameOverlay_License!"
			if "!InboxAppXboxIdentityProvider!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Xbox Identity Provider", "!XboxIdentityProvider_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!XboxIdentityProvider_License!"
			if "!InboxAppXboxSpeechToTextOverlay!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Xbox Game Speech Window "Live In-Game Experience", "!XboxSpeechToTextOverlay_Appx!", "!VCLibs14_Appx!", "!XboxSpeechToTextOverlay_License!"
			if "!InboxAppXboxTCUI!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Xbox UI", "!XboxTCUI_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!XboxTCUI_License!"

			if "!InboxAppZuneMusic!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Groove Music", "!ZuneMusic_Appx!", "!UIXaml24_Appx! !VCLibs14_Appx!", "!ZuneMusic_License!"
				if "%SelectedSourceOS%" equ "w11" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Media Player", "!ZuneMusic_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !UIXaml27_Appx! !VCLibs14_Appx!", "!ZuneMusic_License!"
			)
			if "!InboxAppZuneVideo!" equ "+" (
				if "%ImageBuild%" lss "19041" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Films and TV", "!ZuneVideo_Appx!", "!UIXaml27_Appx! !VCLibs14_Appx!", "!ZuneVideo_License!"
				if "%ImageBuild%" geq "19041" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Movies and TV", "!ZuneVideo_Appx!", "!UIXaml27_Appx! !VCLibs14_Appx!", "!ZuneVideo_License!"
			)

			if "!InboxAppAMDLink!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "AMD Link", "!AMDLink_Appx!", "!VCLibsUWPDesktop14_Appx!", "!AMDLink_License!"
			if "!InboxAppHPSupportAssistant!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "HP Support Assistant 9", "!HPSupportAssistant_Appx!", "!NETNativeFramework13_Appx! !NETNativeRuntime13_Appx! !NETNativeFramework14_Appx! !NETNativeRuntime14_Appx! !VCLibs14_Appx!", "!HPSupportAssistant_License!"
			if "!InboxAppIntelGraphicsCommandCenter!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Intel Graphics Command Center", "!IntelGraphicsCommandCenter_Appx!", "!NETNativeFramework22_Appx! !NETNativeRuntime22_Appx! !VCLibs14_Appx!", "!IntelGraphicsCommandCenter_License!"
			if "!InboxAppIntelThunderboltController!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Intel Thunderbolt Controller", "!IntelThunderboltController_Appx!", "!NETNativeFramework21_Appx! !NETNativeRuntime21_Appx! !VCLibs14_Appx!", "!IntelThunderboltController_License!"
			if "!InboxAppKillerControlCenter!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Rivet Networks Killer Control Center", "!KillerControlCenter_Appx!", "", "!KillerControlCenter_License!"
			if "!InboxAppNVIDIAControlPanel!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "NVIDIA Control Panel", "!NVIDIAControlPanel_Appx!", "", "!NVIDIAControlPanel_License!"
			if "!InboxAppRealtekAudioControl!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Realtek Audio Console", "!RealtekAudioControl_Appx!", "!VCLibs14_Appx!", "!RealtekAudioControl_License!"
			if "!InboxAppWavesMaxxAudioProforDell!" equ "+" call :AddProvisionedAppxPackage "%InstallMount%\%%i", "Waves MaxxAudio Pro for Dell 2020", "!WavesMaxxAudioProforDell_Appx!", "!NETNativeFramework17_Appx! !NETNativeRuntime17_Appx! !VCLibs14_Appx!", "!WavesMaxxAudioProforDell_License!"
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu066%
		echo.-------------------------------------------------------------------------------
		%DISM% /Image:"%InstallMount%\%%i" /Optimize-ProvisionedAppxPackages
		echo.
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftDefaultInboxAppxMenu067%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set /A Count=0

:: Returning to Integrate Microsoft Default Inbox Apps Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Integrate Microsoft Office Desktop Universal Windows Platform (UWP) Apps
::-------------------------------------------------------------------------------------------
:IntOfficeUWPAppsMenu

set "CurrentMenu=IntOfficeUWPAppsMenu"

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftOfficeDesktopMenu%
echo.===============================================================================
echo.
echo.  [1] ^(!OfficeUWPAccessApp!^)%txtIntegrateMicrosoftOfficeDesktopOp1%
echo.
echo.  [2] ^(!OfficeUWPExcelApp!^)%txtIntegrateMicrosoftOfficeDesktopOp2%
echo.
echo.  [3] ^(!OfficeUWPOutlookApp!^)%txtIntegrateMicrosoftOfficeDesktopOp3%
echo.
echo.  [4] ^(!OfficeUWPPowerPointApp!^)%txtIntegrateMicrosoftOfficeDesktopOp4%
echo.
echo.  [5] ^(!OfficeUWPPublisherApp!^)%txtIntegrateMicrosoftOfficeDesktopOp5%
echo.
echo.  [6] ^(!OfficeUWPWordApp!^)%txtIntegrateMicrosoftOfficeDesktopOp6%
echo.
echo.
echo.
echo.  [S]    %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.
echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
choice /C:123456SDX /N /M "%GlobalEnterChoice% "
if errorlevel 9 goto :IntFeaturesMenu
if errorlevel 8 (
	for %%i in (
		F_IntOfficeUWPAppsMenu
		OfficeUWPAccessApp
		OfficeUWPExcelApp
		OfficeUWPOutlookApp
		OfficeUWPPowerPointApp
		OfficeUWPPublisherApp
		OfficeUWPWordApp
	) do (
		set "%%i=-"
	)
)
if errorlevel 7 (
	for %%i in (
		AllOfficeUWPApps
		OfficeUWPAccessApp
		OfficeUWPExcelApp
		OfficeUWPOutlookApp
		OfficeUWPPowerPointApp
		OfficeUWPPublisherApp
		OfficeUWPWordApp
	) do (
		set "%%i=+"
	)
)
if errorlevel 6 (
	if "!OfficeUWPWordApp!" equ "-" (
		set "OfficeUWPWordApp=+"
	) else (
		set "OfficeUWPWordApp=-"
	)
)
if errorlevel 5 (
	if "!OfficeUWPPublisherApp!" equ "-" (
		set "OfficeUWPPublisherApp=+"
	) else (
		set "OfficeUWPPublisherApp=-"
	)
)
if errorlevel 4 (
	if "!OfficeUWPPowerPointApp!" equ "-" (
		set "OfficeUWPPowerPointApp=+"
	) else (
		set "OfficeUWPPowerPointApp=-"
	)
)
if errorlevel 3 (
	if "!OfficeUWPOutlookApp!" equ "-" (
		set "OfficeUWPOutlookApp=+"
	) else (
		set "OfficeUWPOutlookApp=-"
	)
)
if errorlevel 2 (
	if "!OfficeUWPExcelApp!" equ "-" (
		set "OfficeUWPExcelApp=+"
	) else (
		set "OfficeUWPExcelApp=-"
	)
)
if errorlevel 1 (
	if "!OfficeUWPAccessApp!" equ "-" (
		set "OfficeUWPAccessApp=+"
	) else (
		set "OfficeUWPAccessApp=-"
	)
)

:: Return to IntOfficeUWPAppsMenu
rem goto :IntOfficeUWPAppsMenu
goto :!CurrentMenu!

:IntOfficeUWPApps

set OfficeUWPApps=

cls
echo.===============================================================================
echo.%GlobalIntegrateMicrosoftOfficeDesktop%
echo.===============================================================================
echo.

:: Checking whether Microsoft Office Desktop (UWP) Apps folder is empty
if not exist "%OfficeUWP%\*.*xbundle" (
	echo.%GlobalIntegrateMicrosoftOfficeDesktopEmptypos01% ^<Packs\%OfficeUWP%^> %GlobalIntegrateMicrosoftOfficeDesktopEmptypos02%
	echo.
	echo.%GlobalIntegrateMicrosoftOfficeDesktopEmpty%
	echo.
	goto :Stop
)

if not exist "%OfficeUWP%\*.xml" (
	echo.%GlobalIntegrateMicrosoftOfficeDesktopEmptypos01% ^<Packs\%OfficeUWP%^> %GlobalIntegrateMicrosoftOfficeDesktopEmptypos02%
	echo.
	echo.%GlobalIntegrateMicrosoftOfficeDesktopEmpty%
	echo.
	goto :Stop
)

:: Getting Microsoft Office Desktop (UWP) Apps files full pathnames
cd /D "%OfficeUWP%\" >nul

for /f %%i IN ('dir /b "*Microsoft.Office.Desktop_*.*xbundle" 2^>nul') do if exist %%i set "OfficeDesktop_Appx=/PackagePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Access_*.*xbundle" 2^>nul') do if exist %%i set "OfficeAccess_Appx=/OptionalPackagePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Excel_*.*xbundle" 2^>nul') do if exist %%i set "OfficeExcel_Appx=/OptionalPackagePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Outlook_*.*xbundle" 2^>nul') do if exist %%i set "OfficeOutlook_Appx=/OptionalPackagePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.PowerPoint*.*xbundle" 2^>nul') do if exist %%i set "OfficePowerPoint_Appx=/OptionalPackagePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Publisher_*.*xbundle" 2^>nul') do if exist %%i set "OfficePublisher_Appx=/OptionalPackagePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Word_*.*xbundle" 2^>nul') do if exist %%i set "OfficeWord_Appx=/OptionalPackagePath:%OfficeUWP%\%%i"

for /f %%i IN ('dir /b "*Microsoft.Office.Desktop_*.xml" 2^>nul') do if exist %%i set "OfficeDesktop_License=/LicensePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Access_*.xml" 2^>nul') do if exist %%i set "OfficeAccess_License=/LicensePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Excel_*.xml" 2^>nul') do if exist %%i set "OfficeExcel_License=/LicensePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Outlook_*.xml" 2^>nul') do if exist %%i set "OfficeOutlook_License=/LicensePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.PowerPoint_*.xml" 2^>nul') do if exist %%i set "OfficePowerPoint_License=/LicensePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Publisher_*.xml" 2^>nul') do if exist %%i set "OfficePublisher_License=/LicensePath:%OfficeUWP%\%%i"
for /f %%i IN ('dir /b "*Microsoft.Office.Desktop.Word_*.xml" 2^>nul') do if exist %%i set "OfficeWord_License=/LicensePath:%OfficeUWP%\%%i"

cd /D "%ROOT%" >nul

cls
echo.
echo.===============================================================================
echo.%txtAssigningIntegrateMicrosoftOfficeDesktop01%
echo.===============================================================================
echo.

::IntOffice UWP Apps
if "AllOfficeUWPApps" equ "+" (
	set "OfficeUWPApps=AllOfficeUWPApps
) else (
	for %%i in (
		Access
		Excel
		Outlook
		PowerPoint
		Publisher
		Word
	) do (
		if "!OfficeUWP%%iApp!" equ "+" (
			set "OfficeUWPApps=!OfficeUWPApps!;%%i"
			echo."%%i"
		)
	)
)

if "!OfficeUWPApps!" neq "" (
	set "OfficeUWPApps=!OfficeUWPApps:~1!"
) else (
	echo.%txtAssigningIntegrateMicrosoftOfficeDesktop02%
	goto :Stop
)
if "!Bypass!" equ "O" (
	echo.===============================================================================
	echo.
	echo. [C] %GlobalOption_Continue%
	echo.
	echo. [R] %GlobalOption_Return2Change%
	echo.
	echo.===============================================================================
	echo.
	choice /C:CR /N /M "%GlobalEnterChoice% "
	if errorlevel 2 goto :!CurrentMenu!
)

for %%o in (!OfficeUWPApps!) do (
	cls
	echo.===============================================================================
	echo.%GlobalIntegrateMicrosoftOfficeDesktop%
	echo.===============================================================================
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtAssigningIntegrateMicrosoftOfficeDesktop03%
	echo.-------------------------------------------------------------------------------
	echo.
	echo.    %GlobalImage% install.wim
	echo.    %GlobalImageIndex% !ImageIndexNo!
	echo.    %GlobalImageArchitecture% %ImageArchitecture%
	echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
	echo.
	echo.-------------------------------------------------------------------------------
	if "%%o" equ "AllOfficeUWPApps" echo.%txtAssigningIntegrateMicrosoftOfficeDesktop04%
	if "%%o" equ "Access" echo.%txtAssigningIntegrateMicrosoftOfficeDesktop05%
	if "%%o" equ "Excel" echo.%txtAssigningIntegrateMicrosoftOfficeDesktop06%
	if "%%o" equ "Outlook" echo.%txtAssigningIntegrateMicrosoftOfficeDesktop07%
	if "%%o" equ "PowerPoint" echo.%txtAssigningIntegrateMicrosoftOfficeDesktop08%
	if "%%o" equ "Publisher" echo.%txtAssigningIntegrateMicrosoftOfficeDesktop09%
	if "%%o" equ "Word" echo.%txtAssigningIntegrateMicrosoftOfficeDesktop10%
	echo.-------------------------------------------------------------------------------

	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

			:: Getting Image Index Information
			call :GetImageIndexInfo "%InstallWim%", %%i >nul

			if "%%o" equ "AllOfficeUWPApps" %DISM% /Image:"%InstallMount%\%%i" /Add-ProvisionedAppxPackage !OfficeDesktop_Appx! !OfficeAccess_Appx! !OfficeExcel_Appx! !OfficeOutlook_Appx! !OfficePowerPoint_Appx! !OfficePublisher_Appx! !OfficeWord_Appx! !OfficeDesktop_License! !OfficeAccess_License! !OfficeExcel_License! !OfficeOutlook_License! !OfficePowerPoint_License! !OfficePublisher_License! !OfficeWord_License!
			if "%%o" equ "Access" %DISM% /Image:"%InstallMount%\%%i" /Add-ProvisionedAppxPackage !OfficeDesktop_Appx! !OfficeAccess_Appx! !OfficeDesktop_License! !OfficeAccess_License!
			if "%%o" equ "Excel" %DISM% /Image:"%InstallMount%\%%i" /Add-ProvisionedAppxPackage !OfficeDesktop_Appx! !OfficeExcel_Appx! !OfficeDesktop_License! !OfficeExcel_License!
			if "%%o" equ "Outlook" %DISM% /Image:"%InstallMount%\%%i" /Add-ProvisionedAppxPackage !OfficeDesktop_Appx! !OfficeOutlook_Appx! !OfficeDesktop_License! !OfficeOutlook_License!
			if "%%o" equ "PowerPoint" %DISM% /Image:"%InstallMount%\%%i" /Add-ProvisionedAppxPackage !OfficeDesktop_Appx! !OfficePowerPoint_Appx! !OfficeDesktop_License! !OfficePowerPoint_License!
			if "%%o" equ "Publisher" %DISM% /Image:"%InstallMount%\%%i" /Add-ProvisionedAppxPackage !OfficeDesktop_Appx! !OfficePublisher_Appx! !OfficeDesktop_License! !OfficePublisher_License!
			if "%%o" equ "Word" %DISM% /Image:"%InstallMount%\%%i" /Add-ProvisionedAppxPackage !OfficeDesktop_Appx! !OfficeWord_Appx! !OfficeDesktop_License! !OfficeWord_License!
		)
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtAssigningIntegrateMicrosoftOfficeDesktop11%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Thin PC Add-on Features
::-------------------------------------------------------------------------------------------
:IntThinPCpkgsMenu

if "%IsDialogsEnabled%" equ "Yes" if "!ThinPCpkgs_Warning!" equ "" (
	cls
	echo.===============================================================================
	echo.%GlobalIntegrateWindowsThinPCFeatures%
	echo.===============================================================================
	echo.
	echo.
	echo.
	echo.                              %GlobalWARNING%
	echo.                              =============
	echo.
	echo.  %txtIntegrateWindowsThinPCFeaturesLine1%
	echo.  %txtIntegrateWindowsThinPCFeaturesLine2%
	echo.  %txtIntegrateWindowsThinPCFeaturesLine3%
	echo.  %txtIntegrateWindowsThinPCFeaturesLine4%
	echo.  %txtIntegrateWindowsThinPCFeaturesLine5%
	echo.  %txtIntegrateWindowsThinPCFeaturesLine6%
	echo.  %txtIntegrateWindowsThinPCFeaturesLine7%
	echo.  %txtIntegrateWindowsThinPCFeaturesLine8%
	echo.
	echo.   %GlobalDisableDialogs_line01%
	echo.   %GlobalDisableDialogs_line02%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%GlobalChoice_continue% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "ThinPCpkgs_Warning=0"
)

set "CurrentMenu=ThinPCpkgsMenu"

cls
echo.===============================================================================
echo.%GlobalIntegrateWindowsThinPCFeatures%
echo.===============================================================================

:: Checking whether Multi-Index servicing mode is selected
if !ChosenCount! gtr 1 (
	echo.%GlobalIntegrateWindowsThinPCFeaturesEnable%
	echo.
	echo.%GlobalIntegrateWindowsThinPCFeaturesReChoose%
	goto :Stop
)

:: Checking whether the selected Source OS is a Windows Thin PC OS
if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType%" neq "Embedded" (
	echo.%txtIntegrateWindowsThinPCFeatures01%
	echo.
	echo.%txtIntegrateWindowsThinPCFeatures02%
	goto :Stop
)

echo.  [A] ^(!ThinPCNetFx35!^)%txtIntegrateWindowsThinPCFeaturesOpA%
echo.  [B] ^(!ThinPCBackupRestore!^)%txtIntegrateWindowsThinPCFeaturesOpB%
echo.  [C] ^(!ThinPCBasicHelp!^)%txtIntegrateWindowsThinPCFeaturesOpC%
echo.  [D] ^(!ThinPCDefender!^)%txtIntegrateWindowsThinPCFeaturesOpD%
echo.  [E] ^(!ThinPCDVDMaker!^)%txtIntegrateWindowsThinPCFeaturesOpE%
echo.  [F] ^(!ThinPCFaxScan!^)%txtIntegrateWindowsThinPCFeaturesOpF%
echo.  [G] ^(!ThinPCISOBurner!^)%txtIntegrateWindowsThinPCFeaturesOpG%
echo.  [H] ^(!ThinPCMediaCenter!^)%txtIntegrateWindowsThinPCFeaturesOpH%
echo.  [I] ^(!ThinPCPremiumCodecs!^)%txtIntegrateWindowsThinPCFeaturesOpI%
echo.  [J] ^(!ThinPCMobilityCenter!^)%txtIntegrateWindowsThinPCFeaturesOpJ%
echo.  [K] ^(!ThinPCParentalControl!^)%txtIntegrateWindowsThinPCFeaturesOpK%
echo.  [L] ^(!ThinPCPhotoViewer!^)%txtIntegrateWindowsThinPCFeaturesOpL%
echo.  [M] ^(!ThinPCSearch!^)%txtIntegrateWindowsThinPCFeaturesOpM%
echo.  [N] ^(!ThinPCSpeechText!^)%txtIntegrateWindowsThinPCFeaturesOpN%
echo.  [O] ^(!ThinPCTabletPC!^)%txtIntegrateWindowsThinPCFeaturesOpO%
echo.
echo.  [S]    %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.
echo.  [X]    %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
choice /C:ABCDEFGHIJKLMNOSDX /N /M "%GlobalEnterChoice% "
if errorlevel 18 goto :IntFeaturesMenu
if errorlevel 17 (
	for %%i in (
		F_IntThinPCpkgsMenu
		ThinPCNetFx35
		ThinPCBackupRestore
		ThinPCBasicHelp
		ThinPCDefender
		ThinPCDVDMaker
		ThinPCFaxScan
		ThinPCISOBurner
		ThinPCMediaCenter
		ThinPCPremiumCodecs
		ThinPCMobilityCenter
		ThinPCParentalControl
		ThinPCPhotoViewer
		ThinPCSearch
		ThinPCSpeechText
		ThinPCTabletPC
	) do (
		set "%%i=-"
	)
)
if errorlevel 16 (
	for %%i in (
		ThinPCNetFx35
		ThinPCBackupRestore
		ThinPCBasicHelp
		ThinPCDefender
		ThinPCDVDMaker
		ThinPCFaxScan
		ThinPCISOBurner
		ThinPCMediaCenter
		ThinPCPremiumCodecs
		ThinPCMobilityCenter
		ThinPCParentalControl
		ThinPCPhotoViewer
		ThinPCSearch
		ThinPCSpeechText
		ThinPCTabletPC
	) do (
		set "%%i=+"
	)
)
if errorlevel 15 (
	if "!ThinPCTabletPC!" equ "-" (
		set "ThinPCTabletPC=+"
	) else (
		set "ThinPCTabletPC=-"
	)
)
if errorlevel 14 (
	if "!ThinPCSpeechText!" equ "-" (
		set "ThinPCSpeechText=+"
	) else (
		set "ThinPCSpeechText=-"
	)
)
if errorlevel 13 (
	if "!ThinPCSearch!" equ "-" (
		set "ThinPCSearch=+"
	) else (
		set "ThinPCSearch=-"
	)
)
if errorlevel 12 (
	if "!ThinPCPhotoViewer!" equ "-" (
		set "ThinPCPhotoViewer=+"
	) else (
		set "ThinPCPhotoViewer=-"
	)
)
if errorlevel 11 (
	if "!ThinPCParentalControl!" equ "-" (
		set "ThinPCParentalControl=+"
	) else (
		set "ThinPCParentalControl=-"
	)
)
if errorlevel 10 (
	if "!ThinPCMobilityCenter!" equ "-" (
		set "ThinPCMobilityCenter=+"
	) else (
		set "ThinPCMobilityCenter=-"
	)
)
if errorlevel  9 (
	if "!ThinPCPremiumCodecs!" equ "-" (
		set "ThinPCPremiumCodecs=+"
	) else (
		set "ThinPCPremiumCodecs=-"
	)
)
if errorlevel  8 (
	if "!ThinPCMediaCenter!" equ "-" (
		set "ThinPCMediaCenter=+"
	) else (
		set "ThinPCMediaCenter=-"
	)
)
if errorlevel  7 (
	if "!ThinPCISOBurner!" equ "-" (
		set "ThinPCISOBurner=+"
	) else (
		set "ThinPCISOBurner=-"
	)
)
if errorlevel  6 (
	if "!ThinPCFaxScan!" equ "-" (
		set "ThinPCFaxScan=+"
	) else (
		set "ThinPCFaxScan=-"
	)
)
if errorlevel  5 (
	if "!ThinPCDVDMaker!" equ "-" (
		set "ThinPCDVDMaker=+"
	) else (
		set "ThinPCDVDMaker=-"
	)
)
if errorlevel  4 (
	if "!ThinPCDefender!" equ "-" (
		set "ThinPCDefender=+"
	) else (
		set "ThinPCDefender=-"
	)
)
if errorlevel  3 (
	if "!ThinPCBasicHelp!" equ "-" (
		set "ThinPCBasicHelp=+"
	) else (
		set "ThinPCBasicHelp=-"
	)
)
if errorlevel  2 (
	if "!ThinPCBackupRestore!" equ "-" (
		set "ThinPCBackupRestore=+"
	) else (
		set "ThinPCBackupRestore=-"
	)
)
if errorlevel  1 (
	if "!ThinPCNetFx35!" equ "-" (
		set "ThinPCNetFx35=+"
	) else (
		set "ThinPCNetFx35=-"
	)
)

:: Return to ThinPCpkgsMenu
rem goto :IntThinPCpkgsMenu
goto :!CurrentMenu!

:IntThinPCpkgs

set ThinPCpkgs=

cls
echo.
echo.===============================================================================
echo.%txtAssigningIntegrateWindowsThinPC%
echo.===============================================================================
echo.

::Thin PC packages
for %%t in (
	NetFx35
	BackupRestore
	BasicHelp
	Defender
	DVDMaker
	FaxScan
	ISOBurner
	MediaCenter
	PremiumCodecs
	MobilityCenter
	ParentalControl
	PhotoViewer
	Search
	SpeechText
	TabletPC
) do (
	if "!ThinPC%%t!" equ "+" (
		set "ThinPCpkgs=!ThinPCpkgs!;%%t"
		echo.%%t
	)
)

if "!ThinPCpkgs!" neq "" (
	set "ThinPCpkgs=!ThinPCpkgs:~1!"
) else (
	echo.%txtAssigningIntegrateWindowsThinPC02%
	goto :Stop
)
if "!Bypass!" equ "O" (
	echo.===============================================================================
	echo.
	echo. [C] %GlobalOption_Continue%
	echo.
	echo. [R] %GlobalOption_Return2Change%
	echo.
	echo.===============================================================================
	echo.
	choice /C:CR /N /M "%GlobalEnterChoice% "
	if errorlevel 2 goto :!CurrentMenu!
)

for %%t in (!ThinPCpkgs!) do (
	cls
	echo.===============================================================================
	echo.%GlobalIntegrateWindowsThinPCFeatures%
	echo.===============================================================================

	echo.===============================================================================
	if "%%t" equ "NetFx35" echo.%txtAssigningIntegrateWindowsThinPC03%
	if "%%t" equ "BackupRestore" echo.%txtAssigningIntegrateWindowsThinPC04%
	if "%%t" equ "BasicHelp" echo.%txtAssigningIntegrateWindowsThinPC05%
	if "%%t" equ "Defender" echo.%txtAssigningIntegrateWindowsThinPC06%
	if "%%t" equ "DVDMaker" echo.%txtAssigningIntegrateWindowsThinPC07%
	if "%%t" equ "FaxScan" echo.%txtAssigningIntegrateWindowsThinPC08%
	if "%%t" equ "ISOBurner" echo.%txtAssigningIntegrateWindowsThinPC09%
	if "%%t" equ "MediaCenter" echo.%txtAssigningIntegrateWindowsThinPC10%
	if "%%t" equ "PremiumCodecs" echo.%txtAssigningIntegrateWindowsThinPC11%
	if "%%t" equ "MobilityCenter" echo.%txtAssigningIntegrateWindowsThinPC12%
	if "%%t" equ "ParentalControl" echo.%txtAssigningIntegrateWindowsThinPC13%
	if "%%t" equ "PhotoViewer" echo.%txtAssigningIntegrateWindowsThinPC14%
	if "%%t" equ "Search" echo.%txtAssigningIntegrateWindowsThinPC15%
	if "%%t" equ "SpeechText" echo.%txtAssigningIntegrateWindowsThinPC16%
	if "%%t" equ "TabletPC" echo.%txtAssigningIntegrateWindowsThinPC17%
	echo.===============================================================================
	echo.

	:: Checking whether Windows Thin PC Add-on Features folder is empty
	if not exist "%ThinPC%\*.*" (
		echo.%txtAssigningIntegrateWindowsThinPC18%
		echo.
		echo.%txtAssigningIntegrateWindowsThinPC19%
		goto :Stop
	)

	echo.-------------------------------------------------------------------------------
	if "%%t" equ "NetFx35" echo.%txtAssigningIntegrateWindowsThinPC20%
	if "%%t" equ "BackupRestore" echo.%txtAssigningIntegrateWindowsThinPC21%
	if "%%t" equ "BasicHelp" echo.%txtAssigningIntegrateWindowsThinPC22%
	if "%%t" equ "Defender" echo.%txtAssigningIntegrateWindowsThinPC23%
	if "%%t" equ "DVDMaker" echo.%txtAssigningIntegrateWindowsThinPC24%
	if "%%t" equ "FaxScan" echo.%txtAssigningIntegrateWindowsThinPC25%
	if "%%t" equ "ISOBurner" echo.%txtAssigningIntegrateWindowsThinPC26%
	if "%%t" equ "MediaCenter" echo.%txtAssigningIntegrateWindowsThinPC27%
	if "%%t" equ "PremiumCodecs" echo.%txtAssigningIntegrateWindowsThinPC28%
	if "%%t" equ "MobilityCenter" echo.%txtAssigningIntegrateWindowsThinPC29%
	if "%%t" equ "ParentalControl" echo.%txtAssigningIntegrateWindowsThinPC30%
	if "%%t" equ "PhotoViewer" echo.%txtAssigningIntegrateWindowsThinPC31%
	if "%%t" equ "Search" echo.%txtAssigningIntegrateWindowsThinPC32%
	if "%%t" equ "SpeechText" echo.%txtAssigningIntegrateWindowsThinPC33%
	if "%%t" equ "TabletPC" echo.%txtAssigningIntegrateWindowsThinPC34%
	echo.-------------------------------------------------------------------------------
	echo.
	echo.    %GlobalImage% install.wim
	echo.    %GlobalImageIndex% !ImageIndexNo!
	echo.    %GlobalImageArchitecture% %ImageArchitecture%
	echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
	echo.
	echo.-------------------------------------------------------------------------------
	if "%%t" equ "NetFx35" echo.%txtAssigningIntegrateWindowsThinPC35%
	if "%%t" equ "BackupRestore" echo.%txtAssigningIntegrateWindowsThinPC36%
	if "%%t" equ "BasicHelp" echo.%txtAssigningIntegrateWindowsThinPC37%
	if "%%t" equ "Defender" echo.%txtAssigningIntegrateWindowsThinPC38%
	if "%%t" equ "DVDMaker" echo.%txtAssigningIntegrateWindowsThinPC39%
	if "%%t" equ "FaxScan" echo.%txtAssigningIntegrateWindowsThinPC40%
	if "%%t" equ "ISOBurner" echo.%txtAssigningIntegrateWindowsThinPC41%
	if "%%t" equ "MediaCenter" echo.%txtAssigningIntegrateWindowsThinPC42%
	if "%%t" equ "PremiumCodecs" echo.%txtAssigningIntegrateWindowsThinPC43%
	if "%%t" equ "MobilityCenter" echo.%txtAssigningIntegrateWindowsThinPC44%
	if "%%t" equ "ParentalControl" echo.%txtAssigningIntegrateWindowsThinPC45%
	if "%%t" equ "PhotoViewer" echo.%txtAssigningIntegrateWindowsThinPC46%
	if "%%t" equ "Search" echo.%txtAssigningIntegrateWindowsThinPC47%
	if "%%t" equ "SpeechText" echo.%txtAssigningIntegrateWindowsThinPC48%
	if "%%t" equ "TabletPC" echo.%txtAssigningIntegrateWindowsThinPC49%
	echo.-------------------------------------------------------------------------------

	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

			:: Getting Image Index Information
			call :GetImageIndexInfo "%InstallWim%", %%i >nul

			if /i "%ImageEdition%" equ "Embedded" (
				if "%%t" equ "NetFx35" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC50%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-IIS-WAS~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC51%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-NetFx30~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC52%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-NetFx30Client~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC53%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-NetFx35~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC54%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-NetFx35Client~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "BackupRestore" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC55%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-BackupRestore~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "BasicHelp" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC56%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-HelpEngine~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "Defender" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC57%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-AntiMalware~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "DVDMaker" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC107%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-DVDBurning~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC58%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-IMAPIv2~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "ISOBurner" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC59%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-IMAPIv2~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "FaxScan" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC60%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-Fax-Scan~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "MediaCenter" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC61%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-MediaCenter~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "PremiumCodecs" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC62%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-PremiumCodecs-DOLBY-AC3-AudioEncoder~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC63%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-PremiumCodecs-MPEG2-Decoder~31bf3856ad364e35~x86~~6.1.7600.16385.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC64%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-PremiumCodecs-MPEG2-Encoder~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC65%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-PremiumCodecs-MPEG2andDolbyDecoder~31bf3856ad364e35~x86~~6.1.7600.16385.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC66%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-PremiumCodecs-MPEG3~31bf3856ad364e35~x86~~6.1.7600.16385.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC67%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-PremiumCodecs-MPEG4~31bf3856ad364e35~x86~~6.1.7600.16385.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC108%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-PremiumCodecs-WMV~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "MobilityCenter" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC68%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-MobilePC~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "ParentalControl" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC69%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-ParentalControl~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "PhotoViewer" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC70%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-Photos-Viewer~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "Search" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC71%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-Natural-Language~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC72%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-Search~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "SpeechText" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC73%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-Speech-LP-ENG~31bf3856ad364e35~x86~~6.1.7600.16385.cab"
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC74%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-Speech~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)

				if "%%t" equ "TabletPC" (
					echo.-------------------------------------------------------------------------------
					echo.%txtAssigningIntegrateWindowsThinPC75%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%ThinPC%\WinEmb-Tablet~31bf3856ad364e35~x86~~6.1.7601.17514.cab"
				)
			)

			if "%IsLogsEnabled%" equ "Yes" (
				echo.-------------------------------------------------------------------------------
				if "%%t" equ "NetFx35" echo.%txtAssigningIntegrateWindowsThinPC76%
				if "%%t" equ "BackupRestore" echo.%txtAssigningIntegrateWindowsThinPC77%
				if "%%t" equ "BasicHelp" echo.%txtAssigningIntegrateWindowsThinPC78%
				if "%%t" equ "Defender" echo.%txtAssigningIntegrateWindowsThinPC79%
				if "%%t" equ "DVDMaker" echo.%txtAssigningIntegrateWindowsThinPC80%
				if "%%t" equ "FaxScan" echo.%txtAssigningIntegrateWindowsThinPC81%
				if "%%t" equ "ISOBurner" echo.%txtAssigningIntegrateWindowsThinPC82%
				if "%%t" equ "MediaCenter" echo.%txtAssigningIntegrateWindowsThinPC83%
				if "%%t" equ "PremiumCodecs" echo.%txtAssigningIntegrateWindowsThinPC84%
				if "%%t" equ "MobilityCenter" echo.%txtAssigningIntegrateWindowsThinPC85%
				if "%%t" equ "ParentalControl" echo.%txtAssigningIntegrateWindowsThinPC86%
				if "%%t" equ "PhotoViewer" echo.%txtAssigningIntegrateWindowsThinPC87%
				if "%%t" equ "Search" echo.%txtAssigningIntegrateWindowsThinPC88%
				if "%%t" equ "SpeechText" echo.%txtAssigningIntegrateWindowsThinPC89%
				if "%%t" equ "TabletPC" echo.%txtAssigningIntegrateWindowsThinPC90%
				echo.-------------------------------------------------------------------------------
				echo.%txtAssigningIntegrateWindowsThinPC91%
				call :GetPackages "%InstallMount%\%%i", "ThinPC.txt"
			)
		)
	)

	echo.
	echo.-------------------------------------------------------------------------------
	if "%%t" equ "NetFx35" echo.%txtAssigningIntegrateWindowsThinPC92%
	if "%%t" equ "BackupRestore" echo.%txtAssigningIntegrateWindowsThinPC93%
	if "%%t" equ "BasicHelp" echo.%txtAssigningIntegrateWindowsThinPC94%
	if "%%t" equ "Defender" echo.%txtAssigningIntegrateWindowsThinPC95%
	if "%%t" equ "DVDMaker" echo.%txtAssigningIntegrateWindowsThinPC96%
	if "%%t" equ "FaxScan" echo.%txtAssigningIntegrateWindowsThinPC97%
	if "%%t" equ "ISOBurner" echo.%txtAssigningIntegrateWindowsThinPC98%
	if "%%t" equ "MediaCenter" echo.%txtAssigningIntegrateWindowsThinPC99%
	if "%%t" equ "PremiumCodecs" echo.%txtAssigningIntegrateWindowsThinPC100%
	if "%%t" equ "MobilityCenter" echo.%txtAssigningIntegrateWindowsThinPC101%
	if "%%t" equ "ParentalControl" echo.%txtAssigningIntegrateWindowsThinPC102%
	if "%%t" equ "PhotoViewer" echo.%txtAssigningIntegrateWindowsThinPC103%
	if "%%t" equ "Search" echo.%txtAssigningIntegrateWindowsThinPC104%
	if "%%t" equ "SpeechText" echo.%txtAssigningIntegrateWindowsThinPC105%
	if "%%t" equ "TabletPC" echo.%txtAssigningIntegrateWindowsThinPC106%
	echo.-------------------------------------------------------------------------------
)

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Windows Thin PC Add-on Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft DirectX 9.0c
::-------------------------------------------------------------------------------------------
:IntDirectX9c

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftDirectX9c%
echo.===============================================================================
echo.

:: Checking whether Microsoft DirectX 9.0c Pack file exist
if not exist "%DirectX9c%\DirectX9c_%SelectedSourceOS%.tpk" (
	echo.%GlobalIntegrateMicrosoftDirectX9cOp01pos01% "DirectX9c_%SelectedSourceOS%.tpk" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\DirectX9c^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft DirectX 9.0c Pack file exist
if not exist "%DirectX9c%\DirectX9c_%SelectedSourceOS%_%ImageArchitecture%.reg" (
	echo.%GlobalIntegrateMicrosoftDirectX9cOp01pos01% "DirectX9c_%SelectedSourceOS%_%ImageArchitecture%.reg" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\DirectX9c^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftDirectX9c02%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftDirectX9c03%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMicrosoftDirectX9c04%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "%DirectX9c%\DirectX9c_%SelectedSourceOS%.tpk", %PackageIndex%, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMicrosoftDirectX9c05%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		call :ImportRegistry2Image "%DirectX9c%\DirectX9c_%SelectedSourceOS%_%ImageArchitecture%.reg"
		echo.
		echo.
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
		echo.
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftDirectX9c06%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft Games
::-------------------------------------------------------------------------------------------
:IntGamesMenu

set "CurrentMenu=IntGamesMenu"

if "%SelectedSourceOS%" equ "w7" (
	if "%ImageInstallationType%" neq "Client" (
		set "GamesList=14"
	) else (
		if /i "%ImageEdition%" neq "HomePremium" if /i "%ImageEdition%" neq "HomePremiumN" if /i "%ImageEdition:~,12%" neq "Professional" if /i "%ImageEdition:~,10%" neq "Enterprise" if /i "%ImageEdition%" neq "Ultimate" if /i "%ImageEdition%" neq "UltimateN" (
			set "GamesList=14"
		)
		if /i "%ImageEdition%" neq "Starter" if /i "%ImageEdition%" neq "HomeBasic" (
			set "GamesList=8"
		)
	)
)
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	set "GamesList=14"
)

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftGamesMenu%
echo.===============================================================================
echo.

set /A count=1
for %%n in (
	CariocaRummy
	ChessTitans
	FreeCell
	Hearts
	HoldEm
	Inkball
	MahjongTitans
	Minesweeper
	Pinball
	PurblePlace
	Solitaire
	SpiderSolitaire
	Sudoku
	Tinker
) do (
	if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
	if !count! gtr 9 set "OptionID=!count!"

	if "%%n" equ "CariocaRummy" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_CariocaRummy!^)%txtIntegrateMicrosoftGames001%
	)
	if "%%n" equ "ChessTitans" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_ChessTitans!^)%txtIntegrateMicrosoftGames002%
	)
	if "%%n" equ "FreeCell" (
		if "!GamesList!" neq "8" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_FreeCell!^)%txtIntegrateMicrosoftGames003%
	)
	if "%%n" equ "Hearts" (
		if "!GamesList!" neq "8" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_Hearts!^)%txtIntegrateMicrosoftGames004%
	)
	if "%%n" equ "HoldEm" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_HoldEm!^)%txtIntegrateMicrosoftGames005%
	)
	if "%%n" equ "Inkball" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_Inkball!^)%txtIntegrateMicrosoftGames006%
	)
	if "%%n" equ "MahjongTitans" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_MahjongTitans!^)%txtIntegrateMicrosoftGames007%
	)
	if "%%n" equ "Minesweeper" (
		if "!GamesList!" neq "8" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_Minesweeper!^)%txtIntegrateMicrosoftGames008%
	)
	if "%%n" equ "Pinball" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_Pinball!^)%txtIntegrateMicrosoftGames009%
	)
	if "%%n" equ "PurblePlace" (
		if "!GamesList!" neq "8" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_PurblePlace!^)%txtIntegrateMicrosoftGames010%
	)
	if "%%n" equ "Solitaire" (
		if "!GamesList!" neq "8" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_Solitaire!^)%txtIntegrateMicrosoftGames011%
	)
	if "%%n" equ "SpiderSolitaire" (
		if "!GamesList!" neq "8" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_SpiderSolitaire!^)%txtIntegrateMicrosoftGames012%
	)
	if "%%n" equ "Sudoku" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_Sudoku!^)%txtIntegrateMicrosoftGames013%
	)
	if "%%n" equ "Tinker" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo. [!OptionID!] ^(!G_Tinker!^)%txtIntegrateMicrosoftGames014%
	)

	if "!%%n!" neq "" (
		set /A count+=1
	)
)

echo.
echo.  [S] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.
echo.  [X] %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntFeaturesMenu
	if /i "%%c" equ "D" (
		for %%g in (
			F_IntGamesMenu

			CariocaRummy
			ChessTitans
			FreeCell
			Hearts
			HoldEm
			Inkball
			MahjongTitans
			Minesweeper
			Pinball
			PurblePlace
			Solitaire
			SpiderSolitaire
			Sudoku
			Tinker
		) do (
			set "%%g=%%g"
			if "!%%g:~,2!" equ "F_" (
				set "%%g=-"
			) else (
				set "G_%%g=-"
				set %%g=
			)
		)
	)
	if /i "%%c" equ "S" (
		for %%g in (
			CariocaRummy
			ChessTitans
			FreeCell
			Hearts
			HoldEm
			Inkball
			MahjongTitans
			Minesweeper
			Pinball
			PurblePlace
			Solitaire
			SpiderSolitaire
			Sudoku
			Tinker
		) do (
			if "!%%g!" neq "" (
				set "G_%%g=+"
			)
		)
	)
	if "%%c" equ "!CariocaRummy!" (
		if "!G_CariocaRummy!" equ "-" (
			set "G_CariocaRummy=+"
		) else (
			set "G_CariocaRummy=-"
		)
	)
	if "%%c" equ "!ChessTitans!" (
		if "!G_ChessTitans!" equ "-" (
			set "G_ChessTitans=+"
		) else (
			set "G_ChessTitans=-"
		)
	)
	if "%%c" equ "!FreeCell!" (
		if "!G_FreeCell!" equ "-" (
			set "G_FreeCell=+"
		) else (
			set "G_FreeCell=-"
		)
	)
	if "%%c" equ "!Hearts!" (
		if "!G_Hearts!" equ "-" (
			set "G_Hearts=+"
		) else (
			set "G_Hearts=-"
		)
	)
	if "%%c" equ "!HoldEm!" (
		if "!G_HoldEm!" equ "-" (
			set "G_HoldEm=+"
		) else (
			set "G_HoldEm=-"
		)
	)
	if "%%c" equ "!Inkball!" (
		if "!G_Inkball!" equ "-" (
			set "G_Inkball=+"
		) else (
			set "G_Inkball=-"
		)
	)
	if "%%c" equ "!MahjongTitans!" (
		if "!G_MahjongTitans!" equ "-" (
			set "G_MahjongTitans=+"
		) else (
			set "G_MahjongTitans=-"
		)
	)
	if "%%c" equ "!Minesweeper!" (
		if "!G_Minesweeper!" equ "-" (
			set "G_Minesweeper=+"
		) else (
			set "G_Minesweeper=-"
		)
	)
	if "%%c" equ "!Pinball!" (
		if "!G_Pinball!" equ "-" (
			set "G_Pinball=+"
		) else (
			set "G_Pinball=-"
		)
	)
	if "%%c" equ "!PurblePlace!" (
		if "!G_PurblePlace!" equ "-" (
			set "G_PurblePlace=+"
		) else (
			set "G_PurblePlace=-"
		)
	)
	if "%%c" equ "!Solitaire!" (
		if "!G_Solitaire!" equ "-" (
			set "G_Solitaire=+"
		) else (
			set "G_Solitaire=-"
		)
	)
	if "%%c" equ "!SpiderSolitaire!" (
		if "!G_SpiderSolitaire!" equ "-" (
			set "G_SpiderSolitaire=+"
		) else (
			set "G_SpiderSolitaire=-"
		)
	)
	if "%%c" equ "!Sudoku!" (
		if "!G_Sudoku!" equ "-" (
			set "G_Sudoku=+"
		) else (
			set "G_Sudoku=-"
		)
	)
	if "%%c" equ "!Tinker!" (
		if "!G_Tinker!" equ "-" (
			set "G_Tinker=+"
		) else (
			set "G_Tinker=-"
		)
	)
)

:: Return to IntGamesMenu
rem goto :IntGamesMenu
goto :!CurrentMenu!

:IntGames

:: Checking whether Microsoft Games Pack file exist
if not exist "%Games%\Games_%ImageArchitecture%.tpk" (
	echo.%txtIntegrateMicrosoftGames015pos01% "Games_%ImageArchitecture%.tpk" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Games^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Microsoft Games Pack file exist
if not exist "%Games%\Games_%ImageArchitecture%_%ImageDefaultLanguage%.tpk" (
	echo.%txtIntegrateMicrosoftGames015pos01% "Games_%ImageArchitecture%_%ImageDefaultLanguage%.tpk" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Games^> %GlobalFolder%
	goto :Stop
)

if "!WLegacyGames_Pack!" equ "+" (
	for %%g in (
		CariocaRummy
		HoldEm
		Sudoku
		Tinker

		ChessTitans
		FreeCell
		Hearts
		Inkball
		MahjongTitans
		Minesweeper
		Pinball
		PurblePlace
		Solitaire
		SpiderSolitaire
	) do (
		set "G_%%g=+"
	)
)

:: Checking whether Microsoft Games Pack file exist
for %%g in (
	CariocaRummy
	HoldEm
	Sudoku
	Tinker
) do (
	if "!G_%%g!" equ "+" (
		if not exist "%Games%\%%g_%ImageArchitecture%.reg" (
			echo.%txtIntegrateMicrosoftGames015pos01% "%%g_%ImageArchitecture%.reg" %GlobalNotFound%
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\Games^> %GlobalFolder%
			goto :Stop
		)
	)
)

for %%g in (
	ChessTitans
	FreeCell
	Hearts
	Inkball
	MahjongTitans
	Minesweeper
	Pinball
	PurblePlace
	Solitaire
	SpiderSolitaire
) do (
	if "!G_%%g!" equ "+" (
		if not exist "%Games%\%%g.reg" (
			echo.%txtIntegrateMicrosoftGames015pos01% "%%g.reg" %GlobalNotFound%
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\Games^> %GlobalFolder%
			goto :Stop
		)
	)
)

set WLegacyGames=
set GameBaseIndex=
set GameLangIndex=

cls
echo.
echo.===============================================================================
echo.%txtAssigningIntegrateMicrosoftGames001%
echo.===============================================================================
echo.

::Windows XP, Vista e 7 Legacy Games
echo.
echo.%txtAssigningIntegrateMicrosoftGames002%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtAssigningIntegrateMicrosoftGames003%
echo.-------------------------------------------------------------------------------
echo.
for %%g in (
	CariocaRummy
	HoldEm
	Sudoku
	Tinker
	ChessTitans
	FreeCell
	Hearts
	Inkball
	MahjongTitans
	Minesweeper
	Pinball
	PurblePlace
	Solitaire
	SpiderSolitaire
) do (
	if "!G_%%g!" equ "+" (
		set "WLegacyGames=!WLegacyGames!;%%g"
		echo.%%g
	)
)
echo.

if "!WLegacyGames!" neq "" (
	set "WLegacyGames=!WLegacyGames:~1!"
) else (
	echo.%txtAssigningIntegrateMicrosoftGames004%
	goto :Stop
)
if "!Bypass!" equ "O" (
	echo.===============================================================================
	echo.
	echo. [C] %GlobalOption_Continue%
	echo.
	echo. [R] %GlobalOption_Return2Change%
	echo.
	echo.===============================================================================
	echo.
	choice /C:CR /N /M "%GlobalEnterChoice% "
	if errorlevel 2 goto :IntGamesMenu
)

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftGames%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftGames017%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMicrosoftGames018%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalIntegrateMicrosoftGames019%
		call :ApplyImage "%Games%\Games_%ImageArchitecture%.tpk", 1, "%InstallMount%\%%i"
		echo.----- [%ImageDefaultLanguage%] %txtIntegrateMicrosoftGames020pos02% --------------------------------------------
		call :ApplyImage "%Games%\Games_%ImageArchitecture%_%ImageDefaultLanguage%.tpk", 1, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------
		echo.
		for %%g in (!WLegacyGames!) do (
			if "%%g" equ "CariocaRummy" (
				set "GameBaseIndex=2"
				set GameLangIndex=
			)
			if "%%g" equ "ChessTitans" (
				set "GameBaseIndex=3"
				set "GameLangIndex=2"
			)
			if "%%g" equ "FreeCell" (
				set "GameBaseIndex=4"
				set "GameLangIndex=3"
			)
			if "%%g" equ "Hearts" (
				set "GameBaseIndex=5"
				set "GameLangIndex=4"
			)
			if "%%g" equ "HoldEm" (
				set "GameBaseIndex=6"
				set "GameLangIndex=5"
			)
			if "%%g" equ "Inkball" (
				set "GameBaseIndex=7"
				set "GameLangIndex=6"
			)
			if "%%g" equ "MahjongTitans" (
				set "GameBaseIndex=8"
				set "GameLangIndex=7"
			)
			if "%%g" equ "Minesweeper" (
				set "GameBaseIndex=9"
				set "GameLangIndex=8"
			)
			if "%%g" equ "Pinball" (
				set "GameBaseIndex=10"
				set "GameLangIndex=9"
			)
			if "%%g" equ "PurblePlace" (
				set "GameBaseIndex=11"
				set "GameLangIndex=10"
			)
			if "%%g" equ "Solitaire" (
				set "GameBaseIndex=12"
				set "GameLangIndex=11"
			)
			if "%%g" equ "SpiderSolitaire" (
				set "GameBaseIndex=13"
				set "GameLangIndex=12"
			)
			if "%%g" equ "Sudoku" (
				set "GameBaseIndex=14"
				set "GameLangIndex=13"
			)
			if "%%g" equ "Tinker" (
				set "GameBaseIndex=15"
				set "GameLangIndex=14"
			)
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateMicrosoftGames021pos01% %%g %txtIntegrateMicrosoftGames021pos02%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.%GlobalIntegrateMicrosoftGames019%
			if defined GameBaseIndex call :ApplyImage "%Games%\Games_%ImageArchitecture%.tpk", !GameBaseIndex!, "%InstallMount%\%%i"
			echo.----- [%ImageDefaultLanguage%] %txtIntegrateMicrosoftGames020pos02% --------------------------------------------
			if defined GameLangIndex call :ApplyImage "%Games%\Games_%ImageArchitecture%_%ImageDefaultLanguage%.tpk", !GameLangIndex!, "%InstallMount%\%%i"
			echo.-------------------------------------------------------------------------------
			echo.
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMicrosoftGames022%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMicrosoftGames023%
		echo.%txtIntegrateMicrosoftGames024%
		echo.-------------------------------------------------------------------------------
		for %%g in (
			CariocaRummy
			HoldEm
			Sudoku
			Tinker
		) do (
			if "!G_%%g!" equ "+" (
				echo.%%g
				call :ImportRegistry2Image "%Games%\%%g_%ImageArchitecture%.reg"
			)
		)
		for %%g in (
			ChessTitans
			FreeCell
			Hearts
			Inkball
			MahjongTitans
			Minesweeper
			Pinball
			PurblePlace
			Solitaire
			SpiderSolitaire
		) do (
			if "!G_%%g!" equ "+" (
				echo.%%g
				call :ImportRegistry2Image "%Games%\%%g.reg"
			)
		)
		echo.
		echo.
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
	)
)

echo.
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftGames025%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Microsoft Games Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Sidebar
::-------------------------------------------------------------------------------------------
:IntSidebar

cls
echo.===============================================================================
echo.%txtIntegrateWindowsSidebar%
echo.===============================================================================
echo.

:: Checking whether Windows Sidebar Pack file exist
if not exist "%Sidebar%\Sidebar.tpk" (
	echo.%GlobalIntegrateWindowsSidebar02pos01% "Sidebar.tpk" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Sidebar^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Sidebar Pack file exist
if not exist "%Sidebar%\Sidebar_%ImageDefaultLanguage%.tpk" (
	echo.%GlobalIntegrateWindowsSidebar02pos01% "Sidebar_%ImageDefaultLanguage%.tpk" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Sidebar^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Sidebar Pack file exist
if not exist "%Sidebar%\Sidebar_%ImageArchitecture%.reg" (
	echo.%GlobalIntegrateWindowsSidebar02pos01% "Sidebar_%ImageArchitecture%.reg" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Sidebar^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWindowsSidebar03%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWindowsSidebar04%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateWindowsSidebar05%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "%Sidebar%\Sidebar.tpk", %PackageIndex%, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateWindowsSidebar06pos01% [%ImageDefaultLanguage%] %txtIntegrateWindowsSidebar06pos02%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "%Sidebar%\Sidebar_%ImageDefaultLanguage%.tpk", %PackageIndex%, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateWindowsSidebar07%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%txtIntegrateWindowsSidebar08%
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		call :ImportRegistry2Image "%Sidebar%\Sidebar_%ImageArchitecture%.reg"
		call :ImportRegistry2Image "%Sidebar%\3rdPartyGadgets_%ImageArchitecture%.reg"
		echo.
		echo.
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
		echo.

		:: Deleting Microsoft Sidebar Media Center files if the Source Edition is not MediaCenter
		if /i not exist "%InstallMount%\%%i\Windows\ehome" call :RemoveFolder "%InstallMount%\%%i\Program Files\Windows Sidebar\Gadgets\MediaCenter.Gadget"
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateWindowsSidebar09%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft Visual C++ Runtime
::-------------------------------------------------------------------------------------------
:IntVCRuntime

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftVisualC%
echo.===============================================================================
echo.

:: Setting Microsoft Visual C++ Runtime Pack folder path
set "VCRuntime=%VCRuntime%\%SelectedSourceOS%"

:: Checking whether Microsoft Visual C++ Runtime Pack file exist
if not exist "!VCRuntime!\VC.tpk" (
	echo.%txtIntegrateMicrosoftVisualC02pos01% "VC.tpk" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\VCRuntime\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

if "%SelectedSourceOS%" equ "w7" if not exist "!VCRuntime!\Windows6.1-KB3118401-%ImageArchitecture%.cab" (
	echo.%txtIntegrateMicrosoftVisualC02pos01% "Windows6.1-KB3118401-%ImageArchitecture%.cab" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\VCRuntime\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

if "%SelectedSourceOS%" equ "w81" if not exist "!VCRuntime!\Windows8.1-KB3118401-%ImageArchitecture%.cab" (
	echo.%txtIntegrateMicrosoftVisualC02pos01% "Windows8.1-KB3118401-%ImageArchitecture%.cab" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\VCRuntime\%SelectedSourceOS%^> %GlobalFolder%
	goto :Stop
)

for %%i in (
	Certificates
	VC_2005
	VC_2008
	VC_2010
	VC_2012
	VC_2013
	VC_2022
	VC_Legacy
) do (
	if not exist "!VCRuntime!\%%i_%ImageArchitecture%.reg" (
		echo.%txtIntegrateMicrosoftVisualC02pos01% "%%i_%ImageArchitecture%.reg" %GlobalNotFound%
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\VCRuntime\%SelectedSourceOS%^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftVisualC03%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftVisualC04%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		:: Getting Image Index Information
		call :GetImageIndexInfo "%InstallWim%", %%i >nul

		if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateMicrosoftVisualC05%
			echo.-------------------------------------------------------------------------------
			if "%SelectedSourceOS%" equ "w7" call :AddPackage "%InstallMount%\%%i", "!VCRuntime!\Windows6.1-KB3118401-%ImageArchitecture%.cab"
			if "%SelectedSourceOS%" equ "w81" call :AddPackage "%InstallMount%\%%i", "!VCRuntime!\Windows8.1-KB3118401-%ImageArchitecture%.cab"
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMicrosoftVisualC06%
		echo.-------------------------------------------------------------------------------
		call :ApplyImage "!VCRuntime!\VC.tpk", %PackageIndex%, "%InstallMount%\%%i"
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegrateMicrosoftVisualC07%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%GlobalImportingRegistrySettings2ImageRegistry%

		for %%i in (
			Certificates
			VC_2005
			VC_2008
			VC_2010
			VC_2012
			VC_2013
			VC_2022
			VC_Legacy
		) do (
			call :ImportRegistry2Image "!VCRuntime!\%%i_%ImageArchitecture%.reg"
		)

		echo.
		echo.
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
		echo.
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegrateMicrosoftVisualC08%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Sysinternals Suite
::-------------------------------------------------------------------------------------------
:IntSysinternalsSuite

cls
echo.===============================================================================
echo.%txtIntegrateSysinternalsSuite%
echo.===============================================================================
echo.

set "PacksPath=%Packs%\SysinternalsSuite"
set "SysinternalsPaths=%%SystemROOT%%\SysinternalsSuite"
set SysinternalsSuiteFileName=

:: Downloading... Sysinternals Suite Pack
echo.%txtDownloadingSysinternalsSuitePack%
echo.
call :CreateFolder "!PacksPath!"
if "%ImageInstallationType%" neq "Client" set "SysinternalsSuiteFileName=SysinternalsSuite-Nano.zip"
if "%ImageInstallationType%" equ "Client" set "SysinternalsSuiteFileName=SysinternalsSuite.zip"
if /i "%ImageArchitecture%" equ "arm64" set "SysinternalsSuiteFileName=SysinternalsSuite-ARM64.zip"
set "DownloadURI=https://download.sysinternals.com/files/!SysinternalsSuiteFileName!"

call :DownloadFile "!DownloadURI!", "!PacksPath!\!SysinternalsSuiteFileName!", "!SysinternalsSuiteFileName!"

:: Multiple Files Download
rem Start "Downloading SysinternalsSuite*.zip file..." /wait /B PowerShell.exe -NoP -C Start-BitsTransfer -Source "https://download.sysinternals.com/files/SysinternalsSuite-Nano.zip", "https://download.sysinternals.com/files/SysinternalsSuite.zip", "https://download.sysinternals.com/files/SysinternalsSuite-ARM64.zip" -Destination "!PacksPath!\SysinternalsSuite-Nano.zip", "!PacksPath!\SysinternalsSuite.zip", "!PacksPath!\SysinternalsSuite-ARM64.zip"

echo.
echo.%txtUpdatedFilePackDownloaded%
echo.^<"https://download.sysinternals.com/files/!SysinternalsSuiteFileName!"^>
echo.
echo.%txtGetKnowMoreAbout%
echo.^<"https://docs.microsoft.com/en-us/sysinternals/"^>
echo.^<"https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite"^>
echo.
echo.
echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingSysinternals%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingSysinternals%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		if exist "!PacksPath!\!SysinternalsSuiteFileName!" (
			call :CreateFolder "%InstallMount%\%%i\Windows\SysinternalsSuite"
			"%Zip%" x -y "!PacksPath!\!SysinternalsSuiteFileName!" -o"%InstallMount%\%%i\Windows\SysinternalsSuite" >nul
		)

		if exist "%InstallMount%\%%i\Windows\SysinternalsSuite\*.exe" (
			echo.
			echo.%GlobalMountingImageRegistry%
			call :MountImageRegistry "%InstallMount%\%%i"
			echo.%GlobalImportingRegistrySettings2ImageRegistry%
			for /f "tokens=3*" %%p in ('reg.exe query "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Environment" /v "Path" ^| find.exe /I "REG_EXPAND_SZ"') do (
				echo."%%p" | findstr.exe /I /V "SysinternalsSuite" >nul && (
					reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Environment" /v "Path" /t REG_EXPAND_SZ /d "%%p;!SysinternalsPaths!" /f >nul 2>&1
				)
			)
			echo.
			echo.%GlobalUnMountingImageRegistry%
			call :UnMountImageRegistry
		)
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingSysinternals%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Updates Menu
::-------------------------------------------------------------------------------------------
:IntUpdatesMenu

if "%IsDialogsEnabled%" equ "Yes" if "!Updates_Warning!" equ "" (
	cls
	echo.===============================================================================
	echo.%txtIntegrateWindowsUpdates%
	echo.===============================================================================
	echo.
	echo.
	echo.
	echo.                              %GlobalWARNING%
	echo.                              =============
	echo.
	echo.  %txtIntegrateWindowsUpdatesWarningline1%
	echo.  %txtIntegrateWindowsUpdatesWarningline2%
	echo.  %txtIntegrateWindowsUpdatesWarningline3%
	echo.  %txtIntegrateWindowsUpdatesWarningline4%
	echo.  %txtIntegrateWindowsUpdatesWarningline5%
	echo.  %txtIntegrateWindowsUpdatesWarningline6%
	echo.  %txtIntegrateWindowsUpdatesWarningline7%
	echo.  %txtIntegrateWindowsUpdatesWarningline8%
	echo.
	echo.   %GlobalDisableDialogs_line01%
	echo.   %GlobalDisableDialogs_line02%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%GlobalChoice_continue% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "Updates_Warning=0"
)

set "CurrentMenu=IntUpdatesMenu"

cls
echo.===============================================================================
echo.%txtIntegrateWindowsUpdatesMenu%
echo.===============================================================================
echo.
echo.  [1] ^(!F_IntUpdatesWUpdates!^)%txtIntegrateWindowsUpdatesMenu01%
echo.
echo.  [2] ^(!F_IntWHDUpdatesMenu!^)%txtIntegrateWindowsUpdatesMenu02%
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.

choice /C:12X /N /M "%GlobalEnterChoice% "
if errorlevel 3 goto :IntegrateMenu
if errorlevel 2 (
	if "!F_IntWHDUpdatesMenu!" equ "-" (
		set "F_IntWHDUpdatesMenu=+"
		goto :IntWHDUpdatesMenu
	) else (
		set "F_IntWHDUpdatesMenu=-"
	)
)
if errorlevel 1 (
	if "!F_IntUpdatesWUpdates!" equ "-" (
		set "F_IntUpdatesWUpdates=+"
	) else (
		set "F_IntUpdatesWUpdates=-"
	)
)

:: Returning to Integrate Menu
goto :!CurrentMenu!

:IntWHDUpdatesMenu

set "CurrentMenu=IntWHDUpdatesMenu"

cls
echo.===============================================================================
echo.%txtIntegrateWHDUpdatePackMenu%
echo.===============================================================================
echo.

set /A count=1
for %%n in (
	IntW7withSP2WHDUpdates
	IntW7withoutSP2WHDUpdates
	IntWHDBaselineMenu
	IntUpdatesGeneral
	IntUpdatesHotfix
	IntUpdatesSecurity
	IntWHDAdditionalMenu
	IntWindowsSetupMediaUpdates
) do (
	set "OptionID=!count!"

	if "%%n" equ "IntW7withSP2WHDUpdates" (
		if "%SelectedSourceOS%" equ "w7" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntW7withSP2WHDUpdates!^)%txtIntegrateWHDUpdatePackMenu01%
	)
	if "%%n" equ "IntW7withoutSP2WHDUpdates" (
		if "%SelectedSourceOS%" equ "w7" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntW7withoutSP2WHDUpdates!^)%txtIntegrateWHDUpdatePackMenu02%
	)
	if "%%n" equ "IntWHDBaselineMenu" (
		if "%SelectedSourceOS%" neq "w7" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" (
			if "%SelectedSourceOS%" equ "w81" (
				echo.  [!OptionID!] ^(!F_IntWHDBaselineMenu!^)%txtIntegrateWHDUpdatePackMenu03%
			)
			if "%SelectedSourceOS%" neq "w81" (
				echo.  [!OptionID!] ^(!F_IntWHDBaselineMenu!^)%txtIntegrateWHDUpdatePackMenu04%
			)
		)
	)
	if "%%n" equ "IntUpdatesGeneral" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntUpdatesGeneral!^)%txtIntegrateWHDUpdatePackMenu05%
	)
	if "%%n" equ "IntUpdatesHotfix" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntUpdatesHotfix!^)%txtIntegrateWHDUpdatePackMenu06%
	)
	if "%%n" equ "IntUpdatesSecurity" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntUpdatesSecurity!^)%txtIntegrateWHDUpdatePackMenu07%
	)
	if "%%n" equ "IntWHDAdditionalMenu" (
		if "%SelectedSourceOS%" equ "w81" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntWHDAdditionalMenu!^)%txtIntegrateWHDUpdatePackMenu08%
	)
	if "%%n" equ "IntWindowsSetupMediaUpdates" (
		if "%IsBootImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntWindowsSetupMediaUpdates!^)%txtIntegrateWHDUpdatePackMenu09%
	)

	if "!%%n!" neq "" (
		echo.
		set /A count+=1
	)
)

if "%IsBootImageSelected%" equ "No" (
	echo.
	echo.         %txtIntegrateWHDUpdatePackMenu10%
	echo.
	echo.         %GlobalIntegrateDriversBootNoMouted%
	echo.         %GlobalGoToolsMenuMountBoot%
	echo.
)
echo.
echo.
echo.
echo.
echo.  [X] %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntUpdatesMenu
	if "%%c" equ "!IntW7withSP2WHDUpdates!" (
		if "!F_IntW7withSP2WHDUpdates!" equ "-" (
			set "IsW7SP1CRUSelected=Yes"
			set "F_IntW7withoutSP2WHDUpdates=-"
			set "F_IntW7withSP2WHDUpdates=+"
			goto :IntW7WHDUpdates
		) else (
			set "IsW7SP1CRUSelected=No"
			set "F_IntW7withSP2WHDUpdates=-"
		)
	)
	if "%%c" equ "!IntW7withoutSP2WHDUpdates!" (
		if "!F_IntW7withoutSP2WHDUpdates!" equ "-" (
			if "!IsW7SP1CRUSelectedset!" equ "Yes" set "IsW7SP1CRUSelected=No"
			set "F_IntW7withSP2WHDUpdates=-"
			set "F_IntW7withoutSP2WHDUpdates=+"
			goto :IntW7WHDUpdates
		) else (
			set "IsW7SP1CRUSelected=No"
			set "F_IntW7withoutSP2WHDUpdates=-"
		)
	)
	if "%%c" equ "!IntWHDBaselineMenu!" (
		if "!F_IntWHDBaselineMenu!" equ "-" (
			set "F_IntWHDBaselineMenu=+"
			goto :IntWHDBaselineMenu
		) else (
			set "F_IntWHDBaselineMenu=-"
		)
	)
	if "%%c" equ "!IntUpdatesGeneral!" (
		if "!F_IntUpdatesGeneral!" equ "-" (
			set "F_IntUpdatesGeneral=+"
		) else (
			set "F_IntUpdatesGeneral=-"
		)
	)
	if "%%c" equ "!IntUpdatesHotfix!" (
		if "!F_IntUpdatesHotfix!" equ "-" (
			set "F_IntUpdatesHotfix=+"
		) else (
			set "F_IntUpdatesHotfix=-"
		)
	)
	if "%%c" equ "!IntUpdatesSecurity!" (
		if "!F_IntUpdatesSecurity!" equ "-" (
			set "F_IntUpdatesSecurity=+"
		) else (
			set "F_IntUpdatesSecurity=-"
		)
	)
	if "%%c" equ "!IntWHDAdditionalMenu!" (
		if "!F_IntWHDAdditionalMenu!" equ "-" (
			set "F_IntWHDAdditionalMenu=+"
			goto :IntWHDAdditionalMenu
		) else (
			set "F_IntWHDAdditionalMenu=-"
		)
	)
	if "%%c" equ "!IntWindowsSetupMediaUpdates!" (
		if "!F_IntWindowsSetupMediaUpdates!" equ "-" (
			if "%IsBootImageSelected%" equ "Yes" set "F_IntWindowsSetupMediaUpdates=+"
		) else (
			set "F_IntWindowsSetupMediaUpdates=-"
		)
	)
)

:: Returning to Integrate Menu
goto :!CurrentMenu!

:IntW7WHDUpdates
if "%IsDialogsEnabled%" equ "Yes" if "%IsW7SP1CRUSelected%" equ "Yes" (
	cls
	echo.===============================================================================
	echo.%txtIntegrateWHDUpdatesWithSPack2%
	echo.===============================================================================
	echo.%txtIntegrateWHDUpdatesWithSPack201%
	echo.
	echo.%txtIntegrateWHDUpdatesWithSPack202%
	echo.%txtIntegrateWHDUpdatesWithSPack203%
	echo.
	echo.%txtIntegrateWHDUpdatesWithSPack204%
	echo.%txtIntegrateWHDUpdatesWithSPack205%
	echo.%txtIntegrateWHDUpdatesWithSPack206%
	echo.
	echo.%txtIntegrateWHDUpdatesWithSPack207%
	echo.%txtIntegrateWHDUpdatesWithSPack208%
	echo.
	echo.%txtIntegrateWHDUpdatesWithSPack209%
	echo.%txtIntegrateWHDUpdatesWithSPack210%
	echo.%txtIntegrateWHDUpdatesWithSPack211%
	echo.%txtIntegrateWHDUpdatesWithSPack212%
	echo.%txtIntegrateWHDUpdatesWithSPack213%
	echo.
	echo.%txtIntegrateWHDUpdatesWithSPack214%
	echo.%txtIntegrateWHDUpdatesWithSPack215%
	echo.===============================================================================
	if "!Allowed!" equ "I" (
		echo.
	) else (
		echo.
	)
	pause
)

:IntW7WHDUpdatesMenu

set "CurrentMenu=IntW7WHDUpdatesMenu"

cls
echo.===============================================================================
echo.%txtIntegrateWHDUpdatesMenu%
echo.===============================================================================
echo.
if "%SelectedSourceOS%" equ "w7" (
	echo.  [1] ^(!F_IntWHDAdditionalMenu!^)%txtIntegrateWHDUpdatesMenu01%
	echo.
	echo.  [2] ^(!F_IntWHDExtraMenu!^)%txtIntegrateWHDUpdatesMenu02%
	echo.
	echo.  [3] ^(!F_IntUpdatesGeneral!^)%txtIntegrateWHDUpdatesMenu03%
	echo.
	echo.  [4] ^(!F_IntUpdatesHotfix!^)%txtIntegrateWHDUpdatesMenu04%
	echo.
	echo.  [5] ^(!F_IntUpdatesSecurity!^)%txtIntegrateWHDUpdatesMenu05%
	echo.
	echo.  [6] ^(!F_IntUpdatesESU!^)%txtIntegrateWHDUpdatesMenu06%
	echo.
	echo.
	echo.
	echo.
	echo.  [X]   %GlobalOption_GoBack%
	echo.
	echo.===============================================================================
	echo.
	choice /C:123456X /N /M "%GlobalEnterChoice% "
	if errorlevel 7 goto :IntegrateMenu
	if errorlevel 6 (
		if "!F_IntUpdatesESU!" equ "-" (
			set "F_IntUpdatesESU=+"
		) else (
			set "F_IntUpdatesESU=-"
		)
	)
	if errorlevel 5 (
		if "!F_IntUpdatesSecurity!" equ "-" (
			set "F_IntUpdatesSecurity=+"
		) else (
			set "F_IntUpdatesSecurity=-"
		)
	)
	if errorlevel 4 (
		if "!F_IntUpdatesHotfix!" equ "-" (
			set "F_IntUpdatesHotfix=+"
		) else (
			set "F_IntUpdatesHotfix=-"
		)
	)
	if errorlevel 3 (
		if "!F_IntUpdatesGeneral!" equ "-" (
			set "F_IntUpdatesGeneral=+"
		) else (
			set "F_IntUpdatesGeneral=-"
		)
	)
	if errorlevel 2 (
		if "!F_IntWHDExtraMenu!" equ "-" (
			set "F_IntWHDExtraMenu=+"
			goto :IntWHDExtraMenu
		) else (
			set "F_IntWHDExtraMenu=-"
		)
	)
	if errorlevel 1 (
		if "!F_IntWHDAdditionalMenu!" equ "-" (
			set "F_IntWHDAdditionalMenu=+"
			goto :IntWHDAdditionalMenu
		) else (
			set "F_IntWHDAdditionalMenu=-"
		)
	)
)

:: Returning to Integrate Menu
goto :!CurrentMenu!

:IntWHDBaselineMenu

set "CurrentMenu=IntWHDBaselineMenu"

cls

echo.===============================================================================
if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateWHDBaselineUpdatesMenu%
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDGeneralUpdatesMenu%
echo.===============================================================================
echo.

set /A count=1
for %%n in (
	IntWHDBaseLineBoot
	IntWHDBaseLineInstall
	IntWHDBaseLineInstallRecovery
	IntWHDBaseLineBootInstallRecovery
) do (
	set "OptionID=!count!"

	if "%%n" equ "IntWHDBaseLineBoot" (
		if "%IsBootImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntWHDBaseLineBoot!^)%txtIntegrateDrivers_01%
	)
	if "%%n" equ "IntWHDBaseLineInstall" (
		set "%%n=!count!"
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntWHDBaseLineInstall!^)%txtIntegrateWHDGeneralUpdatesMenu01%
	)
	if "%%n" equ "IntWHDBaseLineInstallRecovery" (
		if "%IsRecoveryImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntWHDBaseLineInstallRecovery!^)%txtIntegrateWHDGeneralUpdatesMenu02%
	)
	if "%%n" equ "IntWHDBaseLineBootInstallRecovery" (
		if "%IsRecoveryImageSelected%" equ "Yes" if "%IsBootImageSelected%" equ "Yes" (
			set "%%n=!count!"
		)
		if "!%%n!" neq "" echo.  [!OptionID!] ^(!F_IntWHDBaseLineBootInstallRecovery!^)%txtIntegrateWHDGeneralUpdatesMenu03%
	)

	if "!%%n!" neq "" (
		echo.
		set /A count+=1
	)
)

if "%IsBootImageSelected%" equ "No" (
	echo.
	echo.         %GlobalCantIntegrate%
	echo.                                %txtBootImageOptions%
	echo.                                %GlobalBootInstallandWinReImageOptions%
	echo.
	echo.         %GlobalIntegrateDriversBootNoMouted%
	echo.         %GlobalGoToolsMenuMountBoot%
	echo.
)
if "%IsRecoveryImageSelected%" equ "No" (
	echo.
	echo.         %GlobalCantIntegrate%
	echo.                                %txtInstallandWinReImageOptions%
	echo.                                %GlobalBootInstallandWinReImageOptions%
	echo.
	echo.         %GlobalWinREnoMounted%
	echo.         %GlobalGoToolsMenuMountWinRE%
	echo.
)
echo.
echo.
echo.
echo.
echo.  [X] %GlobalOption_GoBackSelectStartIntegration%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "%%c" equ "X" goto :IntUpdatesMenu
	if "%%c" equ "!IntWHDBaseLineBoot!" (
		if "!F_IntWHDBaseLineBoot!" equ "-" (
			set "F_IntWHDBaseLineBoot=+"
			set "F_IntWHDBaseLineInstall=-"
			set "F_IntWHDBaseLineInstallRecovery=-"
			set "F_IntWHDBaseLineBootInstallRecovery=-"
		) else (
			set "F_IntWHDBaseLineBoot=-"
		)
	)
	if "%%c" equ "!IntWHDBaseLineInstall!" (
		if "!F_IntWHDBaseLineInstall!" equ "-" (
			set "F_IntWHDBaseLineInstall=+"
			set "F_IntWHDBaseLineBoot=-"
			set "F_IntWHDBaseLineInstallRecovery=-"
			set "F_IntWHDBaseLineBootInstallRecovery=-"
		) else (
			set "F_IntWHDBaseLineInstall=-"
		)
	)
	if "%%c" equ "!IntWHDBaseLineInstallRecovery!" (
		if "!F_IntWHDBaseLineInstallRecovery!" equ "-" (
			set "F_IntWHDBaseLineInstallRecovery=+"
			set "F_IntWHDBaseLineBoot=-"
			set "F_IntWHDBaseLineInstall=-"
			set "F_IntWHDBaseLineBootInstallRecovery=-"
		) else (
			set "F_IntWHDBaseLineInstallRecovery=-"
		)
	)
	if "%%c" equ "!IntWHDBaseLineBootInstallRecovery!" (
		if "!F_IntWHDBaseLineBootInstallRecovery!" equ "-" (
			set "F_IntWHDBaseLineBootInstallRecovery=+"
			set "F_IntWHDBaseLineBoot=-"
			set "F_IntWHDBaseLineInstall=-"
			set "F_IntWHDBaseLineInstallRecovery=-"
		) else (
			set "F_IntWHDBaseLineBootInstallRecovery=-"
		)
	)
)

:: Returning to Integrate Menu
goto :!CurrentMenu!

:IntWHDAdditionalMenu

set "CurrentMenu=IntWHDAdditionalMenu"

cls

echo.===============================================================================
echo.%txtIntegrateWHDAdditionalUpdatesMenu%
echo.===============================================================================
echo.
if "%SelectedSourceOS%" equ "w7" (
	echo.  [1] ^(!F_IntUpdatesWAT!^)%txtIntegrateWHDAdditionalUpdatesMenu01%
	echo.
	echo.  [2] ^(!F_IntUpdatesWindows10!^)%txtIntegrateWHDAdditionalUpdatesMenu02%
	echo.
	echo.
	echo.
	echo.
	echo.
	echo.
	echo.
	echo.
)

if "%SelectedSourceOS%" equ "w81" (
	echo.  [1] ^(!F_IntUpdatesNET35!^)%txtIntegrateWHDAdditionalUpdatesMenu03%
	echo.
	echo.  [2] ^(!F_IntUpdatesWindows10!^)%txtIntegrateWHDAdditionalUpdatesMenu04%
	echo.
	echo.  [3] ^(!F_IntUpdatesWinPE!^)%txtIntegrateWHDAdditionalUpdatesMenu05%
	echo.
	echo.  [4] ^(!F_IntUpdatesWUSatisfy!^)%txtIntegrateWHDAdditionalUpdatesMenu06%
	echo.
	echo.
	echo.
	echo.
)

echo.
echo.
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
if "%SelectedSourceOS%" equ "w7" (
	choice /C:12X /N /M "%GlobalEnterChoice% "
	if errorlevel 3 goto :IntW7WHDUpdatesMenu
	if errorlevel 2 (
		if "!F_IntUpdatesWindows10!" equ "-" (
			set "F_IntUpdatesWindows10=+"
		) else (
			set "F_IntUpdatesWindows10=-"
		)
	)
	if errorlevel 1 (
		if "!F_IntUpdatesWAT!" equ "-" (
			set "F_IntUpdatesWAT=+"
		) else (
			set "F_IntUpdatesWAT=-"
		)
	)
)

if "%SelectedSourceOS%" equ "w81" (
	choice /C:1234X /N /M "%GlobalEnterChoice% "
	if errorlevel 5 goto :IntWHDUpdatesMenu
	if errorlevel 4 (
		if "!F_IntUpdatesWUSatisfy!" equ "-" (
			set "F_IntUpdatesWUSatisfy=+"
		) else (
			set "F_IntUpdatesWUSatisfy=-"
		)
	)
	if errorlevel 3 (
		if "!F_IntUpdatesWinPE!" equ "-" (
			set "F_IntUpdatesWinPE=+"
		) else (
			set "F_IntUpdatesWinPE=-"
		)
	)
	if errorlevel 2 (
		if "!F_IntUpdatesWindows10!" equ "-" (
			set "F_IntUpdatesWindows10=+"
		) else (
			set "F_IntUpdatesWindows10=-"
		)
	)
	if errorlevel 1 (
		if "!F_IntUpdatesNET35!" equ "-" (
			set "F_IntUpdatesNET35=+"
		) else (
			set "F_IntUpdatesNET35=-"
		)
	)
)

:: Returning to Integrate Menu
goto :!CurrentMenu!

:IntWHDExtraMenu

set "CurrentMenu=IntWHDExtraMenu"

cls

echo.===============================================================================
echo.%txtIntegrateWHDExtraUpdatesMenu%
echo.===============================================================================

if "%SelectedSourceOS%" equ "w7" (
	if "%IsW7SP1CRUSelected%" equ "No" (
		echo.  [1] ^(!F_IntUpdatesADLDS!^)%txtIntegrateWHDExtraUpdatesMenu01%
		echo.
		echo.  [2] ^(!F_IntUpdatesFMApi!^)%txtIntegrateWHDExtraUpdatesMenu02%
		echo.
		echo.  [3] ^(!F_IntUpdatesVirtualPC!^)%txtIntegrateWHDExtraUpdatesMenu03%
		echo.
		echo.  [4] ^(!F_IntUpdatesFeatures!^)%txtIntegrateWHDExtraUpdatesMenu04%
		echo.
		echo.  [5] ^(!F_IntUpdatesWorkFolders!^)%txtIntegrateWHDExtraUpdatesMenu05%
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.  [X]   %GlobalOption_GoBack%
		echo.
		echo.===============================================================================
		echo.
		choice /C:12345X /N /M "%GlobalEnterChoice% "
		if errorlevel 6 goto :IntW7WHDUpdatesMenu
		if errorlevel 5 (
			if "!F_IntUpdatesWorkFolders!" equ "-" (
				set "F_IntUpdatesWorkFolders=+"
			) else (
				set "F_IntUpdatesWorkFolders=-"
			)
		)
		if errorlevel 4 (
			if "!F_IntUpdatesFeatures!" equ "-" (
				set "F_IntUpdatesFeatures=+"
			) else (
				set "F_IntUpdatesFeatures=-"
			)
		)
		if errorlevel 3 (
			if "!F_IntUpdatesVirtualPC!" equ "-" (
				set "F_IntUpdatesVirtualPC=+"
			) else (
				set "F_IntUpdatesVirtualPC=-"
			)
		)
		if errorlevel 2 (
			if "!F_IntUpdatesFMApi!" equ "-" (
				set "F_IntUpdatesFMApi=+"
			) else (
				set "F_IntUpdatesFMApi=-"
			)
		)
		if errorlevel 1 (
			if "!F_IntUpdatesADLDS!" equ "-" (
				set "F_IntUpdatesADLDS=+"
			) else (
				set "F_IntUpdatesADLDS=-"
			)
		)
	)

	if "%IsW7SP1CRUSelected%" equ "Yes" (
		echo.
		echo.  [1] ^(!F_IntUpdatesADLDS!^)%txtIntegrateWHDExtraUpdatesMenu06%
		echo.
		echo.  [2] ^(!F_IntUpdatesFMApi!^)%txtIntegrateWHDExtraUpdatesMenu07%
		echo.
		echo.  [3] ^(!F_IntUpdatesVirtualPC!^)%txtIntegrateWHDExtraUpdatesMenu08%
		echo.
		echo.  [4] ^(!F_IntUpdatesWorkFolders!^)%txtIntegrateWHDExtraUpdatesMenu09%
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.  [X]   %GlobalOption_GoBack%
		echo.
		echo.===============================================================================
		echo.
		choice /C:1234X /N /M "%GlobalEnterChoice% "
		if errorlevel 5 goto :IntW7WHDUpdatesMenu
		if errorlevel 4 (
			if "!F_IntUpdatesWorkFolders!" equ "-" (
				set "F_IntUpdatesWorkFolders=+"
			) else (
				set "F_IntUpdatesWorkFolders=-"
			)
		)
		if errorlevel 3 (
			if "!F_IntUpdatesVirtualPC!" equ "-" (
				set "F_IntUpdatesVirtualPC=+"
			) else (
				set "F_IntUpdatesVirtualPC=-"
			)
		)
		if errorlevel 2 (
			if "!F_IntUpdatesFMApi!" equ "-" (
				set "F_IntUpdatesFMApi=+"
			) else (
				set "F_IntUpdatesFMApi=-"
			)
		)
		if errorlevel 1 (
			if "!F_IntUpdatesADLDS!" equ "-" (
				set "F_IntUpdatesADLDS=+"
			) else (
				set "F_IntUpdatesADLDS=-"
			)
		)
	)
)

:: Returning to Integrate Menu
goto :!CurrentMenu!

::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate WHD Baseline/General Updates to Windows Setup Boot, Install & Recovery Image
::-------------------------------------------------------------------------------------------
:IntWHDBaseline

setlocal

:: Setting WHD Updates Type
set "UpdateType=%~1"

cls
echo.===============================================================================
if "%UpdateType%" equ "Boot" (
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateWHDBaselineUpdatesBoot%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDBaselineUpdatesBoot%
)

if "%UpdateType%" equ "Install" (
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateWHDBaselineUpdatesInstall%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDBaselineUpdatesInstall%
)

if "%UpdateType%" equ "InstallRecovery" (
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateWHDBaselineUpdates%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDGeneralUpdates%
	echo.%txtIntegrateWHDGeneralUpdatesWinRe%
)

if "%UpdateType%" equ "BootInstallRecovery" (
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateWHDBaselineUpdates%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDGeneralUpdates%
	echo.%txtIntegrateWHDGeneralUpdatesBoot%
)
echo.===============================================================================
echo.

:: Getting Install Image Index Architecture
call :GetImageArchitecture "%InstallWim%", !SpecifiedSourceIndex! >nul

:: Settings WHD Baseline Updates folder path
if "%SelectedSourceOS%" equ "w81" set "Updates=%WHD%\%SelectedSourceOS%\%ImageArchitecture%\Baseline"
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" set "Updates=%WHD%\%SelectedSourceOS%\%ImageArchitecture%\%PackageVersion%"

:: Checking whether WHD Baseline Updates folder is empty
if "%SelectedSourceOS%" equ "w81" (
	:: Windows 8.1 RTM (Build : 6.3.9600.16384)
	if %ImageServicePackBuild% equ 16384 if not exist "%Updates%\RTM\*.msu" if not exist "%Updates%\RTM\*.cab" (
		echo.%txtWHDBaselineUpdatesFolderpos1% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Baseline\RTM^> %txtWHDBaselineUpdatesFolderpos2%
		echo.
		echo.%txtCopyWHDBaselineUpdates%
		goto :Stop
	)

	:: Windows 8.1 all Builds include Post-RTM
	if "%ImageServicePackBuild%" neq "16384" if not exist "%Updates%\*.msu" if not exist "%Updates%\*.cab" (
		echo.%txtWHDBaselineUpdatesFolderpos1% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Baseline^> %txtWHDBaselineUpdatesFolderpos2%
		echo.
		echo.%txtCopyWHDBaselineUpdates%
		goto :Stop
	)
)

:: Windows 10
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if not exist "%Updates%\*.msu" if not exist "%Updates%\*.cab" (
	echo.%txtWHDGeneralUpdatesFolderpos1% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\%PackageVersion%^> %txtWHDGeneralUpdatesFolderpos2%
	echo.
	echo.%txtCopyWHDGeneralUpdates%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
if "%SelectedSourceOS%" equ "w81" echo.%txtCopyWHDBaselineUpdatesStarting%
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDGeneralUpdatesStarting%
if "%UpdateType%" equ "Boot" echo.%txtIntegrate2Boot%
if "%UpdateType%" equ "Install" echo.%txtIntegrate2WIM%
if "%UpdateType%" equ "InstallRecovery" echo.%txtIntegrate2WIMandWinRe%
if "%UpdateType%" equ "BootInstallRecovery" echo.%txtIntegrate2BootandWIMandWinRe%
echo.-------------------------------------------------------------------------------
echo.
if "%UpdateType%" equ "Boot" (
	echo.    %GlobalImage% boot.wim
	echo.    %GlobalImageIndex% 1, 2
)

if "%UpdateType%" equ "Install" (
	echo.    %GlobalImage% install.wim
	echo.    %GlobalImageIndex% !ImageIndexNo!
)

if "%UpdateType%" equ "InstallRecovery" (
	echo.    %GlobalImage% install.wim        ^|  WinRE.wim
	echo.    %GlobalImageIndex% !ImageIndexNo!                  ^|      1
)

if "%UpdateType%" equ "BootInstallRecovery" (
	echo.    %GlobalImage% boot.wim         ^|  install.wim   ^|  WinRE.wim
	echo.    %GlobalImageIndex% 1, 2             ^|      !ImageIndexNo!         ^|      1
)

echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateWHDBaselineUpdatesProcessing%
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDGeneralUpdatesProcessing%
echo.-------------------------------------------------------------------------------
echo.
:: Creating WHD Baseline Updates Temporary folder
if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateWHDBaselineUpdatesCreating%
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDGeneralUpdatesCreating%
call :RemoveFolder "%_TMP%\Updates"
call :CreateFolder "%_TMP%\Updates"
echo.

:: Extracting .CAB files From .MSU Package files to CAB Temporary folder
echo.%txtIntegrateWHDUpdatesExtracting%

:: Windows 8.1 RTM (Build : 6.3.9600.16384)
if "%SelectedSourceOS%" equ "w81" if %ImageServicePackBuild% equ 16384 (
	if exist "%Updates%\RTM\Windows8.1-KB2919355-%ImageArchitecture%*.msu" expand "%Updates%\RTM\Windows8.1-KB2919355-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\RTM\Windows8.1-KB2932046-%ImageArchitecture%*.msu" expand "%Updates%\RTM\Windows8.1-KB2932046-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB2934018-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB2934018-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\RTM\Windows8.1-KB2937592-%ImageArchitecture%*.msu" expand "%Updates%\RTM\Windows8.1-KB2937592-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\RTM\Windows8.1-KB2938439-%ImageArchitecture%*.msu" expand "%Updates%\RTM\Windows8.1-KB2938439-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\RTM\Windows8.1-KB2938772-%ImageArchitecture%*.msu" expand "%Updates%\RTM\Windows8.1-KB2938772-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul

	:: Copy .CAB files from .MSU package files to CAB Temporary folder
	if exist "%Updates%\RTM\Windows8.1-KB2919355-%ImageArchitecture%*.cab" %XCopy% "%Updates%\RTM\Windows8.1-KB2919355-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\RTM\Windows8.1-KB2932046-%ImageArchitecture%*.cab" %XCopy% "%Updates%\RTM\Windows8.1-KB2932046-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB2934018-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB2934018-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\RTM\Windows8.1-KB2937592-%ImageArchitecture%*.cab" %XCopy% "%Updates%\RTM\Windows8.1-KB2937592-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\RTM\Windows8.1-KB2938439-%ImageArchitecture%*.cab" %XCopy% "%Updates%\RTM\Windows8.1-KB2938439-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\RTM\Windows8.1-KB2938772-%ImageArchitecture%*.cab" %XCopy% "%Updates%\RTM\Windows8.1-KB2938772-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
)

:: Windows 8.1 with Update (IR3 Build : 6.3.9600.17031)
if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17031" (
	if exist "%Updates%\Windows8.1-KB2934018-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB2934018-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul

	:: Copy .CAB files from .MSU package files to CAB Temporary folder
	if exist "%Updates%\Windows8.1-KB2934018-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB2934018-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
)

:: Windows 8.1 with Update Refresh (IR4 Build : 6.3.9600.17056)
if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17056" (
	if exist "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul

	:: Copy .CAB files from .MSU package files to CAB Temporary folder
	if exist "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3000850-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3003057-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3014442-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
)

:: Windows 8.1 with Update Refresh (IR5 Build : 6.3.9600.17415)
if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17415" (
	if exist "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.msu" expand "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates" >nul

	:: Copy .CAB files from .MSU package files to CAB Temporary folder
	if exist "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB3021910-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.cab" %XCopy% "%Updates%\Windows8.1-KB5001403-%ImageArchitecture%*.cab" "%_TMP%\Updates" >nul
)

:: Windows 10
if "%SelectedSourceOS%" equ "w10" (
	if exist "%Updates%\*.msu" (
		expand -R "%Updates%\*.msu" -F:Win*.cab "%_TMP%\Updates" >nul

		if "%ImageBuild%" geq "17763" if exist "%_TMP%\Updates\*.cab" (
			call :RemoveFolder "%_TMP%\Updates\Temp"
			call :CreateFolder "%_TMP%\Updates\Temp"

			for /f %%i in ('dir /b "%_TMP%\Updates\*.cab" 2^>nul') do (
				expand -R "%_TMP%\Updates\%%i" -F:Win*.cab "%_TMP%\Updates\Temp" >nul
				expand -R "%_TMP%\Updates\%%i" -F:SSU*.cab "%_TMP%\Updates\Temp" >nul
				if exist "%_TMP%\Updates\Temp\*.cab" move /y "%_TMP%\Updates\Temp\*.cab" "%_TMP%\Updates" >nul
			)

			call :RemoveFolder "%_TMP%\Updates\Temp"
		)

		for /f %%i in ('dir /b "%_TMP%\Updates\*.cab" 2^>nul') do (
			set Update=%%i
			set Update=!Update:~0,-4!
			call :CreateFolder "%_TMP%\Updates\!Update!"
			expand -R "%_TMP%\Updates\%%i" -F:* "%_TMP%\Updates\!Update!" >nul
			if exist "%_TMP%\Updates\!Update!\Cab_*.cab" expand -R "%_TMP%\Updates\!Update!\Cab_*.cab" -F:* "%_TMP%\Updates\!Update!" >nul
			call :RemoveFile "%_TMP%\Updates\!Update!\Cab_*.cab"
		)

		call :RemoveFile "%_TMP%\Updates\*.cab" >nul
	)

	if exist "%Updates%\*.cab" (
		for /f %%i in ('dir /b "%Updates%\*.cab" 2^>nul') do (
			set Update=%%i
			set Update=!Update:~0,-4!
			call :CreateFolder "%_TMP%\Updates\!Update!"
			expand -R "%Updates%\%%i" -F:* "%_TMP%\Updates\!Update!" >nul
			if exist "%_TMP%\Updates\!Update!\Cab_*.cab" expand -R "%_TMP%\Updates\!Update!\Cab_*.cab" -F:* "%_TMP%\Updates\!Update!" >nul
			call :RemoveFile "%_TMP%\Updates\!Update!\Cab_*.cab"
		)
	)

	if exist "%Updates%\defender-update-kit-%ImageArchitecture%.zip" (
		"%Zip%" x -y "%Updates%\defender-update-kit-%ImageArchitecture%.zip" -o"%_TMP%\Updates\Defender" >nul
		expand -R "%_TMP%\Updates\Defender\defender-dism-%ImageArchitecture%.cab" -F:* "%_TMP%\Updates\Defender" >nul
		call :RemoveFile "%_TMP%\Updates\Defender\defender-dism-%ImageArchitecture%.cab"
		call :RemoveFile "%_TMP%\Updates\Defender\DefenderUpdateWinImage.ps1"
		call :RemoveFile "%_TMP%\Updates\Defender\license.txt"
	)

	:: Renaming Windows Updates folder names matching to their respective update type
	cd /D "%_TMP%\Updates\" >nul

	for /f %%i in ('dir /b "*.*" 2^>nul') do (
		if exist "%%i\update.mum" (
			findstr.exe /I /C:"Package_for_RollupFix" "%%i\update.mum" >nul
			if not errorlevel 1 ren "%%i" "Cumulative" >nul
		)

		if exist "%%i\update.mum" (
			findstr.exe /I /C:"Package_for_DotNetRollup" "%%i\update.mum" >nul
			if not errorlevel 1 ren "%%i" "NetCumulative" >nul
		)

		if exist "%%i\update.mum" (
			findstr.exe /I /C:"Update for Removal of Adobe Flash Player" "%%i\update.mum" >nul
			if not errorlevel 1 ren "%%i" "RemoveFlashPlayer" >nul
		)

		if exist "%%i\%PackageArchitecture%_microsoft-windows-m..update-genuineintel_*.manifest" ren "%%i" "CPUMicroCode" >nul
		if exist "%%i\package-defender.xml" ren "%%i" "Defender" >nul
		if exist "%%i\setuphost.exe" ren "%%i" "DVDMedia" >nul
		if exist "%%i\%PackageArchitecture%_microsoft-windows-19h2enablement_*.manifest" ren "%%i" "Enablement" >nul
		if not exist "%%i\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if exist "%%i\%PackageArchitecture%_microsoft-windows-e..-firsttimeinstaller_*.manifest" ren "%%i" "EdgeChromium" >nul
		if exist "%%i\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if not exist "%%i\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" ren "%%i" "Enablement" >nul
		if exist "%%i\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if exist "%%i\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" ren "%%i" "Enablement" >nul
		if exist "%%i\%PackageArchitecture%_adobe-flash-for-*.manifest" if not exist "%%i\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" ren "%%i" "FlashPlayer" >nul
		if exist "%%i\Microsoft-Windows-NetFx3-OnDemand-Package~31bf3856ad364e35~%PackageArchitecture%~~10.0.*.mum" ren "%%i" "NET35" >nul
		if exist "%%i\Microsoft-Windows-NetFx3-OnDemand-Package~31bf3856ad364e35~%PackageArchitecture%~%ImageDefaultLanguage%~10.0.*.mum" ren "%%i" "NET35LP" >nul
		if exist "%%i\%PackageArchitecture%_netfx4clientcorecomp_31bf3856ad364e35_*.manifest" ren "%%i" "NET48" >nul
		if exist "%%i\%PackageArchitecture%_netfx4clientcorecomp.resources_*%ImageDefaultLanguage%*.manifest" ren "%%i" "NET48LP" >nul
		if exist "%%i\%PackageArchitecture%_microsoft-windows-s..boot-firmwareupdate_*.manifest" ren "%%i" "SecureBoot" >nul
		if exist "%%i\%PackageArchitecture%_microsoft-windows-servicingstack_*.manifest" ren "%%i" "ServicingStack" >nul
		if exist "%%i\%PackageArchitecture%_microsoft-windows-userexperience-desktop_*.manifest" ren "%%i" "WEF" >nul
		if exist "%%i\%PackageArchitecture%_microsoft-windows-sysreset_*.manifest" ren "%%i" "SafeOS" >nul
	)

	cd /D "%ROOT%" >nul
)

:: Windows 11
if "%SelectedSourceOS%" equ "w11" (
	cd /D "%_TMP%\Updates\" >nul
	copy "%PSFExtractor%" "%_TMP%\Updates" >nul
	copy "%PSFExtractor%.config" "%_TMP%\Updates" >nul

	if exist "%Updates%\*.msu" (
		expand -R "%Updates%\*.msu" -F:SSU*.cab "%_TMP%\Updates" >nul
		expand -R "%Updates%\*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
		expand -R "%Updates%\*.msu" -F:Win*.psf "%_TMP%\Updates" >nul
	)

	if exist "%Updates%\*.cab" %XCopy% "%Updates%\*.cab" "%_TMP%\Updates" >nul
	if exist "%Updates%\*.psf" %XCopy% "%Updates%\*.psf" "%_TMP%\Updates" >nul

	if exist "%_TMP%\Updates\*.psf" (
		for /f %%i in ('"dir /b %_TMP%\Updates\SSU*.psf" 2^>nul') do (
			ren "%%i" "ServicingStack.psf"
			for /f %%j in ('"dir /b %_TMP%\Updates\SSU*.cab" 2^>nul') do (ren "%%j" "ServicingStack.cab")
		)

		for /f "tokens=2 delims=-" %%i in ('"dir /b %_TMP%\Updates\Windows*.psf" 2^>nul') do (
			for /f %%j in ('"dir /b %_TMP%\Updates\*%%i*.cab" 2^>nul') do (ren "%%j" "Cumulative.cab")
			for /f %%j in ('"dir /b %_TMP%\Updates\*%%i*.psf" 2^>nul') do (ren "%%j" "Cumulative.psf")
		)

		if exist "%_TMP%\Updates\ServicingStack.psf" (
			md "%_TMP%\Updates\ServicingStack"
			expand -f:* ServicingStack.cab "%_TMP%\Updates\ServicingStack" >nul

			if exist "%_TMP%\Updates\ServicingStack\*cablist.ini" (
				expand -f:* "%_TMP%\Updates\ServicingStack\*.cab" "%_TMP%\Updates\ServicingStack" >nul
				call :RemoveFile "%_TMP%\Updates\ServicingStack\*cablist.ini"
				call :RemoveFile "%_TMP%\Updates\ServicingStack\*.cab"
			)

			if not exist "%_TMP%\Updates\ServicingStack\express.psf.cix.xml" (
				for /f %%# in ('dir /b /a:-d "%_TMP%\Updates\ServicingStack\*.psf.cix.xml"') do (
					ren "%_TMP%\Updates\ServicingStack\%%#" "%_TMP%\Updates\ServicingStack\express.psf.cix.xml"
				)
			)

			PSFExtractor.exe ServicingStack.cab >nul
			call :RemoveFile "%_TMP%\Updates\ServicingStack\express.psf.cix.xml"
			call :RemoveFile "%_TMP%\Updates\ServicingStack.*"
		)

		if exist "%_TMP%\Updates\Cumulative.psf" (
			md "%_TMP%\Updates\Cumulative"
			expand -f:* Cumulative.cab "%_TMP%\Updates\Cumulative" >nul

			if exist "%_TMP%\Updates\Cumulative\*cablist.ini" (
				expand -f:* "%_TMP%\Updates\Cumulative\*.cab" "%_TMP%\Updates\Cumulative" >nul
				call :RemoveFile "%_TMP%\Updates\Cumulative\*cablist.ini"
				call :RemoveFile "%_TMP%\Updates\Cumulative\*.cab"
			)

			if not exist "%_TMP%\Updates\Cumulative\express.psf.cix.xml" (
				for /f %%# in ('dir /b /a:-d "%_TMP%\Updates\Cumulative\*.psf.cix.xml"') do (
					ren "%_TMP%\Updates\Cumulative\%%#" "%_TMP%\Updates\Cumulative\express.psf.cix.xml"
				)
			)
			
			PSFExtractor.exe Cumulative.cab >nul
			call :RemoveFile "%_TMP%\Updates\Cumulative\*.psf.cix.xml"
			call :RemoveFile "%_TMP%\Updates\Cumulative.*"
		)

		call :RemoveFile "%_TMP%\Updates\PSFExtractor.exe"
		call :RemoveFile "%_TMP%\Updates\%PSFExtractor%.config"
	)

	if exist "%_TMP%\Updates\*.cab" (
		for /f %%i in ('"dir /b %_TMP%\Updates\*.cab" 2^>nul') do (
			set Update=%%i
			set Update=!Update:~0,-4!
			call :CreateFolder "%_TMP%\Updates\!Update!"
			expand -R "%_TMP%\Updates\%%i" -F:* "%_TMP%\Updates\!Update!" >nul
		)

		call :RemoveFile "%_TMP%\Updates\*.cab"
	)

	if exist "%Updates%\defender-update-kit-%ImageArchitecture%.zip" (
		"%Zip%" x -y "%Updates%\defender-update-kit-%ImageArchitecture%.zip" -o"%_TMP%\Updates\Defender" >nul
		expand -R "%_TMP%\Updates\Defender\defender-dism-%ImageArchitecture%.cab" -F:* "%_TMP%\Updates\Defender" >nul
		call :RemoveFile "%_TMP%\Updates\Defender\defender-dism-%ImageArchitecture%.cab"
		call :RemoveFile "%_TMP%\Updates\Defender\DefenderUpdateWinImage.ps1"
		call :RemoveFile "%_TMP%\Updates\Defender\license.txt"
	)

	:: Renaming Windows Updates folder names matching to their respective update type
	for /f %%i in ('"dir /b *.*" 2^>nul') do (
		if exist "%%i\update.mum" (
			findstr /c:"Package_for_ServicingStack" "%%i\update.mum" >nul
			if not errorlevel 1 ren "%%i" "ServicingStack" >nul
		)

		if exist "%%i\update.mum" (
			findstr /c:"Package_for_RollupFix" "%%i\update.mum" >nul
			if not errorlevel 1 ren "%%i" "Cumulative" >nul
		)

		if exist "%%i\update.mum" (
			findstr /c:"Package_for_DotNetRollup" "%%i\update.mum" >nul
			if not errorlevel 1 ren "%%i" "NetCumulative" >nul
		)

		if exist "%%i\update.mum" (
			findstr /c:"Microsoft .NET Framework 3.0 OnDemand" "%%i\update.mum" >nul
			if not errorlevel 1 ren "%%i" "NET35" >nul
		)

		if exist "%%i\update.mum" (
			findstr /c:"Microsoft .NET Framework 3.0_" "%%i\update.mum" >nul
			if not errorlevel 1 ren "%%i" "NET35LP" >nul
		)

		if exist "%%i\%PackageArchitecture%_microsoft-windows-m..update-genuineintel_*.manifest" ren "%%i" "CPUMicroCode" >nul
		if exist "%%i\package-defender.xml" ren "%%i" "Defender" >nul
		if exist "%%i\setuphost.exe" ren "%%i" "DVDMedia" >nul
		if "%%i" neq "Cumulative" if exist "%%i\%PackageArchitecture%_microsoft-windows-userexperience-desktop_*.manifest" ren "%%i" "WEF" >nul
		if "%%i" neq "Cumulative" if exist "%%i\%PackageArchitecture%_microsoft-windows-i..dsetup-rejuvenation_*.manifest" ren "%%i" "SafeOS" >nul
	)

	cd /D "%ROOT%" >nul
)

echo.
echo.%txtIntegrateWHDUpdatesFinished%
echo.
if "%UpdateType%" neq "Boot" if "%ImageBuild%" geq "19041" if "%ImageBuild%" leq "19044" if exist "%_TMP%\Updates\Enablement\Update.mum" if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-e..-firsttimeinstaller_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" (
	choice /C:NY /N /M "%txtIntegrateWHDUpdatesChoice% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 (
		del /f /q "%_TMP%\Updates\Enablement\Update.mum" >nul
		del /f /q "%_TMP%\Updates\Enablement\Update.cat" >nul

		if /i "%ImageArchitecture%" equ "x86" (
			call :RemoveFolder "%_TMP%\Updates\Enablement\x86_microsoft-windows-e..-firsttimeinstaller_31bf3856ad364e35_10.0.19041.681_none_d4e678d60dbf374c"
			move /y "%_TMP%\Updates\Enablement\microsoft-windows-20h2enablement-package~31bf3856ad364e35~x86~~10.0.19041.681.cat" "%_TMP%\Updates\Enablement\Update.cat" >nul
			move /y "%_TMP%\Updates\Enablement\microsoft-windows-20h2enablement-package~31bf3856ad364e35~x86~~10.0.19041.681.mum" "%_TMP%\Updates\Enablement\Update.mum" >nul
			del /f /q "%_TMP%\Updates\Enablement\x86_88ed58c8b45ef5b335c7e00f1d272a1c_31bf3856ad364e35_*.manifest" >nul
			del /f /q "%_TMP%\Updates\Enablement\x86_microsoft-windows-e..-firsttimeinstaller_31bf3856ad364e35_*.manifest" >nul
			del /f /q "%_TMP%\Updates\Enablement\package_1_for_kb4562830~31bf3856ad364e35~x86~~*.mum" >nul
			del /f /q "%_TMP%\Updates\Enablement\package_1_for_kb4562830~31bf3856ad364e35~x86~~*.cat" >nul
		)

		if /i "%ImageArchitecture%" equ "x64" (
			call :RemoveFolder "%_TMP%\Updates\Enablement\amd64_microsoft-windows-e..-firsttimeinstaller_31bf3856ad364e35_10.0.19041.681_none_31051459c61ca882"
			del /f /q "%_TMP%\Updates\Enablement\package_1_for_kb4562830~31bf3856ad364e35~amd64~~*.mum" >nul
			del /f /q "%_TMP%\Updates\Enablement\package_1_for_kb4562830~31bf3856ad364e35~amd64~~*.cat" >nul
			del /f /q "%_TMP%\Updates\Enablement\amd64_84b67765c88012e177d65b696e48302e_31bf3856ad364e35_*.manifest" >nul
			del /f /q "%_TMP%\Updates\Enablement\amd64_microsoft-windows-e..-firsttimeinstaller_31bf3856ad364e35_*.manifest" >nul
			move /y "%_TMP%\Updates\Enablement\microsoft-windows-20h2enablement-package~31bf3856ad364e35~amd64~~10.0.19041.681.cat" "%_TMP%\Updates\Enablement\Update.cat" >nul
			move /y "%_TMP%\Updates\Enablement\microsoft-windows-20h2enablement-package~31bf3856ad364e35~amd64~~10.0.19041.681.mum" "%_TMP%\Updates\Enablement\Update.mum" >nul
		)

		if /i "%ImageArchitecture%" equ "arm64" (
			call :RemoveFolder "%_TMP%\Updates\Enablement\arm64_microsoft-windows-e..-firsttimeinstaller_31bf3856ad364e35_10.0.19041.681_none_31051c93c61c9d1e"
			del /f /q "%_TMP%\Updates\Enablement\package_1_for_kb4562830~31bf3856ad364e35~arm64~~*.mum" >nul
			del /f /q "%_TMP%\Updates\Enablement\package_1_for_kb4562830~31bf3856ad364e35~arm64~~*.cat" >nul
			del /f /q "%_TMP%\Updates\Enablement\arm64_d29030e5eb1fbfc0c65c0cd08e617938_31bf3856ad364e35_*.manifest" >nul
			del /f /q "%_TMP%\Updates\Enablement\arm64_microsoft-windows-e..-firsttimeinstaller_31bf3856ad364e35_*.manifest" >nul
			move /y "%_TMP%\Updates\Enablement\microsoft-windows-20h2enablement-package~31bf3856ad364e35~arm64~~10.0.19041.681.cat" "%_TMP%\Updates\Enablement\Update.cat" >nul
			move /y "%_TMP%\Updates\Enablement\microsoft-windows-20h2enablement-package~31bf3856ad364e35~arm64~~10.0.19041.681.mum" "%_TMP%\Updates\Enablement\Update.mum" >nul
		)
	)
	echo.
)

if "%UpdateType%" neq "Install" if "%UpdateType%" neq "InstallRecovery" (
	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegrateWHDBaselineUpdatesIntegrating%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegrateWHDGeneralUpdatesIntegrating%
	echo.-------------------------------------------------------------------------------
	echo.

	for /l %%i in (1, 1, 2) do (
		echo.=============================[%GlobalBootWimIndex% %%i]=============================
		echo.
		:: Windows 8.1 RTM (Build : 6.3.9600.16384)
		if "%SelectedSourceOS%" equ "w81" if %ImageServicePackBuild% equ 16384 (
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePrerequisiteUpdates% ^(KB3021910^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselineUpdate% ^(KB2919355^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2919355-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2932046^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2932046-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2934018^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2934018-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2937592^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2937592-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2938439^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2938439-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2938772^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2938772-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
		)

		:: Windows 8.1 with Update (IR3 Build : 6.3.9600.17031)
		if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17031" (
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2934018^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2934018-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
		)

		:: Windows 8.1 with Update (IR4 Build : 6.3.9600.17056)
		if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17056" (
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
		)

		:: Windows 8.1 with Update Refresh (IR5 Build : 6.3.9600.17415)
		if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17415" (
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
		)

		:: Windows 10
		if "%SelectedSourceOS%" equ "w10" (
			if exist "%_TMP%\Updates\ServicingStack\Update.mum" (
				if "%ImageBuild%" equ "10240" if "%ImageServicePackBuild%" equ "16384" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateWHDUpdatesApplying1%
					echo.-------------------------------------------------------------------------------
					call :ApplyImage "%W10CUFix%\TH1CUFix.tpk", %PackageIndex%, "%BootMount%\%%i"
					call :MountImageRegistry "%BootMount%\%%i"
					call :ImportRegistry2Image "%W10CUFix%\TH1CUFix_%ImageArchitecture%.reg"
					call :UnMountImageRegistry
				)

				if /i "%ImageArchitecture%" equ "x86" if "%ImageBuild%" equ "14393" if "%ImageServicePackBuild%" equ "0" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateWHDUpdatesApplying2%
					echo.-------------------------------------------------------------------------------
					call :ApplyImage "%W10CUFix%\RS1CUFix.tpk", %PackageIndex%, "%BootMount%\%%i"
					call :MountImageRegistry "%BootMount%\%%i"
					call :ImportRegistry2Image "%W10CUFix%\RS1CUFix.reg"
					call :UnMountImageRegistry
				)
			)
		)

		:: Windows 10/11
		if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
			if exist "%_TMP%\Updates\ServicingStack\Update.mum" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\ServicingStack"
			)

			if exist "%_TMP%\Updates\General\Update.mum" (
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegratingWindows11GeneralUpdate%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\General"
			)

			if exist "%_TMP%\Updates\Cumulative\Update.mum" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2op2%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Cumulative"
			)

			if "%SelectedSourceOS%" equ "w10" if exist "%_TMP%\Updates\Enablement\Update.mum" (
				echo.-------------------------------------------------------------------------------
				if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-19h2enablement_*.manifest" (
					echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v1909 %GlobalIntegratingWindows10FeatureUpdatepos2%
				)
				if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
					echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v20H2 %GlobalIntegratingWindows10FeatureUpdatepos2%
				)
				if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
					echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v21H1 %GlobalIntegratingWindows10FeatureUpdatepos2%
				)
				if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
					echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v21H2 %GlobalIntegratingWindows10FeatureUpdatepos2%
				)
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%BootMount%\%%i", "%_TMP%\Updates\Enablement"
			)
		)
	)

	:: Windows 8.1
	if "%SelectedSourceOS%" equ "w81" if exist "%_TMP%\Updates\WinPE\*.cab" (
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegratingWindows8WinPE%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%BootMount%\2", "%_TMP%\Updates\WinPE"
	)

	:: Windows 10/11
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
		if exist "%_TMP%\Updates\SafeOS\Update.mum" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2op3%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%BootMount%\2", "%_TMP%\Updates\SafeOS"
		)

		if exist "%_TMP%\Updates\DVDMedia\*.exe" if exist "%_TMP%\Updates\DVDMedia\*.dll" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2op4%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.%txtIntegratingCopyingWindowspos1% %OSID% %txtIntegratingCopyingWindowspos2%
			%XCopy% "%_TMP%\Updates\DVDMedia\*.*" "%DVD%\sources" >nul
			cd /D "%DVD%\sources\" >nul

			for /d %%i in (ar-SA,bg-BG,cs-CZ,da-DK,de-DE,el-GR,en-GB,en-US,es-ES,es-MX,et-EE,fi-FI,fr-CA,fr-FR,he-IL,hr-HR,hu-HU,it-IT,ja-JP,ko-KR,lt-LT,lv-LV,nb-NO,nl-NL,pl-PL,pt-BR,pt-PT,ro-RO,ru-RU,sk-SK,sl-SI,sr-Latn-RS,sv-SE,th-TH,tr-TR,uk-UA,zh-CN,zh-HK,zh-TW) do (
				if "%ImageDefaultLanguage%" neq "%%i" call :RemoveFolder "%DVD%\sources\%%i"
			)

			cd /D "%ROOT%" >nul
			echo.
		)
	)
)

if "%UpdateType%" neq "Boot" (
	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegratingWHDBaselineUpdates%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegratingWHDGeneralUpdates%
	echo.-------------------------------------------------------------------------------

	for /l %%i in (1, 1, !ImageCount!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

			:: Windows 8.1 RTM (Build : 6.3.9600.16384)
			if "%SelectedSourceOS%" equ "w81" if %ImageServicePackBuild% equ 16384 (
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePrerequisiteUpdates% ^(KB3021910^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselineUpdate% ^(KB2919355^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2919355-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2932046^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2932046-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2934018^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2934018-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2937592^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2937592-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2938439^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2938439-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2938772^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2938772-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3014442^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3014442-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
			)

			:: Windows 8.1 with Update (IR3 Build : 6.3.9600.17031)
			if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17031" (
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2934018^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB2934018-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3014442^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3014442-%ImageArchitecture%.cab"
			)

			:: Windows 8.1 with Update (IR4 Build : 6.3.9600.17056)
			if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17056" (
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3014442^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3014442-%ImageArchitecture%.cab"
			)

			:: Windows 8.1 with Update Refresh (IR5 Build : 6.3.9600.17415)
			if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17415" (
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
			)

			:: Windows 10
			if "%SelectedSourceOS%" equ "w10" (
				:: Importing registry fix to enable integrating Windows 10 updates to EOL editions.
				if "%ImageBuild%" equ "10240" (
					for %%j in (Core, CoreSingleLanguage, Professional, Education, Enterprise, ProfessionalEducation, ProfessionalWorkstation) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallLocation" /t REG_SZ /d "\\?\d:\th1.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)

					for %%j in (CoreN, ProfessionalN, EducationN, EnterpriseN, ProfessionalEducationN, ProfessionalWorkstationN) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallLocation" /t REG_SZ /d "\\?\d:\th1.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10240.16384" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)
				)

				if "%ImageBuild%" equ "10586" (
					for %%j in (Core, CoreSingleLanguage, Professional, Education, ProfessionalEducation, ProfessionalWorkstation) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallLocation" /t REG_SZ /d "\\?\d:\th2.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)

					for %%j in (CoreN, ProfessionalN, EducationN, ProfessionalEducationN, ProfessionalWorkstationN) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallLocation" /t REG_SZ /d "\\?\d:\th2.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.10586.0" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)
				)

				if "%ImageBuild%" equ "14393" (
					for %%j in (Core, CoreSingleLanguage, Professional, Education, Enterprise, ProfessionalEducation, ProfessionalWorkstation) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs1.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)

					for %%j in (CoreN, ProfessionalN, EducationN, EnterpriseN, ProfessionalEducationN, ProfessionalWorkstationN) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs1.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.14393.0" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)
				)

				if "%ImageBuild%" equ "15063" (
					for %%j in (Core, CoreSingleLanguage, Professional, Education, ProfessionalEducation, ProfessionalWorkstation) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs2.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)

					for %%j in (CoreN, ProfessionalN, EducationN, ProfessionalEducationN, ProfessionalWorkstationN) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs2.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.15063.0" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)
				)

				if "%ImageBuild%" equ "16299" (
					for %%j in (Core, CoreSingleLanguage, Professional, Education, ProfessionalEducation, ProfessionalWorkstation) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs3.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)

					for %%j in (CoreN, ProfessionalN, EducationN, ProfessionalEducationN, ProfessionalWorkstationN) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs3.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.16299.15" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)
				)

				if "%ImageBuild%" equ "17134" (
					for %%j in (Core, CoreSingleLanguage, Professional, ProfessionalEducation, ProfessionalWorkstation) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs4.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)

					for %%j in (CoreN, ProfessionalN, ProfessionalEducationN, ProfessionalWorkstationN) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs4.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17134.1" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)
				)

				if "%ImageBuild%" equ "17763" (
					for %%j in (Core, CoreSingleLanguage, ProfessionalEducation, ProfessionalWorkstation) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs5.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)

					for %%j in (CoreN, ProfessionalEducationN, ProfessionalWorkstationN) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs5.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseSNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.17763.1" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)
				)

				if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
					for %%j in (Core, CoreSingleLanguage, ProfessionalEducation, ProfessionalWorkstation) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs6.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)

					for %%j in (CoreN, ProfessionalEducationN, ProfessionalWorkstationN) do (
						if /i "!ImageEdition%%i!" equ "%%j" (
							call :MountImageRegistry "%InstallMount%\%%i"
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallClient" /t REG_SZ /d "DISM Package Manager Provider" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallName" /t REG_SZ /d "Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1.mum" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallLocation" /t REG_SZ /d "\\?\d:\rs6.bin.%PackageArchitecture%fre\csi\pkgs\\" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "CurrentState" /t REG_DWORD /d "112" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "SelfUpdate" /t REG_DWORD /d "0" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "Visibility" /t REG_DWORD /d "1" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallTimeHigh" /t REG_DWORD /d "30649479" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallTimeLow" /t REG_DWORD /d "1431244152" /f >nul
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages\Microsoft-Windows-EnterpriseNEdition~31bf3856ad364e35~%PackageArchitecture%~~10.0.18362.1" /v "InstallUser" /t REG_SZ /d "S-1-5-18" /f >nul
							call :UnMountImageRegistry
						)
					)
				)
			)

			:: Windows 10/11
			if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
				if exist "%_TMP%\Updates\ServicingStack\Update.mum" (
					if "%SelectedSourceOS%" equ "w10" if "%ImageBuild%" equ "10240" if "%ImageServicePackBuild%" equ "16384" (
						echo.-------------------------------------------------------------------------------
						echo.%GlobalApplyingWindows10pos1% v1507 %GlobalApplyingWindows10pos2%
						echo.-------------------------------------------------------------------------------
						call :ApplyImage "%W10CUFix%\TH1CUFix.tpk", %PackageIndex%, "%InstallMount%\%%i"
						call :MountImageRegistry "%InstallMount%\%%i"
						call :ImportRegistry2Image "%W10CUFix%\TH1CUFix_%ImageArchitecture%.reg"
						call :UnMountImageRegistry
					)

					if "%SelectedSourceOS%" equ "w10" if /i "%ImageArchitecture%" equ "x86" if "%ImageBuild%" equ "14393" if "%ImageServicePackBuild%" equ "0" (
						echo.-------------------------------------------------------------------------------
						echo.%GlobalApplyingWindows10pos1% v1607 %GlobalApplyingWindows10pos2%
						echo.-------------------------------------------------------------------------------
						call :ApplyImage "%W10CUFix%\RS1CUFix.tpk", %PackageIndex%, "%InstallMount%\%%i"
						call :MountImageRegistry "%InstallMount%\%%i"
						call :ImportRegistry2Image "%W10CUFix%\RS1CUFix.reg"
						call :UnMountImageRegistry
					)

					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2op5%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\ServicingStack"
				)

				if exist "%_TMP%\Updates\General\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%GlobalIntegratingWindows11GeneralUpdate%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\General"
				)

				if exist "%_TMP%\Updates\WindowsExperienceFeature\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindowsExperienceFeaturePack%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\WindowsExperienceFeature"
				)

				if exist "%_TMP%\Updates\CPUMicroCode\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingIntelCPUMicrocodeDynamic%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\CPUMicroCode"
				)

				if exist "%_TMP%\Updates\SecureBoot\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindowsSecureBootDBX%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\SecureBoot"
				)

				if exist "%_TMP%\Updates\FlashPlayer\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingAdobeFlashPlayerSecurity%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\FlashPlayer"
				)

				if exist "%_TMP%\Updates\RemoveFlashPlayer\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingRemoveAdobeFlashPlayer%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\RemoveFlashPlayer"
				)

				if exist "%_TMP%\Updates\Cumulative\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2op6%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Cumulative"
				)

				if exist "%_TMP%\Updates\NET35\Update.mum" (
					if "%ImageBuild%" lss "19041" if not exist "%InstallMount%\%%i\Windows\WinSxS\pending.xml" (
						echo.-------------------------------------------------------------------------------
						echo.%txtPerformingInstallWIM% %%i] %txtPerformingInstallCleanup%
						echo.-------------------------------------------------------------------------------
						call :CleanupImage "%InstallMount%\%%i", "/StartComponentCleanup /ResetBase"
					)
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateFrameworkandOthers_10%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\NET35"
				)

				if exist "%_TMP%\Updates\NET35LP\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingMicrosoftFramework3% [%ImageDefaultLanguage%] %GlobalPackage%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\NET35LP"
				)

				if exist "%_TMP%\Updates\NET48\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingMicrosoftFramework4%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\NET48"
				)

				if exist "%_TMP%\Updates\NET48LP\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateFrameworkandOthers_29% [%ImageDefaultLanguage%] %GlobalPackage%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\NET48LP"
				)

				if exist "%_TMP%\Updates\NetCumulative\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingMicrosoftNetFramework% %txtIntegrateWHDUpdatespos2op6%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\NetCumulative"
				)

				if exist "%_TMP%\Updates\EdgeChromium\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateFrameworkandOthers_128%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\EdgeChromium"
				)

				if exist "%_TMP%\Updates\Enablement\Update.mum" (
					echo.-------------------------------------------------------------------------------
					if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-19h2enablement_*.manifest" (
						echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v1909 %GlobalIntegratingWindows10FeatureUpdatepos2%
					)
					if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
						echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v20H2 %GlobalIntegratingWindows10FeatureUpdatepos2%
					)
					if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
						echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v21H1 %GlobalIntegratingWindows10FeatureUpdatepos2%
					)
					if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
						echo.%GlobalIntegratingWindows10FeatureUpdatepos1% 10 v21H2 %GlobalIntegratingWindows10FeatureUpdatepos2%
					)
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Enablement"
				)

				if exist "%_TMP%\Updates\Cumulative\Update.mum" if exist "%_TMP%\Updates\NET35\Update.mum" if exist "%_TMP%\Updates\NetCumulative\Update.mum" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegrateWHDUpdatespos2op8% %OSID% %txtIntegrateWHDUpdatespos2op6%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\Cumulative"
				)

				if exist "%_TMP%\Updates\Defender\package-defender.xml" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindowsDefenderDefinitionUpdate%
					echo.-------------------------------------------------------------------------------
					echo.
					for /f %%x IN ('dir /b "%_TMP%\Updates\Defender\Platform" 2^>nul') do (set "DefenderVersion=%%x")

					echo.%txtCopyingWindowsDefenderDefinitionUpdates% ^(v!DefenderVersion!^).
					%XCopy% "%_TMP%\Updates\Defender\Definition Updates\Updates" "%InstallMount%\%%i\ProgramData\Microsoft\Windows Defender\Definition Updates\Updates" >nul

					echo.%txtCopyingWindowsDefenderPlatformUpdates%
					%XCopy% /s "%_TMP%\Updates\Defender\Platform" "%InstallMount%\%%i\ProgramData\Microsoft\Windows Defender\Platform" >nul

					echo.%txtCopyingMpAsDescdllfile%
					Copy "%InstallMount%\%%i\Program Files\Windows Defender\MpAsDesc.dll" "%InstallMount%\%%i\ProgramData\Microsoft\Windows Defender\Platform\!DefenderVersion!" >nul
					if /i "%ImageArchitecture%" equ "x64" Copy "%InstallMount%\%%i\Program Files (x86)\Windows Defender\MpAsDesc.dll" "%InstallMount%\%%i\ProgramData\Microsoft\Windows Defender\Platform\!DefenderVersion!\x86" >nul

					echo.%txtCopyingMpAsDescmuifile%
					for /d %%y in (ar-SA,bg-BG,cs-CZ,da-DK,de-DE,el-GR,en-GB,en-US,es-ES,es-MX,et-EE,fi-FI,fr-CA,fr-FR,he-IL,hr-HR,hu-HU,it-IT,ja-JP,ko-KR,lt-LT,lv-LV,nb-NO,nl-NL,pl-PL,pt-BR,pt-PT,ro-RO,ru-RU,sk-SK,sl-SI,sr-Latn-RS,sv-SE,th-TH,tr-TR,uk-UA,zh-CN,zh-HK,zh-TW) do (
						if exist "%InstallMount%\%%i\Program Files\Windows Defender\%%y" (
							call :CreateFolder "%InstallMount%\%%i\ProgramData\Microsoft\Windows Defender\Platform\!DefenderVersion!\%%y"
							Copy "%InstallMount%\%%i\Program Files\Windows Defender\%%y\mpasdesc.dll.mui" "%InstallMount%\%%i\ProgramData\Microsoft\Windows Defender\Platform\!DefenderVersion!\%%y\mpasdesc.dll.mui" >nul

							if /i "%ImageArchitecture%" equ "x64" (
								call :CreateFolder "%InstallMount%\%%i\ProgramData\Microsoft\Windows Defender\Platform\!DefenderVersion!\x86\%%y"
								Copy "%InstallMount%\%%i\Program Files (x86)\Windows Defender\%%y\mpasdesc.dll.mui" "%InstallMount%\%%i\ProgramData\Microsoft\Windows Defender\Platform\!DefenderVersion!\x86\%%y\mpasdesc.dll.mui" >nul
							)
						)
					)

					echo.%txtCopyingPackagedefender2WindowsTemp%
					Copy "%_TMP%\Updates\Defender\package-defender.xml" "%InstallMount%\%%i\Windows\Temp" >nul
					echo.
				)
			)
		)
	)
)

if "%UpdateType%" neq "Boot" if "%UpdateType%" neq "Install" (
	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w81" echo.%txtIntegratingWHDBaselineUpdates2WinRe%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtIntegratingWHDGeneralUpdates2WinRe%
	echo.-------------------------------------------------------------------------------
	echo.
	:: Windows 8.1 RTM (Build : 6.3.9600.16384)
	if "%SelectedSourceOS%" equ "w81" if %ImageServicePackBuild% equ 16384 (
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePrerequisiteUpdates% ^(KB3021910^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselineUpdate% ^(KB2919355^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB2919355-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2932046^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB2932046-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2934018^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB2934018-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2937592^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB2937592-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2938439^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB2938439-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2938772^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB2938772-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
	)

	:: Windows 8.1 with Update (IR3 Build : 6.3.9600.17031)
	if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17031" (
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB2934018^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB2934018-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
	)

	:: Windows 8.1 with Update Refresh (IR4 Build : 6.3.9600.17056)
	if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17056" (
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3000850^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3000850-%ImageArchitecture%.cab"
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3003057^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3003057-%ImageArchitecture%.cab"
	)

	:: Windows 8.1 with Update Refresh (IR5 Build : 6.3.9600.17415)
	if "%SelectedSourceOS%" equ "w81" if "%ImageServicePackBuild%" equ "17415" (
		if exist "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab" (
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB3021910^)...
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB3021910-%ImageArchitecture%.cab"
		)

		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegrateWHDBaselinePackUpdate% ^(KB5001403^)...
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\Windows8.1-KB5001403-%ImageArchitecture%.cab"
	)

	:: Windows 8.1
	if "%SelectedSourceOS%" equ "w81" if exist "%_TMP%\Updates\WinPE\*.cab" (
		echo.-------------------------------------------------------------------------------
		echo.%GlobalIntegratingWindows10FeatureUpdatepos1% %txtIntegrateWHDUpdatespos2op7%
		echo.-------------------------------------------------------------------------------
		call :AddPackage "%WinReMount%", "%_TMP%\Updates\WinPE"
	)

	:: Windows 10/11
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
		if exist "%_TMP%\Updates\ServicingStack\Update.mum" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2op5%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%WinReMount%", "%_TMP%\Updates\ServicingStack"
		)

		if exist "%_TMP%\Updates\General\Update.mum" (
			echo.-------------------------------------------------------------------------------
			echo.%GlobalIntegratingWindows11GeneralUpdate%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%WinReMount%", "%_TMP%\Updates\General"
		)

		if exist "%_TMP%\Updates\SafeOS\Update.mum" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2op3%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%WinReMount%", "%_TMP%\Updates\SafeOS"
		)

		if not exist "%_TMP%\Updates\SafeOS\Update.mum" if exist "%_TMP%\Updates\Cumulative\Update.mum" (
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateWHDUpdatespos1% %OSID% %txtIntegrateWHDUpdatespos2op6%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%WinReMount%", "%_TMP%\Updates\Cumulative"
		)

		if exist "%_TMP%\Updates\Enablement\Update.mum" (
			echo.-------------------------------------------------------------------------------
			if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-19h2enablement_*.manifest" (
				echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v1909 %GlobalIntegratingWindows10FeatureUpdatepos2%
			)
			if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
				echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v20H2 %GlobalIntegratingWindows10FeatureUpdatepos2%
			)
			if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-20h2enablement_*.manifest" if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h1enablement_*.manifest" if not exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
				echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v21H1 %GlobalIntegratingWindows10FeatureUpdatepos2%
			)
			if exist "%_TMP%\Updates\Enablement\%PackageArchitecture%_microsoft-windows-21h2enablement_*.manifest" (
				echo.%GlobalIntegratingWindows10FeatureUpdatepos1% v21H2 %GlobalIntegratingWindows10FeatureUpdatepos2%
			)
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%WinReMount%", "%_TMP%\Updates\Enablement"
		)
	)
)

if "%IsLogsEnabled%" equ "Yes" (
	echo.-------------------------------------------------------------------------------
	if "%SelectedSourceOS%" equ "w81" echo.%txtGeneratingWHDBaselineUpdatesLog%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtGeneratingWHDGeneralUpdatesLog%
	echo.-------------------------------------------------------------------------------
	echo.
	if "%SelectedSourceOS%" equ "w81" echo.%txtWritingWHDBaselineUpdatesLog%
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtWritingWHDGeneralUpdatesLog%
	echo.

	if "%UpdateType%" neq "Install" if "%UpdateType%" neq "InstallRecovery" (
		for /l %%k in (1, 1, 2) do (
			call :GetPackages "%BootMount%\%%k", "Boot-%%k.txt"
		)
	)

	if "%UpdateType%" neq "Boot" (
		for /l %%i in (1, 1, !ImageCount!) do (
			if exist "%InstallMount%\%%i\" (
				call :GetPackages "%InstallMount%\%%i", "Install-%%i.txt"
			)
		)
	)

	if "%UpdateType%" neq "Boot" if "%UpdateType%" neq "Install" (
		call :GetPackages "%WinReMount%", "Install_WinRE.txt"
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtCleaningUpTemporaryFilesFolders%
echo.-------------------------------------------------------------------------------
echo.
if "%SelectedSourceOS%" equ "w81" echo.%txtCleaningUpWHDBaselineTemporaryFolders%
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtCleaningUpWHDGeneralTemporaryFolders%
call :RemoveFolder "%_TMP%\Updates"
echo.
echo.-------------------------------------------------------------------------------
if "%SelectedSourceOS%" equ "w81" echo.%txtFinishedIntegratingWHDBaselineUpdates%
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" echo.%txtFinishedIntegratingWHDGeneralUpdates%
if "%UpdateType%" equ "Boot" echo.%txtFinishedIntegratingUpdates2Boot%
if "%UpdateType%" equ "Install" echo.%txtFinishedIntegratingUpdates2WIM%
if "%UpdateType%" equ "InstallRecovery" echo.%txtFinishedIntegratingUpdates2WIMwinRe%
if "%UpdateType%" equ "BootInstallRecovery" echo.%txtFinishedIntegratingUpdates2WIMwinReBoot%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set UpdateType=

endlocal

call :EnvironmentVariables

:: Get updated Image Information
if "!CurrentImageBuild!" equ "" (
	if "%ImageBuild%" gtr "17763" if "%ImageBuild%" leq "19044" (
		call :GetUpdatedImageInformation
	) >nul
)

:: Returning to Integrate Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Updates
:: Input Parameters [%~1 : UpdateType ]
::-------------------------------------------------------------------------------------------
:IntUpdates

setlocal

:: Setting WHD Updates Type
set "UpdateType=%~1"

cls
echo.===============================================================================
if "%UpdateType%" equ "WUpdates" echo.%txtIntegrateWindowsUpdates%
if "%UpdateType%" equ "General" echo.%txtIntegrateWHDGeneralUpdatesnew%
if "%UpdateType%" equ "Hotfix" echo.%txtIntegrateWHDHotfixUpdates%
if "%UpdateType%" equ "Security" echo.%txtIntegrateWHDSecurityUpdates%
if "%UpdateType%" equ "ESU" echo.%txtIntegrateWHDExtendedSecurityUpdates%
if "%UpdateType%" equ "NET35" echo.%txtIntegrateMicrosoftFramework35Updates%
if "%UpdateType%" equ "WAT" echo.%txtIntegrateWindowsActivationTechnologies%
if "%UpdateType%" equ "Windows10" echo.%txtIntegrateWindows10UpgradePreparationUpdates%
if "%UpdateType%" equ "WinPE" echo.%txtIntegrateWindowsPEUpdates%
if "%UpdateType%" equ "WUSatisfy" echo.%txtIntegrateWindowsUpdateSatisfyUpdates%
if "%UpdateType%" equ "ADLDS" echo.%txtIntegrateActiveDirectoryLightweightDirectoryServices%
if "%UpdateType%" equ "FMApi" echo.%txtIntegrateFileManagementAPI%
if "%UpdateType%" equ "Features" echo.%txtIntegrateWindowsFeatures%
if "%UpdateType%" equ "VirtualPC" echo.%txtIntegrateMicrosoftVirtualPCFeature%
if "%UpdateType%" equ "WorkFolders" echo.%txtIntegrateSyncAgent4DomainEnvironmernts%
echo.===============================================================================
echo.

:: Getting Install Image Index Architecture
call :GetImageArchitecture "%InstallWim%", !SpecifiedSourceIndex! >nul

:: Settings Windows/WHD Updates Menu folder path
if "%UpdateType%" equ "WUpdates" set "Updates=%Updates%\%SelectedSourceOS%\%ImageArchitecture%"
if "%UpdateType%" neq "WUpdates" set "Updates=%WHD%\%SelectedSourceOS%\%ImageArchitecture%"

:: Checking Windows/WHD Updates folder is empty
if "%UpdateType%" equ "WUpdates" if not exist "%Updates%\*.msu" if not exist "%Updates%\*.cab" (
	echo.%txtWindowsUpdatesFolder% ^<Updates\%SelectedSourceOS%\%ImageArchitecture%^> %GlobalEmptyFolder%
	echo.
	echo.%txtCopyWindowsUpdatesFiles%
	goto :Stop
)

if "%UpdateType%" equ "General" (
	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "No" if not exist "%Updates%\Extra\WithoutKB3125574\#General\*.msu" if not exist "%Updates%\Extra\WithoutKB3125574\#General\*.cab" (
		echo.%txtWHDGeneralUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\WithoutKB3125574\#General^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDGeneralUpdatesFiles%
		goto :Stop
	)

	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "Yes" if not exist "%Updates%\General\*.msu" if not exist "%Updates%\General\*.cab" (
		echo.%txtWHDGeneralUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\General^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDGeneralUpdatesFiles%
		goto :Stop
	)

	if "%SelectedSourceOS%" equ "w81" if not exist "%Updates%\General\*.msu" if not exist "%Updates%\General\*.cab" (
		echo.%txtWHDGeneralUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\General^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDGeneralUpdatesFiles%
		goto :Stop
	)
)

if "%UpdateType%" equ "Hotfix" (
	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "No" if not exist "%Updates%\Extra\WithoutKB3125574\#Hotfix\*.msu" if not exist "%Updates%\Extra\WithoutKB3125574\#Hotfix\*.cab" (
		echo.%txtWHDHotfixUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\WithoutKB3125574\#Hotfix^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDHotfixUpdatesFiles%
		goto :Stop
	)

	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "Yes" if not exist "%Updates%\Hotfix\*.msu" if not exist "%Updates%\Hotfix\*.cab" (
		echo.%txtWHDHotfixUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Hotfix^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDHotfixUpdatesFiles%
		goto :Stop
	)

	if "%SelectedSourceOS%" equ "w81" if not exist "%Updates%\Hotfix\*.msu" if not exist "%Updates%\Hotfix\*.cab" (
		echo.%txtWHDHotfixUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Hotfix^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDHotfixUpdatesFiles%
		goto :Stop
	)
)

if "%UpdateType%" equ "Security" (
	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "No" if not exist "%Updates%\Extra\WithoutKB3125574\#Security\*.msu" if not exist "%Updates%\Extra\WithoutKB3125574\#Security\*.cab" (
		echo.%txtWHDSecurityUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\WithoutKB3125574\#Security^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDSecurityUpdatesFiles%
		goto :Stop
	)

	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "Yes" if not exist "%Updates%\Security\*.msu" if not exist "%Updates%\Security\*.cab" (
		echo.%txtWHDSecurityUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Security^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDSecurityUpdatesFiles%
		goto :Stop
	)

	if "%SelectedSourceOS%" equ "w81" if not exist "%Updates%\Security\*.msu" if not exist "%Updates%\Security\*.cab" (
		echo.%txtWHDSecurityUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Security^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDSecurityUpdatesFiles%
		goto :Stop
	)
)

if "%UpdateType%" equ "ESU" (
	if "%SelectedSourceOS%" equ "w7" if not exist "%Updates%\Security\ESU\*.msu" if not exist "%Updates%\Security\ESU\*.cab" (
		echo.%txtWHDExtendedSecurityUpdatesFolder%^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Security\ESU^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWHDExtendedSecurityUpdatesFiles%
		goto :Stop
	)
)

if "%UpdateType%" equ "NET35" if not exist "%Updates%\Additional\NET35\*.msu" if not exist "%Updates%\Additional\NET35\*.cab" (
	echo.             %txtMicrosoftFramework3UpdatesFolder%
	echo.           ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Additional\NET35^> %GlobalEmptyFolder%
	echo.
	echo. %txtCopyMicrosoftFramework3UpdatesFiles%
	goto :Stop
)

if "%UpdateType%" equ "WAT" (
	if not exist "%Updates%\Additional\WAT\*.msu" if not exist "%Updates%\Additional\WAT\*.cab" (
		echo.                    %txtWindowsActivationTechnologiesFolder%
		echo.                 ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Additional\WAT^> %GlobalEmptyFolder%
		echo.
		echo.    %txtCopyWindowsActivationTechnologiesFiles%
		goto :Stop
	)

	if /i "%ImageEdition%" equ "Embedded" (
		echo.%txtWindowsActivationTechnologiesRequires%
		goto :Stop
	)
)

if "%UpdateType%" equ "Windows10" (
	if not exist "%Updates%\Additional\Windows10\*.msu" if not exist "%Updates%\Additional\Windows10\*.cab" (
		echo.                  %txtWindows10UpgradePreparationUpdatesFolder%
		echo.               ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Additional\Windows10^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWindows10UpgradePreparationUpdatesFiles%
		goto :Stop
	)

	if "%IsW7SP1CRUSelected%" equ "No" if not exist "%Updates%\Extra\WithoutKB3125574\_Windows10\*.msu" if not exist "%Updates%\Extra\WithoutKB3125574\_Windows10\*.cab" (
		echo.               %txtWindows10UpgradePreparationUpdatesFolder%
		echo.       ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\WithoutKB3125574\_Windows10^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyWindows10UpgradePreparationUpdatesFiles%
		goto :Stop
	)

	if /i "%ImageEdition%" equ "Embedded" (
		echo.%txtWindows10UpgradePreparationUpdatesRequires%
		goto :Stop
	)
)

if "%UpdateType%" equ "WinPE" if not exist "%Updates%\Additional\WinPE\*.msu" if not exist "%Updates%\Additional\WinPE\*.cab" (
	echo.%txtWindowsPEUpdatesFolder% ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Additional\WinPE^> %GlobalEmptyFolder%
	echo.
	echo.%txtCopyWindowsPEUpdatesFiles%
	goto :Stop
)

if "%UpdateType%" equ "WUSatisfy" if not exist "%Updates%\Additional\WU.Satisfy\*.msu" if not exist "%Updates%\Additional\WU.Satisfy\*.cab" (
	echo.                    %txtWindowsUpdateSatisfyUpdatesFolder%
	echo.              ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Additional\WU.Satisfy^> %GlobalEmptyFolder%
	echo.
	echo.    %txtCopyWindowsUpdateSatisfyUpdatesFiles%
	goto :Stop
)

if "%UpdateType%" equ "ADLDS" (
	if not exist "%Updates%\Extra\AD_LDS\*.msu" if not exist "%Updates%\Extra\AD_LDS\*.cab" (
		echo.        %txtActiveDirectoryLightweightDirectoryServicesFeatureFolder%
		echo.                 ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\AD_LDS^> %GlobalEmptyFolder%
		echo.
		echo.           %txtCopyADLDSFeatureFiles%
		goto :Stop
	)

	if not exist "%Updates%\Extra\AD_LDS\Updates\*.msu" if not exist "%Updates%\Extra\AD_LDS\Updates\*.cab" (
		echo.     %txtActiveDirectoryLightweightDirectoryServicesFeatureUpdatesFolder%
		echo.           ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\AD_LDS\Updates^> %GlobalEmptyFolder%
		echo.
		echo.        %txtActiveDirectoryLightweightDirectoryServicesFeatureUpdatesFiles%
		goto :Stop
	)

	if "%IsW7SP1CRUSelected%" equ "No" if not exist "%Updates%\Extra\WithoutKB3125574\AD_LDS\*.msu" if not exist "%Updates%\Extra\WithoutKB3125574\AD_LDS\*.cab" (
		echo.     %txtActiveDirectoryLightweightDirectoryServicesFeatureUpdatesFolder%
		echo.         ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\WithoutKB3125574\AD_LDS^> %GlobalEmptyFolder%
		echo.
		echo.        %txtActiveDirectoryLightweightDirectoryServicesFeatureUpdatesFiles%
		goto :Stop
	)

	if /i "%ImageEdition%" neq "Professional" if /i "%ImageEdition%" neq "Enterprise" if /i "%ImageEdition%" neq "Ultimate" (
		echo.           %txtActiveDirectoryLightweightDirectoryServicesFeature%
		echo.             %txtRequiresProfessionalEnterpriseUltimateEditions%
		goto :Stop
	) else (
		goto :Continue
	)
)

if "%UpdateType%" equ "FMApi" if not exist "%Updates%\Extra\Addons\FM.Api\*.msu" if not exist "%Updates%\Extra\Addons\FM.Api\*.cab" (
	echo.                        %txtFileManagementAPIFolder%
	echo.        ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\Addons\FM.Api^> %GlobalEmptyFolder%
	echo.
	echo.           %txtCopyFileManagementAPIFolder%
	goto :Stop
)

if "%UpdateType%" equ "Features" if not exist "%Updates%\Extra\WithoutKB3125574\_Features\*.msu" if not exist "%Updates%\Extra\WithoutKB3125574\_Features\*.cab" (
	echo.                           %txtWindowsFeaturesFolder%
	echo.        ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\WithoutKB3125574\_Features^> %GlobalEmptyFolder%
	echo.
	echo.           %txtCopyWindowsFeaturesFiles%
	goto :Stop
)

if "%UpdateType%" equ "VirtualPC" (
	if not exist "%Updates%\Extra\VirtualPC\*.msu" if not exist "%Updates%\Extra\VirtualPC\*.cab" (
		echo.                     %txtMicrosoftVirtualPCFeatureFolder%
		echo.                ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\VirtualPC^> %GlobalEmptyFolder%
		echo.
		echo.    %txtCopyMicrosoftVirtualPCFeatureFiles%
		goto :Stop
	)

	if "%IsW7SP1CRUSelected%" equ "No" if not exist "%Updates%\Extra\WithoutKB3125574\VirtualPC\*.msu" if not exist "%Updates%\Extra\WithoutKB3125574\VirtualPC\*.cab" (
		echo.                %txtMicrosoftVirtualPCFeatureUpdatesFolder%
		echo.       ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\WithoutKB3125574\VirtualPC^> %GlobalEmptyFolder%
		echo.
		echo.%txtCopyMicrosoftVirtualPCFeatureUpdatesFiles%
		goto :Stop
	)
)

if "%UpdateType%" equ "WorkFolders" (
	if not exist "%Updates%\Extra\Addons\WorkFolders\*.msu" if not exist "%Updates%\Extra\Addons\WorkFolders\*.cab" (
		echo.       %txtSyncAgent4DomainEnvironmerntsFolder%
		echo.           ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\Addons\WorkFolders^> %GlobalEmptyFolder%
		echo.
		echo.         %txtCopySyncAgent4DomainEnvironmerntsFilesline1%
		echo.                   %txtCopySyncAgent4DomainEnvironmerntsFilesline2%
		goto :Stop
	)

	if "%IsW7SP1CRUSelected%" equ "No" if not exist "%Updates%\Extra\WithoutKB3125574\WorkFolders\*.msu" if not exist "%Updates%\Extra\WithoutKB3125574\WorkFolders\*.cab" (
		echo.   %txtSyncAgent4DomainEnvironmerntsFolder%
		echo.      ^<WHD\%SelectedSourceOS%\%ImageArchitecture%\Extra\WithoutKB3125574\WorkFolders^> %GlobalEmptyFolder%
		echo.
		echo.        %txtCopySyncAgent4DomainEnvironmerntsFilesline1%
		echo.                %txtCopySyncAgent4DomainEnvironmerntsFilesline2%
		goto :Stop
	)

	if /i "%ImageEdition%" neq "Professional" if /i "%ImageEdition%" neq "Enterprise" if /i "%ImageEdition%" neq "Ultimate" (
		echo.           %txtSyncAgent4DomainEnvironmerntsFeatureline1%
		echo.             %txtSyncAgent4DomainEnvironmerntsFeatureline2%
		goto :Stop
	) else (
		goto :Continue
	)
)

:Continue
echo.-------------------------------------------------------------------------------
if "%UpdateType%" equ "WUpdates" echo.%txtStartingIntegratingWindowsUpdates%
if "%UpdateType%" equ "General" echo.%txtStartingIntegratingWHDGeneralUpdates%
if "%UpdateType%" equ "Hotfix" echo.%txtStartingIntegratingWHDHotfixUpdates%
if "%UpdateType%" equ "Security" echo.%txtStartingIntegratingWHDSecurityUpdates%
if "%UpdateType%" equ "ESU" echo.%txtStartingIntegratingWHDExtendedSecurityUpdates%
if "%UpdateType%" equ "NET35" echo.%txtStartingIntegratingMicrosoftFramework3%
if "%UpdateType%" equ "WAT" echo.%txtStartingIntegratingWindowsActivation%
if "%UpdateType%" equ "Windows10" echo.%txtStartingIntegratingWindows10Upgrade%
if "%UpdateType%" equ "WinPE" echo.%txtStartingIntegratingWindowsPEUpdates%
if "%UpdateType%" equ "WUSatisfy" echo.%txtStartingIntegratingWindowsUpdateSatisfy%
if "%UpdateType%" equ "ADLDS" echo.%txtStartingIntegratingActiveDirectoryLightweight%
if "%UpdateType%" equ "FMApi" echo.%txtStartingIntegratingFileManagementAPI%
if "%UpdateType%" equ "Features" echo.%txtStartingIntegratingWindowsFeatures%
if "%UpdateType%" equ "VirtualPC" echo.%txtStartingIntegratingMicrosoftVirtualPC%
if "%UpdateType%" equ "WorkFolders" echo.%txtStartingIntegratingSyncAgent%
echo.-------------------------------------------------------------------------------
echo.
if "%UpdateType%" equ "WinPE" (
	echo.    %GlobalImage% boot.wim         ^|  WinRE.wim
	echo.    Image Indexes            :    2             ^|    1
) else (
	echo.    %GlobalImage% install.wim
	echo.    %GlobalImageIndex% !ImageIndexNo!
)
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
if "%UpdateType%" equ "WUpdates" echo.%txtProcessingWindowsUpdatesPackages%
if "%UpdateType%" equ "General" echo.%txtProcessingWHDGeneralUpdatesPackages%
if "%UpdateType%" equ "Hotfix" echo.%txtProcessingWHDHotfixUpdatesPackages%
if "%UpdateType%" equ "Security" echo.%txtProcessingWHDSecurityUpdatesPackages%
if "%UpdateType%" equ "ESU" echo.%txtProcessingWHDExtendedSecurityUpdatesPackages%
if "%UpdateType%" equ "NET35" echo.%txtProcessingMicrosoftFramework3UpdatesPackages%
if "%UpdateType%" equ "WAT" echo.%txtProcessingWindowsActivationTechnologiesPackages%
if "%UpdateType%" equ "Windows10" echo.%txtProcessingWindows10UpgradePackages%
if "%UpdateType%" equ "WinPE" echo.%txtProcessingWindowsPEUpdatesPackages%
if "%UpdateType%" equ "WUSatisfy" echo.%txtProcessingWindowsUpdateSatisfyUpdatesPackages%
if "%UpdateType%" equ "ADLDS" echo.%txtProcessingActiveDirectoryLightweightPackages%
if "%UpdateType%" equ "FMApi" echo.%txtProcessingFileManagementAPIPackages%
if "%UpdateType%" equ "Features" echo.%txtProcessingWindowsFeaturesPackages%
if "%UpdateType%" equ "VirtualPC" echo.%txtProcessingMicrosoftVirtualPCFeaturePackages%
if "%UpdateType%" equ "WorkFolders" echo.%txtProcessingSyncAgent4DomainEnvironmerntsPackages%
echo.-------------------------------------------------------------------------------
echo.
:: Creating Windows/WHD Updates Temporary Folder
if "%UpdateType%" equ "WUpdates" echo.%txtCreatingWindowsUpdatesPackagesTemporary%
if "%UpdateType%" equ "General" echo.%txtCreatingWHDGeneralUpdatesPackagesTemporary%
if "%UpdateType%" equ "Hotfix" echo.%txtCreatingWHDHotfixUpdatesPackagesTemporary%
if "%UpdateType%" equ "Security" echo.%txtCreatingWHDSecurityUpdatesPackagesTemporary%
if "%UpdateType%" equ "ESU" echo.%txtCreatingWHDExtendedSecurityUpdatesPackagesTemporary%
if "%UpdateType%" equ "NET35" echo.%txtCreatingMicrosoftFramework3UpdatesPackagesTemporary%
if "%UpdateType%" equ "WAT" echo.%txtCreatingWindowsActivationTechnologiesPackagesTemporary%
if "%UpdateType%" equ "Windows10" echo.%txtCreatingWindows10UpgradePreparationUpdatesPackagesTemporary%
if "%UpdateType%" equ "WinPE" echo.%txtCreatingWindowsPEUpdatesPackagesTemporary%
if "%UpdateType%" equ "WUSatisfy" echo.%txtCreatingWindowsUpdateSatisfyUpdatesPackagesTemporary%
if "%UpdateType%" equ "ADLDS" echo.%txtCreatingADLDSPackagesTemporary%
if "%UpdateType%" equ "FMApi" echo.%txtCreatingFileManagementAPIPackagesTemporary%
if "%UpdateType%" equ "Features" echo.%txtCreatingWindowsFeaturesPackagesTemporary%
if "%UpdateType%" equ "VirtualPC" echo.%txtCreatingMicrosoftVirtualPCFeaturePackagesTemporary%
if "%UpdateType%" equ "WorkFolders" echo.%txtCreatingSyncAgent4DomainEnvironmerntsPackagesTemporary%
echo.

call :RemoveFolder "%_TMP%\Updates"
call :CreateFolder "%_TMP%\Updates"

if "%UpdateType%" equ "General" call :CreateFolder "%_TMP%\Updates\%UpdateType%"
if "%UpdateType%" equ "Hotfix" call :CreateFolder "%_TMP%\Updates\%UpdateType%"

if "%UpdateType%" equ "Security" (
	call :CreateFolder "%_TMP%\Updates\%UpdateType%" >nul
	if "%SelectedSourceOS%" equ "w81" call :CreateFolder "%_TMP%\Updates\%UpdateType%\ProWMC"
)

if "%UpdateType%" equ "ESU" (
	call :CreateFolder "%_TMP%\Updates\%UpdateType%" >nul
)

if "%UpdateType%" equ "NET35" call :CreateFolder "%_TMP%\Updates\%UpdateType%"
if "%UpdateType%" equ "WAT" call :CreateFolder "%_TMP%\Updates\%UpdateType%"
if "%UpdateType%" equ "Windows10" call :CreateFolder "%_TMP%\Updates\%UpdateType%"
if "%UpdateType%" equ "WinPE" call :CreateFolder "%_TMP%\Updates\%UpdateType%"
if "%UpdateType%" equ "WUSatisfy" call :CreateFolder "%_TMP%\Updates\%UpdateType%\ProfessionalWMC"
if "%UpdateType%" equ "ADLDS" call :CreateFolder "%_TMP%\Updates\%UpdateType%\Updates"
if "%UpdateType%" equ "FMApi" call :CreateFolder "%_TMP%\Updates\%UpdateType%\Updates"
if "%UpdateType%" equ "Features" call :CreateFolder "%_TMP%\Updates\%UpdateType%"

if "%UpdateType%" equ "VirtualPC" (
	if "%IsW7SP1CRUSelected%" equ "Yes" call :CreateFolder "%_TMP%\Updates\%UpdateType%"
	if "%IsW7SP1CRUSelected%" equ "No" call :CreateFolder "%_TMP%\Updates\%UpdateType%\Updates"
)

if "%UpdateType%" equ "WorkFolders" (
	if "%IsW7SP1CRUSelected%" equ "Yes" call :CreateFolder "%_TMP%\Updates\%UpdateType%"
	if "%IsW7SP1CRUSelected%" equ "No" call :CreateFolder "%_TMP%\Updates\%UpdateType%\Updates"
)

echo.%txtExtractingUpdatePackage2Temporary%
echo.

:: Extracting/Copying Windows/WHD Updates .CAB files to Temporary Folder
if "%UpdateType%" equ "WUpdates" (
	if exist "%Updates%\*%ImageArchitecture%*.msu" expand "%Updates%\*.msu" -F:Win*.cab "%_TMP%\Updates" >nul
	if exist "%Updates%\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\*.cab" "%_TMP%\Updates" >nul
)

if "%UpdateType%" equ "General" (
	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "No" (
		if exist "%Updates%\Extra\WithoutKB3125574\#General\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\WithoutKB3125574\#General\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\Extra\WithoutKB3125574\#General\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\WithoutKB3125574\#General\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

		if exist "%_TMP%\Updates\%UpdateType%\WUClient*.cab" (
			call :CreateFolder "%_TMP%\Updates\%UpdateType%\WUClient"
			move /y "%_TMP%\Updates\%UpdateType%\WUClient*.cab" "%_TMP%\Updates\%UpdateType%\WUClient" >nul
		)
	)

	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "Yes" (
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.msu" expand "%Updates%\%UpdateType%\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\%UpdateType%\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

		call :CreateFolder "%_TMP%\Updates\%UpdateType%\SP2"
		move /y "%_TMP%\Updates\%UpdateType%\Windows6.1-KB4490628-%ImageArchitecture%.cab" "%_TMP%\Updates\%UpdateType%\SP2" >nul
		move /y "%_TMP%\Updates\%UpdateType%\Windows6.1-KB2670838-%ImageArchitecture%.cab" "%_TMP%\Updates\%UpdateType%\SP2" >nul
		move /y "%_TMP%\Updates\%UpdateType%\Windows6.1-KB3125574-v4-%ImageArchitecture%.cab" "%_TMP%\Updates\%UpdateType%\SP2" >nul
		move /y "%_TMP%\Updates\%UpdateType%\Windows6.1-KB3172605-%ImageArchitecture%.cab" "%_TMP%\Updates\%UpdateType%\SP2" >nul

		call :CreateFolder "%_TMP%\Updates\%UpdateType%\Client"
		if exist "%_TMP%\Updates\%UpdateType%\Windows6.1-KB917607-%ImageArchitecture%.cab" del /f /q "%_TMP%\Updates\%UpdateType%\Windows6.1-KB917607-%ImageArchitecture%.cab" >nul
	)

	if "%SelectedSourceOS%" equ "w81" (
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.msu" expand "%Updates%\%UpdateType%\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\%UpdateType%\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

		if exist "%_TMP%\Updates\%UpdateType%\Windows8.1-KB3140185-%ImageArchitecture%.cab" (
			call :CreateFolder "%_TMP%\Updates\%UpdateType%\Upgrade"
			move /y "%_TMP%\Updates\%UpdateType%\Windows8.1-KB3140185-%ImageArchitecture%.cab" "%_TMP%\Updates\%UpdateType%\Upgrade" >nul
		)

		if exist "%_TMP%\Updates\%UpdateType%\Windows8.1-KB917607-%ImageArchitecture%.cab" del /f /q "%_TMP%\Updates\%UpdateType%\Windows8.1-KB917607-%ImageArchitecture%.cab" >nul
		if exist "%_TMP%\Updates\%UpdateType%\Windows8.1-KB4486105-%ImageArchitecture%.cab" del /f /q "%_TMP%\Updates\%UpdateType%\Windows8.1-KB4486105-%ImageArchitecture%.cab" >nul
	)
)

if "%UpdateType%" equ "Hotfix" (
	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "No" (
		if exist "%Updates%\Extra\WithoutKB3125574\#Hotfix\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\WithoutKB3125574\#Hotfix\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\Extra\WithoutKB3125574\#Hotfix\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\WithoutKB3125574\#Hotfix\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

		if exist "%_TMP%\Updates\%UpdateType%\Windows6.1-KB2780124-%ImageArchitecture%*.cab" (
			call :CreateFolder "%_TMP%\Updates\%UpdateType%\Ent_Ultimate"
			move /y "%_TMP%\Updates\%UpdateType%\Windows6.1-KB2780124-%ImageArchitecture%*.cab" "%_TMP%\Updates\%UpdateType%\Ent_Ultimate" >nul
		)
	)

	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "Yes" (
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.msu" expand "%Updates%\%UpdateType%\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\%UpdateType%\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

		call :CreateFolder "%_TMP%\Updates\%UpdateType%\Client"
		if exist "%_TMP%\Updates\%UpdateType%\Windows6.1-KB2727994-v3-%ImageArchitecture%.cab" move /y "%_TMP%\Updates\%UpdateType%\Windows6.1-KB2727994-v3-%ImageArchitecture%.cab" "%_TMP%\Updates\%UpdateType%\Client" >nul
	)

	if "%SelectedSourceOS%" equ "w81" (
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.msu" expand "%Updates%\%UpdateType%\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\%UpdateType%\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
	)
)

if "%UpdateType%" equ "Security" (
	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "No" (
		if exist "%Updates%\Extra\WithoutKB3125574\#Security\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\WithoutKB3125574\#Security\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\Extra\WithoutKB3125574\#Security\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\WithoutKB3125574\#Security\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

		if exist "%Updates%\%UpdateType%\Windows6.1-KB4490628-%ImageArchitecture%*.msu" expand "%Updates%\%UpdateType%\Windows6.1-KB4490628-%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\Windows6.1-KB4490628-%ImageArchitecture%*.cab" %XCopy% "%Updates%\%UpdateType%\Windows6.1-KB4490628-%ImageArchitecture%*.cab" "%_TMP%\Updates\%UpdateType%" >nul
	)

	if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "Yes" (
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.msu" expand "%Updates%\%UpdateType%\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\%UpdateType%\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
	)

	if "%SelectedSourceOS%" equ "w81" (
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.msu" expand "%Updates%\%UpdateType%\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\%UpdateType%\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\NET452\*%ImageArchitecture%*.msu" expand "%Updates%\%UpdateType%\NET452\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\%UpdateType%\NET452\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\%UpdateType%\NET452\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
	)
)

if "%UpdateType%" equ "ESU" (
	if exist "%Updates%\Security\ESU\*%ImageArchitecture%*.msu" expand "%Updates%\Security\ESU\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Security\ESU\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Security\ESU\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
)

if "%UpdateType%" equ "NET35" (
	if exist "%Updates%\Additional\NET35\*%ImageArchitecture%*.msu" expand "%Updates%\Additional\NET35\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Additional\NET35\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Additional\NET35\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
)

if "%UpdateType%" equ "WAT" (
	if exist "%Updates%\Additional\WAT\*%ImageArchitecture%*.msu" expand "%Updates%\Additional\WAT\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Additional\WAT\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Additional\WAT\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
)

if "%UpdateType%" equ "Windows10" (
	if exist "%Updates%\Additional\Windows10\*%ImageArchitecture%*.msu" expand "%Updates%\Additional\Windows10\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Additional\Windows10\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Additional\Windows10\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

	if "%IsW7SP1CRUSelected%" equ "No" (
		if exist "%Updates%\Extra\WithoutKB3125574\_Windows10\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\WithoutKB3125574\_Windows10\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
		if exist "%Updates%\Extra\WithoutKB3125574\_Windows10\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\WithoutKB3125574\_Windows10\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
	)
)

if "%UpdateType%" equ "WinPE" (
	if exist "%Updates%\Additional\WinPE\*%ImageArchitecture%*.msu" expand "%Updates%\Additional\WinPE\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Additional\WinPE\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Additional\WinPE\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

	if exist "%Updates%\General\Windows8.1-KB3084905*%ImageArchitecture%*.msu" expand "%Updates%\General\Windows8.1-KB3084905*%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\General\Windows8.1-KB3084905*%ImageArchitecture%*.cab" %XCopy% "%Updates%\General\Windows8.1-KB3084905*%ImageArchitecture%*.cab" "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\General\Windows8.1-KB3115224*%ImageArchitecture%*.msu" expand "%Updates%\General\Windows8.1-KB3115224*%ImageArchitecture%*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\General\Windows8.1-KB3115224*%ImageArchitecture%*.cab" %XCopy% "%Updates%\General\Windows8.1-KB3115224*%ImageArchitecture%*.cab" "%_TMP%\Updates\%UpdateType%" >nul
)

if "%UpdateType%" equ "WUSatisfy" (
	if exist "%Updates%\Additional\WU.Satisfy\*%ImageArchitecture%*.msu" expand "%Updates%\Additional\WU.Satisfy\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Additional\WU.Satisfy\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Additional\WU.Satisfy\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Additional\WU.Satisfy\ProfessionalWMC\*%ImageArchitecture%*.msu" expand "%Updates%\Additional\WU.Satisfy\ProfessionalWMC\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%\ProfessionalWMC" >nul
	if exist "%Updates%\Additional\WU.Satisfy\ProfessionalWMC\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Additional\WU.Satisfy\ProfessionalWMC\*.cab" "%_TMP%\Updates\%UpdateType%\ProfessionalWMC" >nul
)

if "%UpdateType%" equ "ADLDS" (
	if exist "%Updates%\Extra\AD_LDS\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\AD_LDS\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Extra\AD_LDS\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\AD_LDS\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

	if exist "%Updates%\Extra\AD_LDS\Updates\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\AD_LDS\Updates\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%\Updates" >nul
	if exist "%Updates%\Extra\AD_LDS\Updates\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\AD_LDS\Updates\*.cab" "%_TMP%\Updates\%UpdateType%\Updates" >nul

	if "%IsW7SP1CRUSelected%" equ "No" (
		if exist "%Updates%\Extra\WithoutKB3125574\AD_LDS\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\WithoutKB3125574\AD_LDS\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%\Updates" >nul
		if exist "%Updates%\Extra\WithoutKB3125574\AD_LDS\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\WithoutKB3125574\AD_LDS\*.cab" "%_TMP%\Updates\%UpdateType%\Updates" >nul
	)
)

if "%UpdateType%" equ "FMApi" (
	if exist "%Updates%\Extra\Addons\FM.Api\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\Addons\FM.Api\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Extra\Addons\FM.Api\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\Addons\FM.Api\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
)

if "%UpdateType%" equ "Features" (
	if exist "%Updates%\Extra\WithoutKB3125574\_Features\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\WithoutKB3125574\_Features\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Extra\WithoutKB3125574\_Features\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\WithoutKB3125574\_Features\*.cab" "%_TMP%\Updates\%UpdateType%" >nul
)

if "%UpdateType%" equ "VirtualPC" (
	if exist "%Updates%\Extra\VirtualPC\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\VirtualPC\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Extra\VirtualPC\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\VirtualPC\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

	if "%IsW7SP1CRUSelected%" equ "No" (
		if exist "%Updates%\Extra\WithoutKB3125574\VirtualPC\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\WithoutKB3125574\VirtualPC\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%\Updates" >nul
		if exist "%Updates%\Extra\WithoutKB3125574\VirtualPC\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\WithoutKB3125574\VirtualPC\*.cab" "%_TMP%\Updates\%UpdateType%\Updates" >nul
	)
)

if "%UpdateType%" equ "WorkFolders" (
	if exist "%Updates%\Extra\Addons\WorkFolders\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\Addons\WorkFolders\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%" >nul
	if exist "%Updates%\Extra\Addons\WorkFolders\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\Addons\WorkFolders\*.cab" "%_TMP%\Updates\%UpdateType%" >nul

	if "%IsW7SP1CRUSelected%" equ "No" (
		if exist "%Updates%\Extra\WithoutKB3125574\WorkFolders\*%ImageArchitecture%*.msu" expand "%Updates%\Extra\WithoutKB3125574\WorkFolders\*.msu" -F:Win*.cab "%_TMP%\Updates\%UpdateType%\Updates" >nul
		if exist "%Updates%\Extra\WithoutKB3125574\WorkFolders\*%ImageArchitecture%*.cab" %XCopy% "%Updates%\Extra\WithoutKB3125574\WorkFolders\*.cab" "%_TMP%\Updates\%UpdateType%\Updates" >nul
	)
)

echo.%txtFinishedExtractingUpdatePackage2Temporary%
echo.
echo.-------------------------------------------------------------------------------
:: Integrating Windows/WHD Updates Packages to WIM Image
if "%UpdateType%" equ "WUpdates" echo.%txtIntegratingWindowsUpdates%
if "%UpdateType%" equ "General" echo.%txtIntegratingWHDGeneralUpdates%
if "%UpdateType%" equ "Hotfix" echo.%txtIntegratingWHDHotfixUpdates%
if "%UpdateType%" equ "Security" echo.%txtIntegratingWHDSecurityUpdates%
if "%UpdateType%" equ "ESU" echo.%txtIntegratingWHDExtendedSecurityUpdates%
if "%UpdateType%" equ "NET35" echo.%txtIntegratingMicrosoftFramework3Updates%
if "%UpdateType%" equ "WAT" echo.%txtIntegratingWindowsActivationTechnologies%
if "%UpdateType%" equ "Windows10" echo.%txtIntegratingWindows10Upgrade%
if "%UpdateType%" equ "WinPE" echo.%txtIntegratingWindowsPEUpdates%
if "%UpdateType%" equ "WUSatisfy" echo.%txtIntegratingWindowsUpdateSatisfyUpdates%
if "%UpdateType%" equ "ADLDS" echo.%txtIntegratingActiveDirectoryLightweight%
if "%UpdateType%" equ "FMApi" echo.%txtIntegratingFileManagementAPIFeature%
if "%UpdateType%" equ "Features" echo.%txtIntegratingWindowsFeaturesUpdates%
if "%UpdateType%" equ "VirtualPC" echo.%txtIntegratingMicrosoftVirtualPCFeature%
if "%UpdateType%" equ "WorkFolders" echo.%txtIntegratingSyncAgent4DomainEnvironmernts%
echo.-------------------------------------------------------------------------------

for /l %%i in (1, 1, !ImageCount!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		if "%UpdateType%" equ "WUpdates" call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates"

		if "%UpdateType%" equ "General" (
			if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "No" (
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

				if exist "%_TMP%\Updates\%UpdateType%\WUClient\WUClient*.cab" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindows7UpdateClient%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\WUClient\WUClient-SelfUpdate-Core-%ImageArchitecture%-7.6.7600.320.cab"
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\WUClient\WUClient-SelfUpdate-Aux-%ImageArchitecture%-7.6.7600.320.cab"
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\WUClient\WUClient-SelfUpdate-ActiveX-%ImageArchitecture%-7.6.7600.320.cab"
				)
			)

			if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "Yes" (
				echo.
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingWindows7SP1ConvenienceRollupPrerequisite%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\SP2\Windows6.1-KB4490628-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingWindows7SP1ConvenienceRollupPlatform%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\SP2\Windows6.1-KB2670838-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingWindows7SP1ConvenienceRollupUpdate%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\SP2\Windows6.1-KB3125574-v4-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingWindows7SP1July2016%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\SP2\Windows6.1-KB3172605-%ImageArchitecture%.cab"
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingWHDGeneralUpdates%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

				if "%ImageInstallationType%" neq "Embedded" if exist "%_TMP%\Updates\%UpdateType%\Client\*.cab" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindows7ClientUpdatesPackages%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Client"
				)
			)

			if "%SelectedSourceOS%" equ "w81" (
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

				if exist "%_TMP%\Updates\%UpdateType%\Upgrade\*.cab" (
					if /i "!ImageEdition%%i!" equ "Core" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegratingWindows81Upgradeable%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Upgrade"
					)

					if /i "!ImageEdition%%i!" equ "CoreSingleLanguage" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegratingWindows81Upgradeable%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Upgrade"
					)

					if /i "!ImageEdition%%i!" equ "CoreCountrySpecific" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegratingWindows81Upgradeable%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Upgrade"
					)

					if /i "!ImageEdition%%i!" equ "Professional" if not exist "%InstallMount%\%%i\Windows\Servicing\Packages\Microsoft-Windows-Security-SPP-Component-SKU-Professional-GVLK-Package*.mum" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegratingWindows81Upgradeable%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Upgrade"
					)
				)
			)
		)

		if "%UpdateType%" equ "Hotfix" (
			call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

			if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "No" if exist "%_TMP%\Updates\%UpdateType%\Ent_Ultimate\*.cab" (
				if /i "!ImageEdition%%i!" equ "Enterprise" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindows7EnterpriseUpdatesPackages%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Ent_Ultimate"
				)

				if /i "!ImageEdition%%i!" equ "Ultimate"  (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindows7UltimateUpdatesPackages%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Ent_Ultimate"
				)
			)

			if "%SelectedSourceOS%" equ "w7" if "%IsW7SP1CRUSelected%" equ "Yes" if "%ImageInstallationType%" neq "Embedded" if exist "%_TMP%\Updates\%UpdateType%\Client\*.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingWindows7ClientUpdatesPackages%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Client"
			)
		)

		if "%UpdateType%" equ "Security" (
			call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

			:: Applying Anti Microsoft Telemetry Client Patches
			call :MountImageRegistry "%InstallMount%\%%i"
			reg.exe delete "HKLM\TK_SYSTEM\ControlSet001\Control\WMI\AutoLogger\AutoLogger-Diagtrack-Listener" /f >nul 2>&1
			reg.exe delete "HKLM\TK_SYSTEM\ControlSet001\Control\WMI\AutoLogger\SQMLogger" /f >nul 2>&1
			reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Diagnostics\DiagTrack" /f >nul 2>&1
			reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\DiagTrack" /v "Start" /t REG_DWORD /d "4" /f >nul
			call :UnMountImageRegistry
		)

		if "%UpdateType%" equ "ESU" (
			set EsuFoundation=
			if "%ImageInstallationType%" equ "Client" set "EsuFoundation=windowsfoundation_31bf3856ad364e35"
			if "%ImageInstallationType%" equ "Embedded" set "EsuFoundation=windowsembe..dfoundation_31bf3856ad364e35"
			if "%ImageInstallationType:~,6%" equ "Server" set "EsuFoundation=windowsserverfoundation_31bf3856ad364e35"

			:: Applying Windows 7 Extended Security Update (ESU) Suppressor Patch
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegrateFrameworkandOthers_127%
			echo.-------------------------------------------------------------------------------
			call :ApplyImage "%W7ESU%\ESU.tpk", %PackageIndex%, "%InstallMount%\%%i"

			call :MountImageRegistry "%InstallMount%\%%i"

			for /f "tokens=5 delims=\" %%a in ('reg.exe query "HKLM\TK_COMPONENTS\DerivedData\Components" ^| findstr.exe /I "%ImageArchitecture%_!EsuFoundation!"') do (set "EsuFoundation=%%a")

			if /i "%ImageArchitecture%" equ "x86" (
				reg.exe delete "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /f >nul 2>&1
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /v "identity" /t REG_BINARY /d "4D6963726F736F66742D57696E646F77732D534C432D436F6D706F6E656E742D457874656E64656453656375726974795570646174657341492C2043756C747572653D6E65757472616C2C2056657273696F6E3D362E312E373630332E32353030302C205075626C69634B6579546F6B656E3D333162663338353661643336346533352C2050726F636573736F724172636869746563747572653D7838362C2076657273696F6E53636F70653D4E6F6E537853" >nul
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /v "S256H" /t REG_BINARY /d "343B7E8DE2FE932E2FA1DB0CDFE69BB648BEE8E834B41728F1C83A12C1766ECB" >nul
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /v "c^!!EsuFoundation!" /t REG_BINARY /d "" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_none_b26c9b4c15d241fc" /ve /t REG_SZ /d "6.1" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_none_b26c9b4c15d241fc\6.1" /v "6.1.7603.25000" /t REG_BINARY /d "01" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_none_b26c9b4c15d241fc\6.1" /ve /t REG_SZ /d "6.1.7603.25000" >nul
			)

			if /i "%ImageArchitecture%" equ "x64" (
				reg.exe delete "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /f >nul 2>&1
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /v "identity" /t REG_BINARY /d "4D6963726F736F66742D57696E646F77732D534C432D436F6D706F6E656E742D457874656E64656453656375726974795570646174657341492C2043756C747572653D6E65757472616C2C2056657273696F6E3D362E312E373630332E32353030302C205075626C69634B6579546F6B656E3D333162663338353661643336346533352C2050726F636573736F724172636869746563747572653D616D6436342C2076657273696F6E53636F70653D4E6F6E537853" >nul
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /v "S256H" /t REG_BINARY /d "45D0AE442FD92CE32EE1DDC38EA3B875EAD9A53D6A17155A10FA9D9E16BEDEB2" >nul
				reg.exe add "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /v "c^!!EsuFoundation!" /t REG_BINARY /d "" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /ve /t REG_SZ /d "6.1" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228\6.1" /v "6.1.7603.25000" /t REG_BINARY /d "01" >nul
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228\6.1" /ve /t REG_SZ /d "6.1.7603.25000" >nul
			)

			call :UnMountImageRegistry

			echo.-------------------------------------------------------------------------------
			echo.%txtIntegratingWindows7ServicingStackUpdatesPackages%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Windows6.1-KB5006749-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegratingWindows7ExtendedSecurityUpdatesPackages%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Windows6.1-KB4575903-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegratingSecurityQualityRollup4Framework3Packages%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Windows6.1-KB4578952-%ImageArchitecture%.cab"
			echo.-------------------------------------------------------------------------------
			echo.%txtIntegratingWindows7SecurityMonthlyUpdatesPackages%
			echo.-------------------------------------------------------------------------------
			call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Windows6.1-KB5006743-%ImageArchitecture%.cab"

			call :MountImageRegistry "%InstallMount%\%%i"

			if /i "%ImageArchitecture%" equ "x86" (
				del /f /q "%InstallMount%\%%i\Windows\WinSxS\Manifests\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2.manifest" >nul
				reg.exe delete "HKLM\TK_COMPONENTS\DerivedData\Components\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_6eb019927ae880f2" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\x86_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_b26c9b4c15d241fc" /f >nul 2>&1
			)

			if /i "%ImageArchitecture%" equ "x64" (
				del /f /q "%InstallMount%\%%i\Windows\WinSxS\Manifests\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228.manifest" >nul
				reg.exe delete "HKLM\TK_COMPONENTS\DerivedData\Components\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_6.1.7603.25000_none_caceb5163345f228" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Winners\amd64_microsoft-windows-s..edsecurityupdatesai_31bf3856ad364e35_none_0e8b36cfce2fb332" /f >nul 2>&1
			)

			call :UnMountImageRegistry
		)

		if "%UpdateType%" equ "NET35" call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"
		if "%UpdateType%" equ "WAT" call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"
		if "%UpdateType%" equ "Windows10" call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

		if "%UpdateType%" equ "WinPE" (
			if "%IsBootImageSelected%" equ "Yes" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingWindowsPEUpdates2Boot%               
				echo.---------------------------------[Index : 2]-----------------------------------
				call :AddPackage "%BootMount%\2", "%_TMP%\Updates\%UpdateType%"
			)

			if "%IsRecoveryImageSelected%" equ "Yes" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingWindowsPEUpdates2WinRE%
				echo.---------------------------------[Index : 1]-----------------------------------
				call :AddPackage "%WinReMount%", "%_TMP%\Updates\%UpdateType%"
			)
		)

		if "%UpdateType%" equ "WUSatisfy" (
			call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

			if exist "%_TMP%\Updates\%UpdateType%\ProfessionalWMC\*.cab" (
				if /i "!ImageEdition%%i!" equ "ProfessionalWMC" (
					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingWindows81ProWMCEditionUpdates%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\ProfessionalWMC"
				)
			)
		)

		if "%UpdateType%" equ "ADLDS" (
			for /d %%j in (Professional, Enterprise, Ultimate) do (
				if /i "!ImageEdition%%i!" equ "%%j" (
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

					echo.-------------------------------------------------------------------------------
					echo.%txtIntegratingActiveDirectoryLightweightServicesUpdates%
					echo.-------------------------------------------------------------------------------
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Updates"
				)
			)
		)

		if "%UpdateType%" equ "FMApi" call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"
		if "%UpdateType%" equ "Features" call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

		if "%UpdateType%" equ "VirtualPC" (
			call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

			if "%IsW7SP1CRUSelected%" equ "No"  if exist "%_TMP%\Updates\%UpdateType%\Updates\*.cab" (
				echo.-------------------------------------------------------------------------------
				echo.%txtIntegratingMicrosoftVirtualPCFeatureUpdates%
				echo.-------------------------------------------------------------------------------
				call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Updates"
			)
		)

		if "%UpdateType%" equ "WorkFolders" (
			for /d %%j in (Professional, Enterprise, Ultimate) do (
				if /i "!ImageEdition%%i!" equ "%%j" (
					call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%"

					if "%IsW7SP1CRUSelected%" equ "No" if exist "%_TMP%\Updates\%UpdateType%\Updates\*.cab" (
						echo.-------------------------------------------------------------------------------
						echo.%txtIntegratingMicrosoftWorkFoldersFeatureUpdates%
						echo.-------------------------------------------------------------------------------
						call :AddPackage "%InstallMount%\%%i", "%_TMP%\Updates\%UpdateType%\Updates"
					)
				)
			)
		)
	)
)

if "%IsLogsEnabled%" equ "Yes" (
	echo.-------------------------------------------------------------------------------
	if "%UpdateType%" equ "WUpdates" echo.%txtGeneratingWindowsUpdatesIntegrationLOG%
	if "%UpdateType%" equ "General" echo.%txtGeneratingWHDGeneralUpdatesIntegrationLOG%
	if "%UpdateType%" equ "Hotfix" echo.%txtGeneratingWHDHotfixUpdatesIntegrationLOG%
	if "%UpdateType%" equ "Security" echo.%txtGeneratingWHDSecurityUpdatesIntegrationLOG%
	if "%UpdateType%" equ "ESU" echo.%txtGeneratingWHDExtendedSecurityUpdatesIntegrationLOG%
	if "%UpdateType%" equ "NET35" echo.%txtGeneratingMicrosoftFramework3UpdatesIntegrationLOG%
	if "%UpdateType%" equ "WAT" echo.%txtGeneratingWindowsActivationTechnologiesIntegrationLOG%
	if "%UpdateType%" equ "Windows10" echo.%txtGeneratingWin10UpgradePreparationUpdatesIntegrationLOG%
	if "%UpdateType%" equ "WinPE" echo.%txtGeneratingWindowsPEUpdatesIntegrationLOG%
	if "%UpdateType%" equ "WUSatisfy" echo.%txtGeneratingWindowsUpdateSatisfyUpdatesIntegrationLOG%
	if "%UpdateType%" equ "ADLDS" echo.%txtGeneratingActiveDirectoryLightweightIntegrationLOG%
	if "%UpdateType%" equ "FMApi" echo.%txtGeneratingFileManagementAPIIntegrationLOG%
	if "%UpdateType%" equ "Features" echo.%txtGeneratingWindowsFeaturesPackagesIntegrationLOG%
	if "%UpdateType%" equ "VirtualPC" echo.%txtGeneratingMicrosoftVirtualPCFeatureIntegrationLOG%
	if "%UpdateType%" equ "WorkFolders" echo.%txtGeneratingWorkFoldersIntegrationLOG%
	echo.-------------------------------------------------------------------------------
	echo.
	if "%UpdateType%" equ "WUpdates" echo.%txtWritingWindowsUpdatesIntegrationLog%
	if "%UpdateType%" equ "General" echo.%txtWritingWHDGeneralUpdatesIntegrationLog%
	if "%UpdateType%" equ "Hotfix" echo.%txtWritingWHDHotfixUpdatesIntegrationLog%
	if "%UpdateType%" equ "Security" echo.%txtWritingWHDSecurityUpdatesIntegrationLog%
	if "%UpdateType%" equ "ESU" echo.%txtWritingWHDExtendedSecurityUpdatesIntegrationLog%
	if "%UpdateType%" equ "NET35" echo.%txtWritingMicrosoftFramework3UpdatesIntegrationLog%
	if "%UpdateType%" equ "WAT" echo.%txtWritingWindowsActivationTechnologiesIntegrationLog%
	if "%UpdateType%" equ "Windows10" echo.%txtWritingWin10UpgradePreparationUpdatesIntegrationLog%
	if "%UpdateType%" equ "WinPE" echo.%txtWritingWindowsPEUpdatesIntegrationLog%
	if "%UpdateType%" equ "WUSatisfy" echo.%txtWritingWindowsUpdateSatisfyUpdatesIntegrationLog%
	if "%UpdateType%" equ "ADLDS" echo.%txtWritingActiveDirectoryLightweightIntegrationLog%
	if "%UpdateType%" equ "FMApi" echo.%txtWritingFileManagementAPIIntegrationLog%
	if "%UpdateType%" equ "Features" echo.%txtWritingWindowsFeaturesPackagesIntegrationLog%
	if "%UpdateType%" equ "VirtualPC" echo.%txtWritingMicrosoftVirtualPCFeatureIntegrationLog%
	if "%UpdateType%" equ "WorkFolders" echo.%txtWritingWorkFoldersIntegrationLog%

	for /l %%i in (1, 1, !ImageCount!) do (
		if exist "%InstallMount%\%%i\" call :GetPackages "%InstallMount%\%%i", "Updates-%%i.txt"
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtCleaningUpTemporaryFilesFolders%
echo.-------------------------------------------------------------------------------
echo.
:: Cleaning Up Windows/WHD Updates Temporary folder...
if "%UpdateType%" equ "WUpdates" echo.%txtCleaningUpWindowsUpdatesTemporary%
if "%UpdateType%" equ "General" echo.%txtCleaningUpWHDGeneralUpdatesTemporary%
if "%UpdateType%" equ "Hotfix" echo.%txtCleaningUpWHDHotfixUpdatesTemporary%
if "%UpdateType%" equ "Security" echo.%txtCleaningUpWHDSecurityUpdatesTemporary%
if "%UpdateType%" equ "ESU" echo.%txtCleaningUpWHDExtendedSecurityUpdatesTemporary%
if "%UpdateType%" equ "NET35" echo.%txtCleaningUpMicrosoftFramework3UpdatesTemporary%
if "%UpdateType%" equ "WAT" echo.%txtCleaningUpWindowsActivationTechnologiesTemporary%
if "%UpdateType%" equ "Windows10" echo.%txtCleaningUpWin10UpgradePreparationUpdatesTemporary%
if "%UpdateType%" equ "WinPE" echo.%txtCleaningUpWindowsPEUpdatesTemporary%
if "%UpdateType%" equ "WUSatisfy" echo.%txtCleaningUpWindowsUpdateSatisfyUpdatesTemporary%
if "%UpdateType%" equ "ADLDS" echo.%txtCleaningUpActiveDirectoryLightweightTemporary%
if "%UpdateType%" equ "FMApi" echo.%txtCleaningUpFileManagementAPITemporary%
if "%UpdateType%" equ "Features" echo.%txtCleaningUpWindowsFeaturesUpdatesTemporary%
if "%UpdateType%" equ "VirtualPC" echo.%txtCleaningUpMicrosoftVirtualPCFeatureTemporary%
if "%UpdateType%" equ "WorkFolders" echo.%txtCleaningUpSyncAgent4DomainEnvironmerntsTemporary%

call :RemoveFolder "%_TMP%\Updates"
echo.
echo.-------------------------------------------------------------------------------
if "%UpdateType%" equ "WUpdates" echo.%txtFinishedIntegratingWindowsUpdates2%
if "%UpdateType%" equ "General" echo.%txtFinishedIntegratingWHDGeneralUpdates2%
if "%UpdateType%" equ "Hotfix" echo.%txtFinishedIntegratingWHDHotfixUpdates2%
if "%UpdateType%" equ "Security" echo.%txtFinishedIntegratingWHDSecurityUpdates2%
if "%UpdateType%" equ "ESU" echo.%txtFinishedIntegratingWHDExtendedSecurityUpdates2%
if "%UpdateType%" equ "NET35" echo.%txtFinishedIntegratingMicrosoftFramework3Updates2%
if "%UpdateType%" equ "WAT" echo.%txtFinishedIntegratingWindowsActivationTechnologies2%
if "%UpdateType%" equ "Windows10" echo.%txtFinishedWind10UpgradePreparationUpdates2%
if "%UpdateType%" equ "WinPE" echo.%txtFinishedIntegratingWindowsPUpdates2%
if "%UpdateType%" equ "WUSatisfy" echo.%txtFinishedIntegratingWindowsUpdateSatisfyUpdates2%
if "%UpdateType%" equ "ADLDS" echo.%txtFinishedIntegratingActiveDirectoryLightweightFeature2%
if "%UpdateType%" equ "FMApi" echo.%txtFinishedIntegratingFileManagementAPIFeature2%
if "%UpdateType%" equ "Features" echo.%txtFinishedIntegratingWindowsFeaturesUpdates2%
if "%UpdateType%" equ "VirtualPC" echo.%txtFinishedIntegratingMicrosoftVirtualPCFeature2%
if "%UpdateType%" equ "WorkFolders" echo.%txtFinishedIntegratingSyncAgent4DomainEnvironmernts2%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set IsW7SP1CRUSelected=
set UpdateType=

endlocal

call :EnvironmentVariables

:: Get updated Image Information
if "!CurrentImageBuild!" equ "" (
	if "%ImageBuild%" gtr "17763" if "%ImageBuild%" leq "19044" (
		call :GetUpdatedImageInformation
	) >nul
)

:: Returning to Integrate Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Setup Media Updates
::-------------------------------------------------------------------------------------------
:IntWindowsSetupMediaUpdates

cls
echo.===============================================================================
echo.%txtUpdateWindowsSetupMedia%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtStartingUpdatingWindowsSetupMedia%
echo.-------------------------------------------------------------------------------
echo.

echo.%txtGettingWindowsSetupMediaLanguage%
echo.
for /f "tokens=1 delims= " %%l in ('%DISM% /Get-ImageInfo /ImageFile:"%BootWim%" /Index:2 ^| findstr.exe /I "Default"') do (set "ImageDefaultLanguage=%%l")
set "ImageDefaultLanguage=!ImageDefaultLanguage:~1!"
echo.%txtFoundWindowsSetupMediaLanguage% [!ImageDefaultLanguage!]
echo.
echo.%txtCopyingWindowsSetupMediaUpdate% ^<%DVD%^> %GlobalFolder%

:: Creating Directory Structures
call :CreateFolder "%DVD%"
call :CreateFolder "%DVD%\boot"
call :CreateFolder "%DVD%\efi"
call :CreateFolder "%DVD%\sources"
call :CreateFolder "%DVD%\boot\!ImageDefaultLanguage!"
call :CreateFolder "%DVD%\boot\fonts"
call :CreateFolder "%DVD%\boot\resources"
call :CreateFolder "%DVD%\efi\boot"
call :CreateFolder "%DVD%\efi\microsoft"
call :CreateFolder "%DVD%\efi\microsoft\boot"
call :CreateFolder "%DVD%\efi\microsoft\boot\fonts"
call :CreateFolder "%DVD%\efi\microsoft\boot\resources"
call :CreateFolder "%DVD%\sources\!ImageDefaultLanguage!"
call :CreateFolder "%DVD%\sources\inf"

copy /Y "%BootMount%\2\Windows\Boot\PCAT\bootmgr" "%DVD%\bootmgr" >nul
copy /Y "%BootMount%\2\Windows\Boot\EFI\bootmgr.efi" "%DVD%\bootmgr.efi" >nul
copy /Y "%BootMount%\2\setup.exe" "%DVD%\setup.exe" >nul
copy /Y "%BootMount%\2\Windows\Boot\DVD\PCAT\bcd" "%DVD%\boot\bcd" >nul
copy /Y "%BootMount%\2\Windows\Boot\DVD\PCAT\boot.sdi" "%DVD%\boot\boot.sdi" >nul
copy /Y "%BootMount%\2\Windows\Boot\DVD\PCAT\!ImageDefaultLanguage!\bootfix.bin" "%DVD%\boot\bootfix.bin" >nul
copy /Y "%BootMount%\2\Windows\System32\bootsect.exe" "%DVD%\boot\bootsect.exe" >nul
copy /Y "%BootMount%\2\Windows\Boot\DVD\PCAT\etfsboot.com" "%DVD%\boot\etfsboot.com" >nul
copy /Y "%BootMount%\2\Windows\Boot\PCAT\memtest.exe" "%DVD%\boot\memtest.exe" >nul
copy /Y "%BootMount%\2\Windows\System32\!ImageDefaultLanguage!\bootsect.exe.mui" "%DVD%\boot\!ImageDefaultLanguage!\bootsect.exe.mui" >nul
copy /Y "%BootMount%\2\Windows\Boot\Resources\bootres.dll" "%DVD%\boot\resources\bootres.dll" >nul
copy /Y "%BootMount%\2\Windows\Boot\DVD\EFI\!ImageDefaultLanguage!\efisys.bin" "%DVD%\efi\microsoft\boot\efisys.bin" >nul
copy /Y "%BootMount%\2\Windows\Boot\DVD\EFI\!ImageDefaultLanguage!\efisys_noprompt.bin" "%DVD%\efi\microsoft\boot\efisys_noprompt.bin" >nul
copy /Y "%BootMount%\2\Windows\Boot\EFI\memtest.efi" "%DVD%\efi\microsoft\boot\memtest.efi" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-advapi32-l1-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-advapi32-l1-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-advapi32-l1-1-1.dll" "%DVD%\sources\api-ms-win-downlevel-advapi32-l1-1-1.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-advapi32-l2-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-advapi32-l2-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-advapi32-l2-1-1.dll" "%DVD%\sources\api-ms-win-downlevel-advapi32-l2-1-1.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-advapi32-l3-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-advapi32-l3-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-advapi32-l4-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-advapi32-l4-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-kernel32-l1-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-kernel32-l1-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-kernel32-l2-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-kernel32-l2-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-ole32-l1-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-ole32-l1-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-ole32-l1-1-1.dll" "%DVD%\sources\api-ms-win-downlevel-ole32-l1-1-1.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-shlwapi-l1-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-shlwapi-l1-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-shlwapi-l1-1-1.dll" "%DVD%\sources\api-ms-win-downlevel-shlwapi-l1-1-1.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-user32-l1-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-user32-l1-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-user32-l1-1-1.dll" "%DVD%\sources\api-ms-win-downlevel-user32-l1-1-1.dll" >nul
copy /Y "%BootMount%\2\sources\api-ms-win-downlevel-version-l1-1-0.dll" "%DVD%\sources\api-ms-win-downlevel-version-l1-1-0.dll" >nul
copy /Y "%BootMount%\2\sources\appcompat.xsl" "%DVD%\sources\appcompat.xsl" >nul
copy /Y "%BootMount%\2\sources\appcompat_bidi.xsl" "%DVD%\sources\appcompat_bidi.xsl" >nul
copy /Y "%BootMount%\2\sources\appcompat_detailed_bidi_txt.xsl" "%DVD%\sources\appcompat_detailed_bidi_txt.xsl" >nul
copy /Y "%BootMount%\2\sources\appcompat_detailed_txt.xsl" "%DVD%\sources\appcompat_detailed_txt.xsl" >nul
copy /Y "%BootMount%\2\sources\arunimg.dll" "%DVD%\sources\arunimg.dll" >nul
copy /Y "%BootMount%\2\sources\arunres.dll" "%DVD%\sources\arunres.dll" >nul
copy /Y "%BootMount%\2\sources\autorun.dll" "%DVD%\sources\autorun.dll" >nul
copy /Y "%BootMount%\2\sources\cmisetup.dll" "%DVD%\sources\cmisetup.dll" >nul
copy /Y "%BootMount%\2\sources\compatprovider.dll" "%DVD%\sources\compatprovider.dll" >nul
copy /Y "%BootMount%\2\sources\compliance.ini" "%DVD%\sources\compliance.ini" >nul
copy /Y "%BootMount%\2\sources\cryptosetup.dll" "%DVD%\sources\cryptosetup.dll" >nul
copy /Y "%BootMount%\2\sources\diager.dll" "%DVD%\sources\diager.dll" >nul
copy /Y "%BootMount%\2\sources\diagnostic.dll" "%DVD%\sources\diagnostic.dll" >nul
copy /Y "%BootMount%\2\sources\dism.exe" "%DVD%\sources\dism.exe" >nul
copy /Y "%BootMount%\2\Windows\System32\dismapi.dll" "%DVD%\sources\dismapi.dll" >nul
copy /Y "%BootMount%\2\sources\dismcore.dll" "%DVD%\sources\dismcore.dll" >nul
copy /Y "%BootMount%\2\sources\dismcoreps.dll" "%DVD%\sources\dismcoreps.dll" >nul
copy /Y "%BootMount%\2\sources\dismprov.dll" "%DVD%\sources\dismprov.dll" >nul
copy /Y "%BootMount%\2\sources\drvmgrtn.dll" "%DVD%\sources\drvmgrtn.dll" >nul
copy /Y "%BootMount%\2\sources\du.dll" "%DVD%\sources\du.dll" >nul
copy /Y "%BootMount%\2\sources\folderprovider.dll" "%DVD%\sources\folderprovider.dll" >nul
copy /Y "%BootMount%\2\sources\hwcompat.dll" "%DVD%\sources\hwcompat.dll" >nul
copy /Y "%BootMount%\2\sources\hwcompat.txt" "%DVD%\sources\hwcompat.txt" >nul
copy /Y "%BootMount%\2\sources\hwexclude.txt" "%DVD%\sources\hwexclude.txt" >nul
copy /Y "%BootMount%\2\sources\idwbinfo.txt" "%DVD%\sources\idwbinfo.txt" >nul
copy /Y "%BootMount%\2\sources\imagingprovider.dll" "%DVD%\sources\imagingprovider.dll" >nul
copy /Y "%BootMount%\2\sources\input.dll" "%DVD%\sources\input.dll" >nul
copy /Y "%BootMount%\2\sources\lang.ini" "%DVD%\sources\lang.ini" >nul
copy /Y "%BootMount%\2\sources\locale.nls" "%DVD%\sources\locale.nls" >nul
copy /Y "%BootMount%\2\sources\logprovider.dll" "%DVD%\sources\logprovider.dll" >nul
copy /Y "%BootMount%\2\sources\msxml6.dll" "%DVD%\sources\msxml6.dll" >nul
copy /Y "%BootMount%\2\sources\msxml6r.dll" "%DVD%\sources\msxml6r.dll" >nul
copy /Y "%BootMount%\2\sources\ndiscompl.dll" "%DVD%\sources\ndiscompl.dll" >nul
copy /Y "%BootMount%\2\sources\nlsbres.dll" "%DVD%\sources\nlsbres.dll" >nul
copy /Y "%BootMount%\2\sources\ntdsupg.dll" "%DVD%\sources\ntdsupg.dll" >nul
copy /Y "%BootMount%\2\sources\offline.xml" "%DVD%\sources\offline.xml" >nul
copy /Y "%BootMount%\2\sources\pnpibs.dll" "%DVD%\sources\pnpibs.dll" >nul
copy /Y "%BootMount%\2\sources\reagent.dll" "%DVD%\sources\reagent.dll" >nul
copy /Y "%BootMount%\2\sources\rollback.exe" "%DVD%\sources\rollback.exe" >nul
copy /Y "%BootMount%\2\sources\schema.dat" "%DVD%\sources\schema.dat" >nul
copy /Y "%BootMount%\2\sources\sdbapiu.dll" "%DVD%\sources\sdbapiu.dll" >nul
copy /Y "%BootMount%\2\sources\segoeui.ttf" "%DVD%\sources\segoeui.ttf" >nul
copy /Y "%BootMount%\2\sources\setup.exe" "%DVD%\sources\setup.exe" >nul
copy /Y "%BootMount%\2\sources\setupplatform.cfg" "%DVD%\sources\setupplatform.cfg" >nul
copy /Y "%BootMount%\2\sources\setupplatform.dll" "%DVD%\sources\setupplatform.dll" >nul
copy /Y "%BootMount%\2\sources\setupplatform.exe" "%DVD%\sources\setupplatform.exe" >nul
copy /Y "%BootMount%\2\sources\smiengine.dll" "%DVD%\sources\smiengine.dll" >nul
copy /Y "%BootMount%\2\sources\spflvrnt.dll" "%DVD%\sources\spflvrnt.dll" >nul
copy /Y "%BootMount%\2\sources\spprgrss.dll" "%DVD%\sources\spprgrss.dll" >nul
copy /Y "%BootMount%\2\sources\spwizeng.dll" "%DVD%\sources\spwizeng.dll" >nul
copy /Y "%BootMount%\2\sources\spwizimg.dll" "%DVD%\sources\spwizimg.dll" >nul
copy /Y "%BootMount%\2\sources\spwizres.dll" "%DVD%\sources\spwizres.dll" >nul
copy /Y "%BootMount%\2\sources\sqmapi.dll" "%DVD%\sources\sqmapi.dll" >nul
copy /Y "%BootMount%\2\sources\ssshim.dll" "%DVD%\sources\ssshim.dll" >nul
copy /Y "%BootMount%\2\sources\unattend.dll" "%DVD%\sources\unattend.dll" >nul
copy /Y "%BootMount%\2\sources\unbcl.dll" "%DVD%\sources\unbcl.dll" >nul
copy /Y "%BootMount%\2\sources\upgloader.dll" "%DVD%\sources\upgloader.dll" >nul
copy /Y "%BootMount%\2\sources\upgrade_frmwrk.xml" "%DVD%\sources\upgrade_frmwrk.xml" >nul
copy /Y "%BootMount%\2\sources\upgreport.dll" "%DVD%\sources\upgreport.dll" >nul
copy /Y "%BootMount%\2\sources\uxlib.dll" "%DVD%\sources\uxlib.dll" >nul
copy /Y "%BootMount%\2\sources\uxlibres.dll" "%DVD%\sources\uxlibres.dll" >nul
copy /Y "%BootMount%\2\sources\vhdprovider.dll" "%DVD%\sources\vhdprovider.dll" >nul
copy /Y "%BootMount%\2\sources\w32uiimg.dll" "%DVD%\sources\w32uiimg.dll" >nul
copy /Y "%BootMount%\2\sources\w32uires.dll" "%DVD%\sources\w32uires.dll" >nul
copy /Y "%BootMount%\2\sources\warning.gif" "%DVD%\sources\warning.gif" >nul
copy /Y "%BootMount%\2\sources\wdsclient.dll" "%DVD%\sources\wdsclient.dll" >nul
copy /Y "%BootMount%\2\sources\wdsclientapi.dll" "%DVD%\sources\wdsclientapi.dll" >nul
copy /Y "%BootMount%\2\sources\wdscore.dll" "%DVD%\sources\wdscore.dll" >nul
copy /Y "%BootMount%\2\sources\wdscsl.dll" "%DVD%\sources\wdscsl.dll" >nul
copy /Y "%BootMount%\2\sources\wdsimage.dll" "%DVD%\sources\wdsimage.dll" >nul
copy /Y "%BootMount%\2\sources\wdstptc.dll" "%DVD%\sources\wdstptc.dll" >nul
copy /Y "%BootMount%\2\sources\wdsutil.dll" "%DVD%\sources\wdsutil.dll" >nul
copy /Y "%BootMount%\2\sources\wimprovider.dll" "%DVD%\sources\wimprovider.dll" >nul
copy /Y "%BootMount%\2\sources\win32ui.dll" "%DVD%\sources\win32ui.dll" >nul
copy /Y "%BootMount%\2\sources\winsetup.dll" "%DVD%\sources\winsetup.dll" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\arunres.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\arunres.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\cmisetup.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\cmisetup.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\compatprovider.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\compatprovider.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\dism.exe.mui" "%DVD%\sources\!ImageDefaultLanguage!\dism.exe.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\dismcore.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\dismcore.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\dismprov.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\dismprov.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\folderprovider.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\folderprovider.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\imagingprovider.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\imagingprovider.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\input.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\input.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\logprovider.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\logprovider.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\msxml6r.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\msxml6r.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\nlsbres.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\nlsbres.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\pnpibs.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\pnpibs.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\rollback.exe.mui" "%DVD%\sources\!ImageDefaultLanguage!\rollback.exe.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\setup.exe.mui" "%DVD%\sources\!ImageDefaultLanguage!\setup.exe.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\setup_help_upgrade_or_custom.rtf" "%DVD%\sources\!ImageDefaultLanguage!\setup_help_upgrade_or_custom.rtf" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\smiengine.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\smiengine.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\spwizres.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\spwizres.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\upgloader.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\upgloader.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\uxlibres.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\uxlibres.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\vhdprovider.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\vhdprovider.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\vofflps.rtf" "%DVD%\sources\!ImageDefaultLanguage!\vofflps.rtf" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\w32uires.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\w32uires.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\wdsclient.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\wdsclient.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\wdsimage.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\wdsimage.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\wimprovider.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\wimprovider.dll.mui" >nul
copy /Y "%BootMount%\2\sources\!ImageDefaultLanguage!\winsetup.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\winsetup.dll.mui" >nul
copy /Y "%BootMount%\2\sources\inf\setup.cfg" "%DVD%\sources\inf\setup.cfg" >nul

if exist "%InstallMount%\!SpecifiedSourceIndex!" (
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\chs_boot.ttf" "%DVD%\boot\fonts\chs_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\cht_boot.ttf" "%DVD%\boot\fonts\cht_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\jpn_boot.ttf" "%DVD%\boot\fonts\jpn_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\kor_boot.ttf" "%DVD%\boot\fonts\kor_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\malgunn_boot.ttf" "%DVD%\boot\fonts\malgunn_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\malgun_boot.ttf" "%DVD%\boot\fonts\malgun_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\meiryon_boot.ttf" "%DVD%\boot\fonts\meiryon_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\meiryo_boot.ttf" "%DVD%\boot\fonts\meiryo_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\msjhn_boot.ttf" "%DVD%\boot\fonts\msjhn_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\msjh_boot.ttf" "%DVD%\boot\fonts\msjh_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\msyhn_boot.ttf" "%DVD%\boot\fonts\msyhn_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\msyh_boot.ttf" "%DVD%\boot\fonts\msyh_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\segmono_boot.ttf" "%DVD%\boot\fonts\segmono_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\segoen_slboot.ttf" "%DVD%\boot\fonts\segoen_slboot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\segoe_slboot.ttf" "%DVD%\boot\fonts\segoe_slboot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\wgl4_boot.ttf" "%DVD%\boot\fonts\wgl4_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\chs_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\chs_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\cht_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\cht_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\jpn_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\jpn_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\kor_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\kor_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\malgunn_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\malgunn_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\malgun_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\malgun_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\meiryon_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\meiryon_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\meiryo_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\meiryo_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\msjhn_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\msjhn_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\msjh_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\msjh_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\msyhn_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\msyhn_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\msyh_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\msyh_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\segmono_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\segmono_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\segoen_slboot.ttf" "%DVD%\efi\microsoft\boot\fonts\segoen_slboot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\segoe_slboot.ttf" "%DVD%\efi\microsoft\boot\fonts\segoe_slboot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Boot\Fonts\wgl4_boot.ttf" "%DVD%\efi\microsoft\boot\fonts\wgl4_boot.ttf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\apppatch\acres.dll" "%DVD%\sources\acres.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\actionqueue.dll" "%DVD%\sources\actionqueue.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\aeinv.dll" "%DVD%\sources\aeinv.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\cmi2migxml.dll" "%DVD%\sources\cmi2migxml.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\cmifw.dll" "%DVD%\sources\cmifw.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\compatctrl.dll" "%DVD%\sources\compatctrl.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\compatresources.dll" "%DVD%\sources\compatresources.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\csiagent.dll" "%DVD%\sources\csiagent.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\devinv.dll" "%DVD%\sources\devinv.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\apppatch\drvmain.sdb" "%DVD%\sources\drvmain.sdb" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\drvmain32.sdb" "%DVD%\sources\drvmain32.sdb" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\drvmain64.sdb" "%DVD%\sources\drvmain64.sdb" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\WinSxS\x86_microsoft-windows-servicingstack-net_31bf3856ad364e35_6.3.9600.17031_none_d358249e46914d92\firewallofflineapi.dll" "%DVD%\sources\firewallofflineapi.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\oobe\installeventres.dll" "%DVD%\sources\installeventres.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\luainstall.dll" "%DVD%\sources\luainstall.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\migapp.xml" "%DVD%\sources\migapp.xml" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\migcore.dll" "%DVD%\sources\migcore.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\mighost.exe" "%DVD%\sources\mighost.exe" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migisol.dll" "%DVD%\sources\migisol.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\migres.dll" "%DVD%\sources\migres.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\migstore.dll" "%DVD%\sources\migstore.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\migsys.dll" "%DVD%\sources\migsys.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\mxeagent.dll" "%DVD%\sources\mxeagent.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\queryappblock.exe" "%DVD%\sources\queryappblock.exe" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\PolicyDefinitions\reagent.admx" "%DVD%\sources\reagent.admx" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\Recovery\reagent.xml" "%DVD%\sources\reagent.xml" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\setupcompat.dll" "%DVD%\sources\setupcompat.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sfcn.dat" "%DVD%\sources\sfcn.dat" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sflcid.dat" "%DVD%\sources\sflcid.dat" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sflistw7.dat" "%DVD%\sources\sflistw7.dat" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sflistw8.dat" "%DVD%\sources\sflistw8.dat" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sflistw8.woa.dat" "%DVD%\sources\sflistw8.woa.dat" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sflistwb.dat" "%DVD%\sources\sflistwb.dat" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sflistwb.woa.dat" "%DVD%\sources\sflistwb.woa.dat" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sfpat.inf" "%DVD%\sources\sfpat.inf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sfpatw7.inf" "%DVD%\sources\sfpatw7.inf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sfpatw8.inf" "%DVD%\sources\sfpatw8.inf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\sfpatwb.inf" "%DVD%\sources\sfpatwb.inf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\apppatch\sysmain.sdb" "%DVD%\sources\sysmain.sdb" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\sysmain32.sdb" "%DVD%\sources\sysmain32.sdb" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\sysmain64.sdb" "%DVD%\sources\sysmain64.sdb" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\wica.dll" "%DVD%\sources\wica.dll" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\wica.ini" "%DVD%\sources\wica.ini" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\CompatTel\wicainventory.exe" "%DVD%\sources\wicainventory.exe" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\apppatch\!ImageDefaultLanguage!\acres.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\acres.dll.mui" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\!ImageDefaultLanguage!\actionqueue.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\actionqueue.dll.mui" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\Help\!ImageDefaultLanguage!\credits.rtf" "%DVD%\sources\!ImageDefaultLanguage!\credits.rtf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\!ImageDefaultLanguage!\dismapi.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\dismapi.dll.mui" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\!ImageDefaultLanguage!\erofflps.txt" "%DVD%\sources\!ImageDefaultLanguage!\erofflps.txt" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\oobe\!ImageDefaultLanguage!\installeventres.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\installeventres.dll.mui" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\!ImageDefaultLanguage!\migcore.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\migcore.dll.mui" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\migwiz\!ImageDefaultLanguage!\migres.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\migres.dll.mui" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\oobe\!ImageDefaultLanguage!\oobe_help_opt_in_details.rtf" "%DVD%\sources\!ImageDefaultLanguage!\oobe_help_opt_in_details.rtf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\oobe\!ImageDefaultLanguage!\privacy.rtf" "%DVD%\sources\!ImageDefaultLanguage!\privacy.rtf" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\PolicyDefinitions\!ImageDefaultLanguage!\reagent.adml" "%DVD%\sources\!ImageDefaultLanguage!\reagent.adml" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\!ImageDefaultLanguage!\reagent.dll.mui" "%DVD%\sources\!ImageDefaultLanguage!\reagent.dll.mui" >nul
)

rem "%DVD%\efi\boot\bootia32.efi" >nul
rem "%DVD%\efi\microsoft\boot\cdboot.efi" >nul
rem "%DVD%\efi\microsoft\boot\cdboot_noprompt.efi" >nul
rem "%DVD%\efi\microsoft\boot\resources\bootres.dll" >nul
rem "%DVD%\sources\adfscomp.dll" >nul
rem "%DVD%\sources\admtv3check.dll" >nul
rem "%DVD%\sources\alert.gif" >nul
rem "%DVD%\sources\appcompat_detailed.xsl" >nul
rem "%DVD%\sources\appcompat_detailed_bidi.xsl" >nul
rem "%DVD%\sources\background_cli.bmp" >nul
rem "%DVD%\sources\cdplib.mof" >nul
rem "%DVD%\sources\cdplibuninstall.mof" >nul
rem "%DVD%\sources\clustercompliance.dll" >nul
rem "%DVD%\sources\compres.dll" >nul
rem "%DVD%\sources\cversion.ini" >nul
rem "%DVD%\sources\db_msftproductionwindowssigningca.cer" >nul
rem "%DVD%\sources\drvmainarm.sdb" >nul
rem "%DVD%\sources\fveupg.dll" >nul
rem "%DVD%\sources\hwcompatPE.txt" >nul
rem "%DVD%\sources\hwexcludePE.txt" >nul
rem "%DVD%\sources\hypervcomplcheck.dll" >nul
rem "%DVD%\sources\iiscomp.dll" >nul
rem "%DVD%\sources\install.exe" >nul
rem "%DVD%\sources\installprep.exe" >nul
rem "%DVD%\sources\itgtupg.dll" >nul
rem "%DVD%\sources\migtestplugin.dll" >nul
rem "%DVD%\sources\ntfrsupg.dll" >nul
rem "%DVD%\sources\nxquery.cat" >nul
rem "%DVD%\sources\nxquery.inf" >nul
rem "%DVD%\sources\nxquery.sys" >nul
rem "%DVD%\sources\oscomps.woa.xml" >nul
rem "%DVD%\sources\oscomps.xml" >nul
rem "%DVD%\sources\osfilter.inf" >nul
rem "%DVD%\sources\outofbox_windows_db.bin" >nul
rem "%DVD%\sources\postrollback.exe" >nul
rem "%DVD%\sources\quirks.ait" >nul
rem "%DVD%\sources\rdsupgcheck.dll" >nul
rem "%DVD%\sources\reportgen.dll" >nul
rem "%DVD%\sources\rmsupg.dll" >nul
rem "%DVD%\sources\setuperror.exe" >nul
rem "%DVD%\sources\setupresume.exe" >nul
rem "%DVD%\sources\sfpatpg.inf" >nul
rem "%DVD%\sources\telemetry.xsd" >nul
rem "%DVD%\sources\uddicomp.dll" >nul
rem "%DVD%\sources\upgcompat.inf" >nul" >nul
rem "%DVD%\sources\upgdriver.dll" >nul" >nul
rem "%DVD%\sources\upgradeagent.dll" >nul
rem "%DVD%\sources\upgradeagent.xml" >nul
rem "%DVD%\sources\upgrade_bulk.xml" >nul
rem "%DVD%\sources\upgrade_data.xml" >nul
rem "%DVD%\sources\upgwow_bulk.xml" >nul
rem "%DVD%\sources\wdsupgcompl.dll" >nul
rem "%DVD%\sources\wicadevicefilters.xml" >nul
rem "%DVD%\sources\wicatel.dll" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\compatctrl.dll.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\compatresources.dll.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\compres.dll.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\install.exe.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\installprep.exe.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\postrollback.exe.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\setupcompat.dll.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\setuperror.exe.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\setupplatform.exe.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\setupresume.exe.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\setup_help_whattokeep.rtf" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\upgdriver.dll.mui" >nul
rem "%DVD%\sources\!ImageDefaultLanguage!\upgreport.dll.mui" >nul
echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedUpdatingWindowsSetupMedia%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows 8.1 Media Center Generic Activation Tokens to Install Image
::-------------------------------------------------------------------------------------------
:IntWMCGActTokens

if "%IsDialogsEnabled%" equ "Yes" if "!IntWMCGActTokens_Warning!" equ "" (
	cls
	echo.===============================================================================
	echo.%GlobalIntegrateWind81MediaCenterGenericActivationTokens%
	echo.===============================================================================
	echo.
	echo.
	echo.                            %txtIntegrateWind81Information%
	echo.                            =====================
	echo.
	echo.  %txtIntegrateWind81Informationline1=%
	echo.  %txtIntegrateWind81Informationline2%
	echo.  %txtIntegrateWind81Informationline3%
	echo.
	echo.  %txtIntegrateWind81Informationline4%
	echo.  %txtIntegrateWind81Informationline5%
	echo.  %txtIntegrateWind81Informationline6%
	echo.
	echo.  %txtIntegrateWind81Informationline7%
	echo.  %txtIntegrateWind81Informationline8%
	echo.
	echo.   %GlobalDisableDialogs_line01%
	echo.   %GlobalDisableDialogs_line02%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%GlobalChoice_continue% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "IntWMCGActTokens_Warning=0"
)

cls
echo.===============================================================================
echo.%GlobalIntegrateWind81MediaCenterGenericActivationTokens%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingWind81MediaCenterGenericActivationTokens%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingWind81MediaCenterGenericActivationTokens%
echo.-------------------------------------------------------------------------------
echo.

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		if /i "%ImageEdition%" equ "ProfessionalWMC" call :ApplyImage "%WMCGActTokens%", 1, "%InstallMount%\%%i"
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingWind81MediaCenterGenericActivationTokens%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Pre-Activation Data
::-------------------------------------------------------------------------------------------
:IntPreActTokens

if "%IsDialogsEnabled%" equ "Yes" if "!IntPreActTokens_Warning!" equ "" (
	cls
	echo.===============================================================================
	echo.%GlobalIntegrateWin81PreActivationData%
	echo.===============================================================================
	echo.
	echo. %txtIntegrateWin81PreActivationDataline1%
	echo. %txtIntegrateWin81PreActivationDataline2%
	echo. %txtIntegrateWin81PreActivationDataline3%
	echo.
	echo. %txtIntegrateWin81PreActivationDataline4%
	echo. %txtIntegrateWin81PreActivationDataline5%
	echo.
	echo. %txtIntegrateWin81PreActivationDataline6%
	echo. -------------
	echo. 1^) %txtIntegrateWin81PreActivationDataline7%
	echo.
	echo. 2^) %txtIntegrateWin81PreActivationDataline8%
	echo.
	echo.    - "data.dat" %txtIntegrateWin81PreActivationDataline9op1% "<%SytemDrive%\Windows\System32\spp\store>" %GlobalFolder3%
	echo.    - "tokens.dat" %txtIntegrateWin81PreActivationDataline9op1% "<%SytemDrive%\Windows\System32\spp\store>" %GlobalFolder3%
	echo.    - "cache.dat" %txtIntegrateWin81PreActivationDataline9op1% "<%SytemDrive%\Windows\System32\spp\store>" %GlobalFolder3%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%GlobalChoice_continue% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "IntPreActTokens_Warning=0"
)

cls
echo.===============================================================================
echo.%GlobalIntegrateWin81PreActivationData%
echo.===============================================================================
echo.

:: Settings Windows Pre-Activation Details folder path
set "PreActTokens=%PreActTokens%\%SelectedSourceOS%\%ImageArchitecture%"

:: Checking whether Windows Pre-Activation Token data files exist
if not exist "!PreActTokens!\data.dat" if not exist "!PreActTokens!\cache.dat" if not exist "!PreActTokens!\tokens.dat" (
	echo.%txtWindowsPreActivationTokenFilesFolder% ^<Packs\PreActTokens\%SelectedSourceOS%\%ImageArchitecture%^> %txtWindowsPreActivationTokenFilesFolderIsEmpty%
	echo.
	choice /C:YN /N /M "%txtDoyouwant2copyActivation% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 (
		echo.
		echo.%txtCopyPreActivationTokenFiles%
		goto :Stop
	)
	if errorlevel 1 (
		echo.
		echo.%txtCopyingPreActivationTokenFiles% ^<System32\Spp\store\2.0^>
		Xcopy /O /H /R /K /Y "%SystemROOT%\System32\spp\store\2.0\data.dat" !PreActTokens! >nul
		Xcopy /O /H /R /K /Y "%SystemROOT%\System32\spp\store\2.0\tokens.dat" !PreActTokens! >nul
		Xcopy /O /H /R /K /Y "%SystemROOT%\System32\spp\store\2.0\cache\cache.dat" !PreActTokens! >nul
	)
)

cls
echo.===============================================================================
echo.%GlobalIntegrateWin81PreActivationData%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingWin81PreActivationData%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtGettingWin81ActivationProductKey%
echo.-------------------------------------------------------------------------------
echo.
set /p "ProductKey=%txtEnterProductKey% "
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingWin81PreActivation%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegratingWin81ProductKey% [%ProductKey%]...
		echo.-------------------------------------------------------------------------------
		%DISM% /Image:"%InstallMount%\%%i" /Set-ProductKey:%ProductKey%
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtIntegratingWin81PreActivatedToken%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%txtCopyingWin81PreActivatedToken%
		Xcopy /O /H /R /K /Y !PreActTokens!\tokens.dat "%InstallMount%\%%i\Windows\System32\spp\store\2.0"
		Xcopy /O /H /R /K /Y !PreActTokens!\data.dat "%InstallMount%\%%i\Windows\System32\spp\store\2.0"
		Xcopy /O /H /R /K /Y !PreActTokens!\cache.dat "%InstallMount%\%%i\Windows\System32\spp\store\2.0\cache"
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingWin81PreActivation%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Terminal Server Patch
::-------------------------------------------------------------------------------------------
:IntCustomTerminalServer

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftTerminalServerPatch%
echo.===============================================================================
echo.

:: Setting Terminal Server path according to selected Source OS
set "CustomTerminalServer=%CustomTerminalServer%\%SelectedSourceOS%\%ImageArchitecture%"

:: Checking whether Microsoft Terminal Server Patch Pack file exist
if not exist "!CustomTerminalServer!\termsrv.dll" (
	echo.%txtMicrosoftTerminalServerPatch% "termsrv.dll" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Custom\TerminalServer\%SelectedSourceOS%\%ImageArchitecture%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingMicrosoftTerminalServerPatch%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingMicrosoftTerminalServerPatch%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.-------------------------------------------------------------------------------
		echo.%txtCopyingPatchedMicrosoftTerminalServer%
		echo.-------------------------------------------------------------------------------
		echo.
		%XCopy% "!CustomTerminalServer!\*.*" "%InstallMount%\%%i\Windows\System32"
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtImportingMicrosoftTerminalServerPatchRegistry%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%InstallMount%\%%i"
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Terminal Server" /v "fDenyTSConnections" /t REG_DWORD /d "0" /f >nul
		reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Terminal Server" /v "fSingleSessionPerUser" /t REG_DWORD /d "0" /f >nul
		echo.
		echo.
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry
		echo.
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingMicrosoftTerminalServer%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Custom UxTheme Patch
::-------------------------------------------------------------------------------------------
:IntCustomUxTheme

cls
echo.===============================================================================
echo.%txtIntegrateCustomUxThemePatch%
echo.===============================================================================
echo.

:: Setting Custom UxTheme Patch Pack files path according to selected Source OS
set "CustomUxTheme=%CustomUxTheme%\%SelectedSourceOS%\%ImageArchitecture%"

:: Checking whether Custom UxTheme Patch Pack file exist
if "%SelectedSourceOS%" equ "w7" (
	for %%i in (themeservice.dll, themeui.dll, uxtheme.dll) do (
		if not exist "!CustomUxTheme!\%%i" (
			echo.%txtCustomUxThemePatch% "%%i" %GlobalNotFound%
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Custom\UxTheme\%SelectedSourceOS%\%ImageArchitecture%^> %GlobalFolder%
			goto :Stop
		)
	)
)

:: Checking whether Custom UxTheme Patch Pack file exist
if "%SelectedSourceOS%" neq "w7" (
	for %%i in (themeui.dll, UXInit.dll, uxtheme.dll) do (
		if not exist "!CustomUxTheme!\%%i" (
			echo.%txtCustomUxThemePatch% "%%i" %GlobalNotFound%
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Custom\UxTheme\%SelectedSourceOS%\%ImageArchitecture%^> %GlobalFolder%
			goto :Stop
		)
	)
)
echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingCustomUxTheme%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingCustomUxTheme%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.%txtCopyingCustomUxTheme%
		echo.
		%XCopy% "!CustomUxTheme!\*.*" "%InstallMount%\%%i\Windows\System32"
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingCustomUxTheme%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Custom Windows Recovery Image
::-------------------------------------------------------------------------------------------
:IntCustomRecoveryImage

cls
echo.===============================================================================
echo.%txtIntegrateCustomWindowsRecoveryImage%
echo.===============================================================================
echo.

:: Discarding & Un-Mounting Source Recovery Images
if "%IsRecoveryImageSelected%" equ "Yes" (
	choice /C:NY /N /M "%txtDoYouWant2DiscardingUnMountingRecoveryImage% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 (
		if exist "%InstallMount%\!SpecifiedSourceIndex!" if exist "%WinReMount%\Windows" (
			echo.-------------------------------------------------------------------------------
			echo.%GlobalUnMountingImage% !SpecifiedSourceIndex! -^> WinRE.wim] %GlobalWIMImage%
			echo.-------------------------------------------------------------------------------
			call :UnMountImage "%WinReMount%", "Discard"
			call :RemoveFolder "%WinReMount%"
		)
		set "IsRecoveryImageSelected=No"
	)
	if errorlevel 1 (
		:: Checking whether Source Windows Recovery Image is selected
		echo.%txtWindowsRecoveryImageSelected%
		echo.
		echo.%txtPleaseSkipWindowsRecoveryImageWhileSelecting%
		goto :Stop
	)
)

:: Setting Custom Windows Recovery Image file path according to selected Source OS
set "RecoveryImage=%CustomRecoveryImage%\%SelectedSourceOS%\%ImageArchitecture%\winre.wim"

:: Checking whether Custom Windows Recovery Image file exist
if not exist "%RecoveryImage%" (
	echo.%txtCustomWindowsRecoveryImageFileWinre% %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Custom\RecoveryImage\%SelectedSourceOS%\%ImageArchitecture%^> %GlobalFolder%
	goto :Stop
)
echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingCustomWindowsRecovery%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingCustomWindowsRecovery%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		echo.
		echo.
		echo.===============================================================================
		if %%i leq 9 echo.        [WinRE.wim] --^> [install.wim, %GlobalIndex% :  %%i - %GlobalEdition% : !ImageEdition%%i!]
		if %%i gtr 9 echo.        [WinRE.wim] --^> [install.wim, %GlobalIndex% : %%i - %GlobalEdition% : !ImageEdition%%i!]
		echo.===============================================================================
		echo.
		echo.%txtCopyingCustomWindowsRecovery%
		copy /Y "%RecoveryImage%" "%InstallMount%\%%i\Windows\System32\Recovery" >nul
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingCustomWindowsRecovery%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Custom Default User Account Pictures
::-------------------------------------------------------------------------------------------
:IntUAP

cls
echo.===============================================================================
echo.%txtIntegrateCustomDefaultUserAccountPictures%
echo.===============================================================================
echo.

:: Setting Custom User Account Pictures path according to selected Source OS
set "UAP=%UAP%\%SelectedSourceOS%"

if "%SelectedSourceOS%" equ "w7" (
	:: Checking whether Custom Default User Account Pictures Pack file exist
	if "%ImageInstallationType:~,6%" neq "Server" (
		if not exist "!UAP!\user.bmp" (
			echo.%GlobalCustomDefaultUserAccountPicturesPack% "user.bmp" %GlobalNotFound%
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\UAP\%SelectedSourceOS%^> %GlobalFolder%
			goto :Stop
		)
	)

	:: Checking whether Custom Default User Account Pictures Pack file exist
	if "%ImageInstallationType:~,6%" equ "Server" (
		if not exist "!UAP!\user.bmp" (
			echo.%GlobalCustomDefaultUserAccountPicturesPack% "user.bmp" %GlobalNotFound%
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\UAP\%SelectedSourceOS%^> %GlobalFolder%
			goto :Stop
		)
	)
)

:: Checking whether Custom Default User Account Pictures Pack file exist
if "%SelectedSourceOS%" equ "w81" (
	for %%i in (guest.bmp, guest.png, user.bmp, user.png, user-40.png, user-200.png) do (
		if not exist "!UAP!\%%i" (
			echo.%GlobalCustomDefaultUserAccountPicturesPack% "%%i" %GlobalNotFound%
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\UAP\%SelectedSourceOS%^> %GlobalFolder%
			goto :Stop
		)
	)
)

:: Checking whether Custom Default User Account Pictures Pack file exist
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	for %%i in (guest.bmp, guest.png, user.bmp, user.png, user-32.png, user-40.png, user-48.png, user-192.png, user-200.png) do (
		if not exist "!UAP!\%%i" (
			echo.%GlobalCustomDefaultUserAccountPicturesPack% "%%i" %GlobalNotFound%
			echo.
			echo.%GlobalPleaseCopyFileto% ^<Packs\UAP\%SelectedSourceOS%^> %GlobalFolder%
			goto :Stop
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingCustomDefaultUserAccountPictures%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingCustomDefaultUserAccountPictures%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.%txtCopyingCustomDefaultUserAccountPictures%
		echo.

		if "%SelectedSourceOS%" equ "w7" if "%ImageInstallationType%" neq "Server Core" (
			if "%ImageInstallationType:~,6%" neq "Server" %XCopy% "!UAP!\*.*" "%InstallMount%\%%i\ProgramData\Microsoft\User Account Pictures"
			if "%ImageInstallationType:~,6%" equ "Server" %XCopy% "!UAP!\user.bmp" "%InstallMount%\%%i\ProgramData\Microsoft\User Account Pictures"
		)

		if "%SelectedSourceOS%" neq "w7" %XCopy% "!UAP!\*.*" "%InstallMount%\%%i\ProgramData\Microsoft\User Account Pictures"
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingCustomDefaultUserAccountPictures%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Custom System Files
::-------------------------------------------------------------------------------------------
:IntCustomFiles

cls
echo.===============================================================================
echo.%txtIntegrateCustomSystemFiles%
echo.===============================================================================
echo.

:: Setting Custom System files path according to selected Source OS
if exist "%CustomFiles%\w10_w11\%ImageArchitecture%" (
	set "CustomFiles=%CustomFiles%\w10_w11\%ImageArchitecture%"
) else (
	set "CustomFiles=%CustomFiles%\%SelectedSourceOS%\%ImageArchitecture%"
)

:: Checking whether Custom System files Pack file exist
for /f %%i in ('dir /b /s /a:-d "!CustomFiles!\*.*" 2^>nul ^| find.exe /I /v /c ""') do (
	if "%%i" equ "0" (
		echo.%txtCustomSystemFilesPackEmpty%
		echo.
		if exist "%CustomFiles%\w10_w11\%ImageArchitecture%" (
			echo.%GlobalCopyCustomSystemFiles% ^<Custom\Files\w10_w11\%ImageArchitecture%^> %GlobalFolder%
		) else (
			echo.%GlobalCopyCustomSystemFiles% ^<Custom\Files\%SelectedSourceOS%\%ImageArchitecture%^> %GlobalFolder%
		)
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingCustomSystemFiles%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingCustomSystemFiles%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.%txtCopyCustomSystemFiles%
		echo.
		%XCopy% "!CustomFiles!\*.*" "%InstallMount%\%%i"
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingCustomSystemFiles%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Custom Fonts
::-------------------------------------------------------------------------------------------
:IntCustomFonts

cls
echo.===============================================================================
echo.%txtIntegrateCustomFonts%
echo.===============================================================================
echo.

:: Checking whether Custom Fonts Pack file exist
for /f %%i in ('dir /b /s /a:-d "%CustomFonts%\*.ttf" 2^>nul ^| find.exe /I /v /c ""') do (
	if "%%i" equ "0" (
		echo.%txtCustomFontsPackFolderEmpty%
		echo.
		echo.%txtCopyFontFiles% ^<Custom\Fonts^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegrateCustomFonts%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingCustomFonts%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		call :MountImageRegistry "%InstallMount%\%%i"
		PowerShell.exe -Executionpolicy RemoteSigned -File "%Bin%\AddFonts.ps1" -mountPath "%InstallMount%\%%i\Windows\Fonts" -fontsPath "%CustomFonts%"
		call :UnMountImageRegistry
		echo.
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingCustomFonts%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Microsoft Win32Calc Metro Skin
::-------------------------------------------------------------------------------------------
:IntWin32CalcMetroSkin

cls
echo.===============================================================================
echo.%txtIntegrateMicrosoftWin32CalcMetroSkin%
echo.===============================================================================
echo.

set "Skins=%Skins%\Win32Calc"

:: Checking whether Microsoft Win32Calc Metro Skin Pack file exist
if not exist "!Skins!\Win32Calc.exe.res" (
	echo.%txtMicrosoftWin32CalcMetroSkinPack% "Win32Calc.exe.res" %GlobalNotFound%
	echo.
	echo.%GlobalPleaseCopyFileto% ^<Packs\Skins\Win32Calc^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegrateMicrosoftWin32CalcMetroSkin%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingMicrosoftWin32CalcMetroSkin%
echo.-------------------------------------------------------------------------------

copy /Y "%ResourceHacker%" "%TempResourceHacker%" >nul

if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\Win32Calc.exe" (
	echo.
	echo.%txtCopyingMicrosoftWin32CalcFiles2Temporary%
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\Win32Calc.exe" "%_TMP%\Win32Calc.bak" >nul

	if /i "%ImageArchitecture%" equ "x64" (
		copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\Win32Calc.exe" "%_TMP%\Win32Calc_wow64.bak" >nul
	)
) else (
	if "%ImageInstallationType%" neq "Server Core" if /i "%ImageArchitecture%" neq "arm64" (
		echo.%txtMicrosoftWin32CalculatorNot%
		echo.%txtMicrosoftWin32CalculatorApply%
		echo.
		choice /C:YN /N /M "%txtDoYou2IntegrateMicrosoftWin32Calculator% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
		if errorlevel 2 goto :Stop
		call :IntWin32Calc
	)
)

echo.
echo.%txtApplyingMicrosoftWin32CalcMetroSkin%
echo.    %GlobalPatchingMetroSkinpos01% [Win32Calc.exe] %GlobalPatchingMetroSkinpos02%
"%TempResourceHacker%" -addoverwrite "%_TMP%\Win32Calc.bak", "%_TMP%\Win32Calc.exe", "!Skins!\Win32Calc.exe.res" ,,,

if /i "%ImageArchitecture%" equ "x64" (
	echo.    %GlobalPatchingMetroSkinpos01% [Win32Calc_wow64.exe] %GlobalPatchingMetroSkinpos02%
	"%TempResourceHacker%" -addoverwrite "%_TMP%\Win32Calc_wow64.bak", "%_TMP%\Win32Calc_wow64.exe", "!Skins!\Win32Calc.exe.res" ,,,
)

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		echo.
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.%txtCopyingPatchedMicrosoftWin32Calc%
		echo.
		echo.%GlobalCopying% [Win32Calc.exe] %GlobalCopyingFileTo%
		echo.        %GlobalCopyingFilePatchop01% [\Windows\System32\Win32Calc.exe] %GlobalCopyingFilePatchop02%
		copy /Y "%_TMP%\Win32Calc.exe" "%InstallMount%\%%i\Windows\System32\Win32Calc.exe" >nul

		if /i "%ImageArchitecture%" equ "x64" (
			echo.%GlobalCopying% [Win32Calc_wow64.exe] %GlobalCopyingFileTo%
			echo.        %GlobalCopyingFilePatchop01% [\Windows\SysWOW64\Win32Calc.exe] %GlobalCopyingFilePatchop02%
			copy /Y "%_TMP%\Win32Calc_wow64.exe" "%InstallMount%\%%i\Windows\SysWOW64\Win32Calc.exe" >nul
		)
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegrateMicrosoftWin32CalcMetroSkin%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Sun Valley Icons Skin
::-------------------------------------------------------------------------------------------
:IntWIconsSkin

cls
echo.===============================================================================
echo.%txtIntegrateWindowsSunValleyIconsSkin%
echo.===============================================================================
echo.

set "Skins=%Skins%\Icons"

:: Checking whether Windows Sun Valley Icons Skin Pack file exist
for %%i in (cmd.exe.res, imageres.dll.res, imagesp1.dll.res, mydocs.dll.res, SnippingTool.exe.res, shell32.dll.res, taskmgr.exe.res, Win32Calc.exe.res, zipfldr.dll.res) do (
	if not exist "%Skins%\%%i" (
		echo.%txtWindowsSunValleyIconsSkinPack% "%%i" %GlobalNotFound%
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Skins\Icons^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingWindowsSunValleyIconsSkin%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingWindowsSunValleyIconsSkin%
echo.-------------------------------------------------------------------------------

copy /Y "%ResourceHacker%" "%TempResourceHacker%" >nul

set "do_that=0"
if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
	set "do_that=1"
)
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%ImageBuild%" leq "17763" (
		set "do_that=1"
	)
	if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "21343" (
		set "do_that=2"
	)
	if "%ImageBuild%" geq "21343" (
		set "do_that=3"
	)
)

if "!do_that!" equ "0" (
	echo.
	echo.
	echo.%GlobalThisImageBuild% %ImageBuild%, %txtDoesNotSupportIntegration%
	goto :Stop
)
if "!do_that!" equ "3" (
	echo.
	echo.
	echo.%GlobalThisImageBuild% %ImageBuild%, %txtOriginallyComeWithSunValley%
	echo.%txtOnlyWin32CalcIconSkin%
	echo.
)

if exist "%InstallMount%\!SpecifiedSourceIndex!" (
	echo.
	echo.%txtCopyingWindowsIconsResourceTemporary%

	if "!do_that!" equ "3" (
		if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\Win32Calc.exe" (
			copy "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\Win32Calc.exe" "%_TMP%\Win32Calc.bak" >nul
		)
		if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\Win32Calc.exe" (
			if /i "%ImageArchitecture%" equ "x64" (
				copy "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\Win32Calc.exe" "%_TMP%\Win32Calc_wow64.bak" >nul
			)
		)
	) else (
		for %%f in (cmd; SnippingTool; Win32Calc) do (
			if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\%%f.exe" (
				copy "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\%%f.exe" "%_TMP%\%%f.bak" >nul
			)
			if "%%f" neq "SnippingTool" if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\%%f.exe" (
				if /i "%ImageArchitecture%" equ "x64" (
					copy "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\%%f.exe" "%_TMP%\%%f_wow64.bak" >nul
				)
			)
		)

		for %%f in (imageres; imagesp1; mydocs; shell32; zipfldr; taskmgr) do (
			if "!do_that!" equ "1" (
				if "%%f" neq "shell32" if "%%f" neq "taskmgr" (
					copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\%%f.dll" "%_TMP%\%%f.bak" >nul

					if /i "%ImageArchitecture%" equ "x64" (
						copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\%%f.dll" "%_TMP%\%%f_wow64.bak" >nul
					)
				)
			)
			if "!do_that!" equ "2" (
				if "%%f" neq "taskmgr" (
					copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\SystemResources\%%f.dll.mun" "%_TMP%\%%f.bak" >nul
				) else (
					copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\SystemResources\%%f.exe.mun" "%_TMP%\%%f.bak" >nul
				)
			)
		)
	)
)

echo.
echo.%txtApplyingWindowsIconsSkin%

if "!do_that!" equ "3" (
	echo.
	if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\Win32Calc.exe" (
		echo.    %GlobalPatchingMetroSkinpos01% [Win32Calc.exe] %GlobalPatchingMetroSkinpos02%
		"%TempResourceHacker%" -addoverwrite "%_TMP%\Win32Calc.bak", "%_TMP%\Win32Calc.exe", "%Skins%\Win32Calc.exe.res" ,,,
	)

	if /i "%ImageArchitecture%" equ "x64" (
		if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\Win32Calc.exe" (
			echo.    %GlobalPatchingMetroSkinpos01% [Win32Calc_wow64.exe] %GlobalPatchingMetroSkinpos02%
			"%TempResourceHacker%" -addoverwrite "%_TMP%\Win32Calc_wow64.bak", "%_TMP%\Win32Calc_wow64.exe", "%Skins%\Win32Calc.exe.res" ,,,
		)
	)
) else (
	for %%f in (cmd; SnippingTool; Win32Calc) do (
		echo.
		if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\%%f.exe" (
			echo.    %GlobalPatchingMetroSkinpos01% [%%f.exe] %GlobalPatchingMetroSkinpos02%
			"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f.bak", "%_TMP%\%%f.exe", "%Skins%\%%f.exe.res" ,,,
		)

		if /i "%ImageArchitecture%" equ "x64" (
			if "%%f" neq "SnippingTool" if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\%%f.exe" (
				echo.    %GlobalPatchingMetroSkinpos01% [%%f_wow64.exe] %GlobalPatchingMetroSkinpos02%
				"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f_wow64.bak", "%_TMP%\%%f_wow64.exe", "%Skins%\%%f.exe.res" ,,,
			)
		)
	)

	for %%f in (imageres; imagesp1; mydocs; shell32; zipfldr; taskmgr) do (
		echo.
		if "!do_that!" equ "1" (
			if "%%f" neq "shell32" if "%%f" neq "taskmgr" (
				echo.    %GlobalPatchingMetroSkinpos01% [%%f.dll] %GlobalPatchingMetroSkinpos02%
				"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f.bak", "%_TMP%\%%f.dll", "!Skins!\%%f.dll.res" ,,,

				if /i "%ImageArchitecture%" equ "x64" (
					echo.    %GlobalPatchingMetroSkinpos01% [%%f_wow64.dll] %GlobalPatchingMetroSkinpos02%
					"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f_wow64.bak", "%_TMP%\%%f_wow64.dll", "!Skins!\%%f.dll.res" ,,,
				)
			)
		)
		if "!do_that!" equ "2" (
			if "%%f" neq "taskmgr" (
				echo.    %GlobalPatchingMetroSkinpos01% [%%f.dll.mun] %GlobalPatchingMetroSkinpos02%
				"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f.bak", "%_TMP%\%%f.dll.mun", "!Skins!\%%f.dll.res" ,,,
			) else (
				echo.    %GlobalPatchingMetroSkinpos01% [%%f.exe.mun] %GlobalPatchingMetroSkinpos02%
				"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f.bak", "%_TMP%\%%f.exe.mun", "!Skins!\%%f.exe.res" ,,,
			)
		)
	)
)

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		echo.
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.%txtCopyingPatchedWindowsIcons%

		if "!do_that!" equ "3" (
			echo.
			if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\Win32Calc.exe" (
				echo.%GlobalCopying% [Win32Calc.exe] %GlobalCopyingFileTo%
				echo.        %GlobalCopyingFilePatchop01% [\Windows\System32\Win32Calc.exe] %GlobalCopyingFilePatchop02%
				copy /y "%_TMP%\Win32Calc.exe" "%InstallMount%\%%i\Windows\System32\Win32Calc.exe" >nul
			)

			if /i "%ImageArchitecture%" equ "x64" (
				if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\Win32Calc.exe" (
					echo.%GlobalCopying% [Win32Calc_wow64.exe] %GlobalCopyingFileTo%
					echo.        %GlobalCopyingFilePatchop01% [\Windows\SysWOW64\Win32Calc.exe] %GlobalCopyingFilePatchop02%
					copy /y "%_TMP%\Win32Calc_wow64.exe" "%InstallMount%\%%i\Windows\SysWOW64\Win32Calc.exe" >nul
				)
			)
		) else (
			for %%f in (cmd; SnippingTool; Win32Calc) do (
				echo.
				if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\%%f.exe" (
					echo.%GlobalCopying% [%%f.exe] %GlobalCopyingFileTo%
					echo.        %GlobalCopyingFilePatchop01% [\Windows\System32\%%f.exe] %GlobalCopyingFilePatchop02%
					copy /y "%_TMP%\%%f.exe" "%InstallMount%\%%i\Windows\System32\%%f.exe" >nul
				)

				if /i "%ImageArchitecture%" equ "x64" (
					if "%%f" neq "SnippingTool" if exist "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\%%f.exe" (
						echo.%GlobalCopying% [%%f_wow64.exe] %GlobalCopyingFileTo%
						echo.        %GlobalCopyingFilePatchop01% [\Windows\SysWOW64\%%f.exe] %GlobalCopyingFilePatchop02%
						copy /y "%_TMP%\%%f_wow64.exe" "%InstallMount%\%%i\Windows\SysWOW64\%%f.exe" >nul
					)
				)
			)

			for %%f in (imageres; imagesp1; mydocs; shell32; zipfldr; taskmgr) do (
				echo.
				if "!do_that!" equ "1" (
					if "%%f" neq "shell32" if "%%f" neq "taskmgr" (
						echo.%GlobalCopying% [%%f.dll] %GlobalCopyingFileTo%
						echo.        %GlobalCopyingFilePatchop01% [\Windows\System32\%%f.dll] %GlobalCopyingFilePatchop02%
						copy /Y "%_TMP%\%%f.dll" "%InstallMount%\%%i\Windows\System32\%%f.dll" >nul

						if /i "%ImageArchitecture%" equ "x64" (
							echo.%GlobalCopying% [%%f_wow64.dll] %GlobalCopyingFileTo%
							echo.        %GlobalCopyingFilePatchop01% [\Windows\SysWOW64\%%f.dll] %GlobalCopyingFilePatchop02%
							copy /Y "%_TMP%\%%f_wow64.dll" "%InstallMount%\%%i\Windows\SysWOW64\%%f.dll" >nul
						)
					)
				)
				if "!do_that!" equ "2" (
					if "%%f" neq "taskmgr" (
						echo.%GlobalCopying% [%%f.dll.mun] %GlobalCopyingFileTo%
						echo.        %GlobalCopyingFilePatchop01% [\Windows\SystemResources\%%f.dll.mun] %GlobalCopyingFilePatchop02%
						copy /Y "%_TMP%\%%f.dll.mun" "%InstallMount%\%%i\Windows\SystemResources\%%f.dll.mun" >nul
					) else (
						echo.%GlobalCopying% [%%f.exe.mun] %GlobalCopyingFileTo%
						echo.        [\Windows\SystemResources\%%f.exe.mun] %GlobalCopyingFilePatchop02%
						copy /Y "%_TMP%\%%f.exe.mun" "%InstallMount%\%%i\Windows\SystemResources\%%f.exe.mun" >nul
					)
				)
			)
		)
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingWindowsSunValleyIconsSkin%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Photo Viewer Metro Skin
::-------------------------------------------------------------------------------------------
:IntWPVMetroSkin

cls
echo.===============================================================================
echo.%txtIntegratePhotoViewerMetroSkin%
echo.===============================================================================
echo.

set "Skins=%Skins%\PhotoViewer"

:: Checking whether Windows Photo Viewer Metro Skin Pack file exist
for %%i in (PhotoViewer.dll.res, photowiz.dll.res) do (
	if not exist "!Skins!\%%i" (
		echo.%txtPhotoViewerMetroSkinPack% "%%i" %GlobalNotFound%
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Skins\PhotoViewer^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingPhotoViewerMetroSkin%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingPhotoViewerMetroSkin%
echo.-------------------------------------------------------------------------------

copy /Y "%ResourceHacker%" "%TempResourceHacker%" >nul

if exist "%InstallMount%\!SpecifiedSourceIndex!" (
	echo.
	echo.%txtCopyingPhotoViewer2TemporaryFolder%
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\photowiz.dll" "%_TMP%\photowiz.bak" >nul
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Program Files\Windows Photo Viewer\PhotoViewer.dll" "%_TMP%\PhotoViewer.bak" >nul

	if /i "%ImageArchitecture%" equ "x64" (
		copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Program Files (x86)\Windows Photo Viewer\PhotoViewer.dll" "%_TMP%\PhotoViewer32.bak" >nul
		copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\photowiz.dll" "%_TMP%\photowiz_wow64.bak" >nul
	)
)

echo.
echo.%txtApplyingPhotoViewerMetroSkin%
for %%f in (PhotoViewer; photowiz) do (
	echo.
	echo.    %GlobalPatchingMetroSkinpos01% [%%f.dll] %GlobalPatchingMetroSkinpos02%
	"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f.bak", "%_TMP%\%%f.dll", "!Skins!\%%f.dll.res" ,,,

	if /i "%ImageArchitecture%" equ "x64" (
		echo.    %GlobalPatchingMetroSkinpos01% [%%f_wow64.dll] %GlobalPatchingMetroSkinpos02%
		if "%%f" equ "PhotoViewer" "%TempResourceHacker%" -addoverwrite "%_TMP%\%%f32.bak", "%_TMP%\%%f32.dll", "!Skins!\%%f.dll.res" ,,,
		if "%%f" equ "photowiz" "%TempResourceHacker%" -addoverwrite "%_TMP%\%%f_wow64.bak", "%_TMP%\%%f_wow64.dll", "!Skins!\%%f.dll.res" ,,,
	)
)

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		echo.
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.%txtCopyingPatchedPhotoViewer%
		echo.
		echo.%GlobalCopying% [PhotoViewer.dll] %GlobalCopyingFileTo%
		echo.        %GlobalCopyingFilePatchop01% [\Program Files\Windows Photo Viewer\PhotoViewer.dll] %GlobalCopyingFilePatchop02%
		copy /Y "%_TMP%\PhotoViewer.dll" "%InstallMount%\%%i\Program Files\Windows Photo Viewer\PhotoViewer.dll" >nul

		if /i "%ImageArchitecture%" equ "x64" (
			echo.%GlobalCopying% [PhotoViewer32.dll] %GlobalCopyingFileTo%
			echo.        %GlobalCopyingFilePatchop01% [\Program Files ^(x86^)\Windows Photo Viewer\PhotoViewer.dll] %GlobalCopyingFilePatchop02%
			copy /Y "%_TMP%\PhotoViewer32.dll" "%InstallMount%\%%i\Program Files (x86)\Windows Photo Viewer\PhotoViewer.dll" >nul
		)

		echo.
		echo.%GlobalCopying% [photowiz.dll] %GlobalCopyingFileTo%
		echo.        %GlobalCopyingFilePatchop01% [\Windows\System32\photowiz.dll] %GlobalCopyingFilePatchop02%
		copy /Y "%_TMP%\photowiz.dll" "%InstallMount%\%%i\Windows\System32\photowiz.dll" >nul

		if /i "%ImageArchitecture%" equ "x64" (
			echo.%GlobalCopying% [photowiz_wow64.dll] %GlobalCopyingFileTo%
			echo.        %GlobalCopyingFilePatchop01% [\Windows\SysWOW64\photowiz.dll] %GlobalCopyingFilePatchop02%
			copy /Y "%_TMP%\photowiz_wow64.dll" "%InstallMount%\%%i\Windows\SysWOW64\photowiz.dll" >nul
		)
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingPhotoViewerMetroSkin%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Integrate Windows Media Player Metro Skin
::-------------------------------------------------------------------------------------------
:IntWMPMetroSkin

cls
echo.===============================================================================
echo.%txtIntegrateMediaPlayerMetroSkin%
echo.===============================================================================
echo.

set "Skins=%Skins%\MediaPlayer"

:: Checking whether Windows Media Player Metro Skin Pack file exist
for %%i in (setup_wm.exe.res, wmpconfig.exe.res, wmplayer.exe.res, wmploc.dll.res, wmpshare.exe.res, WMPSideShowGadget.exe.res) do (
	if not exist "!Skins!\%%i" (
		echo.%txtMediaPlayerMetroSkinPack% "%%i" %GlobalNotFound%
		echo.
		echo.%GlobalPleaseCopyFileto% ^<Packs\Skins\MediaPlayer^> %GlobalFolder%
		goto :Stop
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingIntegratingMediaPlayerMetroSkin%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtIntegratingMediaPlayerMetroSkin%
echo.-------------------------------------------------------------------------------

copy /Y "%ResourceHacker%" "%TempResourceHacker%" >nul

if exist "%InstallMount%\!SpecifiedSourceIndex!" (
	echo.
	echo.%txtCopyingMediaPlayer2TemporaryFolder%
	for %%f in (setup_wm; wmpconfig; wmplayer; wmpshare; WMPSideShowGadget; wmploc) do (
		if "%%f" equ "wmploc" (
			copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\System32\%%f.dll" "%_TMP%\%%f.bak" >nul

			if /i "%ImageArchitecture%" equ "x64" (
				copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Windows\SysWOW64\%%f.dll" "%_TMP%\%%f_wow64.bak" >nul
			)
		) else (
			if exist "%InstallMount%\!SpecifiedSourceIndex!\Program Files\Windows Media Player\%%f.exe" (
				copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Program Files\Windows Media Player\%%f.exe" "%_TMP%\%%f.bak" >nul
			)
			if /i "%ImageArchitecture%" equ "x64" if exist "%InstallMount%\!SpecifiedSourceIndex!\Program Files (x86)\Windows Media Player\%%f.exe" (
				copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Program Files (x86)\Windows Media Player\%%f.exe" "%_TMP%\%%f32.bak" >nul
			)
		)
	)
)

echo.
echo.%txtApplyingMediaPlayerMetroSkin%
for %%f in (setup_wm; wmpconfig; wmplayer; wmpshare; WMPSideShowGadget; wmploc) do (
	echo.
	if "%%f" equ "wmploc" (
		echo.    %GlobalPatchingMetroSkinpos01% [%%f.dll] %GlobalPatchingMetroSkinpos02%
		"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f.bak", "%_TMP%\%%f.dll", "!Skins!\%%f.dll.res" ,,,

		if /i "%ImageArchitecture%" equ "x64" (
			echo.    %GlobalPatchingMetroSkinpos01% [%%f_wow64.dll] %GlobalPatchingMetroSkinpos02%
			"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f_wow64.bak", "%_TMP%\%%f_wow64.dll", "!Skins!\%%f.dll.res" ,,,
		)
	) else (
		if exist "%_TMP%\%%f.bak" (
			echo.    %GlobalPatchingMetroSkinpos01% [%%f.exe] %GlobalPatchingMetroSkinpos02%
			"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f.bak", "%_TMP%\%%f.exe", "!Skins!\%%f.exe.res" ,,,
		)
		if /i "%ImageArchitecture%" equ "x64" if exist "%_TMP%\%%f32.bak" (
			echo.    %GlobalPatchingMetroSkinpos01% [%%f32.exe] %GlobalPatchingMetroSkinpos02%
			"%TempResourceHacker%" -addoverwrite "%_TMP%\%%f32.bak", "%_TMP%\%%f32.exe", "!Skins!\%%f.exe.res" ,,,
		)
	)
)

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		echo.
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
		echo.%txtCopyingPatchedMediaPlayer%
		for %%f in (setup_wm; wmpconfig; wmplayer; wmpshare; WMPSideShowGadget; wmploc) do (
			echo.
			if "%%f" equ "wmploc" (
				echo.%GlobalCopying% [%%f.dll] %GlobalCopyingFileTo%
				echo.        %GlobalCopyingFilePatchop01% [\Windows\System32\%%f.dll] %GlobalCopyingFilePatchop02%
				copy /Y "%_TMP%\%%f.dll" "%InstallMount%\%%i\Windows\System32\%%f.dll" >nul

				if /i "%ImageArchitecture%" equ "x64" (
					echo.%GlobalCopying% [%%f_wow64.dll] %GlobalCopyingFileTo%
					echo.        %GlobalCopyingFilePatchop01% [\Windows\SysWOW64\%%f.dll] %GlobalCopyingFilePatchop02%
					copy /Y "%_TMP%\%%f_wow64.dll" "%InstallMount%\%%i\Windows\SysWOW64\%%f.dll" >nul
				)
			) else (
				if exist "%_TMP%\%%f.exe" (
					echo.%GlobalCopying% [%%f.exe] %GlobalCopyingFileTo%
					echo.        %GlobalCopyingFilePatchop01% [\Program Files\Windows Media Player\%%f.exe] %GlobalCopyingFilePatchop02%
					copy /Y "%_TMP%\%%f.exe" "%InstallMount%\%%i\Program Files\Windows Media Player\%%f.exe" >nul
				)
				if /i "%ImageArchitecture%" equ "x64" if exist "%_TMP%\%%f32.exe" (
					echo.%GlobalCopying% [%%f32.exe] %GlobalCopyingFileTo%
					echo.        %GlobalCopyingFilePatchop01% [\Program Files ^(x86^)\Windows Media Player\%%f.exe] %GlobalCopyingFilePatchop02%
					copy /Y "%_TMP%\%%f32.exe" "%InstallMount%\%%i\Program Files (x86)\Windows Media Player\%%f.exe" >nul
				)
			)
		)
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedIntegratingMediaPlayerMetroSkin%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to Integrate Custom Features Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Remove Windows Components Menu
::-------------------------------------------------------------------------------------------
:RemoveWindowsComponentsMenu

if "%IsDialogsEnabled%" equ "Yes" if "!Support_Warning!" neq "" if "!RemoveComponentsMenu_Warning!" equ "" (
	cls
	echo.===============================================================================
	if "!Allowed!" equ "" (
		echo.                          MSMG Toolkit - %GlobalRemoveMenu%
	) else (
		echo.!Allowed!                         MSMG Toolkit - %GlobalRemoveMenu%                          !Bypass!
	)
	echo.===============================================================================
	echo.
	echo.
	echo.                                %GlobalWARNING%
	echo.                                =============
	echo.
	echo.   %txtRemoveMenuline1%
	echo.   %txtRemoveMenuline2%
	echo.   %txtRemoveMenuline3%
	echo.
	echo.   %txtRemoveMenuline4%
	echo.   %txtRemoveMenuline5%
	echo.
	echo.   %txtRemoveMenuline6%
	echo.
	echo.
	echo.   %GlobalDisableDialogs_line01%
	echo.   %GlobalDisableDialogs_line02%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%GlobalChoice_continue% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "RemoveComponentsMenu_Warning=0"
)

set "CurrentMenu=RemoveWindowsComponentsMenu"

if "!Bypass!" equ "I" set "C_PersonalLists=+"

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/v22H2 Client
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	if "!C_PersonalLists!" equ "+" (
		:: DateTime Version Stamp
		call :DateTimeStamp
		set "RemovedPkgsNamesList=RemovedPkgsList(%ImageArchitecture%)_%ImageVersion%_[!DateTimeStamp!]"
		set "RetainedPkgsNamesList=RetainedPkgsList(%ImageArchitecture%)_%ImageVersion%_[!DateTimeStamp!]"
	) else (
		set RemovedPkgsNamesList=
		set RetainedPkgsNamesList=
	)
	cls
	echo.===============================================================================
	if "!Allowed!" equ "" (
		echo.                 MSMG Toolkit - %txtRemoveWindowsComponentsMenu%
	) else (
		echo.!Allowed!                MSMG Toolkit - %txtRemoveWindowsComponentsMenu%                !Bypass!
		if "%Finished%" equ "Remove" (
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%GlobalFinishedRemovingWindowsComponents%
			echo.-------------------------------------------------------------------------------
			echo.
			set Finished=
		)
	)
	echo.===============================================================================
	echo.
	echo.  [R]    %GlobalReadComponentsListPreSet%
	echo.
	echo.  [1]    %txtCustomPreSets2RemovingComponents%
	echo.  [2]    %txtPersonalPreSets2RemovingComponents%
	echo.  [3]    %txtSelectComponentsMenus%
	echo.  [4]    %txtDependenciesCorrectionFilter%
	echo.  [5] ^(!C_PersonalLists!^)%txtCreatePersonalFileListspos1% ^<!PersonalLists!^> %GlobalFolder3%
	if "!C_PersonalLists!" equ "+" (
		echo.         %txtNoteRemovedComponentsList%
		echo.               "!RemovedPkgsNamesList!.txt"
		echo.               %txtRetainedComponentsList%
		echo.               "!RetainedPkgsNamesList!.txt"
	)
	echo.
	echo.  [S]    %txtStartRemovingWindowsWithFilters%
	echo.  [T]    %txtSelectComponentsToolkitHelper%
	echo.
	echo.  [D]    %GlobalOption_Revert2Default%
	echo.  [X]    %GlobalOption_GoBack%
	echo.
	echo.===============================================================================
	echo.
	choice /C:R12345STDX0P /N /M "%GlobalEnterChoice% "
	if errorlevel 12 (
		set "Allowed=I"
		set "Bypass=I"
		call :PersonalWorkCustomSelection
		call :ListsandPreSets_Filter
		call :StartRemovingWindowsComponents
	)
	if errorlevel 11 (
		set "Allowed=I"
		set "Bypass=I"
		call :MAJIDCustomSelection
		call :ListsandPreSets_Filter
		call :StartRemovingWindowsComponents
	)
	if errorlevel 10 goto :RemoveMenu
	if errorlevel  9 (
		set Components=
		set ComponentsList=
		set TKHR_Components=
		set TKHC_List=
		call :EnvironmentVariables
		call :ComponentsFlags
	)
	if errorlevel  8 (
		call :ComponentsFlags
		set Components=
		set ComponentsList=
		set TKHR_Components=
		goto :SelectComponents_ToolkitHelperAutomatedMenus
	)
	if errorlevel  7 call :StartRemovingWindowsComponents
	if errorlevel  6 (
		if "!C_PersonalLists!" equ "+" (
			set "C_PersonalLists=-"
		) else (
			set "C_PersonalLists=+"
		)
	)
	if errorlevel  5 call :ListsandPreSets_Filter
	if errorlevel  4 goto :SelectWindowsComponentsMenu
	if errorlevel  3 goto :PersonalPreSets_RemoveWindowsComponents
	if errorlevel  2 goto :CustomPreSets_RemoveWindowsComponents
	if errorlevel  1 (
		if exist "%RemovePkgsList%" for /f "eol=# tokens=*" %%z in ('type "%RemovePkgsList%" 2^>nul') do (
			set "C_%%z=-"
			rem set "TKHRC_%%z=-"
		)
	)
	rem goto :RemoveWindowsComponentsMenu
	goto :!CurrentMenu!
)

:CustomPreSets_RemoveWindowsComponents

cls
echo.===============================================================================
echo.%txtCustomPreSets4RemovalComponentsTool%
echo.===============================================================================
echo.

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/v22H2 Client
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtCustomPreSets4RemovalComponents%
	echo.===============================================================================
	echo.
	echo.  [1] %txtAccessibilityCustomSelection%
	echo.
	echo.  [2] %txtConservativeGenericEdition%
	echo.      %txtConservativeGenericEditionline2%
	echo.      %txtConservativeGenericEditionline3%
	echo.
	echo.  %txtConservativeGenericEditionline4%
	echo.  %txtConservativeGenericEditionline5%
	echo.  %txtConservativeGenericEditionline6%
	echo.
	echo.  %txtGenericEdition4AnyoneWhoWants%
	echo.  [3] %txtLooksLikeLTSCEdition%
	echo.  [4] %txtGamerEdition%
	echo.  [5] %txtLiteEdition%
	echo.  [6] %txtXtremeLiteEdition%
	echo.  [7] %txtWin7ComponentsExperienceEdition%
	echo.
	echo.
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.
	echo.===============================================================================
	echo.
	choice /C:1234567X /N /M "%GlobalEnterChoice% "
	if errorlevel 8 goto :RemoveWindowsComponentsMenu
	if errorlevel 7 (
		call :W7ExperienceEditionCustomSelection
		if "!Bypass!" equ "O" (
			call :StartRemovingWindowsComponents
			goto :RemoveMenu
		)
	)
	if errorlevel 6 call :XtremeLiteEditionCustomSelection
	if errorlevel 5 call :LiteEditionCustomSelection
	if errorlevel 4 call :GamerEditionCustomSelection
	if errorlevel 3 call :LooksLikeLTSCEditionCustomSelection
	if errorlevel 2 call :ConservativeGenericEditionCustomSelection
	if errorlevel 1 call :AccessibilityCustomSelection
)
call :ListsandPreSets_Filter
if "!Bypass!" equ "O" (
	goto :RemoveWindowsComponentsMenu
) else (
	call :StartRemovingWindowsComponents
	goto :EOF
)

:PersonalPreSets_RemoveWindowsComponents

cls
echo.===============================================================================
echo.%txtPersonalPreSets4RemovalComponentsTool%
echo.===============================================================================
echo.

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/v22H2 Client
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtPersonalPreSets4RemovalComponents%
	echo.===============================================================================
	echo.
	echo.  %txtPersonalEditionItsSample4AnyoneWhoWants%
	echo.
	echo.  [1] %txtPersonalCustomSelection4Family%
	echo.  [2] %txtPersonalWorkCustomSelection4Work%
	echo.
	echo.
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.
	echo.===============================================================================
	echo.
	choice /C:12X /N /M "%GlobalEnterChoice% "
	if errorlevel 3 goto :RemoveWindowsComponentsMenu
	if errorlevel 2 call :PersonalWorkCustomSelection
	if errorlevel 1 call :PersonalFamilyCustomSelection
)
call :ListsandPreSets_Filter
if "!Bypass!" equ "O" (
	goto :RemoveWindowsComponentsMenu
) else (
	call :StartRemovingWindowsComponents
	goto :EOF
)

:MAJIDCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	InternetExplorer
	:: [2] Multimedia
	FirstLogonAnimation
	WindowsMediaPlayer
	WindowsPhotoViewer
	WinSAT
	:: [4] Privacy
	CEIP
	KernelDebugging
	UnifiedTelemetryClient
	WindowsErrorReporting
	WindowsInsiderHub
	:: [5] Remoting
	OneDrive
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	Paint
	:: [6] System
	WindowsToGo
	:: [7] SystemApps
	ECApp
	ContentDeliveryManager
	MapControl
	RetailDemoContent
	WindowsReaderPDF
	EdgeDevToolsClient
	Edge
	SecureAssessmentBrowser
	:: [8] WindowsApps
	ZuneVideo
	ZuneMusic
	Maps
	OfficeHub
	BingNews
	Paint3D
	Photos
	BingWeather
	ClientWebExperience
	OneConnect
	Print3D
	:: Selecting Prerequisite Features to run W7 and Modern UI Games - for Removal...
	GameExplorer
	WinSAT
	XboxGameCallableUI
	SolitaireCollection
	:: Selecting Mixed Reality Pack - for Removal...
	WindowsMixedReality
	3DViewer
	MixedRealityPortal
) do (
	set "C_%%i=-"
)

goto :EOF

:AccessibilityCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	InternetExplorer
	:: [2] Multimedia
	FirstLogonAnimation
	:: [4] Privacy
	CEIP
	KernelDebugging
	UnifiedTelemetryClient
	WiFiNetworkManager
	WindowsErrorReporting
	WindowsInsiderHub
	:: [5] Remoting
	OneDrive
	:: [6] System
	WindowsToGo
	:: [7] SystemApps
	AsyncTextService
	ContentDeliveryManager
	RetailDemoContent
	WindowsReaderPDF
	EdgeDevToolsClient
	Edge
	SecureAssessmentBrowser
	:: [8] WindowsApps
	ZuneVideo
	ZuneMusic
	Maps
	OfficeHub
	BingNews
	People
	BingWeather
	ClientWebExperience
	OneConnect
) do (
	set "C_%%i=-"
)
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	rem Paint
	rem Cortana
	:: [8] WindowsApps
	rem Paint3D
call :Accessibility_Extra

goto :EOF

:ConservativeGenericEditionCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	InternetExplorer
	:: [2] Multimedia
	FirstLogonAnimation
	:: [4] Privacy
	CEIP
	UnifiedTelemetryClient
	WiFiNetworkManager
	:: [5] Remoting
	OneDrive
	:: [6] System
	WindowsToGo
	:: [7] SystemApps
	ContentDeliveryManager
	RetailDemoContent
	SkypeORTC
	WebcamExperience
	WindowsReaderPDF
	EdgeDevToolsClient
	Edge
	:: [8] WindowsApps
	Maps
	OfficeHub
	BingNews
	OfficeOneNote
	SkypeApp
	BingWeather
	ClientWebExperience
	OneConnect
) do (
	set "C_%%i=-"
)

goto :EOF

:LooksLikeLTSCEditionCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	InternetExplorer
	:: [3] Network
	WindowsMail
	:: [5] Remoting
	OneDrive
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	Cortana
	:: [7] SystemApps
	AsyncTextService
	ContentDeliveryManager
	MapControl
	RetailDemoContent
	WindowsMixedReality
	WindowsReaderPDF
	EdgeDevToolsClient
	Edge
	:: [8] WindowsApps
	AdvertisingXaml
	Alarms
	CalculatorApp
	Camera
	DesktopAppInstaller
	Family
	FeedbackHub
	VP9VideoExtensions
	ZuneVideo
	ZuneMusic
	HEIFImageExtension
	Maps
	WalletService
	OfficeHub
	BingNews
	OfficeOneNote
	Paint3D
	People
	YourPhone
	Photos
	ScreenSketch
	SkypeApp
	SolitaireCollection
	StickyNotes
	StorePurchaseApp
	Todos
	SoundRecorder
	BingWeather
	ClientWebExperience
	WebMediaExtensions
	WebpImageExtension
	CommunicationsApps
	OneConnect
	3DViewer
	MixedRealityPortal
) do (
	set "C_%%i=-"
)
if "%SelectedSourceOS%" equ "w11" (
	set "C_Paint=+"
)
if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "19041" (
	if "!C_Cortana!" equ "-" (
		set "C_Cortana=+"
	)
)
	:: [8] WindowsApps
	rem Messaging
	rem Print3D
call :LooksLikeLTSExtra

goto :EOF

:GamerEditionCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	InternetExplorer
	:: [2] Multimedia
	FirstLogonAnimation
	:: [3] Network
	WindowsMail
	:: [4] Privacy
	CEIP
	UnifiedTelemetryClient
	WiFiNetworkManager
	WindowsInsiderHub
	:: [5] Remoting
	OneDrive
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	Paint
	:: [6] System
	WindowsToGo
	Wordpad
	:: [7] SystemApps
	AsyncTextService
	ContentDeliveryManager
	MapControl
	PeopleExperienceHost
	RetailDemoContent
	SkypeORTC
	WebcamExperience
	WindowsReaderPDF
	EdgeDevToolsClient
	Edge
	SecureAssessmentBrowser
	:: [8] WindowsApps
	Alarms
	Camera
	Family
	FeedbackHub
	Maps
	OfficeHub
	BingNews
	OfficeOneNote
	Paint3D
	People
	YourPhone
	SkypeApp
	Getstarted
	Todos
	BingWeather
	ClientWebExperience
	CommunicationsApps
	Messaging
	OneConnect
	Print3D
) do (
	set "C_%%i=-"
)

goto :EOF

:LiteEditionCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	EdgeChromium
	:: [2] Multimedia
	FirstLogonAnimation
	SpeechRecognition
	WindowsMediaPlayer
	:: [3] Network
	WindowsMail
	:: [4] Privacy
	CEIP
	FaceRecognition
	KernelDebugging
	UnifiedTelemetryClient
	WiFiNetworkManager
	WindowsErrorReporting
	WindowsInsiderHub
	:: [5] Remoting
	OneDrive
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	Cortana
	Paint
	QuickAssist
	:: [6] System
	StepsRecorder
	WindowsToGo
	Wordpad
	:: [7] SystemApps
	AsyncTextService
	ContentDeliveryManager
	MapControl
	NarratorQuickStart
	ParentalControls
	PeopleExperienceHost
	RetailDemoContent
	SkypeORTC
	WebcamExperience
	WindowsMixedReality
	PPIProjection
	WindowsReaderPDF
	EdgeDevToolsClient
	SecureAssessmentBrowser
	:: [8] WindowsApps
	Alarms
	Camera
	DesktopAppInstaller
	Family
	FeedbackHub
	GetHelp
	ZuneVideo
	ZuneMusic
	Maps
	WalletService
	OfficeHub
	BingNews
	OfficeOneNote
	Paint3D
	People
	YourPhone
	Photos
	ScreenSketch
	SkypeApp
	SolitaireCollection
	StickyNotes
	StorePurchaseApp
	Getstarted
	Todos
	SoundRecorder
	BingWeather
	ClientWebExperience
	CommunicationsApps
	Messaging
	OneConnect
	Print3D
	3DViewer
	MixedRealityPortal
) do (
	set "C_%%i=-"
)
if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "19041" (
	if "!C_Cortana!" equ "-" (
		set "C_Cortana=+"
	)
)

goto :EOF

:XtremeLiteEditionCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	EdgeChromium
	InternetExplorer
	:: [2] Multimedia
	FirstLogonAnimation
	GameExplorer
	LockScreenBackground
	ScreenSavers
	SoundThemes
	SpeechRecognition
	Wallpapers
	WindowsMediaPlayer
	WinSAT
	WindowsThemes
	:: [3] Network
	WindowsMail
	:: [4] Privacy
	AssignedAccess
	CEIP
	FaceRecognition
	KernelDebugging
	UnifiedTelemetryClient
	WiFiNetworkManager
	WindowsErrorReporting
	WindowsInsiderHub
	:: [5] Remoting
	OneDrive
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	Cortana
	Paint
	QuickAssist
	:: [6] System
	StepsRecorder
	WindowsToGo
	Wordpad
	:: [7] SystemApps
	AssignedAccessLockApp
	AsyncTextService
	AADBrokerPlugin
	CBSPreview
	ContentDeliveryManager
	CallingShellApp
	MapControl
	NarratorQuickStart
	ParentalControls
	PeopleExperienceHost
	RetailDemoContent
	SkypeORTC
	SmartScreen
	WebcamExperience
	WindowsMixedReality
	WindowsStoreClient
	XboxClient
	XboxGameCallableUI
	PPIProjection
	WindowsReaderPDF
	EdgeDevToolsClient
	Edge
	ECApp
	SecureAssessmentBrowser
	:: [8] WindowsApps
	AdvertisingXaml
	Alarms
	CalculatorApp
	Camera
	DesktopAppInstaller
	Family
	FeedbackHub
	GetHelp
	ZuneVideo
	ZuneMusic
	Maps
	WalletService
	OfficeHub
	BingNews
	OfficeOneNote
	Paint3D
	People
	YourPhone
	Photos
	ScreenSketch
	SkypeApp
	SolitaireCollection
	StickyNotes
	StorePurchaseApp
	Getstarted
	Todos
	SoundRecorder
	BingWeather
	ClientWebExperience
	CommunicationsApps
	WindowsStoreApp
	XboxApp
	GamingApp
	XboxGamingOverlay
	XboxGameOverlay
	XboxIdentityProvider
	XboxSpeechToTextOverlay
	XboxTCUI
	Messaging
	OneConnect
	Print3D
	ServicesStoreEngagement
	PowerAutomateDesktop
	3DViewer
	MixedRealityPortal
) do (
	set "C_%%i=-"
)
if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "19041" (
	if "!C_Cortana!" equ "-" (
		set "C_Cortana=+"
	)
)

goto :EOF

:W7ExperienceEditionCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	EdgeChromium
	:: [2] Multimedia
		FirstLogonAnimation
	SnippingTool
	:: [3] Network
	WindowsMail
	:: [4] Privacy
	AssignedAccess
	CEIP
	FaceRecognition
	LocationService
	PicturePassword
	PinEnrollment
	UnifiedTelemetryClient
	WiFiNetworkManager
	WindowsInsiderHub
	:: [5] Remoting
	OneDrive
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	Cortana
	QuickAssist
	:: [6] System
	WindowsSubsystemForLinux
	WindowsToGo
	Wordpad
	:: [7] SystemApps
	AssignedAccessLockApp
	AsyncTextService
	BioEnrollment
	CapturePicker
	CBSPreview
	ContentDeliveryManager
	CredDialogHost
	ECApp
	FileExplorer
	LockApp
	MapControl
	NarratorQuickStart
	PeopleExperienceHost
	RetailDemoContent
	SettingSync
	SkypeORTC
	WebcamExperience
	Win32WebViewHost
	WindowsMixedReality
	XboxClient
	XboxGameCallableUI
	XGpuEjectDialog
	CallingShellApp
	PPIProjection
	WindowsReaderPDF
	EdgeDevToolsClient
	Edge
	:: [8] WindowsApps
	AdvertisingXaml
	Alarms
	Camera
	DesktopAppInstaller
	Family
	FeedbackHub
	Terminal
	VP9VideoExtensions
	ZuneVideo
	ZuneMusic
	HEIFImageExtension
	Maps
	WalletService
	OfficeHub
		BingNews
	OfficeOneNote
	People
	YourPhone
	Photos
	ScreenSketch
	SkypeApp
	SolitaireCollection
		StickyNotes
		StorePurchaseApp
	Todos
	BingWeather
	ClientWebExperience
	WebMediaExtensions
	WebpImageExtension
	CommunicationsApps
		WindowsStoreApp
	XboxApp
	GamingApp
	XboxGamingOverlay
	XboxGameOverlay
	XboxSpeechToTextOverlay
	XboxTCUI
	Messaging
	OneConnect
	NotepadApp
	Print3D
		ServicesStoreEngagement
	PowerAutomateDesktop
	3DViewer
	MixedRealityPortal
) do (
	set "C_%%i=-"
)
if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "19041" (
	if "!C_Cortana!" equ "-" (
		set "C_Cortana=+"
	)
)

goto :EOF

:Accessibility_Extra
echo. [1]    %txtSet2RemoveMixedRealityPack%
echo. [2]    %txtSet2RemoveFeatures2RunW7%
echo. [X]    %GlobalGoBackSelect2StartRemovingComponents%
echo.
echo. %txtNote2SelectBothOptionsline1%
echo.        %txtNote2SelectBothOptionsline2%
echo.
set /p "MenuChoice=        %GlobalEnterChoice% "
for %%c IN (!MenuChoice!) DO (
	if /i "!%%c!" equ "X" goto :RemoveWindowsComponentsMenu
	if "!%%c!" equ "2" (
		echo.
		echo.%txtSelectingPrerequisiteFeatures2RunW7%
		for %%i in (
			GameExplorer
			WinSAT
			XboxClient
			XboxGameCallableUI
			SolitaireCollection
		) do (
			set "C_%%i=-"
		)
	)
	if "!%%c!" equ "1" (
		echo.
		echo.%txtSelectingMixedRealityPack4Removal%
		for %%i in (
			WindowsMixedReality
			3DViewer
			MixedRealityPortal
		) do (
			set "C_%%i=-"
		)
	)
)
call :ListsandPreSets_Filter
goto :EOF

:LooksLikeLTSC_Extra
echo. [S]    %txtSet2RemoveWindowsStoreXboxFeatures%
echo. [X]    %GlobalGoBackSelect2StartRemovingComponents%
echo.
choice /C:SX /N /M "%GlobalEnterChoice% "
if errorlevel 2 goto :RemoveWindowsComponentsMenu
if errorlevel 1 (
	echo.
	echo.%txtSelectingWindowsStoreXbox4Removal%
	for %%i in (
		WindowsStoreClient
		WindowsStoreApp
		ServicesStoreEngagement
		XboxGameCallableUI
		SolitaireCollection
		XboxGamingOverlay
		XboxGameOverlay
		XboxIdentityProvider
		XboxSpeechToTextOverlay
		XboxTCUI
		XboxClient
		XboxApp
		GamingApp
	) do (
		set "C_%%i=-"
	)
)
call :ListsandPreSets_Filter
goto :EOF

:PersonalFamilyCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	:: [2] Multimedia
	FirstLogonAnimation
	:: [3] Network
	WindowsMail
	:: [4] Privacy
	CEIP
	UnifiedTelemetryClient
	WiFiNetworkManager
	WindowsInsiderHub
	:: [5] Remoting
	OneDrive
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	Paint
	Cortana
	:: [6] System
	Wordpad
	:: [7] SystemApps
	AsyncTextService
	ContentDeliveryManager
	PeopleExperienceHost
	RetailDemoContent
	SkypeORTC
	WebcamExperience
	:: [8] WindowsApps
	FeedbackHub
	ZuneVideo
	ZuneMusic
	Maps
	WalletService
	OfficeHub
	BingNews
	OfficeOneNote
	Paint3D
	People
	YourPhone
	SkypeApp
	SolitaireCollection
	Todos
	BingWeather
	ClientWebExperience
	CommunicationsApps
	Messaging
	OneConnect
	Print3D
	3DViewer
	MixedRealityPortal
) do (
	set "C_%%i=-"
)
	:: [7] SystemApps
	rem WindowsMixedReality
if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "19041" (
	if "!C_Cortana!" equ "-" (
		set "C_Cortana=+"
	)
)

goto :EOF

:PersonalWorkCustomSelection
for %%i in (
	:: [1] Internet
	AdobeFlashForWindows
	:: [2] Multimedia
	FirstLogonAnimation
	:: [3] Network
	WindowsMail
	:: [4] Privacy
	CEIP
	UnifiedTelemetryClient
	WiFiNetworkManager
	WindowsInsiderHub
	:: [5] Remoting
	OneDrive
	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	Paint
	Cortana
	:: [6] System
	Wordpad
	:: [7] SystemApps
	AsyncTextService
	ContentDeliveryManager
	NarratorQuickStart
	PeopleExperienceHost
	RetailDemoContent
	SkypeORTC
	WebcamExperience
	:: [8] WindowsApps
	Alarms
	Camera
	Family
	FeedbackHub
	ZuneVideo
	ZuneMusic
	Maps
	WalletService
	OfficeHub
	BingNews
	OfficeOneNote
	Paint3D
	People
	YourPhone
	SkypeApp
	SolitaireCollection
	Getstarted
	Todos
	BingWeather
	ClientWebExperience
	CommunicationsApps
	Messaging
	OneConnect
) do (
	set "C_%%i=-"
)
if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "19041" (
	if "!C_Cortana!" equ "-" (
		set "C_Cortana=+"
	)
)

goto :EOF

:ListsandPreSets_Filter

for %%c in (!All_Components!) do (
	if "!TKHC_%%c!" equ "" if "!C_%%c!" equ "-" if "%%c" neq "ManualSetup" (
		set "C_%%c=+"
	)
	set %%c=
)

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	:: [1] Internet
	rem

	:: [2] Multimedia
	if "!C_SpeechRecognition!" equ "-" (
		set "C_Cortana=-"
		set "C_Narrator=-"
	)

	if "!IntegratedGames!" neq "" (
		if "!C_GameExplorer!" equ "-" (
			set "C_GameExplorer=+"
		)
		if "!C_WinSAT!" equ "-" (
			set "C_WinSAT=+"
		)
	)

	:: [4] Privacy
	if "!C_AssignedAccess!" equ "-" (
		set "C_AssignedAccessLockApp=-"
	)

	if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
		if "!C_WindowsErrorReporting!" equ "-" (
			set "C_WindowsErrorReporting=+"
			set "C_KernelDebugging=+"
		)
	)

	:: [5] Remoting
	rem

	:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
	rem if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "19041" (
	rem 	if "!C_Cortana!" equ "-" (
	rem 		set "C_Cortana=+"
	rem 	)
	rem )
	if "%SelectedSourceOS%" equ "w11" (
		if "!C_Paint3D!" equ "-" (
			set "C_Paint3D=+"
			set "C_Paint=-"
		)
	)

	:: [6] System
	if "!C_AccessibilityTools!" equ "-" (
		set "C_OnScreenKeyboard=-"
		set "C_Narrator=-"
		set "C_Magnifier=-"
		set "C_EaseOfAccessThemes=-"
		set "C_EaseOfAccessCursors=-"
	)
	if "!C_Calculator!" equ "-" (
		if "!FlagedEnterprise!" equ "" (
			set "C_Calculator=+"
		)
	)
	if "!C_SystemRestore!" equ "-" (
		set "C_WindowsBackup=-
	)

	if "!C_WindowsBackup!" equ "-" (
		set "C_SystemRestore=-"
	)

	if "!C_WindowsMixedReality!" equ "-" (
		if /i "%ImageArchitecture%" neq "x86" set "C_MixedRealityPortal=-"
		set "C_3DViewer=-"
		if "%ImageBuild%" geq "19041" set "C_ECApp=-"
	)

	:: [7] SystemApps
	if "!C_StickyNotes!" equ "+" (
		set "C_AccountsControl=+"
		set "C_AADBrokerPlugin=+"
		set "C_WindowsStoreClient=+"
		set "C_WindowsStoreApp=+"
		set "C_XboxGameCallableUI=+"
		set "C_XboxClient=+"
		if "%SelectedSourceOS%" equ "w10" (
			set "C_XboxIdentityProvider=+"
			set "C_XboxApp=+"
			if "%ImageBuild%" gtr "17763" if "%ImageBuild%" leq "19044" (
				set "C_ServicesStoreEngagement=+"
			)
		)
	)

	if "!C_AccountsControl!" equ "-" (
		set "C_WindowsStoreApp=-"
	)

	if "!C_AADBrokerPlugin!" equ "-" (
		set "C_WindowsStoreApp=-"
		if "%ImageBuild%" gtr "17763" (
			set "C_SolitaireCollection=-"
			if "%ImageBuild%" leq "19044" set "C_StickyNotes=-"
		)
	)

	if "%ImageBuild%" geq "19041" (
		if "!C_CapturePicker!" equ "-" (
			set "C_ScreenSketch=-"
		)
	)

	if "!C_ContentDeliveryManager!" equ "-" (
		if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
			set "C_ContentDeliveryManager=+"
		)
	)

	if "!C_Edge!" equ "-" (
		set "C_EdgeDevToolsClient=-"
		set "C_WindowsReaderPDF=-"
	)

	if "!C_MapControl!" equ "-" (
		set "C_Maps=-"
	)

	if "!C_PeopleExperienceHost!" equ "-" (
		set "C_People=-"
	)

	if "!C_SkypeORTC!" equ "-" (
		set "C_SkypeApp=-"
	)

	if "!C_WindowsDefender!" equ "-" (
		set "C_SecurityCenter=-"
		rem set "C_WindowsStoreApp=-"
	)

	if "!C_WindowsStoreClient!" equ "-" (
		set "C_WindowsStoreApp=-"
		set "C_SolitaireCollection=-"
	)

	if "!C_ServicesStoreEngagement!" equ "-" (
		if "%SelectedSourceOS%" equ "w10" set "C_XboxApp=-"
		if "%SelectedSourceOS%" equ "w11" set "C_GamingApp=-"
	)

	if "!C_XboxClient!" equ "-" (
		if "%SelectedSourceOS%" equ "w10" set "C_XboxApp=-"
		if "%SelectedSourceOS%" equ "w11" set "C_GamingApp=-"
	)

	if "!C_XboxGameCallableUI!" equ "-" (
		set "C_SolitaireCollection=-"
	)

	:: [8] WindowsApps
	if "!IntegratedSidebar!" neq "" (
		if "!C_AdvertisingXaml!" equ "-" (
			set "C_AdvertisingXaml=+"
			set "C_WindowsMail=+"						
			set "C_CommunicationsApps=+"
			if "%SelectedSourceOS%" equ "w10" set "C_BingWeather=+"
			set "C_SolitaireCollection=+"
		)
		if "!C_CommunicationsApps!" equ "-" (
			set "C_AdvertisingXaml=+"
			set "C_WindowsMail=+"						
			set "C_CommunicationsApps=+"
		)
	)
	if "!IntegratedSidebar!" equ "" (
		if "!C_AdvertisingXaml!" equ "-" (
			if "%ImageBuild%" equ "17763" set "C_SolitaireCollection=-"
			set "C_BingWeather=-"
			set "C_CommunicationsApps=-"
		)
		if "!C_People!" equ "-" (
			set "C_PeopleExperienceHost=-"
		)
		if "!C_SkypeApp!" equ "-" (
			set "C_SkypeORTC=-"
		)
		if "%SelectedSourceOS%" equ "w10" if "!C_GamingApp!" equ "-" (
			set "C_GamingApp=+"
			set "C_XboxApp=-"
		)
		if "%SelectedSourceOS%" equ "w11" if "!C_XboxApp!" equ "-" (
			set "C_XboxApp=+"
			set "C_GamingApp=-"
		)
		if "!C_XboxApp!" equ "-" (
			set "C_XboxGamingOverlay=-"
			set "C_XboxGameOverlay=-"
			if "!C_StickyNotes!" equ "+" (
				if "%ImageBuild%" leq "19044" set "C_XboxIdentityProvider=+"
			) else (
				set "C_XboxIdentityProvider=-"
			)
			set "C_XboxSpeechToTextOverlay=-"
			set "C_XboxTCUI=-"
		)
		if "!C_GamingApp!" equ "-" (
			set "C_XboxGamingOverlay=-"
			set "C_XboxGameOverlay=-"
			set "C_XboxIdentityProvider=-"
			set "C_XboxSpeechToTextOverlay=-"
			set "C_XboxTCUI=-"
		)
		if "!C_XboxIdentityProvider!" equ "-" (
			set "C_WindowsStoreApp=-"
			if "%ImageBuild%" leq "19044" set "C_StickyNotes=-"
		)
		if "!C_WindowsStoreClient!" equ "-" (
			set "C_WindowsStoreApp=-"
		)
		if "!C_WindowsStoreApp!" equ "-" (
			if "%SelectedSourceOS%" equ "w10" set "C_ServicesStoreEngagement=-"
			set "C_StorePurchaseApp=-"
		)
		if "!C_ServicesStoreEngagement!" equ "-" (
			if "%SelectedSourceOS%" equ "w10" if "%ImageBuild%" gtr "17763" (
				set "C_SolitaireCollection=-"
			)
		)
	)
)

goto :EOF

:SelectWindowsComponentsMenu

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/v22H2 Client
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	cls
	echo.===============================================================================
	echo.%txtSelectWindowsComponentsMenu%
	echo.===============================================================================
	echo.  [1]   %GlobalInternet%
	echo.
	echo.  [2]   %GlobalMultimedia%
	echo.
	echo.  [3]   %GlobalNetwork%
	echo.
	echo.  [4]   %GlobalPrivacy%
	echo.
	echo.  [5]   %GlobalRemoting%
	echo.
	echo.  [6]   %GlobalSystem%
	echo.
	echo.  [7]   %GlobalSystemApps%
	echo.
	if "!FlagedEnterprise!" neq "" echo.
	if "%ImageBuild%" geq "17763" (
		if "!FlagedEnterprise!" equ "" (
			echo.  [8]   %GlobalWindowsApps%
		)
	)
	echo.
	echo.  %GlobalNoteYouCanMakeline1%
	echo.        %GlobalNoteYouCanMakeline2%
	echo.        %GlobalNoteYouCanMakeline3%
	echo.
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.
	echo.===============================================================================
	echo.
	choice /C:12345678X /N /M "%GlobalEnterChoice% "
	if errorlevel 9 goto :RemoveWindowsComponentsMenu
	if errorlevel 8 (
		if "%ImageBuild%" geq "17763" if "!FlagedEnterprise!" equ "" goto :RemoveWindowsAppsMenu
	)
	if errorlevel 7 goto :RemoveSystemAppsMenu
	if errorlevel 6 goto :RemoveSystemMenu
	if errorlevel 5 goto :RemoveRemotingMenu
	if errorlevel 4 goto :RemovePrivacyMenu
	if errorlevel 3 goto :RemoveNetworkMenu
	if errorlevel 2 goto :RemoveMultimediaMenu
	if errorlevel 1 goto :RemoveInternetMenu
)

:RemoveInternetMenu

set "CurrentMenu=RemoveInternetMenu"

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/22H1 Client Internet Menu
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtRemoveInternetComponentsMenu%
	echo.===============================================================================
	echo.

	set /A count=1
	for %%n in (
		AdobeFlashForWindows
		EdgeChromium
		InternetExplorer
	) do (
		set "OptionID=!count!"

		if "%%n" equ "AdobeFlashForWindows" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_AdobeFlashForWindows!^)Adobe Flash Player
		)
		if "%%n" equ "EdgeChromium" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_EdgeChromium!^)Edge Chromium
		)
		if "%%n" equ "InternetExplorer" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_InternetExplorer!^)Internet Explorer
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	echo.
	echo.
	echo.
	echo.
	echo.
	echo.
	echo.
	echo.  [S] %txtSelectAllInternet% ^| [D] %GlobalOption_Revert2Default%
	echo.  [B] %GlobalGo2NextRemovalMenu%
	echo.  [N] %GlobalGo2NextRemovalMenu%
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.
	echo.===============================================================================
	echo.
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :SelectWindowsComponentsMenu
		if /i "%%c" equ "N" goto :RemoveMultimediaMenu
		if /i "%%c" equ "B" goto :RemoveWindowsAppsMenu
		if /i "%%c" equ "D" (
			set "C_AdobeFlashForWindows=+"
			set "C_EdgeChromium=+"
			set "C_InternetExplorer=+"
		)
		if /i "%%c" equ "S" (
			for %%# in (
				AdobeFlashForWindows
				EdgeChromium
				InternetExplorer
			) do (
				set "C_%%#=-"
			)
			call :ListsandPreSets_Filter
		)
		if "%%c" equ "!AdobeFlashForWindows!" (
			if "!C_AdobeFlashForWindows!" equ "+" (
				set "C_AdobeFlashForWindows=-"
			) else (
				set "C_AdobeFlashForWindows=+"
			)
		)
		if "%%c" equ "!EdgeChromium!" (
			if "!C_EdgeChromium!" equ "+" (
				set "C_EdgeChromium=-"
			) else (
				set "C_EdgeChromium=+"
			)
		)
		if "%%c" equ "!InternetExplorer!" (
			if "!C_InternetExplorer!" equ "+" (
				set "C_InternetExplorer=-"
			) else (
				set "C_InternetExplorer=+"
			)
		)
	)
)
goto :!CurrentMenu!

:RemoveMultimediaMenu

set "CurrentMenu=RemoveMultimediaMenu"

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/22H1 Client Multimedia Menu
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtRemoveMultimediaComponentsMenu%
	echo.===============================================================================
	echo.

	set /A count=1
	for %%n in (
		FirstLogonAnimation
		GameExplorer
		LockScreenBackground
		ScreenSavers
		SnippingTool
		SoundThemes
		SpeechRecognition
		Wallpapers
		WindowsMediaPlayer
		WindowsPhotoViewer
		WinSAT
		WindowsThemes
		WindowsTIFFIFilter
	) do (
		if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
		if !count! gtr 9 set "OptionID=!count!"

		if "%%n" equ "FirstLogonAnimation" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_FirstLogonAnimation!^)%txtFirstLogonAnimation%
		)
		if "%%n" equ "GameExplorer" (
			if "!IntegratedGames!" equ "" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_GameExplorer!^)%txtGameExplorer%
				if "!C_GameExplorer!" equ "-" (
					echo.         %GlobalNoteNeeded4MicrosoftGames%
				)
			)
		)
		if "%%n" equ "LockScreenBackground" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_LockScreenBackground!^)%txtLockScreenBackground%
		)
		if "%%n" equ "ScreenSavers" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ScreenSavers!^)%txtScreenSavers%
		)
		if "%%n" equ "SnippingTool" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_SnippingTool!^)%txtSnippingTool%
		)
		if "%%n" equ "SoundThemes" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_SoundThemes!^)%txtSoundThemes%
		)
		if "%%n" equ "SpeechRecognition" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_SpeechRecognition!^)%txtSpeechRecognition%
				if "!C_SpeechRecognition!" equ "-" (
					if "%SelectedSourceOS%" equ "w10" (
						echo.         %txtNoteNeeded4CortanaNarrator%
					)
					if "%SelectedSourceOS%" equ "w11" (
						echo.         %txtNoteNeeded4CortanaNarratorOOBE%
					)
					echo.              ^| %GlobalSoTheySetted2Removed%
				)
			)
		)
		if "%%n" equ "Wallpapers" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Wallpapers!^)%txtWallpapers%
		)
		if "%%n" equ "WindowsMediaPlayer" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WindowsMediaPlayer!^)%txtWindowsMediaPlayer%
		)
		if "%%n" equ "WindowsPhotoViewer" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WindowsPhotoViewer!^)%txtWindowsPhotoViewer%
		)
		if "%%n" equ "WinSAT" (
			if "!IntegratedGames!" equ "" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_WinSAT!^)%txtWindowsSystemAssessmentTool%
				if "!C_WinSAT!" equ "-" (
					echo.         %GlobalNoteNeeded4MicrosoftGames%
				)
			)
		)
		if "%%n" equ "WindowsThemes" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WindowsThemes!^)%txtWindowsThemes%
		)
		if "%%n" equ "WindowsTIFFIFilter" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WindowsTIFFIFilter!^)%txtWindowsTIFFIFilter%
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	if "!IntegratedGames!" neq "" (
		if "!C_GameExplorer!" equ "-" set "C_GameExplorer=+"
		if "!C_WinSAT!" equ "-" set "C_WinSAT=+"
		echo.
		echo.
		echo.  %txtNoteYouIntegrateMicrosoftGamesline1%
		echo.         %txtNoteYouIntegrateMicrosoftGamesline2%
	)
	echo.
	echo.
	echo.  [S] %txtSelectAllMultimedia% ^| [D] %GlobalOption_Revert2Default%
	echo.  [B] %GlobalGo2NextRemovalMenu%
	echo.  [N] %GlobalGo2NextRemovalMenu%
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.
	echo.===============================================================================
	echo.
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :SelectWindowsComponentsMenu
		if /i "%%c" equ "N" goto :RemoveNetworkMenu
		if /i "%%c" equ "B" goto :RemoveInternetMenu
		if /i "%%c" equ "D" (
			set "C_FirstLogonAnimation=+"
			set "C_GameExplorer=+"
			set "C_LockScreenBackground=+"
			set "C_ScreenSavers=+"
			set "C_SnippingTool=+"
			set "C_SoundThemes=+"
			set "C_SpeechRecognition=+"
				set "C_Narrator=+"
			set "C_Wallpapers=+"
			set "C_WindowsMediaPlayer=+"
			set "C_WindowsPhotoViewer=+"
			set "C_WinSAT=+"
			set "C_WindowsThemes=+"
			set "C_WindowsTIFFIFilter=+"
		)
		if /i "%%c" equ "S" (
			for %%# in (
				FirstLogonAnimation
				GameExplorer
				LockScreenBackground
				ScreenSavers
				SnippingTool
				SoundThemes
				SpeechRecognition
				Wallpapers
				WindowsMediaPlayer
				WindowsPhotoViewer
				WinSAT
				WindowsThemes
				WindowsTIFFIFilter
			) do (
				set "C_%%#=-"
			)
			call :ListsandPreSets_Filter
		)
		if "%%c" equ "!FirstLogonAnimation!" (
			if "!C_FirstLogonAnimation!" equ "+" (
				set "C_FirstLogonAnimation=-"
			) else (
				set "C_FirstLogonAnimation=+"
			)
		)
		if "%%c" equ "!GameExplorer!" (
			if "!C_GameExplorer!" equ "+" (
				rem set "C_SolitaireCollection=-"
				set "C_GameExplorer=-"
			) else (
				set "C_GameExplorer=+"
				rem set "C_SolitaireCollection=+"
			)
		)
		if "%%c" equ "!LockScreenBackground!" (
			if "!C_LockScreenBackground!" equ "+" (
				set "C_LockScreenBackground=-"
			) else (
				set "C_LockScreenBackground=+"
			)
		)
		if "%%c" equ "!ScreenSavers!" (
			if "!C_ScreenSavers!" equ "+" (
				set "C_ScreenSavers=-"
			) else (
				set "C_ScreenSavers=+"
			)
		)
		if "%%c" equ "!SnippingTool!" (
			if "!C_SnippingTool!" equ "+" (
				set "C_SnippingTool=-"
			) else (
				set "C_SnippingTool=+"
			)
		)
		if "%%c" equ "!SoundThemes!" (
			if "!C_SoundThemes!" equ "+" (
				set "C_SoundThemes=-"
			) else (
				set "C_SoundThemes=+"
			)
		)
		if "%%c" equ "!SpeechRecognition!" (
			if "!C_SpeechRecognition!" equ "+" (
				set "C_Cortana=-"
				set "C_Narrator=-"
				set "C_SpeechRecognition=-"
			) else (
				set "C_SpeechRecognition=+"
				set "C_Narrator=+"
			)
		)
		if "%%c" equ "!Wallpapers!" (
			if "!C_Wallpapers!" equ "+" (
				set "C_Wallpapers=-"
			) else (
				set "C_Wallpapers=+"
			)
		)
		if "%%c" equ "!WindowsMediaPlayer!" (
			if "!C_WindowsMediaPlayer!" equ "+" (
				set "C_WindowsMediaPlayer=-"
			) else (
				set "C_WindowsMediaPlayer=+"
			)
		)
		if "%%c" equ "!WindowsPhotoViewer!" (
			if "!C_WindowsPhotoViewer!" equ "+" (
				set "C_WindowsPhotoViewer=-"
			) else (
				set "C_WindowsPhotoViewer=+"
			)
		)
		if "%%c" equ "!WinSAT!" (
			if "!C_WinSAT!" equ "+" (
				set "C_WinSAT=-"
			) else (
				set "C_WinSAT=+"
			)
		)
		if "%%c" equ "!WindowsThemes!" (
			if "!C_WindowsThemes!" equ "+" (
				set "C_WindowsThemes=-"
			) else (
				set "C_WindowsThemes=+"
			)
		)
		if "%%c" equ "!WindowsTIFFIFilter!" (
			if "!C_WindowsTIFFIFilter!" equ "+" (
				set "C_WindowsTIFFIFilter=-"
			) else (
				set "C_WindowsTIFFIFilter=+"
			)
		)
	)
)
goto :!CurrentMenu!

:RemoveNetworkMenu

set "CurrentMenu=RemoveNetworkMenu"

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/22H1 Client Network Menu
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtRemoveNetworkComponentsMenu%
	echo.===============================================================================
	echo.

	set /A count=1
	for %%n in (
		OfflineFiles
		OpenSSH
		RemoteDesktopClient
		RemoteDifferentialCompression
		SimpleTCPIPServices
		TelnetClient
		TFTPClient
		WindowsMail
	) do (
		set "OptionID=!count!"

		if "%%n" equ "OfflineFiles" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_OfflineFiles!^)%txtOfflineFiles%
		)
		if "%%n" equ "OpenSSH" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_OpenSSH!^)%txtOpenSSH%
		)
		if "%%n" equ "RemoteDesktopClient" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_RemoteDesktopClient!^)%txtRemoteDesktopClient%
		)
		if "%%n" equ "RemoteDifferentialCompression" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_RemoteDifferentialCompression!^)%txtRemoteDifferentialCompression%
		)
		if "%%n" equ "SimpleTCPIPServices" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_SimpleTCPIPServices!^)%txtSimpleTCPIPServices%
		)
		if "%%n" equ "TelnetClient" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_TelnetClient!^)%txtTelnetClient%
		)
		if "%%n" equ "TFTPClient" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_TFTPClient!^)%txtTFTPClient%
		)
		if "%%n" equ "WindowsMail" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo.  [!OptionID!] ^(!C_WindowsMail!^)%txtWindowsMail%
				if "!C_WindowsMail!" equ "-" (
					echo.         %txtNoteNeeded4WindowsMail%
				)
			)
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	echo.
	echo.
	echo.  [S] %txtSelectAllNetworkComponents% ^| [D] %GlobalOption_Revert2Default%
	echo.  [B] %GlobalGo2NextRemovalMenu%
	echo.  [N] %GlobalGo2NextRemovalMenu%
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.
	echo.===============================================================================
	echo.
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :SelectWindowsComponentsMenu
		if /i "%%c" equ "N" goto :RemovePrivacyMenu
		if /i "%%c" equ "B" goto :RemoveMultimediaMenu
		if /i "%%c" equ "D" (
			set "C_OfflineFiles=+"
			set "C_OpenSSH=+"
			set "C_RemoteDesktopClient=+"
			set "C_RemoteDifferentialCompression=+"
			set "C_SimpleTCPIPServices=+"
			set "C_TelnetClient=+"
			set "C_TFTPClient=+"
			set "C_WindowsMail=+"
		)
		if /i "%%c" equ "S" (
			for %%# in (
				OfflineFiles
				OpenSSH
				RemoteDesktopClient
				RemoteDifferentialCompression
				SimpleTCPIPServices
				TelnetClient
				TFTPClient
				WindowsMail
			) do (
				set "C_%%#=-"
			)
			call :ListsandPreSets_Filter
		)
		if "%%c" equ "!OfflineFiles!" (
			if "!C_OfflineFiles!" equ "+" (
				set "C_OfflineFiles=-"
			) else (
				set "C_OfflineFiles=+"
			)
		)
		if "%%c" equ "!OpenSSH!" (
			if "!C_OpenSSH!" equ "+" (
				set "C_OpenSSH=-"
			) else (
				set "C_OpenSSH=+"
			)
		)
		if "%%c" equ "!RemoteDesktopClient!" (
			if "!C_RemoteDesktopClient!" equ "+" (
				set "C_RemoteDesktopClient=-"
			) else (
				set "C_RemoteDesktopClient=+"
			)
		)
		if "%%c" equ "!RemoteDifferentialCompression!" (
			if "!C_RemoteDifferentialCompression!" equ "+" (
				set "C_RemoteDifferentialCompression=-"
			) else (
				set "C_RemoteDifferentialCompression=+"
			)
		)
		if "%%c" equ "!SimpleTCPIPServices!" (
			if "!C_SimpleTCPIPServices!" equ "+" (
				set "C_SimpleTCPIPServices=-"
			) else (
				set "C_SimpleTCPIPServices=+"
			)
		)
		if "%%c" equ "!TelnetClient!" (
			if "!C_TelnetClient!" equ "+" (
				set "C_TelnetClient=-"
			) else (
				set "C_TelnetClient=+"
			)
		)
		if "%%c" equ "!TFTPClient!" (
			if "!C_TFTPClient!" equ "+" (
				set "C_TFTPClient=-"
			) else (
				set "C_TFTPClient=+"
			)
		)
		if "%%c" equ "!WindowsMail!" (
			if "!C_WindowsMail!" equ "+" (
				set "C_WindowsMail=-"
				set "C_CommunicationsApps=-"
			) else (
				set "C_WindowsMail=+"
			)
		)
	)
)
goto :!CurrentMenu!

:RemovePrivacyMenu

set "CurrentMenu=RemovePrivacyMenu"

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/22H1 Client Privacy Menu
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtRemovePrivacyComponentsMenu%
	echo.===============================================================================
	echo.

	set /A count=1
	for %%n in (
		AssignedAccess
		CEIP
		FaceRecognition
		KernelDebugging
		LocationService
		PicturePassword
		PinEnrollment
		UnifiedTelemetryClient
		WiFiNetworkManager
		WindowsErrorReporting
		WindowsInsiderHub
	) do (
		if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
		if !count! gtr 9 set "OptionID=!count!"

		if "%%n" equ "AssignedAccess" (
			if /i "%ImageFlag:~,4%" neq "Core" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_AssignedAccess!^)%txtAssignedAccess%
				if "!C_AssignedAccess!" equ "-" (
					echo.         %txtNoteNeeded4Assignedline1%
					echo.              ^| %GlobalSoSetted2Removed%
				)
			)
		)
		if "%%n" equ "CEIP" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_CEIP!^)%txtCustomerExperienceImprovementProgram%
		)
		if "%%n" equ "FaceRecognition" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_FaceRecognition!^)%txtFaceRecognition%
		)
		if "%%n" equ "KernelDebugging" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_KernelDebugging!^)%txtKernelDebugging%
				if "!C_KernelDebugging!" equ "-" (
					echo.         %txtNoteDependsWindowsErrorReporting%
				)
			)
		)
		if "%%n" equ "LocationService" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_LocationService!^)%txtLocationService%
		)
		if "%%n" equ "PicturePassword" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_PicturePassword!^)%txtPicturePassword%
		)
		if "%%n" equ "PinEnrollment" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_PinEnrollment!^)%txtPinSignInSupport%
		)
		if "%%n" equ "UnifiedTelemetryClient" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_UnifiedTelemetryClient!^)%txtUnifiedTelemetryClient%
				if "!C_UnifiedTelemetryClient!" equ "-" (
					echo.         %txtNoteDependsWindowsErrorReporting%
				)
			)
		)
		if "%%n" equ "WiFiNetworkManager" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WiFiNetworkManager!^)%txtWiFiNetworkManager%
		)
		if "%%n" equ "WindowsErrorReporting" (
			if "%ImageBuild%" lss "18362" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "%ImageBuild%" geq "19041" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_WindowsErrorReporting!^)%txtWindowsErrorReporting%
				if "!C_WindowsErrorReporting!" equ "-" (
					echo.         %txtNoteNeeded4KernelDebuggingline1%
					if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
						echo.              ^| %txtNoteNeeded4KernelDebuggingline2%
					)
					echo.              ^| %GlobalSoTheySetted2Removed%
				)
			)
		)
		if "%%n" equ "WindowsInsiderHub" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WindowsInsiderHub!^)%txtWindowsInsiderHub%
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	echo.
	echo.
	echo.  [S] %txtSelectAllPrivacy% ^| [D] %GlobalOption_Revert2Default%
	echo.  [B] %GlobalGo2NextRemovalMenu%
	echo.  [N] %GlobalGo2NextRemovalMenu%
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.
	echo.===============================================================================
	echo.
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :SelectWindowsComponentsMenu
		if /i "%%c" equ "N" goto :RemoveRemotingMenu
		if /i "%%c" equ "B" goto :RemoveNetworkMenu
		if /i "%%c" equ "D" (
			set "C_AssignedAccess=+"
			set "C_CEIP=+"
			set "C_FaceRecognition=+"
			set "C_LocationService=+"
			set "C_PicturePassword=+"
			set "C_PinEnrollment=+"
			set "C_WiFiNetworkManager=+"
			set "C_WindowsErrorReporting=+"
				set "C_UnifiedTelemetryClient=+"
				set "C_KernelDebugging=+"
			set "C_WindowsInsiderHub=+"
		)
		if /i "%%c" equ "S" (
			for %%# in (
				AssignedAccess
				CEIP
				FaceRecognition
				KernelDebugging
				LocationService
				PicturePassword
				PinEnrollment
				UnifiedTelemetryClient
				WiFiNetworkManager
				WindowsErrorReporting
				WindowsInsiderHub
			) do (
				set "C_%%#=-"
			)
			call :ListsandPreSets_Filter
		)
		if "%%c" equ "!AssignedAccess!" (
			if "!C_AssignedAccess!" equ "+" (
				set "C_AssignedAccessLockApp=-"
				set "C_AssignedAccess=-"
			) else (
				set "C_AssignedAccess=+"
			)
		)
		if "%%c" equ "!CEIP!" (
			if "!C_CEIP!" equ "+" (
				set "C_CEIP=-"
			) else (
				set "C_CEIP=+"
			)
		)
		if "%%c" equ "!FaceRecognition!" (
			if "!C_FaceRecognition!" equ "+" (
				set "C_FaceRecognition=-"
			) else (
				set "C_FaceRecognition=+"
			)
		)
		if "%%c" equ "!KernelDebugging!" (
			if "!C_KernelDebugging!" equ "+" (
				set "C_KernelDebugging=-"
			) else (
				set "C_KernelDebugging=+"
				set "C_WindowsErrorReporting=+"
			)
		)
		if "%%c" equ "!LocationService!" (
			if "!C_LocationService!" equ "+" (
				set "C_LocationService=-"
			) else (
				set "C_LocationService=+"
			)
		)
		if "%%c" equ "!PicturePassword!" (
			if "!C_PicturePassword!" equ "+" (
				set "C_PicturePassword=-"
			) else (
				set "C_PicturePassword=+"
			)
		)
		if "%%c" equ "!PinEnrollment!" (
			if "!C_PinEnrollment!" equ "+" (
				set "C_PinEnrollment=-"
			) else (
				set "C_PinEnrollment=+"
			)
		)
		if "%%c" equ "!UnifiedTelemetryClient!" (
			if "!C_UnifiedTelemetryClient!" equ "+" (
				set "C_UnifiedTelemetryClient=-"
			) else (
				set "C_UnifiedTelemetryClient=+"
				set "C_WindowsErrorReporting=+"
			)
		)
		if "%%c" equ "!WiFiNetworkManager!" (
			if "!C_WiFiNetworkManager!" equ "+" (
				set "C_WiFiNetworkManager=-"
			) else (
				set "C_WiFiNetworkManager=+"
			)
		)
		if "%%c" equ "!WindowsErrorReporting!" (
			if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
				set "C_WindowsErrorReporting=+"
			) else (
				if "!C_WindowsErrorReporting!" equ "+" (
					set "C_UnifiedTelemetryClient=-"
					set "C_KernelDebugging=-"
					set "C_WindowsErrorReporting=-"
				) else (
					set "C_WindowsErrorReporting=+"
				)
			)
		)
		if "%%c" equ "!WindowsInsiderHub!" (
			if "!C_WindowsInsiderHub!" equ "+" (
				set "C_WindowsInsiderHub=-"
			) else (
				set "C_WindowsInsiderHub=+"
			)
		)
	)
)
goto :!CurrentMenu!

:RemoveRemotingMenu

set "CurrentMenu=RemoveRemotingMenu"

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/22H1 Client Remoting Menu
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtRemoveRemotingComponentsMenu%
	echo.===============================================================================
	echo.

	set /A count=1
	for %%n in (
		HomeGroup
		OneDrive
		MultiPointConnector
		RemoteAssistance
		RemoteDesktopServer
		RemoteRegistry
		WorkFoldersClient
	) do (
		set "OptionID=!count!"

		if "%%n" equ "HomeGroup" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_HomeGroup!^)%txtHomeGroup%
		)
		if "%%n" equ "OneDrive" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_OneDrive!^)%txtOneDriveDesktopClient%
		)
		if "%%n" equ "MultiPointConnector" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_MultiPointConnector!^)%txtMultiPointConnector%
		)
		if "%%n" equ "RemoteAssistance" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_RemoteAssistance!^)%txtRemoteAssistance%
		)
		if "%%n" equ "RemoteDesktopServer" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_RemoteDesktopServer!^)%txtRemoteDesktopServer%
		)
		if "%%n" equ "RemoteRegistry" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_RemoteRegistry!^)%txtRemoteRegistry%
		)
		if "%%n" equ "WorkFoldersClient" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo.  [!OptionID!] ^(!C_WorkFoldersClient!^)%txtWorkFoldersClient%
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	echo.
	echo.
	echo.  [S] %txtSelectAllRemoting% ^| [D] %GlobalOption_Revert2Default%
	echo.  [B] %GlobalGo2NextRemovalMenu%
	echo.  [N] %GlobalGo2NextRemovalMenu%
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.
	echo.===============================================================================
	echo.
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :SelectWindowsComponentsMenu
		if /i "%%c" equ "N" goto :RemoveSystemMenu
		if /i "%%c" equ "B" goto :RemovePrivacyMenu
		if /i "%%c" equ "D" (
			set "C_HomeGroup=+"
			set "C_OneDrive=+"
			set "C_MultiPointConnector=+"
			set "C_RemoteAssistance=+"
			set "C_RemoteDesktopServer=+"
			set "C_RemoteRegistry=+"
			set "C_WorkFoldersClient=+"
		)
		if /i "%%c" equ "S" (
			for %%# in (
				HomeGroup
				OneDrive
				MultiPointConnector
				RemoteAssistance
				RemoteDesktopServer
				RemoteRegistry
				WorkFoldersClient
			) do (
				set "C_%%#=-"
			)
			call :ListsandPreSets_Filter
		)
		if "%%c" equ "!HomeGroup!" (
			if "!C_HomeGroup!" equ "+" (
				set "C_HomeGroup=-"
			) else (
				set "C_HomeGroup=+"
			)
		)
		if "%%c" equ "!OneDrive!" (
			if "!C_OneDrive!" equ "+" (
				set "C_OneDrive=-"
			) else (
				set "C_OneDrive=+"
			)
		)
		if "%%c" equ "!MultiPointConnector!" (
			if "!C_MultiPointConnector!" equ "+" (
				set "C_MultiPointConnector=-"
			) else (
				set "C_MultiPointConnector=+"
			)
		)
		if "%%c" equ "!RemoteAssistance!" (
			if "!C_RemoteAssistance!" equ "+" (
				set "C_RemoteAssistance=-"
			) else (
				set "C_RemoteAssistance=+"
			)
		)
		if "%%c" equ "!RemoteDesktopServer!" (
			if "!C_RemoteDesktopServer!" equ "+" (
				set "C_RemoteDesktopServer=-"
			) else (
				set "C_RemoteDesktopServer=+"
			)
		)
		if "%%c" equ "!RemoteRegistry!" (
			if "!C_RemoteRegistry!" equ "+" (
				set "C_RemoteRegistry=-"
			) else (
				set "C_RemoteRegistry=+"
			)
		)
		if "%%c" equ "!WorkFoldersClient!" (
			if "!C_WorkFoldersClient!" equ "+" (
				set "C_WorkFoldersClient=-"
			) else (
				set "C_WorkFoldersClient=+"
			)
		)
	)
)
goto :!CurrentMenu!

:RemoveSystemMenu

set "CurrentMenu=RemoveSystemMenu"

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/22H1 Client System Menu
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtRemoveSystemComponentsMenu%
	echo.===============================================================================

	set /A count=1
	for %%n in (
		AccessibilityTools
		Calculator
		DeviceLockdown
		EaseOfAccessCursors
		EaseOfAccessThemes
		EasyTransfer
		FileHistory
		Magnifier
		ManualSetup
		Narrator
		Notepad
		OnScreenKeyboard
		Paint_System
		ProjFS
		SecurityCenter
		StepsRecorder
		StorageSpaces
		SystemRestore
		WindowsBackup
		WindowsFirewall
		WindowsSubsystemForLinux
		WindowsToGo
		Wordpad
	) do (
		if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
		if !count! gtr 9 set "OptionID=!count!"

		if "%%n" equ "AccessibilityTools" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_AccessibilityTools!^)%txtAccessibilityTools%
				if "!C_AccessibilityTools!" equ "-" (
					echo.         %txtNoteNeeded4Easeline1%
					echo.              ^|%txtNoteNeeded4Easeline2%
					echo.              ^| %GlobalSoTheySetted2Removed%
				)
			)
		)
		if "%%n" equ "Calculator" (
			if "!FlagedEnterprise!" neq "" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Calculator!^)%txtCalculator%
		)
		if "%%n" equ "DeviceLockdown" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_DeviceLockdown!^)%txtDeviceLockdown%
		)
		if "%%n" equ "EaseOfAccessCursors" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_EaseOfAccessCursors!^)%txtEaseAccessCursors%
				if "!C_EaseOfAccessCursors!" equ "-" (
					echo.         %GlobalNoteDependsAccessibilityTools%
				)
			)
		)
		if "%%n" equ "EaseOfAccessThemes" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_EaseOfAccessThemes!^)%txtEaseAccessThemes%
				if "!C_EaseOfAccessThemes!" equ "-" (
					echo.         %GlobalNoteDependsAccessibilityTools%
				)
			)
		)
		if "%%n" equ "EasyTransfer" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_EasyTransfer!^)%txtEaseTransfer%
		)
		if "%%n" equ "FileHistory" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_FileHistory!^)%txtFileHistory%
		)
		if "%%n" equ "Magnifier" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_Magnifier!^)%txtMagnifier%
				if "!C_Magnifier!" equ "-" (
					echo.         %GlobalNoteDependsAccessibilityTools%
				)
			)
		)
		if "%%n" equ "ManualSetup" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ManualSetup!^)%txtManualSetup%
		)
		if "%%n" equ "Narrator" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_Narrator!^)%txtNarrator%
				if "!C_Narrator!" equ "-" (
					echo.         %txtNoteDependsAccessibilityToolsSpeech%
				)
			)
		)
		if "%%n" equ "Notepad" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Notepad!^)%txtNotepad%
		)
		if "%%n" equ "OnScreenKeyboard" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_OnScreenKeyboard!^)%txtOnScreenKeyboard%
				if "!C_OnScreenKeyboard!" equ "-" (
					echo.         %GlobalNoteDependsAccessibilityTools%
				)
			)
		)
		if "%%n" equ "Paint_System" (
			if "%SelectedSourceOS%" equ "w10" (
				if "!TKHC_Paint!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Paint!^)%txtPaint%
		)
		if "%%n" equ "ProjFS" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ProjFS!^)%txtProjectedFileSystem%
		)
		if "%%n" equ "SecurityCenter" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_SecurityCenter!^)%txtSecurityCenter%
				if "!C_SecurityCenter!" equ "-" (
					echo.         %txtNoteDependsWindowsDefender%
				)
			)
		)
		if "%%n" equ "StepsRecorder" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_StepsRecorder!^)%txtStepsRecorder%
		)
		if "%%n" equ "StorageSpaces" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_StorageSpaces!^)%txtStorageSpaces%
		)
		if "%%n" equ "SystemRestore" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_SystemRestore!^)%txtSystemRestore%
				if "!C_SystemRestore!" equ "-" (
					echo.         %txtNoteDependsWindowsBackup%
				)
			)
		)
		if "%%n" equ "WindowsBackup" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_WindowsBackup!^)%txtWindowsBackup%
				if "!C_WindowsBackup!" equ "-" (
					echo.         %txtNoteNeeded4SystemRestore%
					echo.              ^| %GlobalSoSetted2Removed%
				)
			)
		)
		if "%%n" equ "WindowsFirewall" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WindowsFirewall!^)%txtWindowsFirewall%
		)
		if "%%n" equ "WindowsSubsystemForLinux" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WindowsSubsystemForLinux!^)%GlobalSubsystem2Linux%
		)
		if "%%n" equ "WindowsToGo" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WindowsToGo!^)%txtWindowsToGo%
		)
		if "%%n" equ "Wordpad" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Wordpad!^)%txtWordpad%
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)
	echo.
	echo.  [S] %txtSelectAllSystem% ^| [D] %GlobalOption_Revert2Default%
	echo.  [B] %GlobalGo2NextRemovalMenu%
	echo.  [N] %GlobalGo2NextRemovalMenu%
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.===============================================================================
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :SelectWindowsComponentsMenu
		if /i "%%c" equ "N" goto :RemoveSystemAppsMenu
		if /i "%%c" equ "B" goto :RemoveRemotingMenu
		if /i "%%c" equ "D" (
			set "C_Calculator=+"
			set "C_AccessibilityTools=+"
				set "C_EaseOfAccessCursors=+"
				set "C_EaseOfAccessThemes=+"
				set "C_Magnifier=+"
				set "C_Narrator=+"
				set "C_OnScreenKeyboard=+"
			set "C_DeviceLockdown=+"
			set "C_EaseOfAccessThemes=+"
			set "C_SpeechRecognition=+"
			set "C_EasyTransfer=+"
			set "C_FileHistory=+"
			set "C_Magnifier=+"
			set "C_ManualSetup=+"
			set "C_Notepad=+"
			set "C_OnScreenKeyboard=+"
			set "C_Paint=+"
			set "C_ProjFS=+"
			set "C_SecurityCenter=+"
			set "C_StepsRecorder=+"
			set "C_StorageSpaces=+"
			set "C_WindowsBackup=+"
				set "C_SystemRestore=+"
			set "C_WindowsFirewall=+"
			set "C_WindowsSubsystemForLinux=+"
			set "C_Wordpad=+"
			set "C_WindowsToGo=+"
		)
		if /i "%%c" equ "S" (
			for %%# in (
				AccessibilityTools
				Calculator
				DeviceLockdown
				EaseOfAccessCursors
				EaseOfAccessThemes
				EasyTransfer
				FileHistory
				Magnifier
				ManualSetup
				Narrator
				Notepad
				OnScreenKeyboard
				Paint_System
				ProjFS
				SecurityCenter
				StepsRecorder
				StorageSpaces
				SystemRestore
				WindowsBackup
				WindowsFirewall
				WindowsSubsystemForLinux
				WindowsToGo
				Wordpad
			) do (
				if "%%#" equ "Paint_System" if "%SelectedSourceOS%" equ "w10" set "C_Paint=-"
				if "%%#" neq "Paint_System" set "C_%%#=-"
			)
			call :ListsandPreSets_Filter
		)
		if "%%c" equ "!AccessibilityTools!" (
			if "!C_AccessibilityTools!" equ "+" (
				set "C_OnScreenKeyboard=-"
				set "C_Narrator=-"
				set "C_Magnifier=-"
				set "C_EaseOfAccessThemes=-"
				set "C_EaseOfAccessCursors=-"
				set "C_AccessibilityTools=-"
			) else (
				set "C_AccessibilityTools=+"
			)
		)
		if "%%c" equ "!Calculator!" (
			if "!C_Calculator!" equ "+" (
				set "C_Calculator=-"
			) else (
				set "C_Calculator=+"
			)
		)
		if "%%c" equ "!DeviceLockdown!" (
			if "!C_DeviceLockdown!" equ "+" (
				set "C_DeviceLockdown=-"
			) else (
				set "C_DeviceLockdown=+"
			)
		)
		if "%%c" equ "!EaseOfAccessCursors!" (
			if "!C_EaseOfAccessCursors!" equ "+" (
				set "C_EaseOfAccessCursors=-"
			) else (
				set "C_AccessibilityTools=+"
				set "C_EaseOfAccessCursors=+"
			)
		)
		if "%%c" equ "!EaseOfAccessThemes!" (
			if "!C_EaseOfAccessThemes!" equ "+" (
				set "C_EaseOfAccessThemes=-"
			) else (
				set "C_AccessibilityTools=+"
				set "C_EaseOfAccessThemes=+"
			)
		)
		if "%%c" equ "!EasyTransfer!" (
			if "!C_EasyTransfer!" equ "+" (
				set "C_EasyTransfer=-"
			) else (
				set "C_EasyTransfer=+"
			)
		)
		if "%%c" equ "!FileHistory!" (
			if "!C_FileHistory!" equ "+" (
				set "C_FileHistory=-"
			) else (
				set "C_FileHistory=+"
			)
		)
		if "%%c" equ "!Magnifier!" (
			if "!C_Magnifier!" equ "+" (
				set "C_Magnifier=-"
			) else (
				set "C_AccessibilityTools=+"
				set "C_Magnifier=+"
			)
		)
		if "%%c" equ "!ManualSetup!" (
			if "!C_ManualSetup!" equ "+" (
				set "C_ManualSetup=-"
			) else (
				set "C_ManualSetup=+"
			)
		)
		if "%%c" equ "!Narrator!" (
			if "!C_Narrator!" equ "+" (
				set "C_Narrator=-"
			) else (
				set "C_SpeechRecognition=+"
				set "C_AccessibilityTools=+"
				set "C_Narrator=+"
			)
		)
		if "%%c" equ "!Notepad!" (
			if "!C_Notepad!" equ "+" (
				set "C_Notepad=-"
			) else (
				set "C_Notepad=+"
			)
		)
		if "%%c" equ "!OnScreenKeyboard!" (
			if "!C_OnScreenKeyboard!" equ "+" (
				set "C_OnScreenKeyboard=-"
			) else (
				set "C_AccessibilityTools=+"
				set "C_OnScreenKeyboard=+"
			)
		)
		if "%%c" equ "!Paint_System!" (
			if "!C_Paint!" equ "+" (
				set "C_Paint=-"
			) else (
				set "C_Paint=+"
			)
		)
		if "%%c" equ "!ProjFS!" (
			if "!C_ProjFS!" equ "+" (
				set "C_ProjFS=-"
			) else (
				set "C_ProjFS=+"
			)
		)
		if "%%c" equ "!SecurityCenter!" (
			if "!C_SecurityCenter!" equ "+" (
				set "C_SecurityCenter=-"
			) else (
				set "C_SecurityCenter=+"
				set "C_WindowsDefender=+"
			)
		)
		if "%%c" equ "!StepsRecorder!" (
			if "!C_StepsRecorder!" equ "+" (
				set "C_StepsRecorder=-"
			) else (
				set "C_StepsRecorder=+"
			)
		)
		if "%%c" equ "!StorageSpaces!" (
			if "!C_StorageSpaces!" equ "+" (
				set "C_StorageSpaces=-"
			) else (
				set "C_StorageSpaces=+"
			)
		)
		if "%%c" equ "!SystemRestore!" (
			if "!C_SystemRestore!" equ "+" (
				set "C_SystemRestore=-"
			) else (
				set "C_SystemRestore=+"
				set "C_WindowsBackup=+
			)
		)
		if "%%c" equ "!WindowsBackup!" (
			if "!C_WindowsBackup!" equ "+" (
				set "C_SystemRestore=-"
				set "C_WindowsBackup=-"
			) else (
				set "C_WindowsBackup=+"
				set "C_SystemRestore=+"
			)
		)
		if "%%c" equ "!WindowsFirewall!" (
			if "!C_WindowsFirewall!" equ "+" (
				set "C_WindowsFirewall=-"
			) else (
				set "C_WindowsFirewall=+"
			)
		)
		if "%%c" equ "!WindowsSubsystemForLinux!" (
			if "!C_WindowsSubsystemForLinux!" equ "+" (
				set "C_WindowsSubsystemForLinux=-"
			) else (
				set "C_WindowsSubsystemForLinux=+"
			)
		)
		if "%%c" equ "!Wordpad!" (
			if "!C_Wordpad!" equ "+" (
				set "C_Wordpad=-"
			) else (
				set "C_Wordpad=+"
			)
		)
		if "%%c" equ "!WindowsToGo!" (
			if "!C_WindowsToGo!" equ "+" (
				set "C_WindowsToGo=-"
			) else (
				set "C_WindowsToGo=+"
			)
		)
	)
)
goto :!CurrentMenu!

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/22H1 Client Edition System Apps Menu
:RemoveSystemAppsMenu

set "CurrentMenu=RemoveSystemAppsMenu"

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtRemoveSystemAppsMenu%
	echo.===============================================================================
	echo.

	set /A count=1
	for %%n in (
		AccountsControl
		AddSuggestedFoldersToLibraryDialog
		AppResolverUX
		AssignedAccessLockApp
		AsyncTextService
		AADBrokerPlugin
		CallingShellApp
		CBSPreview
		CapturePicker
		ContentDeliveryManager
		Cortana_SystemApps
		CredDialogHost
		Edge
		EdgeDevToolsClient
		WindowsReaderPDF
		ECApp
		FileExplorer
		FilePicker
		LockApp
		MapControl
		XGpuEjectDialog
		NarratorQuickStart
		NcsiUwpApp
		OOBENetworkCaptivePortal
		OOBENetworkConnectionFlow
		ParentalControls
		PeopleExperienceHost
		PinningConfirmationDialog
		PPIProjection
		PrintDialog
		QuickAssist_SystemApps
		RetailDemoContent
		SearchApp
		SettingSync
		SkypeORTC
		SmartScreen
		SecureAssessmentBrowser
		WebcamExperience
		Win32WebViewHost
		WindowsDefender
		BioEnrollment
		WindowsMixedReality
		WindowsStoreClient
		XboxClient
		XboxGameCallableUI
	) do (
		if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
		if !count! gtr 9 set "OptionID=!count!"

		if "%%n" equ "AccountsControl" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_AccountsControl!^)%txtAccountsControlApp2MicrosoftAccount%
				if "!C_AccountsControl!" equ "-" (
					echo.         %GlobalNoteNeeded4WindowsStore%
				)
			)
		)
		if "%%n" equ "AddSuggestedFoldersToLibraryDialog" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_AddSuggestedFoldersToLibraryDialog!^)%txtAddSuggestedFolders2LibraryDialog%
			)
		)
		if "%%n" equ "AppResolverUX" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_AppResolverUX!^)%txtAppResolverUXModernOpenWithDialog%
			)
		)
		if "%%n" equ "AssignedAccessLockApp" (
			if /i "%ImageFlag:~,4%" neq "Core" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_AssignedAccessLockApp!^)%txtAssignedAccessLockAppKioskMode%
				if "!C_AssignedAccessLockApp!" equ "-" (
					echo.         %txtNoteDependsAssignedAccess%
				)
			)
		)
		if "%%n" equ "AsyncTextService" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_AsyncTextService!^)%txtAsyncTextServiceMessaging%
		)
		if "%%n" equ "AADBrokerPlugin" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_AADBrokerPlugin!^)%txtAzureActiveDirectoryAppX%
				echo.         %txtCredentialHandler4MicrosoftAzure%
				if "!C_AADBrokerPlugin!" equ "-" (
					if "%ImageBuild%" lss "19041" (
						echo.         %txtNoteNeeded4MicrosoftAccount%
					) else (
						echo.         %GlobalNoteNeeded4WindowsStore%
					)
				)
			)
		)
		if "%%n" equ "CallingShellApp" (
			if "%ImageBuild%" gtr "17763" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_CallingShellApp!^)%txtCallingShellApp2Host%
		)
		if "%%n" equ "CBSPreview" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_CBSPreview!^)%txtCameraBarcodeScanner%
		)
		if "%%n" equ "CapturePicker" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_CapturePicker!^)%txtCapturePickerAystemPickerUI%
				if "!C_CapturePicker!" equ "-" (
					if "%ImageBuild%" geq "19041" (
						if "%SelectedSourceOS%" equ "w10" echo.         %txtNoteNeeded4SnipSketch%
						if "%SelectedSourceOS%" equ "w11" echo.         %txtNoteNeeded4SnippingTool%
						echo.              ^| %GlobalSoSetted2Removed%
					)
				)
			)
		)
		if "%%n" equ "ContentDeliveryManager" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_ContentDeliveryManager!^)%txtContentDeliveryManagerAutomatic%
				if "!C_ContentDeliveryManager!" equ "-" if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
					echo.         %txtNoteNeeded4OutBox%
				)
			)
		)
		if "%%n" equ "Cortana_SystemApps" (
			if "%ImageBuild%" lss "19041" (
				if "!TKHC_Cortana!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_Cortana!^)%txtCortanaPersonalAssistant%
				if "!C_Cortana!" equ "-" (
					if "%ImageBuild%" gtr "17763" (
						echo.         %txtNoteDependsSpeechRecognition%
						echo.              ^| %txtRemovingCortanaMayBe%
					)
				)
			)
		)
		if "%%n" equ "CredDialogHost" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_CredDialogHost!^)%txtCredentialDialogHostAuthentication%
		)
		if "%%n" equ "Edge" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Edge!^)%txtEdgeClassicBrowser%
		)
		if "%%n" equ "EdgeDevToolsClient" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_EdgeDevToolsClient!^)%txtEdgeDeveloperToolsClient%
				echo.         %txtAnExtension2Edge%
				if "!C_EdgeDevToolsClient!" equ "-" (
					echo.         %GlobalNoteDependsEdge%
				)
			)
		)
		if "%%n" equ "WindowsReaderPDF" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_WindowsReaderPDF!^)%txtWindowsReader%
				if "!C_WindowsReaderPDF!" equ "-" (
					echo.         %GlobalNoteDependsEdge%
				)
			)
		)
		if "%%n" equ "ECApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_ECApp!^)%txtEyeControlApp%
				if "!C_ECApp!" equ "-" (
					if "%ImageBuild%" geq "19041" if "%ImageBuild%" lss "21996" (
						echo.         %GlobalNoteDependsMixedReality%
					)
				)
			)
		)
		if "%%n" equ "FileExplorer" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_FileExplorer!^)%txtFileExplorerModern%
			)
		)
		if "%%n" equ "FilePicker" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_FilePicker!^)%txtFilePickerModern%
			)
		)
		if "%%n" equ "LockApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_LockApp!^)%txtLockAppContainer%
		)
		if "%%n" equ "MapControl" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_MapControl!^)%txtMapControl%
				if "!C_MapControl!" equ "-" (
					echo.         %txtNoteNeeded4Maps%
					echo.              ^| %GlobalSoSetted2Removed%
				)
			)
		)
		if "%%n" equ "XGpuEjectDialog" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_XGpuEjectDialog!^)%txtModernExternalGPUEject%
		)
		if "%%n" equ "NarratorQuickStart" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_NarratorQuickStart!^)%txtNarratorQuickStart%
		)
		if "%%n" equ "NcsiUwpApp" (
			if "%ImageBuild%" geq "19041" if "%ImageBuild%" leq "22000" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_NcsiUwpApp!^)%txtNetworkConnectivityStatus%
		)
		if "%%n" equ "OOBENetworkCaptivePortal" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_OOBENetworkCaptivePortal!^)%txtOOBENetworkCaptive%
		)
		if "%%n" equ "OOBENetworkConnectionFlow" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_OOBENetworkConnectionFlow!^)%txtOOBEConnectionFlow%
		)
		if "%%n" equ "ParentalControls" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ParentalControls!^)%txtParentalControls%
		)
		if "%%n" equ "PeopleExperienceHost" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_PeopleExperienceHost!^)%txtPeopleExperienceHost%
				if "!C_PeopleExperienceHost!" equ "-" (
					echo.         %txtNoteNeeded4People%
					echo.              ^| %GlobalSoSetted2Removed%
				)
			)
		)
		if "%%n" equ "PinningConfirmationDialog" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_PinningConfirmationDialog!^)%txtPinningConfirmationDialog%
			)
		)
		if "%%n" equ "PPIProjection" (
			if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "19041" (
				if "!FlagedEnterprise!" equ "" (
					if "!TKHC_%%n!" neq "" set "%%n=!count!"
				)
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_PPIProjection!^)%txtPPIProjection%
		)
		if "%%n" equ "PrintDialog" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_PrintDialog!^)%txtPrintDialog%
		)
		if "%%n" equ "QuickAssist_SystemApps" (
			if "%ImageBuild%" lss "22563" (
				if "!TKHC_QuickAssist!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_QuickAssist!^)%txtQuickAssistApp%
		)
		if "%%n" equ "RetailDemoContent" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_RetailDemoContent!^)%txtRetailDemoContent%
		)
		if "%%n" equ "SearchApp" (
			if "%ImageBuild%" geq "19041" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_SearchApp!^)%txtSearchApp%
		)
		if "%%n" equ "SettingSync" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_SettingSync!^)%txtSettingSync%
		)
		if "%%n" equ "SkypeORTC" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_SkypeORTC!^)%txtSkypeORTC%
				if "!C_SkypeORTC!" equ "-" (
					echo.         %txtNoteNeeded2Skype%
					echo.              ^| %GlobalSoSetted2Removed%
				)
			)
		)
		if "%%n" equ "SmartScreen" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_SmartScreen!^)%txtSmartScreen%
		)
		if "%%n" equ "SecureAssessmentBrowser" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_SecureAssessmentBrowser!^)%txtTakeTestApp%
		)
		if "%%n" equ "WebcamExperience" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WebcamExperience!^)%txtWebcamExperience%
		)
		if "%%n" equ "Win32WebViewHost" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Win32WebViewHost!^)%txtWin32WebView%
		)
		if "%%n" equ "WindowsDefender" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_WindowsDefender!^)%txtWindowsDefenderApp%
				if "!C_WindowsDefender!" equ "-" (
					echo.         %txtNoteNeeded4Security%
				)
			)
		)
		if "%%n" equ "BioEnrollment" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_BioEnrollment!^)%txtWindowsHello%
		)
		if "%%n" equ "WindowsMixedReality" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_WindowsMixedReality!^)%txtWindowsMixedReality%
				if "!C_WindowsMixedReality!" equ "-" (
					if "%ImageBuild%" geq "19041" (
						echo.         %txtNoteNeeded4MixedReality%
						echo.              ^| %txtAndEyeControl%
						echo.              ^| %GlobalSoTheySetted2Removed%
					) else (
						echo.         %txtWindowsMixedRealityPortal%
						echo.              ^| %GlobalSoTheySetted2Removed%
					)
				)
			)
		)
		if "%%n" equ "WindowsStoreClient" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_WindowsStoreClient!^)%txtWindowsStoreBackend%
				if "!C_WindowsStoreClient!" equ "-" (
					echo.         %txtNoteNeeded4WindowsStore%
					echo.              ^| %txtStoreExperienceHostSolitaire%
					echo.              ^| %GlobalSoTheySetted2Removed%
				)
			)
		)
		if "%%n" equ "XboxClient" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				if "%SelectedSourceOS%" equ "w10" (
					echo. [!OptionID!] ^(!C_XboxClient!^)%txtXboxConsoleCompanion%
					if "!C_XboxClient!" equ "-" (
						echo.         %txtNoteNeeded4XboxConsole%
						echo.              ^| %GlobalSoSetted2Removed%
					)
				)
				if "%SelectedSourceOS%" equ "w11" (
					echo. [!OptionID!] ^(!C_XboxClient!^)%txtGamingAppBackend%
					if "!C_XboxClient!" equ "-" (
						echo.         %txtNoteNeeded4GamingApp%
						echo.              ^| %GlobalSoSetted2Removed%
					)
				)
			)
		)
		if "%%n" equ "XboxGameCallableUI" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_XboxGameCallableUI!^)%txtXboxLive%
				if "!C_XboxGameCallableUI!" equ "-" (
					echo.         %txtNoteNeeded4Solitaire%
					echo.              ^| %GlobalSoSetted2Removed%
				)
			)
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	echo.
	echo.  [S] %txtSelectAllSystemApps% ^| [D] %GlobalOption_Revert2Default%
	echo.  [B] %GlobalGo2NextRemovalMenu%
	echo.  [N] %GlobalGo2NextRemovalMenu%
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.===============================================================================
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :SelectWindowsComponentsMenu
		if /i "%%c" equ "N" goto :RemoveWindowsAppsMenu
		if /i "%%c" equ "B" goto :RemoveSystemMenu
		if /i "%%c" equ "D" (
			set "C_AccountsControl=+"
			set "C_AddSuggestedFoldersToLibraryDialog=+"
			set "C_AppResolverUX=+"
			set "C_AssignedAccess=+"
				set "C_AssignedAccessLockApp=+"
			set "C_AsyncTextService=+"
			set "C_AADBrokerPlugin=+"
			set "C_BioEnrollment=+"
			set "C_CapturePicker=+"
			set "C_CBSPreview=+"
			set "C_ContentDeliveryManager=+"
			set "C_SpeechRecognition=+"
				set "C_Cortana=+"
			set "C_CredDialogHost=+"
			if "%ImageBuild%" geq "19041" set "C_WindowsMixedReality=+"
				set "C_ECApp=+"
			set "C_FileExplorer=+"
			set "C_FilePicker=+"
			set "C_LockApp=+"
			set "C_MapControl=+"
				set "C_Maps=+"
			set "C_NarratorQuickStart=+"
			set "C_NcsiUwpApp=+"

			set "C_OOBENetworkCaptivePortal=+"
			set "C_OOBENetworkConnectionFlow=+"
			set "C_ParentalControls=+"
			set "C_PeopleExperienceHost=+"
				set "C_People=+"
			set "C_PinningConfirmationDialog=+"
			set "C_PrintDialog=+"
			set "C_QuickAssist=+"
			set "C_RetailDemoContent=+"
			set "C_SearchApp=+"
			set "C_SettingSync=+"

			set "C_SkypeORTC=+"
				set "C_SkypeApp=+"
			set "C_WebcamExperience=+"
			set "C_Win32WebViewHost=+"
			set "C_SmartScreen=+"
				set "C_WindowsStoreApp=+"
			set "C_WindowsDefender=+"
				set "C_SecurityCenter=+"
			set "C_WindowsMixedReality=+"

			set "C_SecureAssessmentBrowser=+"
			set "C_PPIProjection=+"
			set "C_Edge=+"
				set "C_EdgeDevToolsClient=+"
				set "C_WindowsReaderPDF=+"
			set "C_CallingShellApp=+"
			set "C_XGpuEjectDialog=+"
			set "C_XboxGameCallableUI=+"
				set "C_SolitaireCollection=+"
			set "C_XboxClient=+"
			set "C_WindowsStoreClient=+"
		)
		if /i "%%c" equ "S" (
			for %%# in (
				AccountsControl
				AddSuggestedFoldersToLibraryDialog
				AppResolverUX
				AssignedAccessLockApp
				AsyncTextService
				AADBrokerPlugin
				CallingShellApp
				CBSPreview
				CapturePicker
				ContentDeliveryManager
				Cortana_SystemApps
				CredDialogHost
				Edge
				EdgeDevToolsClient
				WindowsReaderPDF
				ECApp
				FileExplorer
				FilePicker
				LockApp
				MapControl
				XGpuEjectDialog
				NarratorQuickStart
				NcsiUwpApp
				OOBENetworkCaptivePortal
				OOBENetworkConnectionFlow
				ParentalControls
				PeopleExperienceHost
				PinningConfirmationDialog
				PPIProjection
				PrintDialog
				QuickAssist_SystemApps
				RetailDemoContent
				SearchApp
				SettingSync
				SkypeORTC
				SmartScreen
				SecureAssessmentBrowser
				WebcamExperience
				Win32WebViewHost
				WindowsDefender
				BioEnrollment
				WindowsMixedReality
				WindowsStoreClient
				XboxClient
				XboxGameCallableUI
			) do (
				if "%%#" equ "Cortana_SystemApps" if "%ImageBuild%" lss "19041" set "C_Cortana=-"
				if "%%#" equ "QuickAssist_SystemApps" if "%ImageBuild%" lss "22563" set "C_QuickAssist=-"
				if "%%#" neq "Cortana_SystemApps" if "%%#" neq "QuickAssist_SystemApps" set "C_%%#=-"
			)
			call :ListsandPreSets_Filter
		)
		if "%%c" equ "!AccountsControl!" (
			if "!C_AccountsControl!" equ "+" (
				set "C_AccountsControl=-"
				set "C_WindowsStoreApp=-"
				if "%SelectedSourceOS%" equ "w10" set "C_ServicesStoreEngagement=-"
				set "C_StorePurchaseApp=-"
				if "%ImageBuild%" gtr "17763" (
					set "C_SolitaireCollection=-"
					if "%ImageBuild%" leq "19044" set "C_StickyNotes=-"
				)
			) else (
				set "C_AccountsControl=+"
			)
		)
		if "%%c" equ "!AddSuggestedFoldersToLibraryDialog!" (
			if "!C_AddSuggestedFoldersToLibraryDialog!" equ "+" (
				set "C_AddSuggestedFoldersToLibraryDialog=-"
			) else (
				set "C_AddSuggestedFoldersToLibraryDialog=+"
			)
		)
		if "%%c" equ "!AppResolverUX!" (
			if "!C_AppResolverUX!" equ "+" (
				set "C_AppResolverUX=-"
			) else (
				set "C_AppResolverUX=+"
			)
		)
		if "%%c" equ "!AssignedAccessLockApp!" (
			if "!C_AssignedAccessLockApp!" equ "+" (
				set "C_AssignedAccessLockApp=-"
			) else (
				set "C_AssignedAccess=+"
				set "C_AssignedAccessLockApp=+"
			)
		)
		if "%%c" equ "!AsyncTextService!" (
			if "!C_AsyncTextService!" equ "+" (
				set "C_AsyncTextService=-"
			) else (
				set "C_AsyncTextService=+"
			)
		)
		if "%%c" equ "!AADBrokerPlugin!" (
			if "!C_AADBrokerPlugin!" equ "+" (
				set "C_WindowsStoreApp=-"
				if "%SelectedSourceOS%" equ "w10" set "C_ServicesStoreEngagement=-"
				set "C_StorePurchaseApp=-"
				if "%ImageBuild%" gtr "17763" (
					set "C_SolitaireCollection=-"
					if "%ImageBuild%" leq "19044" set "C_StickyNotes=-"
				)
				set "C_AADBrokerPlugin=-"
			) else (
				set "C_AADBrokerPlugin=+"
			)
		)
		if "%%c" equ "!CallingShellApp!" (
			if "!C_CallingShellApp!" equ "+" (
				set "C_CallingShellApp=-"
			) else (
				set "C_CallingShellApp=+"
			)
		)
		if "%%c" equ "!CBSPreview!" (
			if "!C_CBSPreview!" equ "+" (
				set "C_CBSPreview=-"
			) else (
				set "C_CBSPreview=+"
			)
		)
		if "%%c" equ "!CapturePicker!" (
			if "!C_CapturePicker!" equ "+" (
				set "C_CapturePicker=-"
				set "C_ScreenSketch=-"
			) else (
				set "C_CapturePicker=+"
			)
		)
		if "%%c" equ "!ContentDeliveryManager!" (
			if "!C_ContentDeliveryManager!" equ "+" (
				set "C_ContentDeliveryManager=-"
			) else (
				set "C_ContentDeliveryManager=+"
			)
		)
		if "%%c" equ "!Cortana_SystemApps!" (
			if "!C_Cortana!" equ "+" (
				set "C_Cortana=-"
			) else (
				set "C_SpeechRecognition=+"
				set "C_Cortana=+"
			)
		)
		if "%%c" equ "!CredDialogHost!" (
			if "!C_CredDialogHost!" equ "+" (
				set "C_CredDialogHost=-"
			) else (
				set "C_CredDialogHost=+"
			)
		)
		if "%%c" equ "!Edge!" (
			if "!C_Edge!" equ "+" (
				set "C_Edge=-"
				set "C_EdgeDevToolsClient=-"
				set "C_WindowsReaderPDF=-"
			) else (
				set "C_WindowsReaderPDF=+"
				set "C_EdgeDevToolsClient=+"
				set "C_Edge=+"
			)
		)
		if "%%c" equ "!EdgeDevToolsClient!" (
			if "!C_EdgeDevToolsClient!" equ "+" (
				set "C_EdgeDevToolsClient=-"
			) else (
				set "C_Edge=+"
				set "C_EdgeDevToolsClient=+"
			)
		)
		if "%%c" equ "!WindowsReaderPDF!" (
			if "!C_WindowsReaderPDF!" equ "+" (
				set "C_WindowsReaderPDF=-"
			) else (
				set "C_Edge=+"
				set "C_WindowsReaderPDF=+"
			)
		)
		if "%%c" equ "!ECApp!" (
			if "!C_ECApp!" equ "+" (
				set "C_ECApp=-"
			) else (
				set "C_ECApp=+"
				if "%ImageBuild%" geq "19041" set "C_WindowsMixedReality=+"
			)
		)
		if "%%c" equ "!FileExplorer!" (
			if "!C_FileExplorer!" equ "+" (
				set "C_FileExplorer=-"
			) else (
				set "C_FileExplorer=+"
			)
		)
		if "%%c" equ "!FilePicker!" (
			if "!C_FilePicker!" equ "+" (
				set "C_FilePicker=-"
			) else (
				set "C_FilePicker=+"
			)
		)
		if "%%c" equ "!LockApp!" (
			if "!C_LockApp!" equ "+" (
				set "C_LockApp=-"
			) else (
				set "C_LockApp=+"
			)
		)
		if "%%c" equ "!MapControl!" (
			if "!C_MapControl!" equ "+" (
				set "C_MapControl=-"
				set "C_Maps=-"
			) else (
				set "C_Maps=+"
				set "C_MapControl=+"
			)
		)
		if "%%c" equ "!XGpuEjectDialog!" (
			if "!C_XGpuEjectDialog!" equ "+" (
				set "C_XGpuEjectDialog=-"
			) else (
				set "C_XGpuEjectDialog=+"
			)
		)
		if "%%c" equ "!NarratorQuickStart!" (
			if "!C_NarratorQuickStart!" equ "+" (
				set "C_NarratorQuickStart=-"
			) else (
				set "C_NarratorQuickStart=+"
			)
		)
		if "%%c" equ "!NcsiUwpApp!" (
			if "!C_NcsiUwpApp!" equ "+" (
				set "C_NcsiUwpApp=-"
			) else (
				set "C_NcsiUwpApp=+"
			)
		)
		if "%%c" equ "!OOBENetworkCaptivePortal!" (
			if "!C_OOBENetworkCaptivePortal!" equ "+" (
				set "C_OOBENetworkCaptivePortal=-"
			) else (
				set "C_OOBENetworkCaptivePortal=+"
			)
		)
		if "%%c" equ "!OOBENetworkConnectionFlow!" (
			if "!C_OOBENetworkConnectionFlow!" equ "+" (
				set "C_OOBENetworkConnectionFlow=-"
			) else (
				set "C_OOBENetworkConnectionFlow=+"
			)
		)
		if "%%c" equ "!ParentalControls!" (
			if "!C_ParentalControls!" equ "+" (
				set "C_ParentalControls=-"
			) else (
				set "C_ParentalControls=+"
			)
		)
		if "%%c" equ "!PeopleExperienceHost!" (
			if "!C_PeopleExperienceHost!" equ "+" (
				set "C_PeopleExperienceHost=-"
				set "C_People=-"
			) else (
				set "C_People=+"
				set "C_PeopleExperienceHost=+"
			)
		)
		if "%%c" equ "!PinningConfirmationDialog!" (
			if "!C_PinningConfirmationDialog!" equ "+" (
				set "C_PinningConfirmationDialog=-"
			) else (
				set "C_PinningConfirmationDialog=+"
			)
		)
		if "%%c" equ "!PPIProjection!" (
			if "!C_PPIProjection!" equ "+" (
				set "C_PPIProjection=-"
			) else (
				set "C_PPIProjection=+"
			)
		)
		if "%%c" equ "!PrintDialog!" (
			if "!C_PrintDialog!" equ "+" (
				set "C_PrintDialog=-"
			) else (
				set "C_PrintDialog=+"
			)
		)
		if "%%c" equ "!QuickAssist_SystemApps!" (
			if "!C_QuickAssist!" equ "+" (
				set "C_QuickAssist=-"
			) else (
				set "C_QuickAssist=+"
			)
		)
		if "%%c" equ "!RetailDemoContent!" (
			if "!C_RetailDemoContent!" equ "+" (
				set "C_RetailDemoContent=-"
			) else (
				set "C_RetailDemoContent=+"
			)
		)
		if "%%c" equ "!SearchApp!" (
			if "!C_SearchApp!" equ "+" (
				set "C_SearchApp=-"
			) else (
				set "C_SearchApp=+"
			)
		)
		if "%%c" equ "!SettingSync!" (
			if "!C_SettingSync!" equ "+" (
				set "C_SettingSync=-"
			) else (
				set "C_SettingSync=+"
			)
		)
		if "%%c" equ "!SkypeORTC!" (
			if "!C_SkypeORTC!" equ "+" (
				set "C_SkypeORTC=-"
				set "C_SkypeApp=-"
			) else (
				set "C_SkypeApp=+"
				set "C_SkypeORTC=+"
			)
		)
		if "%%c" equ "!SmartScreen!" (
			if "!C_SmartScreen!" equ "+" (
				rem set "C_WindowsStoreApp=-"
				set "C_SmartScreen=-"
			) else (
				set "C_SmartScreen=+"
				rem set "C_WindowsStoreApp=+"
			)
		)
		if "%%c" equ "!SecureAssessmentBrowser!" (
			if "!C_SecureAssessmentBrowser!" equ "+" (
				set "C_SecureAssessmentBrowser=-"
			) else (
				set "C_SecureAssessmentBrowser=+"
			)
		)
		if "%%c" equ "!WebcamExperience!" (
			if "!C_WebcamExperience!" equ "+" (
				set "C_WebcamExperience=-"
			) else (
				set "C_WebcamExperience=+"
			)
		)
		if "%%c" equ "!Win32WebViewHost!" (
			if "!C_Win32WebViewHost!" equ "+" (
				set "C_Win32WebViewHost=-"
			) else (
				set "C_Win32WebViewHost=+"
			)
		)
		if "%%c" equ "!WindowsDefender!" (
			if "!C_WindowsDefender!" equ "+" (
				set "C_SecurityCenter=-"
				set "C_WindowsDefender=-"
			) else (
				set "C_WindowsDefender=+"
				set "C_WindowsStoreApp=+"
			)
		)
		if "%%c" equ "!BioEnrollment!" (
			if "!C_BioEnrollment!" equ "+" (
				set "C_BioEnrollment=-"
			) else (
				set "C_BioEnrollment=+"
			)
		)
		if "%%c" equ "!WindowsMixedReality!" (
			if "!C_WindowsMixedReality!" equ "+" (
				if /i "%ImageArchitecture%" neq "x86" set "C_MixedRealityPortal=-"
				set "C_3DViewer=-"
				if "%ImageBuild%" geq "19041" set "C_ECApp=-"
				set "C_WindowsMixedReality=-"
			) else (
				set "C_WindowsMixedReality=+"
			)
		)
		if "%%c" equ "!WindowsStoreClient!" (
			if "!C_WindowsStoreClient!" equ "+" (
				set "C_WindowsStoreClient=-"
				set "C_WindowsStoreApp=-"
				if "%SelectedSourceOS%" equ "w10" set "C_ServicesStoreEngagement=-"
				set "C_SolitaireCollection=-"
				set "C_StorePurchaseApp=-"
			) else (
				set "C_WindowsStoreClient=+"
			)
		)
		if "%%c" equ "!XboxClient!" (
			if "!C_XboxClient!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" set "C_XboxApp=-"
				if "%SelectedSourceOS%" equ "w11" set "C_GamingApp=-"
				set "C_XboxClient=-"
				set "C_XboxGamingOverlay=-"
				set "C_XboxGameOverlay=-"
				set "C_XboxIdentityProvider=-"
				if "%ImageBuild%" leq "19044" set "C_StickyNotes=-"
				set "C_XboxSpeechToTextOverlay=-"
				set "C_XboxTCUI=-"
			) else (
				set "C_XboxClient=+"
			)
		)
		if "%%c" equ "!XboxGameCallableUI!" (
			if "!C_XboxGameCallableUI!" equ "+" (
				set "C_XboxGameCallableUI=-"
				set "C_SolitaireCollection=-"
			) else (
				set "C_SolitaireCollection=+"
				set "C_XboxGameCallableUI=+"
			)
		)
	)
)
goto :!CurrentMenu!

:RemoveWindowsAppsMenu

set "CurrentMenu=RemoveWindowsAppsMenu"

:: Remove Windows 10 v1809/v1903/v1909/v2004/v20H2/v21H1/v21H2, Windows 11 v21H2/22H1 Client Windows Apps Menu
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" if "%ImageBuild%" geq "17763" (
	cls
	echo.===============================================================================
	echo.%txtRemoveWindowsAppsMenu%
	echo.===============================================================================
	set /A count=1
	for %%n in (
		AdvertisingXaml
		Alarms
		AppInstaller
		CalculatorApp
		Camera
		ClipChamp
		VP9VideoExtensions
		HEIFImageExtension
		RawImageExtension
		WebMediaExtensions
		WebpImageExtension
		Cortana
		DesktopAppInstaller
		Family
		FeedbackHub
		GetHelp
		FilmsTV
		GrooveMusic
		MediaPlayer
		MoviesTV
		Maps
		Messaging
		WalletService
		MixedRealityPortal
		3DViewer
		OneConnect
		OfficeHub
		BingNews
		NotepadApp
		OfficeOneNote
		Paint3D
		Paint
		People
		YourPhone
		Photos
		PowerAutomateDesktop
		Print3D
		QuickAssist
		ServicesStoreEngagement
		SkypeApp
		ScreenSketch
		SolitaireCollection
		StickyNotes
		StorePurchaseApp
		Terminal
		Getstarted
		Todos
		SoundRecorder
		BingWeather
		ClientWebExperience
		CommunicationsApps
		WindowsStoreApp
		XboxApp
		GamingApp
		XboxGamingOverlay
		XboxGameOverlay
		XboxIdentityProvider
		XboxSpeechToTextOverlay
		XboxTCUI
	) do (
		if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
		if !count! gtr 9 set "OptionID=!count!"

		if "%%n" equ "AdvertisingXaml" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_AdvertisingXaml!^)%txtAdvertisingXaml%
				if "!C_AdvertisingXaml!" equ "-" (
					echo.         %txtNoteNeeded4WindowsMailWeather%
					echo.              ^| %GlobalSoTheySetted2Removed%
				)
			)
		)
		if "%%n" equ "Alarms" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Alarms!^)%txtAlarmsClock%
		)
		if "%%n" equ "AppInstaller" (
			if "%SelectedSourceOS%" equ "w11" (
				if "!TKHC_DesktopAppInstaller!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_DesktopAppInstaller!^)%txtAppInstaller%
		)
		if "%%n" equ "CalculatorApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_CalculatorApp!^)%txtCalculatorApp%
		)
		if "%%n" equ "Camera" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ClipChamp!^)%GlobalIntegrateMicrosoftDefaultInboxAppxClipChamp%
		)
		if "%%n" equ "ClipChamp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Camera!^)%GlobalIntegrateMicrosoftDefaultInboxAppxCamera%
		)
		if "%%n" equ "VP9VideoExtensions" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_VP9VideoExtensions!^)%GlobalIntegrateMicrosoftDefaultInboxCodecVP9%
		)
		if "%%n" equ "HEIFImageExtension" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_HEIFImageExtension!^)%GlobalIntegrateMicrosoftDefaultInboxCodecHEIF%
		)
		if "%%n" equ "HEVCVideoExtension" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_HEVCVideoExtension!^)%GlobalIntegrateMicrosoftDefaultInboxCodecHEVC%
		)
		if "%%n" equ "RawImageExtension" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_RawImageExtension!^)%GlobalIntegrateMicrosoftDefaultInboxCodecRaw%
		)
		if "%%n" equ "WebMediaExtensions" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WebMediaExtensions!^)%GlobalIntegrateMicrosoftDefaultInboxCodecWeb%
		)
		if "%%n" equ "WebpImageExtension" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WebpImageExtension!^)%GlobalIntegrateMicrosoftDefaultInboxCodecWebImage%
		)
		if "%%n" equ "Cortana" (
			if "%ImageBuild%" geq "19041" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Cortana!^)%txtCortanaApp%
		)
		if "%%n" equ "DesktopAppInstaller" (
			if "%SelectedSourceOS%" equ "w10" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_DesktopAppInstaller!^)%GlobalIntegrateDesktopAppInstaller%
		)
		if "%%n" equ "Family" (
			if "%ImageBuild%" equ "22621" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Family!^)%txtFamily%
		)
		if "%%n" equ "FeedbackHub" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_FeedbackHub!^)%GlobalIntegrateFeedbackHub%
		)
		if "%%n" equ "GetHelp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_GetHelp!^)%GlobalIntegrateGetHelp%
		)
		if "%%n" equ "FilmsTV" (
			if "%ImageBuild%" lss "19041" (
				if "!TKHC_ZuneVideo!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ZuneVideo!^)%GlobalIntegrateFilmsTV%
		)
		if "%%n" equ "GrooveMusic" (
			if "%SelectedSourceOS%" equ "w10" (
				if "!TKHC_ZuneMusic!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ZuneMusic!^)%GlobalIntegrateGrooveMusic%
		)
		if "%%n" equ "MediaPlayer" (
			if "%SelectedSourceOS%" equ "w11" (
				if "!TKHC_ZuneMusic!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ZuneMusic!^)%GlobalIntegrateMediaPlayer%
		)
		if "%%n" equ "MoviesTV" (
			if "%ImageBuild%" geq "19041" (
				if "!TKHC_ZuneVideo!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ZuneVideo!^)%GlobalIntegrateMoviesTV%
		)
		if "%%n" equ "Maps" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_Maps!^)%GlobalIntegrateMaps%
				if "!C_Maps!" equ "-" (
					echo.         %txtNoteDependsMap%
				)
			)
		)
		if "%%n" equ "Messaging" (
			if "%SelectedSourceOS%" equ "w10" (
				if "%ImageBuild%" lss "19041" (
					set "Messaging=!count!"
				)
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Messaging!^)%txtMessagingApp%
		)
		if "%%n" equ "WalletService" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_WalletService!^)%txtMicrosoftPayApp%
		)
		if "%%n" equ "MixedRealityPortal" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_MixedRealityPortal!^)%txtMixedRealityPortalApp%
				if "!C_MixedRealityPortal!" equ "-" (
					echo.         %GlobalNoteDependsMixedReality%
				)
			)
		)
		if "%%n" equ "3DViewer" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_3DViewer!^)%txtMixedRealityViewerApp%
				if "!C_3DViewer!" equ "-" (
					echo.         %GlobalNoteDependsMixedReality%
				)
			)
		)
		if "%%n" equ "OneConnect" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_OneConnect!^)%txtMobilePlansApp%
		)
		if "%%n" equ "OfficeHub" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_OfficeHub!^)%txtMyOffice%
		)
		if "%%n" equ "BingNews" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_BingNews!^)%GlobalIntegrateNews%
		)
		if "%%n" equ "NotepadApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_NotepadApp!^)%GlobalIntegrateNotepad%
		)
		if "%%n" equ "OfficeOneNote" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_OfficeOneNote!^)%GlobalIntegrateOneNote%
		)
		if "%%n" equ "Paint3D" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Paint3D!^)%GlobalIntegratePaint3D%
		)
		if "%%n" equ "Paint" (
			if "%SelectedSourceOS%" equ "w11" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Paint!^)%txtPaint%
		)
		if "%%n" equ "People" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_People!^)%GlobalIntegratePeople%
				if "!C_People!" equ "-" (
					echo.         %txtNoteDependsPeopleBar%
				)
			)
		)
		if "%%n" equ "YourPhone" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_YourPhone!^)%GlobalIntegratePhoneLink%
		)
		if "%%n" equ "Photos" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Photos!^)%GlobalIntegratePhotos%
		)
		if "%%n" equ "PowerAutomateDesktop" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_PowerAutomateDesktop!^)%txtPowerAutomateDesktop%
		)
		if "%%n" equ "Print3D" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Print3D!^)%txtPrint3DApp%
		)
		if "%%n" equ "QuickAssist" (
			if "%ImageBuild%" geq "22563" (
				if "!TKHC_%%n!" neq "" set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_QuickAssist!^)%txtQuickAssistApp%
		)
		if "%%n" equ "ScreenSketch" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				if "%SelectedSourceOS%" equ "w10" echo. [!OptionID!] ^(!C_ScreenSketch!^)%GlobalIntegrateSnipSketch%
				if "%SelectedSourceOS%" equ "w11" echo. [!OptionID!] ^(!C_ScreenSketch!^)%GlobalIntegrateSnippingTool%
				if "!C_ScreenSketch!" equ "-" (
					echo.         %txtNoteDependsCapture%
				)
			)
		)
		if "%%n" equ "ServicesStoreEngagement" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_ServicesStoreEngagement!^)%txtServicesStoreEngagement%
				if "!C_ServicesStoreEngagement!" equ "-" (
					echo.         %GlobalNoteDependsWindowsStore%
				)
			)
		)
		if "%%n" equ "SkypeApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_SkypeApp!^)%GlobalIntegrateSkype%
				if "!C_SkypeApp!" equ "-" (
					echo.         %txtNoteDependsSkype%
				)
			)
		)
		if "%%n" equ "SolitaireCollection" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_SolitaireCollection!^)%GlobalIntegrateSolitaire%
				if "!C_SolitaireCollection!" equ "-" (
					if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
						echo.         %txtNoteDependsAdvertisingXaml%
						echo.              ^|             %txtAndXboxLive%
					)
					if "%ImageBuild%" geq "19041" if "%ImageBuild%" leq "19044" (
						echo.         %txtNoteDependsXboxLive%
					)
				)
			)
		)
		if "%%n" equ "StickyNotes" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_StickyNotes!^)%GlobalIntegrateSticky%
				if "!C_StickyNotes!" equ "-" (
					if "%ImageBuild%" gtr "17763" if "%ImageBuild%" leq "19044" (
						echo.         %txtNoteDependsServicesStore%
					)
				)
			)
		)
		if "%%n" equ "StorePurchaseApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_StorePurchaseApp!^)%txtStoreExperienceHost%
				if "!C_StorePurchaseApp!" equ "-" (
					echo.         %GlobalNoteDependsWindowsStore%
				)
			)
		)
		if "%%n" equ "Terminal" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Terminal!^)%GlobalIntegrateTerminal%
		)
		if "%%n" equ "Getstarted" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Getstarted!^)%GlobalIntegrateTips%
		)
		if "%%n" equ "Todos" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_Todos!^)%GlobalIntegrateTodos%
		)
		if "%%n" equ "SoundRecorder" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_SoundRecorder!^)%txtVoiceRecorder%
		)
		if "%%n" equ "BingWeather" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_BingWeather!^)%GlobalIntegrateWeather%
				if "%SelectedSourceOS%" equ "w10" if "!C_BingWeather!" equ "-" (
					echo.         %txtNoteDependsAdvertising%
				)
			)
		)
		if "%%n" equ "ClientWebExperience" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!C_ClientWebExperience!^)%GlobalIntegrateWindowsWebExperience%
		)
		if "%%n" equ "CommunicationsApps" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_CommunicationsApps!^)%txtWindowsMailApp%
				if "!C_CommunicationsApps!" equ "-" (
					echo.         %txtNoteDependsAdvertisingMail%
				)
			)
		)
		if "%%n" equ "WindowsStoreApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_WindowsStoreApp!^)%txtWindowsStoreApp%
				if "!C_WindowsStoreApp!" equ "-" (
					echo.         %txtNoteDependsAADAppX%
					echo.              ^|             %txtClientXboxIdentity%
					if "%ImageBuild%" gtr "17763" (
						if "!C_WindowsStoreApp!" equ "-" (
							echo.              ^| %txtNeeded4ServicesStore%
							echo.              ^|             %txtSolitaireCollectionStickyNotes%
							echo.              ^| %GlobalSoTheySetted2Removed%
						)
					) else (
						echo.              ^| %txtNeeded4ServicesStoreEngagement%
						echo.              ^| %GlobalSoTheySetted2Removed%
					)
				)
			)
		)
		if "%%n" equ "XboxApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_XboxApp!^)%GlobalIntegrateXboxConsoleCompanion%
				if "!C_XboxApp!" equ "-" (
					echo.         %txtNoteDependsXboxConsoleCompanion%
					echo.              ^|             %GlobalAdvertisingXamlServices%
					echo.              ^| %GlobalNeeded4XboxGameBar%
					echo.              ^|             %GlobalXboxGameSpeechWindow%
				)
			)
		)
		if "%%n" equ "GamingApp" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_GamingApp!^)%txtGamingApp%
				if "!C_GamingApp!" equ "-" (
					echo.         %txtNoteDependsGamingApp%
					echo.              ^|             %GlobalAdvertisingXamlServices%
					echo.              ^| %GlobalNeeded4XboxGameBar%
					echo.              ^|             %GlobalXboxGameSpeechWindow%
				)
			)
		)
		if "%%n" equ "XboxGamingOverlay" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_XboxGamingOverlay!^)%txtXboxGameBar%
				if "!C_XboxGamingOverlay!" equ "-" (
					if "%SelectedSourceOS%" equ "w10" echo.         %GlobalNoteDependsXboxConsoleCompanion%
					if "%SelectedSourceOS%" equ "w11" echo.         %GlobalNoteDependsGamingApp%
				)
			)
		)
		if "%%n" equ "XboxGameOverlay" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_XboxGameOverlay!^)%txtXboxGameBarPlugin%
				if "!C_XboxGameOverlay!" equ "-" (
					if "%SelectedSourceOS%" equ "w10" echo.         %GlobalNoteDependsXboxConsoleCompanion%
					if "%SelectedSourceOS%" equ "w11" echo.         %GlobalNoteDependsGamingApp%
				)
			)
		)
		if "%%n" equ "XboxIdentityProvider" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_XboxIdentityProvider!^)%GlobalIntegrateXboxIdentityProvider%
				if "!C_XboxIdentityProvider!" equ "-" (
					if "%SelectedSourceOS%" equ "w10" echo.         %GlobalNoteDependsXboxConsoleCompanion%
					if "%SelectedSourceOS%" equ "w11" echo.         %GlobalNoteDependsGamingApp%
					echo.              ^| Needed for: Windows Store.
				)
			)
		)
		if "%%n" equ "XboxSpeechToTextOverlay" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_XboxSpeechToTextOverlay!^)%txtXboxGameSpeechWindow%
				if "!C_XboxSpeechToTextOverlay!" equ "-" (
					if "%SelectedSourceOS%" equ "w10" echo.         %GlobalNoteDependsXboxConsoleCompanion%
					if "%SelectedSourceOS%" equ "w11" echo.         %GlobalNoteDependsGamingApp%
				)
			)
		)
		if "%%n" equ "XboxTCUI" (
			if "!TKHC_%%n!" neq "" set "%%n=!count!"
			if "!%%n!" neq "" (
				echo. [!OptionID!] ^(!C_XboxTCUI!^)Xbox UI
				if "!C_XboxTCUI!" equ "-" (
					if "%SelectedSourceOS%" equ "w10" echo.         %GlobalNoteDependsXboxConsoleCompanion%
					if "%SelectedSourceOS%" equ "w11" echo.         %GlobalNoteDependsGamingApp%
				)
			)
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	echo.
	echo.  [S] %txtSelectAllWindowsApps% ^| [D] %GlobalOption_Revert2Default%
	echo.  [B] %GlobalGo2NextRemovalMenu%
	echo.  [N] %GlobalGo2NextRemovalMenu%
	echo.  [X] %GlobalGoBackSelect2StartRemovingComponentsFilters%
	echo.===============================================================================
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :SelectWindowsComponentsMenu
		if /i "%%c" equ "N" goto :RemoveInternetMenu
		if /i "%%c" equ "B" goto :RemoveSystemAppsMenu
		if /i "%%c" equ "D" (
			set "C_Alarms=+"
			set "C_CalculatorApp=+"
			set "C_Camera=+"
			set "C_ClipChamp=+"
			set "C_VP9VideoExtensions=+"
			set "C_HEIFImageExtension=+"
			set "C_HEVCVideoExtension=+"
			set "C_RawImageExtension=+"
			set "C_WebMediaExtensions=+"
			set "C_WebpImageExtension=+"
			set "C_SpeechRecognition=+"
				set "C_Cortana=+"
			set "C_DesktopAppInstaller=+"
			set "C_Family=+"
			set "C_FeedbackHub=+"
			set "C_GetHelp=+"
			set "C_MapControl=+"
				set "C_Maps=+"
			set "C_OfficeHub=+"
			set "C_BingNews=+"
			set "C_ZuneMusic=+"
			set "C_ZuneVideo=+"

			set "C_SoundRecorder=+"
			set "C_Getstarted=+"
			set "C_CapturePicker=+"
				set "C_ScreenSketch=+"
			set "C_Photos=+"
			set "C_PeopleExperienceHost=+"
				set "C_People=+"
			set "C_YourPhone=+"
			set "C_Paint3D=+"
			set "C_Paint=+"

			set "C_XboxClient=+"
				set "C_XboxTCUI=+"
				set "C_XboxSpeechToTextOverlay=+"
				set "C_XboxIdentityProvider=+"
				set "C_XboxGamingOverlay=+"
				set "C_XboxGameOverlay=+"
				set "C_XboxApp=+"
				set "C_GamingApp=+"
			set "C_StorePurchaseApp=+"
			set "C_ServicesStoreEngagement=+"
				set "C_WindowsStoreApp=+"
				set "C_WindowsStoreClient=+"
			set "C_AdvertisingXaml=+"
				set "C_WindowsMail=+"
				set "C_CommunicationsApps=+"
				set "C_BingWeather=+"
				set "C_SolitaireCollection=+"
				set "C_StickyNotes=+"
			set "C_SoundRecorder=+"

			set "C_ClientWebExperience=+"
			set "C_Todos=+"
			set "C_Terminal=+"
			set "C_PowerAutomateDesktop=+"
			set "C_NotepadApp=+"
			set "C_WindowsMixedReality=+"
				set "C_MixedRealityPortal=+"
				set "C_3DViewer=+"
			set "C_WalletService=+"
			set "C_SkypeApp=+"
				set "C_SkypeORTC=+"
			set "C_OfficeOneNote=+"
			set "C_OneConnect=+"
			set "C_Messaging=+"
			set "C_Print=+"
			set "C_Print3D=+"
			set "C_QuickAssist=+"
			set "C_AdvertisingXaml=+"
				set "C_WindowsMail=+"
				set "C_CommunicationsApps=+"
				set "C_BingWeather=+"
		)
		if /i "%%c" equ "S" (
			for %%# in (
				AdvertisingXaml
				Alarms
				CalculatorApp
				Camera
				ClipChamp
				VP9VideoExtensions
				HEIFImageExtension
				HEVCVideoExtension
				RawImageExtension
				WebMediaExtensions
				WebpImageExtension
				Cortana
				DesktopAppInstaller
				Family
				FeedbackHub
				GetHelp
				ZuneMusic
				ZuneVideo
				Maps
				Messaging
				WalletService
				MixedRealityPortal
				3DViewer
				OneConnect
				OfficeHub
				BingNews
				NotepadApp
				OfficeOneNote
				Paint3D
				People
				Photos
				PowerAutomateDesktop
				Print3D
				QuickAssist
				ServicesStoreEngagement
				SkypeApp
				ScreenSketch
				SolitaireCollection
				StickyNotes
				StorePurchaseApp
				Terminal
				Getstarted
				Todos
				SoundRecorder
				BingWeather
				ClientWebExperience
				CommunicationsApps
				WindowsStoreApp
				XboxApp
				GamingApp
				XboxGamingOverlay
				XboxGameOverlay
				XboxIdentityProvider
				XboxSpeechToTextOverlay
				XboxTCUI
				YourPhone
			) do (
				if "!TKHC_%%#!" neq "" (
					if "%%#" equ "Cortana" if "%ImageBuild%" geq "19041" set "C_Cortana=-"
					if "%%#" equ "Family" if "%ImageBuild%" geq "22621" set "C_Family=-"
					if "%%#" equ "QuickAssist" if "%ImageBuild%" geq "22563" set "C_QuickAssist=-"
					if "%%#" neq "Cortana" if "%%#" neq "Family" if "%%#" neq "QuickAssist" set "C_%%#=-"
				)
			)
			call :ListsandPreSets_Filter
		)
		if "%%c" equ "!AdvertisingXaml!" (
			if "!IntegratedSidebar!" neq "" (
				set "C_AdvertisingXaml=+"
				set "C_WindowsMail=+"
				set "C_CommunicationsApps=+"
				if "%SelectedSourceOS%" equ "w10" set "C_BingWeather=+"
			)
			if "!IntegratedSidebar!" equ "" (
				if "!C_AdvertisingXaml!" equ "+" (
					if "%ImageBuild%" equ "17763" set "C_SolitaireCollection=-"
					set "C_BingWeather=-"
					set "C_CommunicationsApps=-"
					set "C_AdvertisingXaml=-"
				) else (
					set "C_AdvertisingXaml=+"
				)
			)
		)
		if "%%c" equ "!Alarms!" (
			if "!C_Alarms!" equ "+" (
				set "C_Alarms=-"
			) else (
				set "C_Alarms=+"
			)
		)
		if "%%c" equ "!AppInstaller!" (
			if "!C_DesktopAppInstaller!" equ "+" (
				set "C_DesktopAppInstaller=-"
			) else (
				set "C_DesktopAppInstaller=+"
			)
		)
		if "%%c" equ "!CalculatorApp!" (
			if "!C_CalculatorApp!" equ "+" (
				set "C_CalculatorApp=-"
			) else (
				set "C_CalculatorApp=+"
			)
		)
		if "%%c" equ "!Camera!" (
			if "!C_Camera!" equ "+" (
				set "C_Camera=-"
			) else (
				set "C_Camera=+"
			)
		)
		if "%%c" equ "!ClipChamp!" (
			if "!C_ClipChamp!" equ "+" (
				set "C_ClipChamp=-"
			) else (
				set "C_ClipChamp=+"
			)
		)
		if "%%c" equ "!VP9VideoExtensions!" (
			if "!C_VP9VideoExtensions!" equ "+" (
				set "C_VP9VideoExtensions=-"
			) else (
				set "C_VP9VideoExtensions=+"
			)
		)
		if "%%c" equ "!HEIFImageExtension!" (
			if "!C_HEIFImageExtension!" equ "+" (
				set "C_HEIFImageExtension=-"
			) else (
				set "C_HEIFImageExtension=+"
			)
		)
		if "%%c" equ "!HEVCVideoExtension!" (
			if "!C_HEVCVideoExtension!" equ "+" (
				set "C_HEVCVideoExtension=-"
			) else (
				set "C_HEVCVideoExtension=+"
			)
		)
		if "%%c" equ "!RawImageExtension!" (
			if "!C_RawImageExtension!" equ "+" (
				set "C_RawImageExtension=-"
			) else (
				set "C_RawImageExtension=+"
			)
		)
		if "%%c" equ "!WebMediaExtensions!" (
			if "!C_WebMediaExtensions!" equ "+" (
				set "C_WebMediaExtensions=-"
			) else (
				set "C_WebMediaExtensions=+"
			)
		)
		if "%%c" equ "!WebpImageExtension!" (
			if "!C_WebpImageExtension!" equ "+" (
				set "C_WebpImageExtension=-"
			) else (
				set "C_WebpImageExtension=+"
			)
		)
		if "%%c" equ "!Cortana!" (
			if "!C_Cortana!" equ "+" (
				set "C_Cortana=-"
			) else (
				set "C_Cortana=+"
				set "C_SpeechRecognition=+"
			)
		)
		if "%%c" equ "!DesktopAppInstaller!" (
			if "!C_DesktopAppInstaller!" equ "+" (
				set "C_DesktopAppInstaller=-"
			) else (
				set "C_DesktopAppInstaller=+"
			)
		)
		if "%%c" equ "!Family!" (
			if "!C_Family!" equ "+" (
				set "C_Family=-"
			) else (
				set "C_Family=+"
			)
		)
		if "%%c" equ "!FeedbackHub!" (
			if "!C_FeedbackHub!" equ "+" (
				set "C_FeedbackHub=-"
			) else (
				set "C_FeedbackHub=+"
			)
		)
		if "%%c" equ "!GetHelp!" (
			if "!C_GetHelp!" equ "+" (
				set "C_GetHelp=-"
			) else (
				set "C_GetHelp=+"
			)
		)
		if "%%c" equ "!FilmsTV!" (
			if "!C_ZuneVideo!" equ "+" (
				set "C_ZuneVideo=-"
			) else (
				set "C_ZuneVideo=+"
			)
		)
		if "%%c" equ "!GrooveMusic!" (
			if "!C_ZuneMusic!" equ "+" (
				set "C_ZuneMusic=-"
			) else (
				set "C_ZuneMusic=+"
			)
		)
		if "%%c" equ "!MediaPlayer!" (
			if "!C_ZuneMusic!" equ "+" (
				set "C_ZuneMusic=-"
			) else (
				set "C_ZuneMusic=+"
			)
		)
		if "%%c" equ "!MoviesTV!" (
			if "!C_ZuneVideo!" equ "+" (
				set "C_ZuneVideo=-"
			) else (
				set "C_ZuneVideo=+"
			)
		)
		if "%%c" equ "!Maps!" (
			if "!C_Maps!" equ "+" (
				set "C_MapControl=-"
				set "C_Maps=-"
			) else (
				set "C_Maps=+"
				set "C_MapControl=+"
			)
		)
		if "%%c" equ "!Messaging!" (
			if "!C_Messaging!" equ "+" (
				set "C_Messaging=-"
			) else (
				set "C_Messaging=+"
			)
		)
		if "%%c" equ "!WalletService!" (
			if "!C_WalletService!" equ "+" (
				set "C_WalletService=-"
			) else (
				set "C_WalletService=+"
			)
		)
		if "%%c" equ "!MixedRealityPortal!" (
			if "!C_MixedRealityPortal!" equ "+" (
				set "C_MixedRealityPortal=-"
			) else (
				set "C_MixedRealityPortal=+"
				set "C_WindowsMixedReality=+"
			)
		)
		if "%%c" equ "!3DViewer!" (
			if "!C_3DViewer!" equ "+" (
				set "C_3DViewer=-"
			) else (
				set "C_3DViewer=+"
				set "C_WindowsMixedReality=+"
			)
		)
		if "%%c" equ "!OneConnect!" (
			if "!C_OneConnect!" equ "+" (
				set "C_OneConnect=-"
			) else (
				set "C_OneConnect=+"
			)
		)
		if "%%c" equ "!OfficeHub!" (
			if "!C_OfficeHub!" equ "+" (
				set "C_OfficeHub=-"
			) else (
				set "C_OfficeHub=+"
			)
		)
		if "%%c" equ "!BingNews!" (
			if "!C_BingNews!" equ "+" (
				set "C_BingNews=-"
			) else (
				set "C_BingNews=+"
			)
		)
		if "%%c" equ "!NotepadApp!" (
			if "!C_NotepadApp!" equ "+" (
				set "C_NotepadApp=-"
			) else (
				set "C_NotepadApp=+"
			)
		)
		if "%%c" equ "!OfficeOneNote!" (
			if "!C_OfficeOneNote!" equ "+" (
				set "C_OfficeOneNote=-"
			) else (
				set "C_OfficeOneNote=+"
			)
		)
		if "%%c" equ "!Paint3D!" (
			if "%SelectedSourceOS%" equ "w10" (
				if "!C_Paint3D!" equ "+" (
					set "C_Paint3D=-"
				) else (
					set "C_Paint3D=+"
				)
			)
		)
		if "%%c" equ "!Paint!" (
			if "%SelectedSourceOS%" equ "w11" (
				if "!C_Paint!" equ "+" (
					set "C_Paint=-"
				) else (
					set "C_Paint=+"
				)
			)
		)
		if "%%c" equ "!People!" (
			if "!C_People!" equ "+" (
				set "C_PeopleExperienceHost=-"
				set "C_People=-"
			) else (
				set "C_People=+"
				set "C_PeopleExperienceHost=+"
			)
		)
		if "%%c" equ "!YourPhone!" (
			if "!C_YourPhone!" equ "+" (
				set "C_YourPhone=-"
			) else (
				set "C_YourPhone=+"
			)
		)
		if "%%c" equ "!Photos!" (
			if "!C_Photos!" equ "+" (
				set "C_Photos=-"
			) else (
				set "C_Photos=+"
			)
		)
		if "%%c" equ "!PowerAutomateDesktop!" (
			if "!C_PowerAutomateDesktop!" equ "+" (
				set "C_PowerAutomateDesktop=-"
			) else (
				set "C_PowerAutomateDesktop=+"
			)
		)
		if "%%c" equ "!Print3D!" (
			if "!C_Print3D!" equ "+" (
				set "C_Print3D=-"
			) else (
				set "C_Print3D=+"
			)
		)
		if "%%c" equ "!QuickAssist!" (
			if "!C_QuickAssist!" equ "+" (
				set "C_QuickAssist=-"
			) else (
				set "C_QuickAssist=+"
			)
		)
		if "%%c" equ "!ServicesStoreEngagement!" (
			if "!C_ServicesStoreEngagement!" equ "+" (
				if "%ImageBuild%" gtr "17763" (
					set "C_SolitaireCollection=-"
					if "%ImageBuild%" leq "19044" set "C_StickyNotes=-"
				)
				set "C_ServicesStoreEngagement=-"
			) else (
				set "C_ServicesStoreEngagement=+"
				set "C_WindowsStoreApp=+"
				set "C_WindowsStoreClient=+"
			)
		)
		if "%%c" equ "!SkypeApp!" (
			if "!C_SkypeApp!" equ "+" (
				set "C_SkypeORTC=-"
				set "C_SkypeApp=-"
			) else (
				set "C_SkypeApp=+"
				set "C_SkypeORTC=+"
			)
		)
		if "%%c" equ "!ScreenSketch!" (
			if "!C_ScreenSketch!" equ "+" (
				set "C_ScreenSketch=-"
			) else (
				set "C_CapturePicker=+"
				set "C_ScreenSketch=+"
			)
		)
		if "%%c" equ "!SolitaireCollection!" (
			if "!C_SolitaireCollection!" equ "+" (
				set "C_SolitaireCollection=-"
			) else (
				if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" (
					set "C_AdvertisingXaml=+"
					set "C_ServicesStoreEngagement=+"
					set "C_XboxGameCallableUI=+"
				)
				if "%ImageBuild%" geq "19041" if "%ImageBuild%" leq "19044" (
					set "C_XboxGameCallableUI=+"
				)
				set "C_SolitaireCollection=+"
			)
		)
		if "%%c" equ "!StickyNotes!" (
			if "!C_StickyNotes!" equ "+" (
				set "C_StickyNotes=-"
			) else (
				set "C_AccountsControl=+"
				set "C_AADBrokerPlugin=+"
				set "C_WindowsStoreClient=+"
				set "C_WindowsStoreApp=+"
				set "C_XboxGameCallableUI=+"
				set "C_XboxClient=+"
				if "%SelectedSourceOS%" equ "w10" (
					set "C_XboxIdentityProvider=+"
					set "C_XboxApp=+"
					if "%ImageBuild%" gtr "17763" if "%ImageBuild%" leq "19044" (
						set "C_ServicesStoreEngagement=+"
					)
				)
				rem if "%SelectedSourceOS%" equ "w11" set "C_GamingApp=+"
				set "C_StickyNotes=+"
			)
		)
		if "%%c" equ "!StorePurchaseApp!" (
			if "!C_StorePurchaseApp!" equ "+" (
				set "C_StorePurchaseApp=-"
			) else (
				set "C_StorePurchaseApp=+"
				set "C_WindowsStoreApp=+"
				set "C_WindowsStoreClient=+"
			)
		)
		if "%%c" equ "!Terminal!" (
			if "!C_Terminal!" equ "+" (
				set "C_Terminal=-"
			) else (
				set "C_Terminal=+"
			)
		)
		if "%%c" equ "!Getstarted!" (
			if "!C_Getstarted!" equ "+" (
				set "C_Getstarted=-"
			) else (
				set "C_Getstarted=+"
			)
		)
		if "%%c" equ "!Todos!" (
			if "!C_Todos!" equ "+" (
				set "C_Todos=-"
			) else (
				set "C_Todos=+"
			)
		)
		if "%%c" equ "!SoundRecorder!" (
			if "!C_SoundRecorder!" equ "+" (
				set "C_SoundRecorder=-"
			) else (
				set "C_SoundRecorder=+"
			)
		)
		if "%%c" equ "!BingWeather!" (
			if "!C_BingWeather!" equ "+" (
				set "C_BingWeather=-"
			) else (
				if "%SelectedSourceOS%" equ "w10" set "C_AdvertisingXaml=+"
				set "C_BingWeather=+"
			)
		)
		if "%%c" equ "!ClientWebExperience!" (
			if "!C_ClientWebExperience!" equ "+" (
				set "C_ClientWebExperience=-"
			) else (
				set "C_ClientWebExperience=+"
			)
		)
		if "%%c" equ "!CommunicationsApps!" (
			if "!IntegratedSidebar!" neq "" (
				set "C_AdvertisingXaml=+"
				set "C_WindowsMail=+"
				set "C_CommunicationsApps=+"
			)
			if "!IntegratedSidebar!" equ "" (
				if "!C_CommunicationsApps!" equ "+" (
					set "C_CommunicationsApps=-"
				) else (
					set "C_AdvertisingXaml=+"
					set "C_WindowsMail=+"	  
					set "C_CommunicationsApps=+"
				)
			)
		)
		if "%%c" equ "!WindowsStoreApp!" (
			if "!C_WindowsStoreApp!" equ "+" (
				set "C_StorePurchaseApp=-"
				if "%SelectedSourceOS%" equ "w10" set "C_ServicesStoreEngagement=-"
				if "%ImageBuild%" gtr "17763" (
					set "C_SolitaireCollection=-"
					if "%ImageBuild%" leq "19044" set "C_StickyNotes=-"
				)
				set "C_WindowsStoreApp=-"
			) else (
				set "C_AADBrokerPlugin=+"
				set "C_WindowsStoreApp=+"
				set "C_WindowsStoreClient=+"
				set "C_XboxIdentityProvider=+"
			)
		)
		if "%%c" equ "!XboxApp!" (
			if "%SelectedSourceOS%" equ "w10" (
				if "!C_XboxApp!" equ "+" (
					set "C_XboxApp=-"
					set "C_GamingApp=+"
				) else (
					set "C_XboxClient=+"
					set "C_XboxApp=+"
				)
			)
		)
		if "%%c" equ "!GamingApp!" (
			if "%SelectedSourceOS%" equ "w11" (
				if "!C_GamingApp!" equ "+" (
					set "C_GamingApp=-"
					set "C_XboxApp=+"
				) else (
					set "C_XboxClient=+"
					set "C_GamingApp=+"
				)
			)
		)
		if "%%c" equ "!XboxGamingOverlay!" (
			if "!C_XboxGamingOverlay!" equ "+" (
				set "C_XboxGamingOverlay=-"
			) else (
				set "C_XboxClient=+"
				set "C_XboxGamingOverlay=+"
			)
		)
		if "%%c" equ "!XboxGameOverlay!" (
			if "!C_XboxGameOverlay!" equ "+" (
				set "C_XboxGameOverlay=-"
			) else (
				set "C_XboxClient=+"
				set "C_XboxGameOverlay=+"
			)
		)
		if "%%c" equ "!XboxIdentityProvider!" (
			if "!C_XboxIdentityProvider!" equ "+" (
				if "%SelectedSourceOS%" equ "w10" set "C_ServicesStoreEngagement=-"
				set "C_StorePurchaseApp=-"
				if "%ImageBuild%" gtr "17763" (
					set "C_SolitaireCollection=-"
					if "%ImageBuild%" leq "19044" set "C_StickyNotes=-"
				)
				set "C_WindowsStoreApp=-"
				set "C_XboxIdentityProvider=-"
			) else (
				set "C_XboxClient=+"
				set "C_XboxIdentityProvider=+"
			)
		)
		if "%%c" equ "!XboxSpeechToTextOverlay!" (
			if "!C_XboxSpeechToTextOverlay!" equ "+" (
				set "C_XboxSpeechToTextOverlay=-"
			) else (
				set "C_XboxClient=+"
				set "C_XboxSpeechToTextOverlay=+"
			)
		)
		if "%%c" equ "!XboxTCUI!" (
			if "!C_XboxTCUI!" equ "+" (
				set "C_XboxTCUI=-"
			) else (
				set "C_XboxClient=+"
				set "C_XboxTCUI=+"
			)
		)
	)
)
goto :!CurrentMenu!

:: Start Removing Windows Components
:StartRemovingWindowsComponents

if "!Bypass!" equ "O" set T_HideTaskbarSearchbox=

if "!Bypass!" equ "I" (
	call :ListsandPreSets_Filter
	:: DateTime Version Stamp
	call :DateTimeStamp
	set "C_PersonalLists=+"
	set "RemovedPkgsNamesList=RemovedPkgsList(%ImageArchitecture%)_%ImageVersion%_[!DateTimeStamp!]"
	set "RetainedPkgsNamesList=RetainedPkgsList(%ImageArchitecture%)_%ImageVersion%_[!DateTimeStamp!]"
)

setlocal

cls
echo.
echo.===============================================================================
echo.%txtDisplayingChosenComponentsCheckList%
echo.===============================================================================
echo.

set /A ComponentsCount=0

:: [1] Internet
echo.
echo.%txtComponentsNameList%
echo.
echo.-------------------------------------------------------------------------------
echo.%txt1Internet%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	AdobeFlashForWindows
	EdgeChromium
	InternetExplorer
) do (
	if "!C_%%c!" equ "-" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)
echo.

:: [2] Multimedia
echo.
echo.-------------------------------------------------------------------------------
echo.%txt2Multimedia%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	FirstLogonAnimation
	GameExplorer
	LockScreenBackground
	ScreenSavers
	SnippingTool
	SoundThemes
	SpeechRecognition
	Wallpapers
	WindowsMediaPlayer
	WindowsPhotoViewer
	WinSAT
	WindowsThemes
	WindowsTIFFIFilter
) do (
	if "!C_%%c!" equ "-" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)
echo.

:: [3] Network
echo.
echo.-------------------------------------------------------------------------------
echo.%txt3Network%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	OfflineFiles
	OpenSSH
	RemoteDesktopClient
	RemoteDifferentialCompression
	SimpleTCPIPServices
	TelnetClient
	TFTPClient
	WindowsMail
) do (
	if "!C_%%c!" equ "-" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)
echo.

:: [4] Privacy
echo.
echo.-------------------------------------------------------------------------------
echo.%txt4Privacy%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	AssignedAccess
	CEIP
	FaceRecognition
	KernelDebugging
	LocationService
	PicturePassword
	PinEnrollment
	UnifiedTelemetryClient
	WiFiNetworkManager
	WindowsErrorReporting
	WindowsInsiderHub
) do (
	if "!C_%%c!" equ "-" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)
echo.

:: [5] Remoting
echo.
echo.-------------------------------------------------------------------------------
echo.%txt5Remoting%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	HomeGroup
	OneDrive
	MultiPointConnector
	RemoteAssistance
	RemoteDesktopServer
	RemoteRegistry
	WorkFoldersClient
) do (
	if "!C_%%c!" equ "-" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)
echo.

:: [6 ^| 7 ^| 8] System, SystemApps and WindowsApps
echo.
echo.-------------------------------------------------------------------------------
echo.%txtSystemSystemAppsWindowsApps%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	Cortana
	Paint
	QuickAssist
) do (
	if "!C_%%c!" equ "-" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)
echo.

:: [6] System
echo.
echo.-------------------------------------------------------------------------------
echo.%txt6System%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	AccessibilityTools
	Calculator
	DeviceLockdown
	EaseOfAccessCursors
	EaseOfAccessThemes
	EasyTransfer
	FileHistory
	Magnifier
	ManualSetup
	Narrator
	Notepad
	OnScreenKeyboard
	ProjFS
	SecurityCenter
	StepsRecorder
	StorageSpaces
	SystemRestore
	WindowsBackup
	WindowsFirewall
	WindowsSubsystemForLinux
	WindowsToGo
	Wordpad
) do (
	rem if "!C_%%c!" equ "-" if "%%c" neq "WindowsFirewall" if "%%c" neq "ManualSetup" (
	if "!C_%%c!" equ "-" if "%%c" neq "ManualSetup" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)
echo.

:: [7] SystemApps
echo.
echo.-------------------------------------------------------------------------------
echo.%txt7SystemApps%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	AccountsControl
	AddSuggestedFoldersToLibraryDialog
	AppResolverUX
	AssignedAccessLockApp
	AsyncTextService
	AADBrokerPlugin
	CallingShellApp
	CBSPreview
	CapturePicker
	ContentDeliveryManager
	CredDialogHost
	Edge
	EdgeDevToolsClient
	WindowsReaderPDF
	ECApp
	FileExplorer
	FilePicker
	LockApp
	MapControl
	XGpuEjectDialog
	NarratorQuickStart
	NcsiUwpApp
	OOBENetworkCaptivePortal
	OOBENetworkConnectionFlow
	ParentalControls
	PeopleExperienceHost
	PinningConfirmationDialog
	PPIProjection
	PrintDialog
	RetailDemoContent
	SearchApp
	SettingSync
	SkypeORTC
	SmartScreen
	SecureAssessmentBrowser
	WebcamExperience
	Win32WebViewHost
	WindowsDefender
	BioEnrollment
	WindowsMixedReality
	WindowsStoreClient
	XboxClient
	XboxGameCallableUI
) do (
	if "!C_%%c!" equ "-" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)
echo.

:: [8] WindowsApps
echo.
echo.-------------------------------------------------------------------------------
echo.%txt8WindowsApps%
echo.-------------------------------------------------------------------------------
echo.
for %%c in (
	AdvertisingXaml
	Alarms
	CalculatorApp
	Camera
	ClipChamp
	VP9VideoExtensions
	HEIFImageExtension
	HEVCVideoExtension
	RawImageExtension
	WebMediaExtensions
	WebpImageExtension
	DesktopAppInstaller
	Family
	FeedbackHub
	GetHelp
	ZuneMusic
	ZuneVideo
	Maps
	Messaging
	WalletService
	MixedRealityPortal
	3DViewer
	OneConnect
	OfficeHub
	BingNews
	NotepadApp
	OfficeOneNote
	Paint3D
	People
	Photos
	PowerAutomateDesktop
	Print3D
	ServicesStoreEngagement
	SkypeApp
	ScreenSketch
	SolitaireCollection
	StickyNotes
	StorePurchaseApp
	Terminal
	Getstarted
	Todos
	SoundRecorder
	BingWeather
	ClientWebExperience
	CommunicationsApps
	WindowsStoreApp
	XboxApp
	GamingApp
	XboxGamingOverlay
	XboxGameOverlay
	XboxIdentityProvider
	XboxSpeechToTextOverlay
	XboxTCUI
	YourPhone
) do (
	if "!C_%%c!" equ "-" (
		set /A ComponentsCount+=1
		echo.%%c
	)
)

if !ComponentsCount! equ 0 if "!C_ManualSetup!" equ "+" (
	echo.%txtNoWindowsComponentsSelected%
	goto :Stop
)

if "!C_PersonalLists!" equ "+" (
	call :CreateFolder "!PersonalLists!"
	for %%# in (
		Menu1
		AdobeFlashForWindows
		EdgeChromium
		InternetExplorer

		Menu2
		FirstLogonAnimation
		GameExplorer
		LockScreenBackground
		ScreenSavers
		SnippingTool
		SoundThemes
		SpeechRecognition
		Wallpapers
		WindowsMediaPlayer
		WindowsPhotoViewer
		WinSAT
		WindowsThemes
		WindowsTIFFIFilter

		Menu3
		OfflineFiles
		OpenSSH
		RemoteDesktopClient
		RemoteDifferentialCompression
		SimpleTCPIPServices
		TelnetClient
		TFTPClient
		WindowsMail

		Menu4
		AssignedAccess
		CEIP
		FaceRecognition
		KernelDebugging
		LocationService
		PicturePassword
		PinEnrollment
		UnifiedTelemetryClient
		WiFiNetworkManager
		WindowsErrorReporting
		WindowsInsiderHub

		Menu5
		HomeGroup
		OneDrive
		MultiPointConnector
		RemoteAssistance
		RemoteDesktopServer
		RemoteRegistry
		WorkFoldersClient

		Menu678
		Cortana
		Paint
		QuickAssist

		Menu6
		AccessibilityTools
		Calculator
		DeviceLockdown
		EaseOfAccessCursors
		EaseOfAccessThemes
		EasyTransfer
		FileHistory
		Magnifier
		ManualSetup
		Narrator
		Notepad
		OnScreenKeyboard
		ProjFS
		SecurityCenter
		StepsRecorder
		StorageSpaces
		SystemRestore
		WindowsBackup
		WindowsFirewall
		WindowsSubsystemForLinux
		WindowsToGo
		Wordpad

		Menu7
		AccountsControl
		AddSuggestedFoldersToLibraryDialog
		AppResolverUX
		AssignedAccessLockApp
		AsyncTextService
		AADBrokerPlugin
		CallingShellApp
		CBSPreview
		CapturePicker
		ContentDeliveryManager
		CredDialogHost
		Edge
		EdgeDevToolsClient
		WindowsReaderPDF
		ECApp
		FileExplorer
		FilePicker
		LockApp
		MapControl
		XGpuEjectDialog
		NarratorQuickStart
		NcsiUwpApp
		OOBENetworkCaptivePortal
		OOBENetworkConnectionFlow
		ParentalControls
		PeopleExperienceHost
		PinningConfirmationDialog
		PPIProjection
		PrintDialog
		RetailDemoContent
		SearchApp
		SettingSync
		SkypeORTC
		SmartScreen
		SecureAssessmentBrowser
		WebcamExperience
		Win32WebViewHost
		WindowsDefender
		BioEnrollment
		WindowsMixedReality
		WindowsStoreClient
		XboxClient
		XboxGameCallableUI

		Menu8
		AdvertisingXaml
		Alarms
		CalculatorApp
		Camera
		ClipChamp
		VP9VideoExtensions
		HEIFImageExtension
		HEVCVideoExtension
		RawImageExtension
		WebMediaExtensions
		WebpImageExtension
		DesktopAppInstaller
		Family
		FeedbackHub
		GetHelp
		ZuneMusic
		ZuneVideo
		Maps
		Messaging
		WalletService
		MixedRealityPortal
		3DViewer
		OneConnect
		OfficeHub
		BingNews
		NotepadApp
		OfficeOneNote
		Paint3D
		People
		Photos
		PowerAutomateDesktop
		Print3D
		ServicesStoreEngagement
		SkypeApp
		ScreenSketch
		SolitaireCollection
		StickyNotes
		StorePurchaseApp
		Terminal
		Getstarted
		Todos
		SoundRecorder
		BingWeather
		ClientWebExperience
		CommunicationsApps
		WindowsStoreApp
		XboxApp
		GamingApp
		XboxGamingOverlay
		XboxGameOverlay
		XboxIdentityProvider
		XboxSpeechToTextOverlay
		XboxTCUI
		YourPhone
	) do (
		if "%%#" equ "Menu1" (
			(
				echo.# :: [1]  %GlobalInternet%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.# :: [1]  %GlobalInternet%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" equ "Menu2" (
			(
				echo.
				echo.# :: [2]  %GlobalMultimedia%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.
				echo.# :: [2]  %GlobalMultimedia%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" equ "Menu3" (
			(
				echo.
				echo.# :: [3]  %GlobalNetwork%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.
				echo.# :: [3]  %GlobalNetwork%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" equ "Menu4" (
			(
				echo.
				echo.# :: [4]  %GlobalPrivacy%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.
				echo.# :: [4]  %GlobalPrivacy%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" equ "Menu5" (
			(
				echo.
				echo.# :: [5]  %GlobalRemoting%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.
				echo.# :: [5]  %GlobalRemoting%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" equ "Menu678" (
			(
				echo.
				echo.# :: [6 ^| 7 ^| 8]  %GlobalSystemSystemAppsWindowsApps%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.
				echo.# :: [6 ^| 7 ^| 8]  %GlobalSystemSystemAppsWindowsApps%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" equ "Menu6" (
			(
				echo.
				echo.# :: [6]  %GlobalSystem%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.
				echo.# :: [6]  %GlobalSystem%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" equ "Menu7" (
			(
				echo.
				echo.# :: [7]  %GlobalSystemApps%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.
				echo.# :: [7]  %GlobalSystemApps%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" equ "Menu8" (
			(
				echo.
				echo.# :: [8]  %GlobalWindowsApps%
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			(
				echo.
				echo.# :: [8]  %GlobalWindowsApps%
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
		if "%%#" neq "Menu1" if "%%#" neq "Menu2" if "%%#" neq "Menu3" if "%%#" neq "Menu4" if "%%#" neq "Menu5" if "%%#" neq "Menu678" if "%%#" neq "Menu6" if "%%#" neq "Menu7" if "%%#" neq "Menu8" (
			if "!TKHC_%%#!" neq "" if "!C_%%#!" equ "-" (
				echo.%%#
			)>>"!PersonalLists!\!RemovedPkgsNamesList!.txt"
			if "!TKHC_%%#!" neq "" if "!C_%%#!" equ "+" (
				echo.%%#
			)>>"!PersonalLists!\!RetainedPkgsNamesList!.txt"
		)
	)
)

if "!Bypass!" equ "O" (
	echo.===============================================================================
	echo.
	echo. [C] %GlobalOption_Continue%
	echo.
	echo. [R] %GlobalOption_Return2Change%
	echo.
	echo.===============================================================================
	echo.
	choice /C:CR /N /M "%GlobalEnterChoice% "
	if errorlevel 2 goto :RemoveWindowsComponentsMenu
)

if "!Paint_System!" neq "" set "Paint=!Paint_System!"
if "!Cortana_SystemApps!" neq "" set "Cortana=!Cortana_SystemApps!"
if "!QuickAssist_SystemApps!" neq "" set "QuickAssist=!QuickAssist_SystemApps!"
if "!AppInstaller!" neq "" set "DesktopAppInstaller=!AppInstaller!"
if "!FilmsTV!" neq "" set "ZuneVideo=!FilmsTV!"
if "!GrooveMusic!" neq "" set "ZuneMusic=!GrooveMusic!"
if "!MediaPlayer!" neq "" set "ZuneMusic=!MediaPlayer!"
if "!MoviesTV!" neq "" set "ZuneVideo=!MoviesTV!"

cls
echo.===============================================================================
echo.%txtRemovingWindowsComponentsMenu%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalStartingRemovingWindowsComponents%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalRemovingWindowsComponents%
echo.-------------------------------------------------------------------------------

if !ComponentsCount! gtr 0 (
	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

			rem Checking the selected components can be removed for this Image Edition and Assigning Chosen Components
			rem Creating the ToolkitHelper "Removal Components List" Variable
			set Components=
			for /f "skip=6 eol== tokens=1,2* delims=- " %%# in ('%ToolKitHelper% "%InstallMount%\%%i" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
				if "%%#" neq "Internet" if "%%#" neq "Multimedia" if "%%#" neq "Network" if "%%#" neq "Privacy" if "%%#" neq "Remoting" if "%%#" neq "System" if "%%#" neq "Windows" if "%%#" neq "Group" if "%%#" neq "SystemApps" if "%%#" neq "WindowsApps" if "%%#" neq "AllComponents" (
					if "!C_%%#!" equ "-" if "%%#" neq "ManualSetup" (
						set "Components=!Components!;%%#"
					)
				)
			)
			set "Components=!Components:~1!"

			call :ToolkitHelper "%%i", "!Components!"

			if "!C_EdgeChromium!" equ "-" (
				call :RemoveFolder "%InstallMount%\%%i\ProgramFiles\Microsoft\EdgeUpdate"
				if /i "%ImageArchitecture%" neq "x86" if /i "%ImageArchitecture%" neq "arm" call :RemoveFolder "%InstallMount%\%%i\ProgramFiles(x86)\Microsoft\EdgeUpdate"
			)

			echo.
			echo.
		)
	)
)

if "!C_ManualSetup!" equ "-" (
	echo.
	call :ToolkitHelper "!SpecifiedSourceIndex!", "ManualSetup"
	echo.
	echo.
)

echo.-------------------------------------------------------------------------------
echo.%GlobalFinishedRemovingWindowsComponents%
echo.-------------------------------------------------------------------------------

goto :Stop

::-------------------------------------------------------------------------------------------

:: Select Components - ToolkitHelper Automated Menu
:SelectComponents_ToolkitHelperAutomatedMenus

cls
echo.
echo.===============================================================================
echo.%txtSelectComponentsToolkitHelperMenu%
echo.===============================================================================
echo.
echo.  [R]   %GlobalReadComponentsListPreSet%
echo.
set /A count=1
for %%n in (
	"Internet"
	"Multimedia"
	"Network"
	"Privacy"
	"Remoting"
	"System"
	"System Apps"
	"Windows Apps"
) do (
	set "OptionID=!count!"
	set "TKHSC=%%n"
	set "TKHSC=!TKHSC:"=!"
	set TKHSCID_!TKHSC!=
	set "TKHSCID_!TKHSC!=!count!"
	if "!TKHSCID_!TKHSC!!" neq "" (
		echo.  [!OptionID!]   !TKHSC!
		set "OptionIDs=!count!!count!"
		set /A count+=1
	)
)

echo.
echo.  %GlobalNoteYouCanMakeline1%
echo.        %GlobalNoteYouCanMakeline2%
echo.        %GlobalNoteYouCanMakeline3%
echo.
echo.  [S]   %txtStartRemovingWindowsComponentsAvoiding%
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:R12345678SX /N /M "%GlobalEnterChoice% "
if errorlevel 11 goto :!CurrentMenu!
if errorlevel 10 call :StartRemovingWindowsComponentsAvoidingFilters
if errorlevel  9 goto :RemoveWindowsAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
if errorlevel  8 goto :RemoveSystemAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
if errorlevel  7 goto :RemoveSystemComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
if errorlevel  6 goto :RemoveRemotingComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
if errorlevel  5 goto :RemovePrivacyComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
if errorlevel  4 goto :RemoveNetworkComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
if errorlevel  3 goto :RemoveMultimediaComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
if errorlevel  2 goto :RemoveInternetComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
if errorlevel  1 (
	if exist "%RemovePkgsList%" for /f "eol=# tokens=*" %%z in ('type "%RemovePkgsList%" 2^>nul') do (
		set "TKHRC_%%z=-"
	)
)

goto :SelectComponents_ToolkitHelperAutomatedMenus

:: Remove Internet Components Avoiding Filters - ToolkitHelper Automated Menu
:RemoveInternetComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

cls
set Internet=
set /A count=1
for /f "skip=6 eol== tokens=1* delims=- " %%c in ('%ToolkitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
	if /I "%%c" equ "Internet" (
		echo.
		echo.===============================================================================
		echo. ::1::%txtRemoveInternetComponentsToolkitHelperMenu%
		echo.===============================================================================
		echo.
		set "Internet=1"
	)
	if "!Internet!" equ "1" (
		if /I "%%c" neq "Internet" if /I "%%c" neq "Multimedia" if /I "%%c" neq "Network" if /I "%%c" neq "Privacy" if /I "%%c" neq "Remoting" if /I "%%c" neq "System" if /I "%%c" neq "Windows" if /I "%%c" neq "Group" if /I "%%c" neq "SystemApps" if /I "%%c" neq "WindowsApps" if /I "%%c" neq "AllComponents" (
			set TKHRICID_%%c=
			if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
			if !count! gtr 9 if !count! leq 99 set "OptionID=!count!"
			if !count! gtr 99 set "OptionID=!count!"
			set "TKHRICID_%%c=!count!"
			if "!TKHRICID_%%c!" neq "" (
				echo.  [!OptionID!] ^(!TKHRC_%%c!^) %%d ^(%%c^)
				set /A count+=1
			)
		)
		if /I "%%c" equ "Multimedia" set "Internet=0"
	)
)
echo.
echo.
echo.   [A] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [B] %GlobalBack2PreviousRemovalMenu%
echo.   [N] %GlobalGo2NextRemovalMenu%
echo.   [X] %GlobalGoBack2SelectS2StartRemovingComponents%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" goto :SelectComponents_ToolkitHelperAutomatedMenus
	if /i "%%c" equ "N" goto :RemoveMultimediaComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /i "%%c" equ "B" goto :RemoveWindowsAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /I "%%c" equ "D" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRICID_%%#!" neq "" set "TKHRC_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRICID_%%#!" neq "" set "TKHRC_%%#=-"
		)
	)
	for %%# in (!TKHC_List!) do (
		if /I "%%c" equ "!TKHRICID_%%#!" (
			if /I "!TKHRC_%%#!" equ "+" (
				set "TKHRC_%%#=-"
			) else (
				set "TKHRC_%%#=+"
			)
		)
	)
)

goto :RemoveInternetComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

:: Remove Multimedia Components Avoiding Filters - ToolkitHelper Automated Menu
:RemoveMultimediaComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

cls
set Multimedia=
set /A count=1
for /f "skip=6 eol== tokens=1* delims=- " %%c in ('%ToolkitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
	if /I "%%c" equ "Multimedia" (
		echo.
		echo.===============================================================================
		echo. ::2::%txtRemoveMultimediaComponentsToolkitHelperMenu%
		echo.===============================================================================
		echo.
		set "Multimedia=1"
	)
	if "!Multimedia!" equ "1" (
		if /I "%%c" neq "Internet" if /I "%%c" neq "Multimedia" if /I "%%c" neq "Network" if /I "%%c" neq "Privacy" if /I "%%c" neq "Remoting" if /I "%%c" neq "System" if /I "%%c" neq "Windows" if /I "%%c" neq "Group" if /I "%%c" neq "SystemApps" if /I "%%c" neq "WindowsApps" if /I "%%c" neq "AllComponents" (
			set TKHRMCID_%%c=
			if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
			if !count! gtr 9 if !count! leq 99 set "OptionID=!count!"
			if !count! gtr 99 set "OptionID=!count!"
			set "TKHRMCID_%%c=!count!"
			if "!TKHRMCID_%%c!" neq "" (
				echo.  [!OptionID!] ^(!TKHRC_%%c!^) %%d ^(%%c^)
				set /A count+=1
			)
		)
		if /I "%%c" equ "Network" set "Multimedia=0"
	)
)
echo.
echo.
echo.   [A] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [B] %GlobalBack2PreviousRemovalMenu%
echo.   [N] %GlobalGo2NextRemovalMenu%
echo.   [X] %GlobalGoBack2SelectS2StartRemovingComponents%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" goto :SelectComponents_ToolkitHelperAutomatedMenus
	if /i "%%c" equ "N" goto :RemoveNetworkComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /i "%%c" equ "B" goto :RemoveInternetComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /I "%%c" equ "D" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRMCID_%%#!" neq "" set "TKHRC_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRMCID_%%#!" neq "" set "TKHRC_%%#=-"
		)
	)
	for %%# in (!TKHC_List!) do (
		if /I "%%c" equ "!TKHRMCID_%%#!" (
			if /I "!TKHRC_%%#!" equ "+" (
				set "TKHRC_%%#=-"
			) else (
				set "TKHRC_%%#=+"
			)
		)
	)
)

goto :RemoveMultimediaComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

:: Remove Network Components Avoiding Filters - ToolkitHelper Automated Menu
:RemoveNetworkComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

cls
set Network=
set /A count=1
for /f "skip=6 eol== tokens=1* delims=- " %%c in ('%ToolkitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
	if /I "%%c" equ "Network" (
		echo.
		echo.===============================================================================
		echo. ::3::%txtRemoveNetworkComponentsToolkitHelperMenu%
		echo.===============================================================================
		echo.
		set "Network=1"
	)
	if "!Network!" equ "1" (
		if /I "%%c" neq "Internet" if /I "%%c" neq "Multimedia" if /I "%%c" neq "Network" if /I "%%c" neq "Privacy" if /I "%%c" neq "Remoting" if /I "%%c" neq "System" if /I "%%c" neq "Windows" if /I "%%c" neq "Group" if /I "%%c" neq "SystemApps" if /I "%%c" neq "WindowsApps" if /I "%%c" neq "AllComponents" (
			set TKHRNCID_%%c=
			if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
			if !count! gtr 9 if !count! leq 99 set "OptionID=!count!"
			if !count! gtr 99 set "OptionID=!count!"
			set "TKHRNCID_%%c=!count!"
			if "!TKHRNCID_%%c!" neq "" (
				echo.  [!OptionID!] ^(!TKHRC_%%c!^) %%d ^(%%c^)
				set /A count+=1
			)
		)
		if /I "%%c" equ "Privacy" set "Network=0"
	)
)
echo.
echo.
echo.   [A] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [B] %GlobalBack2PreviousRemovalMenu%
echo.   [N] %GlobalGo2NextRemovalMenu%
echo.   [X] %GlobalGoBack2SelectS2StartRemovingComponents%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" goto :SelectComponents_ToolkitHelperAutomatedMenus
	if /i "%%c" equ "N" goto :RemovePrivacyComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /i "%%c" equ "B" goto :RemoveMultimediaComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /I "%%c" equ "D" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRNCID_%%#!" neq "" set "TKHRC_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRNCID_%%#!" neq "" set "TKHRC_%%#=-"
		)
	)
	for %%# in (!TKHC_List!) do (
		if /I "%%c" equ "!TKHRNCID_%%#!" (
			if /I "!TKHRC_%%#!" equ "+" (
				set "TKHRC_%%#=-"
			) else (
				set "TKHRC_%%#=+"
			)
		)
	)
)

goto :RemoveNetworkComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

:: Remove Privacy Components Avoiding Filters - ToolkitHelper Automated Menu
:RemovePrivacyComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

cls
set Privacy=
set /A count=1
for /f "skip=6 eol== tokens=1* delims=- " %%c in ('%ToolkitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
	if /I "%%c" equ "Privacy" (
		echo.
		echo.===============================================================================
		echo. ::4::%txtRemovePrivacyComponentsToolkitHelperMenu%
		echo.===============================================================================
		echo.
		set "Privacy=1"
	)
	if "!Privacy!" equ "1" (
		if /I "%%c" neq "Internet" if /I "%%c" neq "Multimedia" if /I "%%c" neq "Network" if /I "%%c" neq "Privacy" if /I "%%c" neq "Remoting" if /I "%%c" neq "System" if /I "%%c" neq "Windows" if /I "%%c" neq "Group" if /I "%%c" neq "SystemApps" if /I "%%c" neq "WindowsApps" if /I "%%c" neq "AllComponents" (
			set TKHRPCID_%%c=
			if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
			if !count! gtr 9 if !count! leq 99 set "OptionID=!count!"
			if !count! gtr 99 set "OptionID=!count!"
			set "TKHRPCID_%%c=!count!"
			if "!TKHRPCID_%%c!" neq "" (
				echo.  [!OptionID!] ^(!TKHRC_%%c!^) %%d ^(%%c^)
				set /A count+=1
			)
		)
		if /I "%%c" equ "Remoting" set "Privacy=0"
	)
)
echo.
echo.
echo.   [A] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [B] %GlobalBack2PreviousRemovalMenu%
echo.   [N] %GlobalGo2NextRemovalMenu%
echo.   [X] %GlobalGoBack2SelectS2StartRemovingComponents%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" goto :SelectComponents_ToolkitHelperAutomatedMenus
	if /i "%%c" equ "N" goto :RemoveRemotingComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /i "%%c" equ "B" goto :RemoveNetworkComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /I "%%c" equ "D" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRPCID_%%#!" neq "" set "TKHRC_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRPCID_%%#!" neq "" set "TKHRC_%%#=-"
		)
	)
	for %%# in (!TKHC_List!) do (
		if /I "%%c" equ "!TKHRPCID_%%#!" (
			if /I "!TKHRC_%%#!" equ "+" (
				set "TKHRC_%%#=-"
			) else (
				set "TKHRC_%%#=+"
			)
		)
	)
)

goto :RemovePrivacyComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

:: Remove Remoting Components Avoiding Filters - ToolkitHelper Automated Menu
:RemoveRemotingComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

cls
set Remoting=
set /A count=1
for /f "skip=6 eol== tokens=1* delims=- " %%c in ('%ToolkitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
	if /I "%%c" equ "Remoting" (
		echo.
		echo.===============================================================================
		echo. ::5::%txtRemoveRemotingComponentsToolkitHelperMenu%
		echo.===============================================================================
		echo.
		set "Remoting=1"
	)
	if "!Remoting!" equ "1" (
		if /I "%%c" neq "Internet" if /I "%%c" neq "Multimedia" if /I "%%c" neq "Network" if /I "%%c" neq "Privacy" if /I "%%c" neq "Remoting" if /I "%%c" neq "System" if /I "%%c" neq "Windows" if /I "%%c" neq "Group" if /I "%%c" neq "SystemApps" if /I "%%c" neq "WindowsApps" if /I "%%c" neq "AllComponents" (
			set TKHRRCID_%%c=
			if !count! geq 1 if !count! leq 9 set "OptionID=  !count!"
			if !count! gtr 9 if !count! leq 99 set "OptionID= !count!"
			if !count! gtr 99 set "OptionID=!count!"
			set "TKHRRCID_%%c=!count!"
			if "!TKHRRCID_%%c!" neq "" (
				echo.  [!OptionID!] ^(!TKHRC_%%c!^) %%d ^(%%c^)
				set /A count+=1
			)
		)
		if /I "%%c" equ "System" if /I "%%c %%d" neq "System Apps" set "Remoting=0"
	)
)
echo.
echo.
echo.   [A] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [B] %GlobalBack2PreviousRemovalMenu%
echo.   [N] %GlobalGo2NextRemovalMenu%
echo.   [X] %GlobalGoBack2SelectS2StartRemovingComponents%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" goto :SelectComponents_ToolkitHelperAutomatedMenus
	if /i "%%c" equ "N" goto :RemoveSystemComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /i "%%c" equ "B" goto :RemovePrivacyComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /I "%%c" equ "D" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRRCID_%%#!" neq "" set "TKHRC_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRRCID_%%#!" neq "" set "TKHRC_%%#=-"
		)
	)
	for %%# in (!TKHC_List!) do (
		if /I "%%c" equ "!TKHRRCID_%%#!" (
			if /I "!TKHRC_%%#!" equ "+" (
				set "TKHRC_%%#=-"
			) else (
				set "TKHRC_%%#=+"
			)
		)
	)
)

goto :RemoveRemotingComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

:: Remove System Components Avoiding Filters - ToolkitHelper Automated Menu
:RemoveSystemComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

cls
set System=
set /A count=1
for /f "skip=6 eol== tokens=1* delims=- " %%c in ('%ToolkitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
	if /I "%%c" equ "System" if /I "%%c %%d" neq "System Apps" (
		echo.
		echo.===============================================================================
		echo. ::6::%txtRemoveSystemComponentsToolkitHelperMenu%
		echo.===============================================================================
		echo.
		set "System=1"
	)
	if "!System!" equ "1" (
		if /I "%%c" neq "Internet" if /I "%%c" neq "Multimedia" if /I "%%c" neq "Network" if /I "%%c" neq "Privacy" if /I "%%c" neq "Remoting" if /I "%%c" neq "System" if /I "%%c" neq "Windows" if /I "%%c" neq "Group" if /I "%%c" neq "SystemApps" if /I "%%c" neq "WindowsApps" if /I "%%c" neq "AllComponents" (
			set TKHRSCID_%%c=
			if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
			if !count! gtr 9 if !count! leq 99 set "OptionID=!count!"
			if !count! gtr 99 set "OptionID=!count!"
			set "TKHRSCID_%%c=!count!"
			if "!TKHRSCID_%%c!" neq "" (
				echo.  [!OptionID!] ^(!TKHRC_%%c!^) %%d ^(%%c^)
				set /A count+=1
			)
		)
		if /I "%%c %%d" equ "System Apps" set "System=0"
	)
)
echo.
echo.
echo.   [A] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [B] %GlobalBack2PreviousRemovalMenu%
echo.   [N] %GlobalGo2NextRemovalMenu%
echo.   [X] %GlobalGoBack2SelectS2StartRemovingComponents%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" goto :SelectComponents_ToolkitHelperAutomatedMenus
	if /i "%%c" equ "N" goto :RemoveSystemAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /i "%%c" equ "B" goto :RemoveRemotingComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /I "%%c" equ "D" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRSCID_%%#!" neq "" set "TKHRC_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRSCID_%%#!" neq "" set "TKHRC_%%#=-"
		)
	)
	for %%# in (!TKHC_List!) do (
		if /I "%%c" equ "!TKHRSCID_%%#!" (
			if /I "!TKHRC_%%#!" equ "+" (
				set "TKHRC_%%#=-"
			) else (
				set "TKHRC_%%#=+"
			)
		)
	)
)

goto :RemoveSystemComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

:: Remove SystemApps Components Avoiding Filters - ToolkitHelper Automated Menu
:RemoveSystemAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

cls
set SystemApps=
set /A count=1
for /f "skip=6 eol== tokens=1* delims=- " %%c in ('%ToolkitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
	if /I "%%c %%d" equ "System Apps" (
		echo.
		echo.===============================================================================
		echo. ::7::%txtRemoveSystemAppsComponentsToolkitHelperMenu%
		echo.===============================================================================
		echo.
		set "SystemApps=1"
	)
	if "!SystemApps!" equ "1" (
		if /I "%%c" neq "Internet" if /I "%%c" neq "Multimedia" if /I "%%c" neq "Network" if /I "%%c" neq "Privacy" if /I "%%c" neq "Remoting" if /I "%%c" neq "System" if /I "%%c" neq "Windows" if /I "%%c" neq "Group" if /I "%%c" neq "SystemApps" if /I "%%c" neq "WindowsApps" if /I "%%c" neq "AllComponents" (
			set TKHRSACID_%%c=
			if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
			if !count! gtr 9 if !count! leq 99 set "OptionID=!count!"
			if !count! gtr 99 set "OptionID=!count!"
			set "TKHRSACID_%%c=!count!"
			if "!TKHRSACID_%%c!" neq "" (
				echo.  [!OptionID!] ^(!TKHRC_%%c!^) %%d ^(%%c^)
				set /A count+=1
			)
		)
		if /I "%%c %%d" equ "Windows Apps" set "SystemApps=0"
	)
)
echo.
echo.
echo.   [A] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [B] %GlobalBack2PreviousRemovalMenu%
echo.   [N] %GlobalGo2NextRemovalMenu%
echo.   [X] %GlobalGoBack2SelectS2StartRemovingComponents%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" goto :SelectComponents_ToolkitHelperAutomatedMenus
	if /i "%%c" equ "N" goto :RemoveWindowsAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /i "%%c" equ "B" goto :RemoveSystemComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /I "%%c" equ "D" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRSACID_%%#!" neq "" set "TKHRC_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRSACID_%%#!" neq "" set "TKHRC_%%#=-"
		)
	)
	for %%# in (!TKHC_List!) do (
		if /I "%%c" equ "!TKHRSACID_%%#!" (
			if /I "!TKHRC_%%#!" equ "+" (
				set "TKHRC_%%#=-"
			) else (
				set "TKHRC_%%#=+"
			)
		)
	)
)

goto :RemoveSystemAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

:: Remove WindowsApps Components Avoiding Filters - ToolkitHelper Automated Menu
:RemoveWindowsAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

cls
set WindowsApps=
set /A count=1
for /f "skip=6 eol== tokens=1* delims=- " %%c in ('%ToolkitHelper% "%InstallMount%\!SpecifiedSourceIndex!" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
	if /I "%%c %%d" equ "Windows Apps" (
		echo.
		echo.===============================================================================
		echo. ::8::%txtRemoveWindowsAppsComponentsToolkitHelperMenu%
		echo.===============================================================================
		echo.
		set "WindowsApps=1"
	)
	if "!WindowsApps!" equ "1" (
		if /I "%%c" neq "Internet" if /I "%%c" neq "Multimedia" if /I "%%c" neq "Network" if /I "%%c" neq "Privacy" if /I "%%c" neq "Remoting" if /I "%%c" neq "System" if /I "%%c" neq "Windows" if /I "%%c" neq "Group" if /I "%%c" neq "SystemApps" if /I "%%c" neq "WindowsApps" if /I "%%c" neq "AllComponents" (
			set TKHRWACID_%%c=
			if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
			if !count! gtr 9 if !count! leq 99 set "OptionID=!count!"
			if !count! gtr 99 set "OptionID=!count!"
			set "TKHRWACID_%%c=!count!"
			if "!TKHRWACID_%%c!" neq "" (
				echo.  [!OptionID!] ^(!TKHRC_%%c!^) %%d ^(%%c^)
				set /A count+=1
			)
		)
		if /I "%%c" equ "Group" set "WindowsApps=0"
	)
)
echo.
echo.
echo.   [A] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
echo.   [B] %GlobalBack2PreviousRemovalMenu%
echo.   [N] %GlobalGo2NextRemovalMenu%
echo.   [X] %GlobalGoBack2SelectS2StartRemovingComponents%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
for %%c in (!MenuChoice!) DO (
	if /I "%%c" equ "X" goto :SelectComponents_ToolkitHelperAutomatedMenus
	if /i "%%c" equ "N" goto :RemoveInternetComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /i "%%c" equ "B" goto :RemoveSystemAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu
	if /I "%%c" equ "D" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRWACID_%%#!" neq "" set "TKHRC_%%#=+"
		)
	)
	if /I "%%c" equ "A" (
		for %%# in (!TKHC_List!) do (
			if "!TKHRWACID_%%#!" neq "" set "TKHRC_%%#=-"
		)
	)
	for %%# in (!TKHC_List!) do (
		if /I "%%c" equ "!TKHRWACID_%%#!" (
			if /I "!TKHRC_%%#!" equ "+" (
				set "TKHRC_%%#=-"
			) else (
				set "TKHRC_%%#=+"
			)
		)
	)
)

goto :RemoveWindowsAppsComponentsAvoidingFilters_ToolkitHelperAutomatedMenu

:StartRemovingWindowsComponentsAvoidingFilters
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalStartingRemovingWindowsComponents%
echo.-------------------------------------------------------------------------------
echo.
echo.      %GlobalImage% install.wim
echo.      %GlobalImageIndex% !ImageIndexNo!
echo.      %GlobalImageArchitecture% %ImageArchitecture%
echo.      %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalRemovingWindowsComponents%
echo.-------------------------------------------------------------------------------

set /A TKHRC_Count=0
for %%r in (!TKHC_List!) do (
	if "!TKHRC_%%r!" equ "-" set /A TKHRC_Count+=1
)

if !TKHRC_Count! gtr 0 (
	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

			set TKHR_Components=
			for /f "skip=6 eol== tokens=1,2* delims=- " %%# in ('%ToolKitHelper% "%InstallMount%\%%i" /? ^| findstr.exe /I /V "Group" ^| findstr.exe /I /V /C:" All "') do (
				if "%%#" neq "Internet" if "%%#" neq "Multimedia" if "%%#" neq "Network" if "%%#" neq "Privacy" if "%%#" neq "Remoting" if "%%#" neq "System" if "%%#" neq "Windows" if "%%#" neq "Group" if "%%#" neq "SystemApps" if "%%#" neq "WindowsApps" if "%%#" neq "AllComponents" (
					if "!TKHRC_%%#!" equ "-" if "%%#" neq "ManualSetup" (
						set "TKHR_Components=!TKHR_Components!;%%#"
					)
				)
			)
			set "TKHR_Components=!TKHR_Components:~1!"
			call :ToolkitHelper "%%i", "!TKHR_Components!"
		)
	)
)

echo.
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalFinishedRemovingWindowsComponents%
echo.-------------------------------------------------------------------------------
:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

if "!C_EdgeChromium!" equ "-" set "T_EdgeChromium=1"
if "!TKHRC_EdgeChromium!" equ "-" set "T_EdgeChromium=1"
if "!C_Cortana!" equ "-" set "T_Cortana=1"
if "!TKHRC_Cortana!" equ "-" set "T_Cortana=1"

for %%r in (!Components!) do (
	set TKHRCID_%%r=
	set TKHC_%%r=
	set C_%%r=
)
set C_ManualSetup=

for %%r in (!TKHR_Components!) do (
	set TKHRICID_%%r=
	set TKHRMCID_%%r=
	set TKHRNCID_%%r=
	set TKHRPCID_%%r=
	set TKHRRCID_%%r=
	set TKHRSCID_%%r=
	set TKHRSACID_%%r=
	set TKHRWACID_%%r=
	set TKHC_%%r=
	set TKHRC_%%r=
)
set TKHRC_ManualSetup=

endlocal

:: Resetting All Flags Status
call :EnvironmentVariables

if "!Allowed!" equ "I" set "Finished=Remove"

set Components=
set ComponentsList=
set TKHR_Components=
set TKHC_List=

:: Returning to Remove Windows Components Menu.
if "!Bypass!" equ "O" (
	goto :!CurrentMenu!
) else (
	goto :EOF
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Remove Components with ToolkiHelper
:: Input Parameters [ %~1 : Image Index No, %~2 : Component or Components separated with comas. ]
::-------------------------------------------------------------------------------------------
:ToolkitHelper

echo.-------------------------------------------------------------------------------
echo.%txtRemoveComponentsPackage%
echo.-------------------------------------------------------------------------------
echo.
"%ToolkitHelper%" "%InstallMount%\%~1" "%~2"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Remove Windows Apps Using Apps List
::-------------------------------------------------------------------------------------------
:RemoveWindowsAppsList

setlocal

cls
echo.===============================================================================
echo.%txtRemoveWinAppsListMenu%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtRemoveWinAppspListStart%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtRemoveWinAppspListRemoving%
echo.-------------------------------------------------------------------------------

for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

		for /f "eol=# tokens=*" %%z in ('type "%RemoveAppsList%" 2^>nul') do (
			rem if "%%z" equ "Microsoft.SecHealthUI" if "%SelectedSourceOS%" equ "w11" if "%ImageBuild%" geq "21996" (
				rem %DISM% /Online /Add-AppxUninstallBlocklistEntry /PackageFamily:  /NonRemovable:1
			rem )

			call :RemoveProvisionedAppxPackage "%InstallMount%\%%i", %%z, %%z

			if "%%z" equ "Microsoft.3DBuilder" (
				:: Mounting Image Registry
				echo.
				echo.%GlobalMountingImageRegistry%
				call :MountImageRegistry "%InstallMount%\%%i"

				:: Removing 3D Print with 3D Builder option from right click context menu
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.bmp\Shell\T3D Print" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jpg\Shell\T3D Print" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.png\Shell\T3D Print" /f >nul 2>&1

				:: Un-Mounting Image Registry
				echo.
				echo.
				echo.%GlobalUnMountingImageRegistry%
				call :UnMountImageRegistry
				echo.
			)

			if "%%z" equ "Microsoft.MSPaint" (
				:: Mounting Image Registry
				echo.
				echo.%GlobalMountingImageRegistry%
				call :MountImageRegistry "%InstallMount%\%%i"

				:: Removing Edit with Paint 3D Option from right click context menu
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.3mf\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.bmp\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.fbx\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.gif\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jfif\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jpe\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jpeg\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jpg\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.png\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.tif\Shell\3D Edit" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.tiff\Shell\3D Edit" /f >nul 2>&1

				:: Un-Mounting Image Registry
				echo.
				echo.
				echo.%GlobalUnMountingImageRegistry%
				call :UnMountImageRegistry
				echo.
			)

			if "%%z" equ "Microsoft.Print3D" if "%ImageBuild%" geq "16299" (
				:: Mounting Image Registry
				echo.
				echo.%GlobalMountingImageRegistry%
				call :MountImageRegistry "%InstallMount%\%%i"

				:: Removing 3D Objects Section from Windows Explorer Navigation Pane
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" reg.exe delete "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}" /f >nul 2>&1

				:: Un-Mounting Image Registry
				echo.
				echo.
				echo.%GlobalUnMountingImageRegistry%
				call :UnMountImageRegistry
				echo.
			)

			if "%%z" equ "Microsoft.Microsoft3DViewer" if "%ImageBuild%" geq "16299" (
				:: Mounting Image Registry
				echo.
				echo.%GlobalMountingImageRegistry%
				call :MountImageRegistry "%InstallMount%\%%i"

				:: Removing 3D Objects Section from Windows Explorer Navigation Pane
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" reg.exe delete "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\{0DB7E03F-FC29-4DC6-9020-FF41B59E513A}" /f >nul 2>&1

				:: Un-Mounting Image Registry
				echo.
				echo.
				echo.%GlobalUnMountingImageRegistry%
				call :UnMountImageRegistry
				echo.
			)
		)
	)
)

echo.-------------------------------------------------------------------------------
echo.%txtRemoveWinAppspListFinished%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

set RemoveAppsList=

endlocal

:: Returning to Remove Menu.
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Remove Windows Components Using Package List
::-------------------------------------------------------------------------------------------
:RemoveWindowsComponentsListMenu

if "%IsDialogsEnabled%" equ "Yes" if "!WindowsComponentsList_Warning!" equ "" (
	cls
	echo.===============================================================================
	echo.%txtRemoveWindowsComponentsUsingPackageList%
	echo.===============================================================================
	echo.
	echo.                                %GlobalWARNING%
	echo.                                =============
	echo.
	echo.   %txtRemoveWindowsComponentsUsingPackageListLine1%
	echo.   %txtRemoveWindowsComponentsUsingPackageListLine2%
	echo.
	echo.   %txtRemoveWindowsComponentsUsingPackageListLine3%
	echo.   %txtRemoveWindowsComponentsUsingPackageListLine4%
	echo.   %txtRemoveWindowsComponentsUsingPackageListLine5%
	echo.
	echo.
	if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
		echo.
	)
	if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
		if "%ImageBuild%" lss "17763" echo.
		if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "22622" (
			echo.%txtRemoveWindowsComponentsUsingPackageListLine6%
		)
	)
	echo.
	echo.   %txtRemoveWindowsComponentsUsingPackageListLine7%
	echo.
	echo.   %GlobalDisableDialogs_line01%
	echo.   %GlobalDisableDialogs_line02%
	echo.
	echo.===============================================================================
	echo.
	choice /C:YN /N /M "%GlobalChoice_continue% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 goto :!CurrentMenu!
	if errorlevel 1 set "WindowsComponentsList_Warning=0"
)

set "CurrentMenu=RemoveMenu"

setlocal

set RemovalMethod=

if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
	set "RemovalMethod=DISM"
)

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%ImageBuild%" geq "17763" if "%ImageBuild%" lss "22622" (
		cls
		echo.===============================================================================
		echo.%txtRemoveWindowsComponentsUsingPackageListMenu%
		echo.===============================================================================
		echo.
		echo.  [1]   %txtRemoveWindowsComponentsUsingPackageListDISM%
		echo.
		echo.  [2]   %txtRemoveWindowsComponentsUsingPackageListToolkitHelper%
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.
		echo.  %txtRemoveWindowsComponentsUsingPackageListNote%
		echo.
		echo.
		echo.  [X]   %GlobalOption_GoBack%
		echo.
		echo.===============================================================================
		echo.
		choice /C:12X /N /M "%GlobalEnterChoice% "
		if errorlevel 3 goto :!CurrentMenu!
		if errorlevel 2 set "RemovalMethod=ToolkitHelper"
		if errorlevel 1 set "RemovalMethod=DISM"
	) else (
		set "RemovalMethod=DISM"
	)
)

:RemoveWindowsComponentsList
cls
echo.===============================================================================
echo.%txtRemoveWindowsComponentsUsingPackageList%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtRemoveWindowsComponentsUsingPackageStarting%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtRemoveWindowsComponentsUsingPackageRemovingpos1% "%RemovalMethod%" %txtRemoveWindowsComponentsUsingPackageRemovingpos2%
echo.-------------------------------------------------------------------------------

if "%RemovalMethod%" equ "DISM" (
	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

			for /f "eol=# tokens=*" %%z in ('type "%RemovePkgsList_DISM%" 2^>nul') do (
				call :RemoveLockedPackage "%InstallMount%\%%i", %%z, %%z
			)
		)
	)
)

if "%RemovalMethod%" equ "ToolkitHelper" (
	if exist "%RemovePkgsList%" for /f "eol=# tokens=*" %%z in ('type "%RemovePkgsList%" 2^>nul') do (
		set "TKHRC_%%z=-"
	)
	call :StartRemovingWindowsComponentsAvoidingFilters
)

echo.-------------------------------------------------------------------------------
echo.%txtRemoveWindowsComponentsUsingPackageFinished%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

if "!Bypass!" equ "O" (
	if "%RemovalMethod%" equ "DISM" (
		set RemovalMethod=
		endlocal
		goto :!CurrentMenu!
	)
	if "%RemovalMethod%" equ "ToolkitHelper" (
		set RemovalMethod=
		endlocal
		goto :RemoveWindowsComponentsMenu
	)
) else (
	set RemovalMethod=
	endlocal
	goto :EOF
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Apply Tweaks Menu
::-------------------------------------------------------------------------------------------
:SelectTweaksMenu

set "CurrentMenu=SelectTweaksMenu"
set "RegistryTweaks=Allowed"

rem if "!T_BugFix_WiFinoInternetConnection!" equ "+" set "T_BugFix_WiFinoInternetConnection=-"
rem if "!T_ControlPanelnConfigsandSettingsforFastestWindows!" equ "+" set "T_ControlPanelnConfigsandSettingsforFastestWindows=-"
if "!T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps!" equ "+" (
	set "T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps=-"
	set "T_Disable3RDPartyApps=+"
)
if "!T_CustomDisableWindowsUpdateTweaks!" equ "+" (
	set "T_CustomDisableWindowsUpdateTweaks=-"
	set "T_DisableWindowsUpdate=+"
)
if "!T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks!" equ "+" (
	set "T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks=-"
	set "T_DisableWindowsDefender=+"
)
rem if "!T_CustomWindowsErrorReporting_Policies!" equ "+" set "T_CustomWindowsErrorReporting_Policies=-"
rem if "!T_DisableSIA_DebugTracing!" equ "+" set "T_DisableSIA_DebugTracing=-"
if "!T_EnableCustomWindowsDriversUpdateTweaks!" equ "+" (
	set "T_EnableCustomWindowsDriversUpdateTweaks=-"
	set "T_DisableDriversUpdates=+"
)
rem if "!T_EnableDarkThemeandTransparency!" equ "+" set "T_EnableDarkThemeandTransparency=-"
rem if "!T_HiberbootEnabled!" equ "+" set "T_HiberbootEnabled=-"
rem if "!T_SetCloudContentfor3RDPartyAppsandDataCollection_Policies!" equ "+" set "T_SetCloudContentfor3RDPartyAppsandDataCollection_Policies=-"
rem if "!T_SetLanmanWorkstationandDownloads_OptimizationConfigs!" equ "+" set "T_SetLanmanWorkstationandDownloads_OptimizationConfigs=+"
rem if "!T_SetQoSlimittozero_internetWithNoLimits!" equ "+" set "T_SetQoSlimittozero_internetWithNoLimits=-"
rem if "!T_TaskbarAlignment_Center2Left!" equ "+" set "T_TaskbarAlignment_Center2Left=+"
rem if "!T_TaskbarSize!" equ "+" set "T_TaskbarSize=-"
if "!T_SetWindowsSearchandCortana_PreferencesandPolicies!" equ "+" (
	set "T_SetWindowsSearchandCortana_PreferencesandPolicies=-"
	set "T_DisableCortanaApp=+"
)

cls
echo.===============================================================================
echo.%txtOfficialTweaksMenu%
echo.===============================================================================
echo.

if "%SelectedSourceOS%" neq "w7" (
	if "!T_EdgeChromium!" equ "1" (
		set "T_EdgeChromium=0"
		set "T_BlockAutoEdgeChromiumBasedDelivery=+"
	)

	if "!T_Cortana!" equ "1" (
		set "T_Cortana=0"
		set "T_DisableCortanaApp=+"
		set "T_HideCortanaIcon=+"
		if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" set "T_HideTaskbarSearchbox=+"
	)

	set /A count=1
	for %%n in (
		BypassReq
		DisableDriversUpdates
		Disable3RDPartyApps
		DisableTeamsApp
		DisableWindowsUpgrade
		DisableCortanaApp
		DisableReservedStorage
		DisableWindowsDefender
		DisableWindowsFirewall
		DisableWindowsSmartScreen
		DisableWindowsUpdate
		EnableFullResetBase
		EnableFMP3ProCodec
		EnableClassicContextMenu
		EnableLocalAccount
		EnablePhotoViewer
		ForceLatestNetFramework
		HideChatIcon
		HideCortanaIcon
		HideMeetNowIcon
		HideNewsAndInterests
		HideTaskbarSearchbox
		HideTaskViewIcon
		HideWidgetsIcon
	) do (
		if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
		if !count! gtr 9 set "OptionID=!count!"

		if "%%n" equ "BypassReq" (
			if "%IsBootImageSelected%" equ "Yes" if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_BypassReq!^)%GlobalBypassWindows11%
		)
		if "%%n" equ "DisableDriversUpdates" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableDriversUpdates!^)%txtDisableAutomaticDriverUpdates%
		)
		if "%%n" equ "Disable3RDPartyApps" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_Disable3RDPartyApps!^)%txtDisableAutomaticDownloadInstall3rd%
		)
		if "%%n" equ "DisableTeamsApp" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableTeamsApp!^)%GlobalDisableAutomaticDownloadInstallTeams%
		)
		if "%%n" equ "DisableWindowsUpgrade" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableWindowsUpgrade!^)%GlobalDisableAutomaticWindowsUpgrade%
		)
		if "%%n" equ "DisableCortanaApp" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableCortanaApp!^)%txtDisableCortanaApp%
		)
		if "%%n" equ "DisableReservedStorage" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableReservedStorage!^)%GlobalDisableMicrosoftReservedStorage%
		)
		if "%%n" equ "DisableWindowsDefender" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableWindowsDefender!^)%txtDisableWindowsDefender%
		)
		if "%%n" equ "DisableWindowsFirewall" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableWindowsFirewall!^)%GlobalDisableWindowsFirewall%
		)
		if "%%n" equ "DisableWindowsSmartScreen" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableWindowsSmartScreen!^)%GlobalDisableWindowsSmartScreen%
		)
		if "%%n" equ "DisableWindowsUpdate" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableWindowsUpdate!^)%txtDisableWindowsUpdate%
		)
		if "%%n" equ "EnableFullResetBase" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableFullResetBase!^)%GlobalEnableDISMImageCleanup%
		)
		if "%%n" equ "EnableFMP3ProCodec" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableFMP3ProCodec!^)%GlobalEnableFraunhoferMP3%
		)
		if "%%n" equ "EnableClassicContextMenu" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableClassicContextMenu!^)%GlobalEnableClassicContextMenus%
		)
		if "%%n" equ "EnableLocalAccount" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableLocalAccount!^)%GlobalEnableLocalAccount%
		)
		if "%%n" equ "EnablePhotoViewer" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnablePhotoViewer!^)%GlobalEnablePhotoViewer%
		)
		if "%%n" equ "ForceLatestNetFramework" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_ForceLatestNetFramework!^)%GlobalForceNETFrameworkPrograms%
		)
		if "%%n" equ "HideChatIcon" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideChatIcon!^)%GlobalHideTaskbarChatIcon%
		)
		if "%%n" equ "HideCortanaIcon" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideCortanaIcon!^)%GlobalHideTaskbarCortanaIcon%
		)
		if "%%n" equ "HideMeetNowIcon" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideMeetNowIcon!^)%GlobalHideTaskbarMeetIcon%
		)
		if "%%n" equ "HideNewsAndInterests" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideNewsAndInterests!^)%GlobalHideTaskbarNews%
		)
		if "%%n" equ "HideTaskbarSearchbox" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideTaskbarSearchbox!^)%GlobalHideTaskbarSearchBar%
		)
		if "%%n" equ "HideTaskViewIcon" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideTaskViewIcon!^)%GlobalHideTaskbarViewIcon%
		)
		if "%%n" equ "HideWidgetsIcon" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideWidgetsIcon!^)%GlobalHideTaskbarWidgetsIcon%
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	echo.
	echo. [S] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
	echo. [X] %GlobalOption_GoBackSelectStartApplyTweaks%
	echo.
	echo.===============================================================================
	echo.
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :CustomizeMenu
		if /i "%%c" equ "D" (
			call :TweaksFlags
		)
		if /i "%%c" equ "S" (
			for %%t in (
				CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
				SetWindowsSearchandCortana_PreferencesandPolicies
				CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
				EnableCustomWindowsDriversUpdateTweaks
				CustomDisableWindowsUpdateTweaks
				TaskbarSize
			) do (
				set "T_%%t=-"
			)
			for %%t in (
				DisableDriversUpdates
				Disable3RDPartyApps
				DisableWindowsUpgrade
				DisableWindowsDefender
				DisableWindowsFirewall
				DisableWindowsSmartScreen
				DisableWindowsUpdate
				EnableFMP3ProCodec
				EnablePhotoViewer
				ForceLatestNetFramework
			) do (
				set "T_%%t=+"
			)
			if "%SelectedSourceOS%" neq "w81" (
				for %%t in (
					DisableCortanaApp
					DisableReservedStorage
					EnableFullResetBase
					HideCortanaIcon
					HideMeetNowIcon
					HideNewsAndInterests
					HideTaskbarSearchbox
					HideTaskViewIcon
				) do (
					set "T_%%t=+"
				)
				if "!T_EdgeChromium!" neq "" set "T_BlockAutoEdgeChromiumBasedDelivery=+"
			)
			if "%SelectedSourceOS%" equ "w11" (
				for %%t in (
					BypassReq
					DisableTeamsApp
					EnableClassicContextMenu
					EnableLocalAccount
					HideChatIcon
					HideWidgetsIcon
				) do (
					set "T_%%t=+"
				)
			)
		)
		if "%%c" equ "!BypassReq!" (
			if "!T_BypassReq!" equ "-" (
				set "T_BypassReq=+"
			) else (
				set "T_BypassReq=-"
			)
		)
		if "%%c" equ "!DisableDriversUpdates!" (
			if "!T_DisableDriversUpdates!" equ "-" (
				set "T_DisableDriversUpdates=+"
				set "T_EnableCustomWindowsDriversUpdateTweaks=-"
			) else (
				set "T_DisableDriversUpdates=-"
			)
		)
		if "%%c" equ "!Disable3RDPartyApps!" (
			if "!T_Disable3RDPartyApps!" equ "-" (
				set "T_Disable3RDPartyApps=+"
				if "%SelectedSourceOS%" equ "w11" set "T_DisableTeamsApp=+"
				set "T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps=-"
			) else (
				set "T_Disable3RDPartyApps=-"
			)
		)
		if "%%c" equ "!DisableTeamsApp!" (
			if "!T_DisableTeamsApp!" equ "-" (
				set "T_DisableTeamsApp=+"
			) else (
				set "T_DisableTeamsApp=-"
			)
		)
		if "%%c" equ "!DisableWindowsUpgrade!" (
			if "!T_DisableWindowsUpgrade!" equ "-" (
				set "T_DisableWindowsUpgrade=+"
			) else (
				set "T_DisableWindowsUpgrade=-"
			)
		)
		if "%%c" equ "!DisableCortanaApp!" (
			if "!T_DisableCortanaApp!" equ "-" (
				set "T_DisableCortanaApp=+"
				set "T_SetWindowsSearchandCortana_PreferencesandPolicies=-"
			) else (
				set "T_DisableCortanaApp=-"
			)
		)
		if "%%c" equ "!DisableReservedStorage!" (
			if "!T_DisableReservedStorage!" equ "-" (
				set "T_DisableReservedStorage=+"
			) else (
				set "T_DisableReservedStorage=-"
			)
		)
		if "%%c" equ "!DisableWindowsDefender!" (
			if "!T_DisableWindowsDefender!" equ "-" (
				set "T_DisableWindowsDefender=+"
				set "T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks=-"
			) else (
				set "T_DisableWindowsDefender=-"
			)
		)
		if "%%c" equ "!DisableWindowsFirewall!" (
			if "!T_DisableWindowsFirewall!" equ "-" (
				set "T_DisableWindowsFirewall=+"
			) else (
				set "T_DisableWindowsFirewall=-"
			)
		)
		if "%%c" equ "!DisableWindowsSmartScreen!" (
			if "!T_DisableWindowsSmartScreen!" equ "-" (
				set "T_DisableWindowsSmartScreen=+"
			) else (
				set "T_DisableWindowsSmartScreen=-"
			)
		)
		if "%%c" equ "!DisableWindowsUpdate!" (
			if "!T_DisableWindowsUpdate!" equ "-" (
				set "T_DisableWindowsUpdate=+"
				set "T_CustomDisableWindowsUpdateTweaks=-"
			) else (
				set "T_DisableWindowsUpdate=-"
			)
		)
		if "%%c" equ "!EnableFullResetBase!" (
			if "!T_EnableFullResetBase!" equ "-" (
				set "T_EnableFullResetBase=+"
			) else (
				set "T_EnableFullResetBase=-"
			)
		)
		if "%%c" equ "!EnableFMP3ProCodec!" (
			if "!T_EnableFMP3ProCodec!" equ "-" (
				set "T_EnableFMP3ProCodec=+"
			) else (
				set "T_EnableFMP3ProCodec=-"
			)
		)
		if "%%c" equ "!EnableClassicContextMenu!" (
			if "!T_EnableClassicContextMenu!" equ "-" (
				set "T_EnableClassicContextMenu=+"
			) else (
				set "T_EnableClassicContextMenu=-"
			)
		)
		if "%%c" equ "!EnableLocalAccount!" (
			if "!T_EnableLocalAccount!" equ "-" (
				set "T_EnableLocalAccount=+"
			) else (
				set "T_EnableLocalAccount=-"
			)
		)
		if "%%c" equ "!EnablePhotoViewer!" (
			if "!T_EnablePhotoViewer!" equ "-" (
				set "T_EnablePhotoViewer=+"
			) else (
				set "T_EnablePhotoViewer=-"
			)
		)
		if "%%c" equ "!ForceLatestNetFramework!" (
			if "!T_ForceLatestNetFramework!" equ "-" (
				set "T_ForceLatestNetFramework=+"
			) else (
				set "T_ForceLatestNetFramework=-"
			)
		)
		if "%%c" equ "!HideChatIcon!" (
			if "!T_HideChatIcon!" equ "-" (
				set "T_HideChatIcon=+"
			) else (
				set "T_HideChatIcon=-"
			)
		)
		if "%%c" equ "!HideCortanaIcon!" (
			if "!T_HideCortanaIcon!" equ "-" (
				set "T_HideCortanaIcon=+"
			) else (
				set "T_HideCortanaIcon=-"
			)
		)
		if "%%c" equ "!HideMeetNowIcon!" (
			if "!T_HideMeetNowIcon!" equ "-" (
				set "T_HideMeetNowIcon=+"
			) else (
				set "T_HideMeetNowIcon=-"
			)
		)
		if "%%c" equ "!HideNewsAndInterests!" (
			if "!T_HideNewsAndInterests!" equ "-" (
				set "T_HideNewsAndInterests=+"
			) else (
				set "T_HideNewsAndInterests=-"
			)
		)
		if "%%c" equ "!HideTaskbarSearchbox!" (
			if "!T_HideTaskbarSearchbox!" equ "-" (
				set "T_HideTaskbarSearchbox=+"
			) else (
				set "T_HideTaskbarSearchbox=-"
			)
		)
		if "%%c" equ "!HideTaskViewIcon!" (
			if "!T_HideTaskViewIcon!" equ "-" (
				set "T_HideTaskViewIcon=+"
			) else (
				set "T_HideTaskViewIcon=-"
			)
		)
		if "%%c" equ "!HideWidgetsIcon!" (
			if "!T_HideWidgetsIcon!" equ "-" (
				set "T_HideWidgetsIcon=+"
			) else (
				set "T_HideWidgetsIcon=-"
			)
		)
	)
)
goto :!CurrentMenu!

:SelectCustomTweaksMenu

set "CurrentMenu=SelectCustomTweaksMenu"
set "RegistryTweaks=Allowed"

if "!T_Disable3RDPartyApps!" equ "+" (
	set "T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps=+"
	set "T_Disable3RDPartyApps=-"
)
if "!T_DisableWindowsUpdate!" equ "+" (
	set "T_CustomDisableWindowsUpdateTweaks=+"
	set "T_DisableWindowsUpdate=-"
)
if "!T_DisableWindowsDefender!" equ "+" (
	set "T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks=+"
	set "T_DisableWindowsDefender=-"
)
if "!T_DisableDriversUpdates!" equ "+" (
	set "T_EnableCustomWindowsDriversUpdateTweaks=+"
	set "T_DisableDriversUpdates=-"
)
if "!T_DisableCortanaApp!" equ "+" (
	set "T_SetWindowsSearchandCortana_PreferencesandPolicies=+"
	set "T_DisableCortanaApp=-"
)

cls
echo.===============================================================================
echo.%txtSelectCustomTweaksMenu%
echo.===============================================================================
echo.

if "%SelectedSourceOS%" neq "w7" (
	if "!T_EdgeChromium!" equ "1" (
		set "T_EdgeChromium=0"
		set "T_BlockAutoEdgeChromiumBasedDelivery=+"
	)

	if "!T_Cortana!" equ "1" (
		set "T_Cortana=0"
		set "T_SetWindowsSearchandCortana_PreferencesandPolicies=+"
		set "T_HideCortanaIcon=+"
		if "%ImageBuild%" gtr "17763" if "%ImageBuild%" lss "19041" set "T_HideTaskbarSearchbox=+"
	)

	set /A count=1
	for %%n in (
		BugFix_WiFinoInternetConnection
		BypassReq
		ControlPanelnConfigsandSettingsforFastestWindows
		CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
		CustomDisableWindowsUpdateTweaks
		CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
		CustomWindowsErrorReporting_Policies
		DisableTeamsApp
		DisableWindowsUpgrade
		DisableReservedStorage
		DisableSIA_DebugTracing
		DisableWindowsSmartScreen
		DisableWindowsFirewall
		EnableCustomWindowsDriversUpdateTweaks
		EnableDarkThemeandTransparency
		EnableFullResetBase
		EnableFMP3ProCodec
		EnableClassicContextMenu
		EnableLocalAccount
		EnablePhotoViewer
		ForceLatestNetFramework
		HiberbootEnabled
		HideChatIcon
		HideCortanaIcon
		HideMeetNowIcon
		HideNewsAndInterests
		HideTaskbarSearchbox
		HideTaskViewIcon
		HideWidgetsIcon
		LegacyVerticalMixerVolumeControl
		SetCloudContentfor3RDPartyAppsandDataCollection_Policies
		SetLanmanWorkstationandDownloads_OptimizationConfigs
		SetQoSlimittozero_internetWithNoLimits
		TaskbarAlignmenCenter2Left
		TaskbarSize
		SetWindowsSearchandCortana_PreferencesandPolicies
		WindowsExplorer_PreferencesandPolicies
		BlockAutoEdgeChromiumBasedDelivery
		GeneralTweaks
	) do (
		if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
		if !count! gtr 9 set "OptionID=!count!"

		if "%%n" equ "BugFix_WiFinoInternetConnection" (
			if "%SelectedSourceOS%" equ "w10" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_BugFix_WiFinoInternetConnection!^)%txtBugFixWiFi%
		)
		if "%%n" equ "BypassReq" (
			if "%IsBootImageSelected%" equ "Yes" if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_BypassReq!^)%GlobalBypassWindows11%
		)
		if "%%n" equ "ControlPanelnConfigsandSettingsforFastestWindows" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_ControlPanelnConfigsandSettingsforFastestWindows!^)%txtControlPanelnConfigs%
		)
		if "%%n" equ "CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps!^)%txtCustomDisableAutomaticallyInstallation%
		)
		if "%%n" equ "CustomDisableWindowsUpdateTweaks" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_CustomDisableWindowsUpdateTweaks!^)%txtCustomDisableWindowsUpdateTweaks%
		)
		if "%%n" equ "CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks!^)%txtCustomWindowsDefenderTweaks%
		)
		if "%%n" equ "CustomWindowsErrorReporting_Policies" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_CustomWindowsErrorReporting_Policies!^)%txtCustomWindowsErrorReportingPolicies%
		)
		if "%%n" equ "DisableTeamsApp" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableTeamsApp!^)%GlobalDisableAutomaticDownloadInstallTeams%
		)
		if "%%n" equ "DisableWindowsUpgrade" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableWindowsUpgrade!^)%GlobalDisableAutomaticWindowsUpgrade%
		)
		if "%%n" equ "DisableReservedStorage" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableReservedStorage!^)%GlobalDisableMicrosoftReservedStorage%
		)
		if "%%n" equ "DisableSIA_DebugTracing" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableSIA_DebugTracing!^)%txtDisableSIADebugTracing%
		)
		if "%%n" equ "DisableWindowsSmartScreen" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableWindowsSmartScreen!^)%GlobalDisableWindowsSmartScreen%
		)
		if "%%n" equ "DisableWindowsFirewall" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_DisableWindowsFirewall!^)%GlobalDisableWindowsFirewall%
		)
		if "%%n" equ "EnableCustomWindowsDriversUpdateTweaks" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableCustomWindowsDriversUpdateTweaks!^)%txtEnableCustomWindowsDriversUpdate%
		)
		if "%%n" equ "EnableDarkThemeandTransparency" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableDarkThemeandTransparency!^)%txtEnableDarkTheme%
		)
		if "%%n" equ "EnableFullResetBase" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableFullResetBase!^)%GlobalEnableDISMImageCleanup%
		)
		if "%%n" equ "EnableFMP3ProCodec" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableFMP3ProCodec!^)%GlobalEnableFraunhoferMP3%
		)
		if "%%n" equ "EnableClassicContextMenu" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableClassicContextMenu!^)%GlobalEnableClassicContextMenus%
		)
		if "%%n" equ "EnableLocalAccount" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnableLocalAccount!^)%GlobalEnableLocalAccount%
		)
		if "%%n" equ "EnablePhotoViewer" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_EnablePhotoViewer!^)%GlobalEnablePhotoViewer%
		)
		if "%%n" equ "ForceLatestNetFramework" (
			set "%%n=!count!"
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_ForceLatestNetFramework!^)%GlobalForceNETFrameworkPrograms%
		)
		if "%%n" equ "HiberbootEnabled" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HiberbootEnabled!^)%txtEnableHiberboot%
		)
		if "%%n" equ "HideChatIcon" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideChatIcon!^)%GlobalHideTaskbarChatIcon%
		)
		if "%%n" equ "HideCortanaIcon" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideCortanaIcon!^)%GlobalHideTaskbarCortanaIcon%
		)
		if "%%n" equ "HideMeetNowIcon" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideMeetNowIcon!^)%GlobalHideTaskbarMeetIcon%
		)
		if "%%n" equ "HideNewsAndInterests" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideNewsAndInterests!^)%GlobalHideTaskbarNews%
		)
		if "%%n" equ "HideTaskbarSearchbox" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideTaskbarSearchbox!^)%GlobalHideTaskbarSearchBar%
		)
		if "%%n" equ "HideTaskViewIcon" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideTaskViewIcon!^)%GlobalHideTaskbarViewIcon%
		)
		if "%%n" equ "HideWidgetsIcon" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_HideWidgetsIcon!^)%GlobalHideTaskbarWidgetsIcon%
		)
		if "%%n" equ "LegacyVerticalMixerVolumeControl" (
			if "%SelectedSourceOS%" equ "w10" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_LegacyVerticalMixerVolumeControl!^)%txtLegacyVerticalMixer%
		)
		if "%%n" equ "SetCloudContentfor3RDPartyAppsandDataCollection_Policies" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_SetCloudContentfor3RDPartyAppsandDataCollection_Policies!^)%txtSetCloudContent43RDParty%
		)
		if "%%n" equ "SetLanmanWorkstationandDownloads_OptimizationConfigs" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_SetLanmanWorkstationandDownloads_OptimizationConfigs!^)%txtSetLanmanWorkstation%
		)
		if "%%n" equ "SetQoSlimittozero_internetWithNoLimits" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_SetQoSlimittozero_internetWithNoLimits!^)%txtSetQoSLimit2Zero%
		)
		if "%%n" equ "TaskbarAlignment_Center2Left" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_TaskbarAlignment_Center2Left!^)%txtSetWindows11TaskbarAlignment%
		)
		if "%%n" equ "TaskbarSize" (
			if "%SelectedSourceOS%" equ "w11" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_TaskbarSize!^)%txtSetWindows11Taskbar2Minimum%
		)
		if "%%n" equ "SetWindowsSearchandCortana_PreferencesandPolicies" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_SetWindowsSearchandCortana_PreferencesandPolicies!^)%txtSetWindowsSearchCortana%
		)
		if "%%n" equ "WindowsExplorer_PreferencesandPolicies" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_WindowsExplorer_PreferencesandPolicies!^)%txtWindowsExplorerPreferences%
		)
		if "%%n" equ "BlockAutoEdgeChromiumBasedDelivery" (
			if "%SelectedSourceOS%" neq "w81" if "!T_EdgeChromium!" neq "" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_BlockAutoEdgeChromiumBasedDelivery!^)%txtBlockAutomaticEdge%
		)
		if "%%n" equ "GeneralTweaks" (
			if "%SelectedSourceOS%" neq "w81" (
				set "%%n=!count!"
			)
			if "!%%n!" neq "" echo. [!OptionID!] ^(!T_GeneralTweaks!^)%txtGeneralTweaks%
		)

		if "!%%n!" neq "" (
			set /A count+=1
		)
	)

	echo.
	echo. [P] %txtPreSetCustomTweaksSelection%
	echo. [S] %GlobalOption_SelectAll% ^| [D]  %GlobalOption_Revert2Default%
	echo. [X] %GlobalOption_GoBackSelectStartApplyTweaks%
	echo.
	echo.===============================================================================
	echo.
	set /p "MenuChoice=%GlobalEnterChoice% "
	for %%c IN (!MenuChoice!) DO (
		if /i "%%c" equ "X" goto :CustomizeMenu
		if /i "%%c" equ "D" (
			call :TweaksFlags
		)
		if /i "%%c" equ "S" (
			for %%t in (
				Disable3RDPartyApps
				DisableCortanaApp
				DisableWindowsDefender
				DisableDriversUpdates
				DisableWindowsUpdate
				TaskbarSize
			) do (
				set "T_%%t=-"
			)
			for %%t in (
				CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
				CustomDisableWindowsUpdateTweaks
				CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
				DisableWindowsUpgrade
				DisableWindowsFirewall
				DisableWindowsSmartScreen
				EnableCustomWindowsDriversUpdateTweaks
				EnableFMP3ProCodec
				EnablePhotoViewer
				ForceLatestNetFramework
				StartMenu_SetupComplete
			) do (
				set "T_%%t=+"
			)
			if "%SelectedSourceOS%" neq "w81" (
				for %%t in (
					HiberbootEnabled
					EnableDarkThemeandTransparency
					ControlPanelnConfigsandSettingsforFastestWindows
					WindowsExplorer_PreferencesandPolicies
					SetQoSlimittozero_internetWithNoLimits
					SetLanmanWorkstationandDownloads_OptimizationConfigs
					SetCloudContentfor3RDPartyAppsandDataCollection_Policies
					SetWindowsSearchandCortana_PreferencesandPolicies
					DisableSIA_DebugTracing
					CustomWindowsErrorReporting_Policies
					DisableReservedStorage
					EnableFullResetBase
					HideCortanaIcon
					HideMeetNowIcon
					HideNewsAndInterests
					HideTaskbarSearchbox
					HideTaskViewIcon
					GeneralTweaks
				) do (
					set "T_%%t=+"
				)
				if "!T_EdgeChromium!" neq "" set "T_BlockAutoEdgeChromiumBasedDelivery=+"
			)
			if "%SelectedSourceOS%" equ "w10" (
				for %%t in (
					BugFix_WiFinoInternetConnection
					LegacyVerticalMixerVolumeControl
				) do (
					set "T_%%t=+"
				)
			)
			if "%SelectedSourceOS%" equ "w11" (
				for %%t in (
					BypassReq
					DisableTeamsApp
					EnableClassicContextMenu
					EnableLocalAccount
					HideChatIcon
					HideWidgetsIcon
					TaskbarAlignment_Center2Left
				) do (
					set "T_%%t=+"
				)
			)
		)
		if /i "%%c" equ "P" (
			echo.
			echo.
			echo.%txtPreSetCustomTweaks%
			echo.
				rem Type 	REG_DWORD	|	Data

				rem 		0x00000000	=	Boot
				rem 		0x00000001	=	System
				rem 		0x00000002	=	Automatic
				rem 		0x00000003	=	Manual
				rem 		0x00000004	=	Disabled

			set "T_ExportInboxAppsAssociation=+"
			set "T_RemoveInboxAppsAssociation=+"
			set "T_ImportInboxAppsAssociation=+"
			set "T_ImportStartMenuLayout=+"

			rem set "CleanupSources=Enabled"
			set StartReadingEnableFeatures=
			set StartReadingDisableFeatures=
			set "T_EnableFeatures=+"
			call :StartReadingEnableFeatures
			call :ReadEnableFeaturesList
			set "T_DisableFeatures=+"
			call :StartReadingDisableFeatures
			call :ReadDisableFeaturesList

			set "T_ImportCustomRegistry=+"

			set "T_HiberbootEnabled=-"
			set "T_EnableDarkThemeandTransparency=-"
			set "T_ControlPanelnConfigsandSettingsforFastestWindows=+"
			set "T_WindowsExplorer_PreferencesandPolicies=+"
			set "T_SetQoSlimittozero_internetWithNoLimits=+"
			set "T_SetLanmanWorkstationandDownloads_OptimizationConfigs=+"
			set "T_Disable3RDPartyApps=+"
			set "T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps=+"
			set "T_SetCloudContentfor3RDPartyAppsandDataCollection_Policies=+"
			set "T_DisableCortanaApp=+"
			set "T_SetWindowsSearchandCortana_PreferencesandPolicies=+"
			set "T_DisableSIA_DebugTracing=+"
			set "T_CustomWindowsErrorReporting_Policies=+"
			set "T_DisableWindowsSmartScreen=+"
			set "T_DisableWindowsFirewall=-"
			set "T_DisableWindowsDefender=+"
			set "T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks=+"
			set "T_DisableDriversUpdates=-"
			set "T_EnableCustomWindowsDriversUpdateTweaks=+"
			set "T_DisableWindowsUpdate=-"
			set "T_CustomDisableWindowsUpdateTweaks=+"
			set "T_DisableWindowsUpgrade=-"
			set "T_DisableReservedStorage=+"
			set "T_EnableFullResetBase=+"
			set "T_EnableFMP3ProCodec=+"
			set "T_EnablePhotoViewer=+"
			set "T_ForceLatestNetFramework=+"
			set "T_HideCortanaIcon=+"
			set "T_HideMeetNowIcon=+"
			set "T_HideNewsAndInterests=+"
			set "T_HideTaskbarSearchbox=-"
			set "T_HideTaskViewIcon=+"
			if "!T_EdgeChromium!" neq "" set "T_BlockAutoEdgeChromiumBasedDelivery=+"
			set "T_GeneralTweaks=+"
			if "%SelectedSourceOS%" equ "w10" (
				set "T_BugFix_WiFinoInternetConnection=+"
				set "T_LegacyVerticalMixerVolumeControl=+"
			)
			if "%SelectedSourceOS%" equ "w11" (
				set "T_BypassReq=+"
				set "T_DisableTeamsApp=+"
				set "T_EnableClassicContextMenu=+"
				set "T_EnableLocalAccount=+"
				set "T_HideChatIcon=+"
				set "T_HideWidgetsIcon=+"
				set "T_TaskbarAlignment_Center2Left=-"
				set "T_TaskbarSize=-"
			)
			set "T_StartMenu_SetupComplete=-"
		)
		if "%%c" equ "!BugFix_WiFinoInternetConnection!" (
			if "!T_BugFix_WiFinoInternetConnection!" equ "-" (
				set "T_BugFix_WiFinoInternetConnection=+"
			) else (
				set "T_BugFix_WiFinoInternetConnection=-"
			)
		)
		if "%%c" equ "!BypassReq!" (
			if "!T_BypassReq!" equ "-" (
				set "T_BypassReq=+"
			) else (
				set "T_BypassReq=-"
			)
		)
		if "%%c" equ "!ControlPanelnConfigsandSettingsforFastestWindows!" (
			if "!T_ControlPanelnConfigsandSettingsforFastestWindows!" equ "-" (
				set "T_ControlPanelnConfigsandSettingsforFastestWindows=+"
			) else (
				set "T_ControlPanelnConfigsandSettingsforFastestWindows=-"
			)
		)
		if "%%c" equ "!CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps!" (
			if "!T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps!" equ "-" (
				set "T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps=+"
				if "%SelectedSourceOS%" equ "w11" set "T_DisableTeamsApp=+"
				set "T_Disable3RDPartyApps=-"
			) else (
				set "T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps=-"
			)
		)
		if "%%c" equ "!CustomDisableWindowsUpdateTweaks!" (
			if "!T_CustomDisableWindowsUpdateTweaks!" equ "-" (
				set "T_CustomDisableWindowsUpdateTweaks=+"
				set "T_DisableWindowsUpdate=-"
			) else (
				set "T_CustomDisableWindowsUpdateTweaks=-"
			)
		)
		if "%%c" equ "!CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks!" (
			if "!T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks!" equ "-" (
				set "T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks=+"
				set "T_DisableWindowsDefender=-"
			) else (
				set "T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks=-"
			)
		)
		if "%%c" equ "!CustomWindowsErrorReporting_Policies!" (
			if "!T_CustomWindowsErrorReporting_Policies!" equ "-" (
				set "T_CustomWindowsErrorReporting_Policies=+"
			) else (
				set "T_CustomWindowsErrorReporting_Policies=-"
			)
		)
		if "%%c" equ "!DisableTeamsApp!" (
			if "!T_DisableTeamsApp!" equ "-" (
				set "T_DisableTeamsApp=+"
			) else (
				set "T_DisableTeamsApp=-"
			)
		)
		if "%%c" equ "!DisableWindowsUpgrade!" (
			if "!T_DisableWindowsUpgrade!" equ "-" (
				set "T_DisableWindowsUpgrade=+"
			) else (
				set "T_DisableWindowsUpgrade=-"
			)
		)
		if "%%c" equ "!DisableReservedStorage!" (
			if "!T_DisableReservedStorage!" equ "-" (
				set "T_DisableReservedStorage=+"
			) else (
				set "T_DisableReservedStorage=-"
			)
		)
		if "%%c" equ "!DisableSIA_DebugTracing!" (
			if "!T_DisableSIA_DebugTracing!" equ "-" (
				set "T_DisableSIA_DebugTracing=+"
			) else (
				set "T_DisableSIA_DebugTracing=-"
			)
		)
		if "%%c" equ "!DisableWindowsSmartScreen!" (
			if "!T_DisableWindowsSmartScreen!" equ "-" (
				set "T_DisableWindowsSmartScreen=+"
			) else (
				set "T_DisableWindowsSmartScreen=-"
			)
		)
		if "%%c" equ "!DisableWindowsFirewall!" (
			if "!T_DisableWindowsFirewall!" equ "-" (
				set "T_DisableWindowsFirewall=+"
			) else (
				set "T_DisableWindowsFirewall=-"
			)
		)
		if "%%c" equ "!EnableClassicContextMenu!" (
			if "!T_EnableClassicContextMenu!" equ "-" (
				set "T_EnableClassicContextMenu=+"
			) else (
				set "T_EnableClassicContextMenu=-"
			)
		)
		if "%%c" equ "!EnableCustomWindowsDriversUpdateTweaks!" (
			if "!T_EnableCustomWindowsDriversUpdateTweaks!" equ "-" (
				set "T_EnableCustomWindowsDriversUpdateTweaks=+"
				set "T_DisableDriversUpdates=-"
			) else (
				set "T_EnableCustomWindowsDriversUpdateTweaks=-"
			)
		)
		if "%%c" equ "!EnableDarkThemeandTransparency!" (
			if "!T_EnableDarkThemeandTransparency!" equ "-" (
				set "T_EnableDarkThemeandTransparency=+"
			) else (
				set "T_EnableDarkThemeandTransparency=-"
			)
		)
		if "%%c" equ "!EnableFullResetBase!" (
			if "!T_EnableFullResetBase!" equ "-" (
				set "T_EnableFullResetBase=+"
			) else (
				set "T_EnableFullResetBase=-"
			)
		)
		if "%%c" equ "!EnableFMP3ProCodec!" (
			if "!T_EnableFMP3ProCodec!" equ "-" (
				set "T_EnableFMP3ProCodec=+"
			) else (
				set "T_EnableFMP3ProCodec=-"
			)
		)
		if "%%c" equ "!EnableLocalAccount!" (
			if "!T_EnableLocalAccount!" equ "-" (
				set "T_EnableLocalAccount=+"
			) else (
				set "T_EnableLocalAccount=-"
			)
		)
		if "%%c" equ "!EnablePhotoViewer!" (
			if "!T_EnablePhotoViewer!" equ "-" (
				set "T_EnablePhotoViewer=+"
			) else (
				set "T_EnablePhotoViewer=-"
			)
		)
		if "%%c" equ "!ForceLatestNetFramework!" (
			if "!T_ForceLatestNetFramework!" equ "-" (
				set "T_ForceLatestNetFramework=+"
			) else (
				set "T_ForceLatestNetFramework=-"
			)
		)
		if "%%c" equ "!HiberbootEnabled!" (
			if "!T_HiberbootEnabled!" equ "-" (
				set "T_HiberbootEnabled=+"
			) else (
				set "T_HiberbootEnabled=-"
			)
		)
		if "%%c" equ "!HideChatIcon!" (
			if "!T_HideChatIcon!" equ "-" (
				set "T_HideChatIcon=+"
			) else (
				set "T_HideChatIcon=-"
			)
		)
		if "%%c" equ "!HideCortanaIcon!" (
			if "!T_HideCortanaIcon!" equ "-" (
				set "T_HideCortanaIcon=+"
			) else (
				set "T_HideCortanaIcon=-"
			)
		)
		if "%%c" equ "!HideMeetNowIcon!" (
			if "!T_HideMeetNowIcon!" equ "-" (
				set "T_HideMeetNowIcon=+"
			) else (
				set "T_HideMeetNowIcon=-"
			)
		)
		if "%%c" equ "!HideNewsAndInterests!" (
			if "!T_HideNewsAndInterests!" equ "-" (
				set "T_HideNewsAndInterests=+"
			) else (
				set "T_HideNewsAndInterests=-"
			)
		)
		if "%%c" equ "!HideTaskbarSearchbox!" (
			if "!T_HideTaskbarSearchbox!" equ "-" (
				set "T_HideTaskbarSearchbox=+"
			) else (
				set "T_HideTaskbarSearchbox=-"
			)
		)
		if "%%c" equ "!HideTaskViewIcon!" (
			if "!T_HideTaskViewIcon!" equ "-" (
				set "T_HideTaskViewIcon=+"
			) else (
				set "T_HideTaskViewIcon=-"
			)
		)
		if "%%c" equ "!HideWidgetsIcon!" (
			if "!T_HideWidgetsIcon!" equ "-" (
				set "T_HideWidgetsIcon=+"
			) else (
				set "T_HideWidgetsIcon=-"
			)
		)
		if "%%c" equ "!LegacyVerticalMixerVolumeControl!" (
			if "!T_LegacyVerticalMixerVolumeControl!" equ "-" (
				set "T_LegacyVerticalMixerVolumeControl=+"
			) else (
				set "T_LegacyVerticalMixerVolumeControl=-"
			)
		)
		if "%%c" equ "!SetCloudContentfor3RDPartyAppsandDataCollection_Policies!" (
			if "!T_SetCloudContentfor3RDPartyAppsandDataCollection_Policies!" equ "-" (
				set "T_SetCloudContentfor3RDPartyAppsandDataCollection_Policies=+"
			) else (
				set "T_SetCloudContentfor3RDPartyAppsandDataCollection_Policies=-"
			)
		)
		if "%%c" equ "!SetLanmanWorkstationandDownloads_OptimizationConfigs!" (
			if "!T_SetLanmanWorkstationandDownloads_OptimizationConfigs!" equ "-" (
				set "T_SetLanmanWorkstationandDownloads_OptimizationConfigs=+"
			) else (
				set "T_SetLanmanWorkstationandDownloads_OptimizationConfigs=-"
			)
		)
		if "%%c" equ "!SetQoSlimittozero_internetWithNoLimits!" (
			if "!T_SetQoSlimittozero_internetWithNoLimits!" equ "-" (
				set "T_SetQoSlimittozero_internetWithNoLimits=+"
			) else (
				set "T_SetQoSlimittozero_internetWithNoLimits=-"
			)
		)
		if "%%c" equ "!TaskbarAlignment_Center2Left!" (
			if "!T_TaskbarAlignment_Center2Left!" equ "-" (
				set "T_TaskbarAlignment_Center2Left=+"
			) else (
				set "T_TaskbarAlignment_Center2Left=-"
			)
		)
		if "%%c" equ "!TaskbarSize!" (
			if "!T_TaskbarSize!" equ "-" (
				set "T_TaskbarSize=+"
			) else (
				set "T_TaskbarSize=-"
			)
		)
		if "%%c" equ "!SetWindowsSearchandCortana_PreferencesandPolicies!" (
			if "!T_SetWindowsSearchandCortana_PreferencesandPolicies!" equ "-" (
				set "T_SetWindowsSearchandCortana_PreferencesandPolicies=+"
				set "T_DisableCortanaApp=-"
			) else (
				set "T_SetWindowsSearchandCortana_PreferencesandPolicies=-"
			)
		)
		if "%%c" equ "!WindowsExplorer_PreferencesandPolicies!" (
			if "!T_WindowsExplorer_PreferencesandPolicies!" equ "-" (
				set "T_WindowsExplorer_PreferencesandPolicies=+"
			) else (
				set "T_WindowsExplorer_PreferencesandPolicies=-"
			)
		)
		if "%%c" equ "!BlockAutoEdgeChromiumBasedDelivery!" (
			if "!T_BlockAutoEdgeChromiumBasedDelivery!" equ "-" (
				set "T_BlockAutoEdgeChromiumBasedDelivery=+"
			) else (
				set "T_BlockAutoEdgeChromiumBasedDelivery=-"
			)
		)
		if "%%c" equ "!GeneralTweaks!" (
			if "!T_GeneralTweaks!" equ "-" (
				set "T_GeneralTweaks=+"
			) else (
				set "T_GeneralTweaks=-"
			)
		)
	)
)
goto :!CurrentMenu!

:ApplyTweaks

:: Getting Specified Source Image Index Information
call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul

:: Get updated Image Information
if "!CurrentImageBuild!" equ "" (
	if "%ImageBuild%" gtr "17763" if "%ImageBuild%" leq "19044" (
		call :GetUpdatedImageInformation
	) >nul
)

call :EnvironmentVariables

set Tweaks=
set TweakLanguage=
set TweakWSL=
set "EnableFeaturesList=%Lists%\EnableFeaturesList.txt"
set "DisableFeaturesList=%Lists%\DisableFeaturesList.txt"
set "DefaultInboxAppsAssociationXML=%XMLs%\%SelectedSourceOS%_DefaultAppsAssociation.xml"
set "CustomInboxAppsAssociationXML=%XMLs%\%SelectedSourceOS%_CustomAppsAssociation.xml"
set "DefaultStartMenuLayoutXML=%XMLs%\%SelectedSourceOS%_%ImageVersion%_DefaultStartMenuLayout.xml"
set "CustomStartMenuLayoutXML=%XMLs%\%SelectedSourceOS%_CustomStartMenuLayout.xml"
set "DefaultStartMenuLayoutBIN=%StartMenuLayoutBIN%\DefaultStartMenuLayout.bin"
set "CustomStartMenuLayoutBIN=%StartMenuLayoutBIN%\CustomStartMenuLayout.bin"

if exist "%Custom%\Registry\w10_w11\%ImageArchitecture%" (
	set "CustomRegistry=%Custom%\Registry\w10_w11\%ImageArchitecture%"
) else (
	set "CustomRegistry=%Custom%\Registry\%SelectedSourceOS%\%ImageArchitecture%"
)

if "%ImageVersion:~0,-6%" equ "10.0" (
	if "%ImageBuild%" equ "10240" set "Image_BranchID=1507"
	if "%ImageBuild%" equ "10586" set "Image_BranchID=1511"
	if "%ImageBuild%" equ "14393" set "Image_BranchID=1607"
	if "%ImageBuild%" equ "15063" set "Image_BranchID=1703"
	if "%ImageBuild%" equ "16299" set "Image_BranchID=1709"
	if "%ImageBuild%" equ "17134" set "Image_BranchID=1803"
	if "%ImageBuild%" equ "17763" set "Image_BranchID=1809"
	if "!CurrentImageBuild!" equ "18362" set "Image_BranchID=1903"
	if "!CurrentImageBuild!" equ "18363" set "Image_BranchID=1909"
	if "!CurrentImageBuild!" equ "19041" set "Image_BranchID=2004"
	if "!CurrentImageBuild!" equ "19042" set "Image_BranchID=2009"
	if "!CurrentImageBuild!" equ "19043" set "Image_BranchID=21H1"
	if "!CurrentImageBuild!" equ "19044" set "Image_BranchID=21H2"
	rem if "!CurrentImageBuild!" equ "19045" set "Image_BranchID=22H1"
	if "%ImageBuild%" equ "20348" set "Image_BranchID=21H2"
	if "%ImageBuild%" geq "21996" (
		if "%ImageBuild%" lss "22621" set "Image_BranchID=21H2"
		if "%ImageBuild%" geq "22621" set "Image_BranchID=22H2"
	)
)
if "%ImageVersion:~0,-6%" equ "11.0" (
	if "%ImageBuild%" geq "21996" (
		if "%ImageBuild%" lss "22621" set "Image_BranchID=21H2"
		if "%ImageBuild%" geq "22621" set "Image_BranchID=22H2"
	)
)

for %%l in (
	pt-BR
	pt-PT
) do (
	if /i "%ImageDefaultLanguage%" equ "%%l" set "TweakLanguage=1"
)

setlocal

cls
echo.
echo.===============================================================================
echo.%txtAssigningChosenTweaks%
echo.===============================================================================
echo.

::Tweaks
echo.
echo.%txtTweaksNameList%
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalGeneralTweaks%
echo.-------------------------------------------------------------------------------
echo.
if "!T_EnableFeaturesMenu!" equ "+" set "T_EnableFeatures=+"
if "!T_EnableFeaturesList!" equ "+" set "T_EnableFeatures=+"
if "!T_DisableFeaturesMenu!" equ "+" set "T_DisableFeatures=+"
if "!T_DisableFeaturesList!" equ "+" set "T_DisableFeatures=+"
for %%t in (
	ExportInboxAppsAssociation
	RemoveInboxAppsAssociation
	ImportInboxAppsAssociation
	ImportStartMenuLayout
	EnableFeatures
	DisableFeatures
	StartMenu_SetupComplete
) do (
	if "!T_%%t!" equ "+" (
		set "Tweaks=!Tweaks!;%%t"
		echo.%%t
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtOnlyRegistryTweaks%
echo.-------------------------------------------------------------------------------
echo.
for %%t in (
	ImportCustomRegistry

	HiberbootEnabled
	EnableDarkThemeandTransparency
	ControlPanelnConfigsandSettingsforFastestWindows
	WindowsExplorer_PreferencesandPolicies
	SetQoSlimittozero_internetWithNoLimits
	BugFix_WiFinoInternetConnection
	SetLanmanWorkstationandDownloads_OptimizationConfigs
	Disable3RDPartyApps
	CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps
	SetCloudContentfor3RDPartyAppsandDataCollection_Policies
	DisableCortanaApp
	SetWindowsSearchandCortana_PreferencesandPolicies
	DisableSIA_DebugTracing
	CustomWindowsErrorReporting_Policies
	DisableWindowsSmartScreen
	DisableWindowsDefender
	DisableWindowsFirewall
	CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks
	DisableDriversUpdates
	EnableCustomWindowsDriversUpdateTweaks
	DisableWindowsUpdate
	CustomDisableWindowsUpdateTweaks
	DisableWindowsUpgrade
	DisableReservedStorage
	EnableFullResetBase
	EnableFMP3ProCodec
	EnablePhotoViewer
	ForceLatestNetFramework
	HideCortanaIcon
	HideMeetNowIcon
	HideNewsAndInterests
	HideTaskbarSearchbox
	HideTaskViewIcon
	LegacyVerticalMixerVolumeControl
	BlockAutoEdgeChromiumBasedDelivery
	GeneralTweaks

	BypassReq
	DisableTeamsApp
	EnableClassicContextMenu
	EnableLocalAccount
	HideChatIcon
	HideWidgetsIcon
	TaskbarAlignment_Center2Left
	TaskbarSize
) do (
	if "!T_%%t!" equ "+" (
		set "Tweaks=!Tweaks!;%%t"
		echo.%%t
	)
)

if "!Tweaks!" neq "" (
	set "Tweaks=!Tweaks:~1!"
) else (
	echo.%txtNoTweaksSelected%
	goto :Stop
)
if "!Bypass!" equ "O" (
	echo.===============================================================================
	echo.
	echo. [C] %GlobalOption_Continue%
	echo.
	echo. [R] %GlobalOption_Return2Change%
	echo.
	echo.===============================================================================
	echo.
	choice /C:CR /N /M "%GlobalEnterChoice% "
	if errorlevel 2 goto :!CurrentMenu!
)

cls
echo.===============================================================================
echo.%txtApplyTweaks%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtStartingApplyTweaks%
echo.-------------------------------------------------------------------------------
echo.
echo.    %GlobalImage% install.wim
echo.    %GlobalImageIndex% !ImageIndexNo!
echo.    %GlobalImageArchitecture% %ImageArchitecture%
echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
echo.

::-------------------------------------------------------------------------------------------
:: Function to Export Default Inbox Apps Associations to XML File
::-------------------------------------------------------------------------------------------
if "!T_ExportInboxAppsAssociation!" equ "+" (
	cls
	echo.===============================================================================
	echo.%txtExportDefaultInboxApps%
	echo.===============================================================================
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtStartingExportDefaultInboxApps%
	echo.-------------------------------------------------------------------------------
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtCheckingDefaultInboxAppsAssociation%
	echo.-------------------------------------------------------------------------------

	if exist "%InstallMount%\!SpecifiedSourceIndex!" (
		echo.
		%DISM% /Image:"%InstallMount%\!SpecifiedSourceIndex!" /Get-DefaultAppAssociations | findstr.exe /I /C:"file could not be" >nul
		if errorlevel 1 (
			echo.%GlobalFoundDefaultInboxAppsAssociation%
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtExportingDefaultInboxAppsAssociation%
			echo.-------------------------------------------------------------------------------
			echo.
			call :RemoveFile "%DefaultInboxAppsAssociationXML%"
			%DISM% /Image:"%InstallMount%\!SpecifiedSourceIndex!" /Get-DefaultAppAssociations | findstr.exe /I "<">>"%DefaultInboxAppsAssociationXML%"
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtFinishedApplyTweaks%
			echo.-------------------------------------------------------------------------------
			goto :Stop
		)
		if not errorlevel 1 (
			echo.%txtDefaultInboxAppsEmpty%
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtStoppedApplyTweaks%
			echo.-------------------------------------------------------------------------------
			goto :Stop
		)
	)
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Remove Default Inbox Apps Association
::-------------------------------------------------------------------------------------------
if "!T_RemoveInboxAppsAssociation!" equ "+" (
	cls
	echo.===============================================================================
	echo.%txtRemoveDefaultInboxAppsAssociation%
	echo.===============================================================================
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtStartingRemovingDefaultInboxApps%
	echo.-------------------------------------------------------------------------------

	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
			echo.-------------------------------------------------------------------------------
			echo.%txtChecking4DefaultInbox%
			echo.-------------------------------------------------------------------------------
			echo.
			%DISM% /Image:"%InstallMount%\%%i" /Get-DefaultAppAssociations | findstr.exe /I /C:"file could not be" >nul
			if errorlevel 1 (
				echo.%GlobalFoundDefaultInboxAppsAssociation%
				echo.
				echo.-------------------------------------------------------------------------------
				echo.%txtRemovingDefaultInboxAppsAssociation%
				echo.-------------------------------------------------------------------------------
				call :RemoveDefaultAppAssociations "%InstallMount%\%%i"
				echo.
				if "%%i" equ "!ImageCount!" (
					echo.-------------------------------------------------------------------------------
					echo.%txtFinishedRemovingDefaultInbox%
					echo.-------------------------------------------------------------------------------
					echo.
				)
			) else (
				echo.%txtDefaultInboxAppsRemoved%
				echo.
				echo.%txtSkippingRemovingDefaultInbox%
				echo.
				if "%%i" equ "!ImageCount!" (
					echo.-------------------------------------------------------------------------------
					echo.%txtStoppedRemovingDefaultInbox%
					echo.-------------------------------------------------------------------------------
					echo.
				)
			)
		)
	)
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Import Custom Default Inbox Apps Associations from XML File
::-------------------------------------------------------------------------------------------
if "!T_ImportInboxAppsAssociation!" equ "+" (
	cls
	echo.===============================================================================
	echo.%txtImportCustomDefaultInbox%
	echo.===============================================================================
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtStartingImportingCustomDefaultInbox%
	echo.-------------------------------------------------------------------------------
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtImportingCustomDefaultInbox%
	echo.-------------------------------------------------------------------------------

	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

			call :ImportDefaultAppAssociations "%InstallMount%\%%i", "%CustomInboxAppsAssociationXML%"
		)
	)
	echo.
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtFinishedImportingCustomDefaultInbox%
	echo.-------------------------------------------------------------------------------
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Enable Windows Features Using Features List
::-------------------------------------------------------------------------------------------
if "!T_EnableFeatures!" equ "+" (
	if "!DEF_List!" neq "~1" (
		set /A DEF_Count=0
		for %%e in (!DEF_List!) do (
			if "!DEF_%%e!" equ "+" set /A DEF_Count+=1
		)
	)
	if !DEF_Count! equ 0 if exist "%EnableFeaturesList%" (
		set StartReadingEnableFeatures=
		call :StartReadingEnableFeatures
		call :ReadEnableFeaturesList
		for %%e in (!DEF_List!) do (
			if "!DEF_%%e!" equ "+" set /A DEF_Count+=1
		)
	)
	if !DEF_Count! gtr 0 (
		cls

		call :CleanupSource

		echo.===============================================================================
		echo.%txtEnableWindowsFeatures%
		echo.===============================================================================
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtStartingEnableWindowsFeatures%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.    %GlobalImage% install.wim
		echo.    %GlobalImageIndex% !ImageIndexNo!
		echo.    %GlobalImageArchitecture% %ImageArchitecture%
		echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtEnablingWindowsFeatures%
		echo.-------------------------------------------------------------------------------

		if /I "!DEF_NetFX3!" equ "+" call :IntNetFX35

		for %%i in (!ImageIndexNo!) do (
			if exist "%InstallMount%\%%i\" (
				call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

				set DF_List=
				for /f "tokens=1,3* delims= " %%# in ('%DISM% /Image:"%InstallMount%\%%i" /Get-Features /Format:Table ^| findstr.exe /I /C:"Disable"') do (
					if /i "%%#" neq "NetFX3" if /I "!DEF_%%#!" equ "+" (
						call :EnableFeature "%InstallMount%\%%i" %%#
						set "DF_List=!DF_List!;%%#"
					)
				)
				set "DF_List=!DF_List:~1!"
			)
		)
		for %%r in (!DF_List!) do (
			set DEFID_%%#=
			set "DEF_%%#=-"
		)
		set DF_List=
		rem set DEF_List=
		echo.
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtFinishedEnablingWindowsFeatures%
		echo.-------------------------------------------------------------------------------
		echo.
	)
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Disable Windows Features Using Features List
::-------------------------------------------------------------------------------------------
if "!T_DisableFeatures!" equ "+" (
	if "!DDF_List!" neq "~1" (
		set /A DDF_Count=0
		for %%d in (!DDF_List!) do (
			if "!DDF_%%d!" equ "-" set /A DDF_Count+=1
		)
	)
	if !DDF_Count! equ 0 if exist "%DisableFeaturesList%" (
		set StartReadingDisableFeatures=
		call :StartReadingDisableFeatures
		call :ReadDisableFeaturesList
		for %%d in (!DDF_List!) do (
			if "!DDF_%%d!" equ "-" set /A DDF_Count+=1
		)
	)
	if !DDF_Count! gtr 0 (
		cls
		echo.
		echo.===============================================================================
		echo.%txtDisableWindowsFeatures%
		echo.===============================================================================
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtStartingDisablingWindowsFeatures%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.    %GlobalImage% install.wim
		echo.    %GlobalImageIndex% !ImageIndexNo!
		echo.    %GlobalImageArchitecture% %ImageArchitecture%
		echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtDisablingWindowsFeatures%
		echo.-------------------------------------------------------------------------------

		for %%i in (!ImageIndexNo!) do (
			if exist "%InstallMount%\%%i\" (
				call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"

				set DF_List=
				for /f "tokens=1,3* delims= " %%# in ('%DISM% /Image:"%InstallMount%\%%i" /Get-Features /Format:Table ^| findstr.exe /I /C:"Enable"') do (
					if /I "!DDF_%%#!" equ "-" (
						call :DisableFeature "%InstallMount%\%%i" %%#
						set "DF_List=!DF_List!;%%#"
					)
				)
				set "DF_List=!DF_List:~1!"
			)
		)
		for %%r in (!DF_List!) do (
			set DDFID_%%#=
			set "DDF_%%#=+"
		)
		set DF_List=
		rem set DDF_List=
		echo.
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtFinishedDisablingWindowsFeatures%
		echo.-------------------------------------------------------------------------------
		echo.
	)
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Import Custom StartMenu Layout from XML File
::-------------------------------------------------------------------------------------------
if "!T_ImportStartMenuLayout!" equ "+" (
	cls
	echo.===============================================================================
	echo.%txtImportCustomStartMenuLayout%
	echo.===============================================================================
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtStartingImportingCustomStartMenuLayout%
	echo.-------------------------------------------------------------------------------
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtImportingCustomStartMenuLayout%
	echo.-------------------------------------------------------------------------------

	if "%SelectedSourceOS%" neq "w11" if not exist "%DefaultStartMenuLayoutXML%" copy /Y "%InstallMount%\!SpecifiedSourceIndex!\Users\Default\AppData\Local\Microsoft\Windows\Shell\DefaultLayouts.xml" "%DefaultStartMenuLayoutXML%" >nul

	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
			echo.%txtCopyingCustomStartMenuLayout%
			echo.

			if "%SelectedSourceOS%" neq "w11" (
				copy /y "%XMLs%\DefaultLayouts.xml" "%InstallMount%\%%i\Users\Default\AppData\Local\Microsoft\Windows\Shell"
				copy /y "%XMLs%\LayoutModification.xml" "%InstallMount%\%%i\Users\Default\AppData\Local\Microsoft\Windows\Shell"
			) >nul 2>&1

			if "%SelectedSourceOS%" equ "w11" (
				if exist "%DefaultStartMenuLayoutBIN%" (
					call :CreateFolder "%InstallMount%\%%i\Users\Default\AppData\Local\Packages\Microsoft.Windows.StartMenuExperienceHost_cw5n1h2txyewy\LocalState"
					rem copy /y "%XMLs%\LayoutModification.json" "%InstallMount%\%%i\Users\Default\AppData\Local\Microsoft\Windows\Shell"
					if exist "%CustomStartMenuLayoutBIN%" (
						copy /Y "%CustomStartMenuLayoutBIN%" "%InstallMount%\%%i\Users\Default\AppData\Local\Packages\Microsoft.Windows.StartMenuExperienceHost_cw5n1h2txyewy\LocalState\start.bin"
					) else (
						copy /Y "%DefaultStartMenuLayoutBIN%" "%InstallMount%\%%i\Users\Default\AppData\Local\Packages\Microsoft.Windows.StartMenuExperienceHost_cw5n1h2txyewy\LocalState\start.bin"
					)

					:: Mounting Image Registry
					echo.
					echo.%GlobalMountingImageRegistry%
					call :MountImageRegistry "%InstallMount%\%%i"
					echo.%GlobalImportingRegistrySettings2ImageRegistry%

					:: Configure Start Pins
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v "ConfigureStartPins" /t REG_SZ /d "{ \"pinnedList\": [ {  } ] }" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v "ConfigureStartPins_ProviderSet" /t REG_DWORD /d "0" /f >nul 2>&1

					:: Un-Mounting Image Registry
					echo.
					echo.
					echo.%GlobalUnMountingImageRegistry%
					call :UnMountImageRegistry
					echo.
				)
			)
		)
	)

	echo.
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtFinishedImportingCustomStartMenuLayout%
	echo.-------------------------------------------------------------------------------
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Bypass - Windows 11 Checking Hardware Requirements
::-------------------------------------------------------------------------------------------
if "!T_BypassReq!" equ "+" (
	cls
	echo.===============================================================================
	echo.%txtBypassWindows11Checking%
	echo.===============================================================================
	echo.
	if "%IsBootImageSelected%" equ "Yes" if "%SelectedSourceOS%" equ "w11" (
		:: Performing [boot.wim, Index : 2] Image Tweak
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%GlobalApplyingRegistryTweak%
		echo.-------------------------------------------------------------------------------
		echo.
		echo.=============================[%GlobalBootWimIndex% 2]=============================
		echo.
		echo.%txtBypassWindows11CheckingHardware%
		echo.
		echo.%GlobalMountingImageRegistry%
		call :MountImageRegistry "%BootMount%\2"

		echo.
		echo.%GlobalImportingRegistrySettings2ImageRegistry%
		rem call :ImportRegistry2Image "%Patches%\BypassReq\BypassReq.reg"
		reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassCPUCheck" /t REG_DWORD /d "1" /f >nul 2>&1
		reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassRAMCheck" /t REG_DWORD /d "1" /f >nul 2>&1
		reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassSecureBootCheck" /t REG_DWORD /d "1" /f >nul 2>&1
		reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassStorageCheck" /t REG_DWORD /d "1" /f >nul 2>&1
		reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassTPMCheck" /t REG_DWORD /d "1" /f >nul 2>&1

		reg.exe add "HKLM\TK_SYSTEM\Setup\MoSetup" /v "AllowUpgradesWithUnsupportedTPMOrCPU" /t REG_DWORD /d "1" /f >nul 2>&1

		echo.
		echo.%GlobalUnMountingImageRegistry%
		call :UnMountImageRegistry

		echo.
		echo.
		echo.%txtBypassWindows11CheckingHardwareInPlace%
		echo.%txtRenamingFrom% "!InstallMedia!\sources\appraiserres.dll"
		echo.%txtRenamingFromTo% "appraiserres.dll.BKP"
		if exist "!InstallMedia!\sources\appraiserres.dll" ren "!InstallMedia!\sources\appraiserres.dll" "appraiserres.dll.BKP"

		echo.
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%txtFinishedBypassWindows11CheckingHardware%
		echo.-------------------------------------------------------------------------------
		echo.
		if "!Allowed!" equ "I" (
			echo.
		) else (
			pause
		)
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Apply Registry Tweaks
::-------------------------------------------------------------------------------------------
if "%RegistryTweaks%" equ "Allowed" (
cls
echo.-------------------------------------------------------------------------------
echo.%GlobalApplyingRegistryTweak%
echo.-------------------------------------------------------------------------------

	if "!T_ImportCustomRegistry!" equ "+" (
		:: Import Custom Registry Settings from Registry File
		echo.===============================================================================
		echo.%txtImportCustomRegistrySettings%
		echo.===============================================================================
		echo.

		:: Checking whether Custom Registry Settings Pack folder is empty
		for /f %%i in ('dir /b /a:-d "!CustomRegistry!\*.reg" 2^>nul ^| find.exe /I /v /c ""') do (
			if "%%i" equ "0" (
				set "none=%%i"
				echo.%txtCustomRegistrySettingsEmpty%
				echo.
				if exist "%Custom%\Registry\w10_w11\%ImageArchitecture%" (
					echo.%GlobalPleaseCopyRegistry% ^<%Custom%\Registry\w10_w11\%ImageArchitecture%^> %GlobalFolder%
				) else (
					echo.%GlobalPleaseCopyRegistry% ^<%Custom%\Registry\%SelectedSourceOS%\%ImageArchitecture%^> %GlobalFolder%
				)
				if "!Allowed!" equ "I" (
					echo.
				) else (
					pause
				)
			)
		)

		if "!none!" equ "" (
			echo.-------------------------------------------------------------------------------
			echo.%txtStartingImportingCustomRegistry%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtProcessingCustomRegistry%
			echo.-------------------------------------------------------------------------------
			echo.
			echo.%txtMakingCustomRegistry%
			call :RemoveFolder "%_TMP%\CustomRegistry"
			call :CreateFolder "%_TMP%\CustomRegistry"
			PowerShell.exe -Executionpolicy RemoteSigned -File "%Bin%\ConvertReg.ps1" "!CustomRegistry!" "%_TMP%\CustomRegistry"
			echo.
		)
	)

	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
			if exist "%InstallMount%\%%i\Windows\System32\wsl.exe" set "TweakWSL=1"

			echo.
			echo.%GlobalMountingImageRegistry%
			call :MountImageRegistry "%InstallMount%\%%i"
			echo.%GlobalImportingRegistrySettings2ImageRegistry%

			rem "This command will restore the classic search bar without disabling UAC. Maybe fix it after removing Cortana.
			reg.exe add "HKLM\TK_NTUSER\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
			reg.exe add "HKLM\TK_DEFAULT\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
			reg.exe add "HKLM\TK_SOFTWARE\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
			rem To restore:
			rem reg.exe delete "HKLM\TK_NTUSER\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1
			rem reg.exe delete "HKLM\TK_DEFAULT\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1
			rem reg.exe delete "HKLM\TK_SOFTWARE\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1

			rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "!DeleteAllUserPinnedIcons" /t REG_EXPAND_SZ /d "cmd.exe /C del /F /S /Q /A "%%AppData%%\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\*.*"" /f >nul 2>&1
			rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "!DeleteAllUserPinnedIcons" /t REG_EXPAND_SZ /d "cmd.exe /C del /F /S /Q /A "%%AppData%%\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\*.*"" /f >nul 2>&1

			reg.exe delete "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Taskband" /f >nul 2>&1
			reg.exe delete "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Taskband" /f >nul 2>&1

			if "!T_ImportCustomRegistry!" equ "+" if "!none!" equ "" (
				echo.
				echo.-------------------------------------------------------------------------------
				echo.%txtImportingCustomRegistry%
				for /f "tokens=*" %%z in ('dir /b "%_TMP%\CustomRegistry\*.reg" 2^>nul') do (
					echo.
					echo.%txtImporting% [%%z]...
					call :ImportRegistry2Image "%_TMP%\CustomRegistry\%%z"
				)
				echo.
				echo.%txt2ImageRegistry%
				echo.-------------------------------------------------------------------------------
				echo.%txtFinishedImportingCustomRegistry%
				echo.-------------------------------------------------------------------------------
				echo.
				echo.
			)

			if "!T_HiberbootEnabled!" equ "+" (
				echo.
				echo.%txtHiberbootEnabled%
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\System" /v "EnableActivityFeed" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\System" /v "EnableAppUriHandlers" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\System" /v "HiberbootEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\System" /v "PublishUserActivities" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\System" /v "UploadUserActivities" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Power" /v "HiberbootEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_EnableDarkThemeandTransparency!" equ "+" (
				echo.
				echo.%txtEnableDarkThemeTransparency%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "AccentColor" /t REG_DWORD /d "2153076053" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "AccentColorInactive" /t REG_DWORD /d "4282927692" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "AlwaysHibernateThumbnails" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "AnimationAttributionEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "AnimationAttributionHashingEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "ColorizationAfterglow" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "ColorizationAfterglowBalance" /t REG_DWORD /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "ColorizationBlurBalance" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "ColorizationColor" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "ColorizationColorBalance" /t REG_DWORD /d "89" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "ColorizationGlassAttribute" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "ColorPrevalence" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "Composition" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "EnableAeroPeek" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "EnableWindowColorization" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "ForceEffectMode" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Dwm" /v "OneCoreNoBootDwm" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "AccentColor" /t REG_DWORD /d "2153076053" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "AccentColorInactive" /t REG_DWORD /d "4282927692" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "AlwaysHibernateThumbnails" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "AnimationAttributionEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "AnimationAttributionHashingEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "ColorizationAfterglow" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "ColorizationAfterglowBalance" /t REG_DWORD /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "ColorizationBlurBalance" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "ColorizationColor" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "ColorizationColorBalance" /t REG_DWORD /d "89" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "ColorizationGlassAttribute" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "ColorPrevalence" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "Composition" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "EnableAeroPeek" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "EnableWindowColorization" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "ForceEffectMode" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Dwm" /v "OneCoreNoBootDwm" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "AccentColor" /t REG_DWORD /d "2153076053" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "AccentColorInactive" /t REG_DWORD /d "4282927692" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "AlwaysHibernateThumbnails" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "AnimationAttributionEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "AnimationAttributionHashingEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "ColorizationAfterglow" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "ColorizationAfterglowBalance" /t REG_DWORD /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "ColorizationBlurBalance" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "ColorizationColor" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "ColorizationColorBalance" /t REG_DWORD /d "89" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "ColorizationGlassAttribute" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "ColorPrevalence" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "Composition" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "EnableAeroPeek" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "EnableWindowColorization" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "ForceEffectMode" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm" /v "OneCoreNoBootDwm" /t REG_DWORD /d "0" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "AccentColor" /t REG_DWORD /d "2153076053" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "AccentColorInactive" /t REG_DWORD /d "4282927692" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "AlwaysHibernateThumbnails" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "AnimationAttributionEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "AnimationAttributionHashingEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "ColorizationAfterglow" /t REG_DWORD /d "3293334088" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "ColorizationAfterglowBalance" /t REG_DWORD /d "10" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "ColorizationBlurBalance" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "ColorizationColor" /t REG_DWORD /d "3293334088" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "ColorizationColorBalance" /t REG_DWORD /d "89" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "ColorizationGlassAttribute" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "ColorPrevalence" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "Composition" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "EnableAeroPeek" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "EnableWindowColorization" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "ForceEffectMode" /t REG_DWORD /d "1" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm" /v "OneCoreNoBootDwm" /t REG_DWORD /d "0" /f >nul 2>&1
				)
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm\ExtendedComposition" /v "ExclusiveModeFramerateAveragingPeriodMs" /t REG_DWORD /d "1000" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm\ExtendedComposition" /v "ExclusiveModeFramerateThresholdPercent" /t REG_DWORD /d "45" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm\ExtendedComposition" /v "enableColorSeparation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Dwm\ExtendedComposition" /v "ForwardOnlyOnly" /t REG_DWORD /d "1" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm\ExtendedComposition" /v "ExclusiveModeFramerateAveragingPeriodMs" /t REG_DWORD /d "1000" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm\ExtendedComposition" /v "ExclusiveModeFramerateThresholdPercent" /t REG_DWORD /d "45" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm\ExtendedComposition" /v "enableColorSeparation" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Dwm\ExtendedComposition" /v "ForwardOnlyOnly" /t REG_DWORD /d "1" /f >nul 2>&1
				)
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ThemeManager" /v "PrePolicy-DllName" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Aero\Aero.msstyles" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ThemeManager" /v "PrePolicy-DllName" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Aero\Aero.msstyles" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\ThemeManager" /v "PrePolicy-DllName" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Aero\Aero.msstyles" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "AppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "ColorSetFromTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%AppData%%\..\Local\Microsoft\Windows\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%UserProfile%%\AppData\Local\Microsoft\Windows\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "Drop Shadow" /t REG_SZ /d "FALSE" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "Flat Menus" /t REG_SZ /d "FALSE" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallThemeLight" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Light.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyle" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Aero\Aero.msstyles" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyleColor" /t REG_SZ /d "NormalColor" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyleSize" /t REG_SZ /d "NormalSize" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "NoThemeInstall" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "LastHighContrastTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Ease of Access Themes\hcblack.theme" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "SystemUsesLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "ThemeChangesDesktopIcons" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "ThemeChangesMousePointers" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "UWPAppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "WallpaperSetFromTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes" /v "WindowColor" /t REG_SZ /d "0XC44C4A48" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "AppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "ColorSetFromTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%AppData%%\..\Local\Microsoft\Windows\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%UserProfile%%\AppData\Local\Microsoft\Windows\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "Drop Shadow" /t REG_SZ /d "FALSE" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "Flat Menus" /t REG_SZ /d "FALSE" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallThemeLight" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Light.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyle" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Aero\Aero.msstyles" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyleColor" /t REG_SZ /d "NormalColor" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyleSize" /t REG_SZ /d "NormalSize" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "NoThemeInstall" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "LastHighContrastTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Ease of Access Themes\hcblack.theme" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "SystemUsesLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "ThemeChangesDesktopIcons" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "ThemeChangesMousePointers" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "UWPAppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "WallpaperSetFromTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes" /v "WindowColor" /t REG_SZ /d "0XC44C4A48" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "AppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "ColorSetFromTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%AppData%%\..\Local\Microsoft\Windows\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%UserProfile%%\AppData\Local\Microsoft\Windows\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "Drop Shadow" /t REG_SZ /d "FALSE" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "Flat Menus" /t REG_SZ /d "FALSE" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "InstallTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Dark.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "InstallThemeLight" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Light.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyle" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Aero\Aero.msstyles" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyleColor" /t REG_SZ /d "NormalColor" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyleSize" /t REG_SZ /d "NormalSize" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "NoThemeInstall" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "LastHighContrastTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Ease of Access Themes\hcblack.theme" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "SystemUsesLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "ThemeChangesDesktopIcons" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "ThemeChangesMousePointers" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "UWPAppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "WallpaperSetFromTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes" /v "WindowColor" /t REG_SZ /d "0XC44C4A48" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "AppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "ColorSetFromTheme" /t REG_DWORD /d "0" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Dark.theme" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%AppData%%\..\Local\Microsoft\Windows\Themes\Dark.theme" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "CurrentTheme" /t REG_SZ /d "%%UserProfile%%\AppData\Local\Microsoft\Windows\Themes\Dark.theme" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "Drop Shadow" /t REG_SZ /d "FALSE" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "Flat Menus" /t REG_SZ /d "FALSE" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "InstallTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Dark.theme" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "InstallThemeLight" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Light.theme" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyle" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Aero\Aero.msstyles" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyleColor" /t REG_SZ /d "NormalColor" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "InstallVisualStyleSize" /t REG_SZ /d "NormalSize" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "NoThemeInstall" /t REG_DWORD /d "0" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "LastHighContrastTheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Ease of Access Themes\hcblack.theme" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "SystemUsesLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "ThemeChangesDesktopIcons" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "ThemeChangesMousePointers" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "UWPAppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "WallpaperSetFromTheme" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes" /v "WindowColor" /t REG_SZ /d "0XC44C4A48" /f >nul 2>&1
				)
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\HighContrast" /v "Pre-High Contrast Scheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Light.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\HighContrast" /v "Pre-High Contrast Scheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Light.theme" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\HighContrast" /v "Pre-High Contrast Scheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Light.theme" /f >nul 2>&1
				rem if /i "%ImageArchitecture%" neq "x86" reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\HighContrast" /v "Pre-High Contrast Scheme" /t REG_SZ /d "%%SystemROOT%%\Resources\Themes\Light.theme" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\History" /v "AutoColor" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\History" /v "AutoColor" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\History" /v "AutoColor" /t REG_DWORD /d "0" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\History" /v "AutoColor" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\History\Colors" /v "ColorHistory0" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\History\Colors" /v "ColorHistory1" /t REG_DWORD /d "4282927692" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\History\Colors" /v "ColorHistory0" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\History\Colors" /v "ColorHistory1" /t REG_DWORD /d "4282927692" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\History\Colors" /v "ColorHistory0" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\History\Colors" /v "ColorHistory1" /t REG_DWORD /d "4282927692" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\History\Colors" /v "ColorHistory0" /t REG_DWORD /d "3293334088" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\History\Colors" /v "ColorHistory1" /t REG_DWORD /d "4282927692" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "AppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "ColorPrevalence" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "EnableTransparency" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "SystemUsesLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "UWPAppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "AppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "ColorPrevalence" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "EnableTransparency" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "SystemUsesLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "UWPAppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "AppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "ColorPrevalence" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "EnableTransparency" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "SystemUsesLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "UWPAppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "AppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "ColorPrevalence" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "EnableTransparency" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "SystemUsesLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Themes\Personalize" /v "UWPAppsUseLightTheme" /t REG_DWORD /d "0" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "UseOLEDTaskbarTransparency" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "UseOLEDTaskbarTransparency" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "UseOLEDTaskbarTransparency" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v "VisualFXSetting" /t REG_DWORD /d "3" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\VisualEffects" /v "VisualFXSetting" /t REG_DWORD /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "SlideshowSourceDirectoriesSet" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "BackgroundType" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "SlideshowSourceDirectoriesSet" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "BackgroundType" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "AutoColorization" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "ColorizationColor" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "WallPaper" /t REG_SZ /d "%%SystemROOT%%\Web\Screen\Screen01.jpg" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "AutoColorization" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "ColorizationColor" /t REG_DWORD /d "3293334088" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "WallPaper" /t REG_SZ /d "%%SystemROOT%%\Web\Screen\Screen01.jpg" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Personalization\Desktop Slideshow" /v "Interval" /t REG_DWORD /d "86400000" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Personalization\Desktop Slideshow" /v "Shuffle" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Personalization\Desktop Slideshow" /v "Interval" /t REG_DWORD /d "86400000" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Personalization\Desktop Slideshow" /v "Shuffle" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_ControlPanelnConfigsandSettingsforFastestWindows!" equ "+" (
				echo.
				echo.%txtControlPanelnConfigsSettings%
				reg.exe add "HKLM\TK_SOFTWARE\Classes\AllFilesystemObjects\shellex\ContextMenuHandlers\Copy To" /ve /t REG_SZ /d "{C2FBB630-2971-11D1-A18C-00C04FD75D13}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\AllFilesystemObjects\shellex\ContextMenuHandlers\Move To" /ve /t REG_SZ /d "{C2FBB631-2971-11D1-A18C-00C04FD75D13}" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility" /v "MessageDuration" /t REG_DWORD /d "5" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility" /v "MinimumHitRadius" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\AudioDescription" /v "Locale" /t REG_SZ /d "" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\AudioDescription" /v "On" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Blind Access" /v "On" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\HighContrast" /v "Flags" /t REG_SZ /d "126" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\HighContrast" /v "High Contrast Scheme" /t REG_SZ /d "" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\HighContrast" /v "Previous High Contrast Scheme MUI Value" /t REG_SZ /d "" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Preference" /v "On" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "AutoRepeatDelay" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "AutoRepeatRate" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "BounceTime" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "DelayBeforeAcceptance" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "Flags" /t REG_SZ /d "126" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "Last BounceKey Setting" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "Last Valid Delay" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "Last Valid Repeat" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\Keyboard Response" /v "Last Valid Wait" /t REG_DWORD /d "1000" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\MouseKeys" /v "Flags" /t REG_SZ /d "62" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\MouseKeys" /v "MaximumSpeed" /t REG_SZ /d "80" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\MouseKeys" /v "TimeToMaximumSpeed" /t REG_SZ /d "3000" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Keyboard" /v "InitialKeyboardIndicators" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Keyboard" /v "KeyboardDelay" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Keyboard" /v "KeyboardSpeed" /t REG_SZ /d "31" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Keyboard" /v "InitialKeyboardIndicators" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Keyboard" /v "KeyboardDelay" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Keyboard" /v "KeyboardSpeed" /t REG_SZ /d "31" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "ActiveWindowTracking" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "Beep" /t REG_SZ /d "No" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "DoubleClickHeight" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "DoubleClickSpeed" /t REG_SZ /d "500" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "DoubleClickWidth" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "ExtendedSounds" /t REG_SZ /d "No" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "MouseHoverHeight" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "MouseHoverTime" /t REG_SZ /d "8" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "MouseHoverWidth" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "MouseSensitivity" /t REG_SZ /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "MouseSpeed" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "MouseThreshold1" /t REG_SZ /d "6" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "MouseThreshold2" /t REG_SZ /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "MouseTrails" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "SnapToDefaultButton" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Mouse" /v "SwapMouseButtons" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "ActiveWindowTracking" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "Beep" /t REG_SZ /d "No" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "DoubleClickHeight" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "DoubleClickSpeed" /t REG_SZ /d "500" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "DoubleClickWidth" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "ExtendedSounds" /t REG_SZ /d "No" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "MouseHoverHeight" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "MouseHoverTime" /t REG_SZ /d "8" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "MouseHoverWidth" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "MouseSensitivity" /t REG_SZ /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "MouseSpeed" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "MouseThreshold1" /t REG_SZ /d "6" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "MouseThreshold2" /t REG_SZ /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "MouseTrails" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "SnapToDefaultButton" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Mouse" /v "SwapMouseButtons" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\On" /v "On" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\On" /v "Locale" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\ShowSounds" /v "On" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\SoundSentry" /v "Flags" /t REG_SZ /d "2" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\SoundSentry" /v "FSTextEffect" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\SoundSentry" /v "WindowsEffect" /t REG_SZ /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\SoundSentry" /v "TextEffect" /t REG_SZ /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\StickyKeys" /v "Flags" /t REG_SZ /d "510" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\TimeOut" /v "Flags" /t REG_SZ /d "2" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\TimeOut" /v "TimeToWait" /t REG_SZ /d "300000" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Control Panel\Accessibility\ToggleKeys" /v "Flags" /t REG_SZ /d "62" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "ActiveWndTrackTimeout" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "AutoEndTasks" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "BlockSendInputResets" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "CaretWidth" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "ClickLockTime" /t REG_DWORD /d "1200" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "CoolSwitchColumns" /t REG_SZ /d "7" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "CoolSwitchRows" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "CursorBlinkRate" /t REG_SZ /d "530" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "DockMoving" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "DragFromMaximize" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "DragFullWindows" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "DragHeight" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "DragWidth" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "FocusBorderHeight" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "FocusBorderWidth" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "FontSmoothing" /t REG_SZ /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "FontSmoothingGamma" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "FontSmoothingOrientation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "FontSmoothingType" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "ForegroundFlashCount" /t REG_DWORD /d "7" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "ForegroundLockTimeout" /t REG_DWORD /d "200000" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "HungAppTimeout" /t REG_SZ /d "1000" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "LeftOverlapChars" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "LowLevelHooksTimeout" /t REG_SZ /d "1000" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "MenuShowDelay" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "PaintDesktopVersion" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "Pattern" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "RightOverlapChars" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "ScreenSaveActive" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "SnapSizing" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "TileWallpaper" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "WaitToKillAppTimeout" /t REG_SZ /d "2000" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "WallpaperOriginX" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "WallpaperOriginY" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "WallpaperStyle" /t REG_SZ /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "WheelScrollChars" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "WheelScrollLines" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Desktop" /v "WindowArrangementActive" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "ActiveWndTrackTimeout" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "AutoEndTasks" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "BlockSendInputResets" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "CaretWidth" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "ClickLockTime" /t REG_DWORD /d "1200" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "CoolSwitchColumns" /t REG_SZ /d "7" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "CoolSwitchRows" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "CursorBlinkRate" /t REG_SZ /d "530" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "DockMoving" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "DragFromMaximize" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "DragFullWindows" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "DragHeight" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "DragWidth" /t REG_SZ /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "FocusBorderHeight" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "FocusBorderWidth" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "FontSmoothing" /t REG_SZ /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "FontSmoothingGamma" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "FontSmoothingOrientation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "FontSmoothingType" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "ForegroundFlashCount" /t REG_DWORD /d "7" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "ForegroundLockTimeout" /t REG_DWORD /d "200000" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "HungAppTimeout" /t REG_SZ /d "1000" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "LeftOverlapChars" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "LowLevelHooksTimeout" /t REG_SZ /d "1000" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "MenuShowDelay" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "PaintDesktopVersion" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "Pattern" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "RightOverlapChars" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "ScreenSaveActive" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "SnapSizing" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "TileWallpaper" /t REG_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "WaitToKillAppTimeout" /t REG_SZ /d "2000" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "WallpaperOriginX" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "WallpaperOriginY" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "WallpaperStyle" /t REG_SZ /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "WheelScrollChars" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "WheelScrollLines" /t REG_SZ /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Desktop" /v "WindowArrangementActive" /t REG_SZ /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Infrared\File Transfer" /v "AllowSend" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Infrared\File Transfer" /v "ShowRecvStatus" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Infrared\File Transfer" /v "AllowSend" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Infrared\File Transfer" /v "ShowRecvStatus" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Infrared\Global" /v "ShowTrayIcon" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Infrared\Global" /v "PlaySound" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Infrared\Global" /v "ShowTrayIcon" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Infrared\Global" /v "PlaySound" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\Infrared\IrTranP" /v "DisableIrCOMM" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Control Panel\Infrared\IrTranP" /v "DisableIrCOMM" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Control Panel\TimeDate" /v "DstNotification" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control" /v "WaitToKillServiceTimeout" /t REG_SZ /d "2000" /f >nul 2>&1
			)

			if "!T_WindowsExplorer_PreferencesandPolicies!" equ "+" (
				echo.
				echo.%txtWindowsExplorerPreferencesPolicies%
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\FileSystem" /v "LongPathsEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "DisableThumbnailsOnNetworkFolders" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "DisableThumbnails" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "LinkResolveIgnoreLinkInfo" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoInternetOpenWith" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoLowDiskSpaceChecks" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoResolveSearch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoResolveTrack" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "DisableThumbnailsOnNetworkFolders" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "DisableThumbnails" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "LinkResolveIgnoreLinkInfo" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoInternetOpenWith" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoLowDiskSpaceChecks" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoResolveSearch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoResolveTrack" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "DisableThumbnailsOnNetworkFolders" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "DisableThumbnails" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "LinkResolveIgnoreLinkInfo" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoInternetOpenWith" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoLowDiskSpaceChecks" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoResolveSearch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoResolveTrack" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				if "%SelectedSourceOS%" neq "w11" (
					reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\Explorer" /v "DisableNotificationCenter" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\Explorer" /v "DisableNotificationCenter" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "DisableNotificationCenter" /t REG_DWORD /d "1" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\Explorer" /v "DisableThumbsDBOnNetworkFolders" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\Explorer" /v "NoAutoplayfornonVolume" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\Explorer" /v "DisableThumbsDBOnNetworkFolders" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\Explorer" /v "NoAutoplayfornonVolume" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "DisableThumbsDBOnNetworkFolders" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "NoAutoplayfornonVolume" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "AppReadinessLogonComplete" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "ExplorerStartupTraceRecorded" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "FirstRunTelemetryComplete" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "LocalKnownFoldersMigrated" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "PostAppInstallTasksCompleted" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "SIDUpdatedOnLibraries" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "TelemetrySalt" /t REG_DWORD /d "5" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "AppReadinessLogonComplete" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "ExplorerStartupTraceRecorded" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "FirstRunTelemetryComplete" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "LocalKnownFoldersMigrated" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "PostAppInstallTasksCompleted" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "SIDUpdatedOnLibraries" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "TelemetrySalt" /t REG_DWORD /d "5" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "AppReadinessLogonComplete" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "ExplorerStartupTraceRecorded" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "FirstRunTelemetryComplete" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "LocalKnownFoldersMigrated" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "PostAppInstallTasksCompleted" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "SIDUpdatedOnLibraries" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "TelemetrySalt" /t REG_DWORD /d "5" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "AutoCheckSelect" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisableThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisallowShaking" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DontPrettyPath" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DontUsePowerShellOnWinX" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Filter" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Hidden" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideFileExt" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideDrivesWithNoMedia" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideIcons" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideMergeConflicts" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "IconsOnly" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "LaunchTo" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ListviewAlphaSelect" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ListviewShadow" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "MapNetDrvBtn" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NavPaneShowAllFolders" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NavPaneExpandToCurrentFolder" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ReindexedProfile" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "SeparateProcess" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ServerAdminUI" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowCompColor" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowEncryptCompressedColor" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowInfoTip" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowStatusBar" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowSuperHidden" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowSyncProviderNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTypeOverlay" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_SearchFiles" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "StoreAppsOnTaskbar" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAnimations" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAppsVisibleInTabletMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarGlomLevel" /t REG_DWORD /d "0" /f >nul 2>&1
				if "%SelectedSourceOS%" neq "w11" (
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSize" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSmallIcons" /t REG_DWORD /d "1" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "WebView" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "AutoCheckSelect" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisableThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisallowShaking" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DontPrettyPath" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DontUsePowerShellOnWinX" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Filter" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Hidden" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideFileExt" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideDrivesWithNoMedia" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideIcons" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideMergeConflicts" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "IconsOnly" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "LaunchTo" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ListviewAlphaSelect" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ListviewShadow" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "MapNetDrvBtn" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NavPaneShowAllFolders" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NavPaneExpandToCurrentFolder" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ReindexedProfile" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "SeparateProcess" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ServerAdminUI" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowCompColor" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowEncryptCompressedColor" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowInfoTip" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowStatusBar" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowSuperHidden" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowSyncProviderNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTypeOverlay" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_SearchFiles" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "StoreAppsOnTaskbar" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAnimations" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAppsVisibleInTabletMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarGlomLevel" /t REG_DWORD /d "0" /f >nul 2>&1
				if "%SelectedSourceOS%" neq "w11" (
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSize" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSmallIcons" /t REG_DWORD /d "1" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "WebView" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "AutoCheckSelect" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisableThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisallowShaking" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DontPrettyPath" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DontUsePowerShellOnWinX" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Filter" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Hidden" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideFileExt" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideDrivesWithNoMedia" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideIcons" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideMergeConflicts" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "IconsOnly" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "LaunchTo" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ListviewAlphaSelect" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ListviewShadow" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "MapNetDrvBtn" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NavPaneShowAllFolders" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NavPaneExpandToCurrentFolder" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "NoThumbnailCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ReindexedProfile" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "SeparateProcess" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ServerAdminUI" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowCompColor" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowEncryptCompressedColor" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowInfoTip" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowStatusBar" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowSuperHidden" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowSyncProviderNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTypeOverlay" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_SearchFiles" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "StoreAppsOnTaskbar" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAnimations" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAppsVisibleInTabletMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarGlomLevel" /t REG_DWORD /d "0" /f >nul 2>&1
				if "%SelectedSourceOS%" neq "w11" (
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSize" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSmallIcons" /t REG_DWORD /d "1" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "WebView" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers" /v "DisableAutoplay" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers" /v "DisableAutoplay" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Ribbon" /v "MinimizedStateTabletModeOff" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Ribbon" /v "MinimizedStateTabletModeOff" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\PrimaryProperties\UnindexedLocations" /v "SearchOnly" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\PrimaryProperties\UnindexedLocations" /v "SearchOnly" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shutdown" /v "CleanShutdown" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Shutdown" /v "CleanShutdown" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge" /v "HideFirstRunExperience" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge" /v "HideFirstRunExperience" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge" /v "HideFirstRunExperience" /t REG_DWORD /d "1" /f >nul 2>&1

				:: Maybe Obsolete
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\EdgeUpdate" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\EdgeUpdate" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\EdgeUpdate" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\EdgeUpdate" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\EdgeUpdate" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\EdgeUpdate" /v "DisableEdgeDesktopShortcutCreation" /t REG_DWORD /d "1" /f >nul 2>&1

				:: Updated Ones
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\EdgeUpdate" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\EdgeUpdate" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\EdgeUpdate" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\EdgeUpdate" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\EdgeUpdate" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\EdgeUpdate" /v "CreateDesktopShortcutDefault" /t REG_DWORD /d "0" /f >nul 2>&1

				if "%SelectedSourceOS%" neq "w11" (
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "ConfirmFileDelete" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "HideSCAMeetNow" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoDriveTypeAutoRun" /t REG_DWORD /d "145" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "ConfirmFileDelete" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "HideSCAMeetNow" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoDriveTypeAutoRun" /t REG_DWORD /d "145" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "ForceActiveDesktopOn" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "HideSCAMeetNow" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoActiveDesktop" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "NoActiveDesktopChanges" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\Explorer" /v "DisableSearchBoxSuggestions" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\Explorer" /v "HidePeopleBar" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\Explorer" /v "DisableSearchBoxSuggestions" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\Explorer" /v "HidePeopleBar" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "ShowDriveLettersFirst" /t REG_DWORD /d "4" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "ShowDriveLettersFirst" /t REG_DWORD /d "4" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "ActiveSetupDisabled" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "ActiveSetupTaskOverride" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "AicEnabled" /t REG_SZ /d "Anywhere" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "AsyncRunOnce" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "AsyncUpdatePCSettings" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableAppInstallsOnFirstLogon" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableResolveStoreCategories" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "DisableUpgradeCleanup" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "DoNotCleanTaskBar" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "EnableStartMenu" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "EarlyAppResolverStart" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "FSIASleepTimeInMs" /t REG_DWORD /d "60000" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "HubMode" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "IconUnderline" /t REG_DWORD /d "2" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "MachineOobeUpdates" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "NoWaitOnRoamingPayloads" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "SmartScreenEnabled" /t REG_SZ /d "Off" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent" /v "AccentColorMenu" /t REG_DWORD /d "4282927692" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent" /v "StartColorMenu" /t REG_DWORD /d "4282203969" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent" /v "AccentColorMenu" /t REG_DWORD /d "4282927692" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent" /v "StartColorMenu" /t REG_DWORD /d "4282203969" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisablePreviewDesktop" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "MMTaskbarGlomLevel" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShellMigrationLevel" /t REG_DWORD /d "3" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTaskViewButton" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_TrackDocs" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_TrackProgs" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAutoHideInTabletMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSizeMove" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "UseCompactMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisablePreviewDesktop" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "MMTaskbarGlomLevel" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShellMigrationLevel" /t REG_DWORD /d "3" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTaskViewButton" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_TrackDocs" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_TrackProgs" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAutoHideInTabletMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSizeMove" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "UseCompactMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "DisablePreviewDesktop" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "MMTaskbarGlomLevel" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShellMigrationLevel" /t REG_DWORD /d "3" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTaskViewButton" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_TrackDocs" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Start_TrackProgs" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAutoHideInTabletMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSizeMove" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "UseCompactMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\People" /v "PeopleBand" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\StartMode" /v "ActualStartMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" /v "StartupPage" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" /v "AllItemsIconView" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" /v "StartupPage" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel" /v "AllItemsIconView" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\OperationStatusManager" /v "EnthusiastMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\OperationStatusManager" /v "EnthusiastMode" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "AutoWildCard" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "EnableNaturalQuerySyntax" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "WholeFileSystem" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "SystemFolders" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "ArchivedFiles" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "AutoWildCard" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "EnableNaturalQuerySyntax" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "WholeFileSystem" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "SystemFolders" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Search\Preferences" /v "ArchivedFiles" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "BreadCrumbBarSearchDefault" /t REG_SZ /d "DuckDuckGo" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "DisableAutoNavigateURL" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "DisableAutoResolveEmailAddrs" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "DisableResultsInNewWindow" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "DisableTabbedBrowsing" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "EditSavedSearch" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "IEAddressBarSearchDefault" /t REG_SZ /d "DuckDuckGo" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "BreadCrumbBarSearchDefault" /t REG_SZ /d "DuckDuckGo" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "DisableAutoNavigateURL" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "DisableAutoResolveEmailAddrs" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "DisableResultsInNewWindow" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "DisableTabbedBrowsing" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "EditSavedSearch" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\SearchPlatform\Preferences" /v "IEAddressBarSearchDefault" /t REG_SZ /d "DuckDuckGo" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Taskband\AuxilliaryPins" /v "MailPin" /t REG_DWORD /d "1" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Taskband\AuxilliaryPins" /v "MailPin" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "SlideshowSourceDirectoriesSet" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "BackgroundType" /t REG_DWORD /d "1" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "BackgroundHistoryPath0" /t REG_SZ /d "C:\Windows\Web\Screen\DarkWindows.jpg" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "SlideshowSourceDirectoriesSet" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "BackgroundType" /t REG_DWORD /d "1" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers" /v "BackgroundHistoryPath0" /t REG_SZ /d "C:\Windows\Web\Screen\DarkWindows.jpg" /f >nul 2>&1
					reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\BannerStore" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\DesktopOptimization" /v "ShowWindowsStoreAppsOnTaskbar" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\DesktopOptimization" /v "GoToDesktopOnSignIn" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FlyoutMenuSettings" /v "ShowLockOption" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FlyoutMenuSettings" /v "ShowHibernateOption" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FlyoutMenuSettings" /v "ShowSleepOption" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu" /v "{871C5380-42A0-1069-A2EA-08002B30309D}.default" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\HideDesktopIcons\ClassicStartMenu" /v "{9343812e-1c37-4a49-a12e-4b2d810d956b}" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\SVDEn" /v "PromoteOEMTiles" /t REG_DWORD /d "0" /f >nul 2>&1
				)
			)

			if "!T_SetQoSlimittozero_internetWithNoLimits!" equ "+" (
				echo.
				echo.%txtSetQoSLimit2ZeroInternet%
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Psched" /v "NonBestEffortLimit" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_BugFix_WiFinoInternetConnection!" equ "+" (
				echo.
				echo.%txtBugFixWiFiInternet%
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\NlaSvc\Parameters\Internet" /v "EnableActiveProbing" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_SetLanmanWorkstationandDownloads_OptimizationConfigs!" equ "+" (
				echo.
				echo.%txtSetLanmanWorkstationDownloads%
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\LanmanWorkstation\Parameters" /v "AuditSmb1Access" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\LanmanWorkstation\Parameters" /v "Disable Bandwidth Throttling" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\LanmanWorkstation\Parameters" /v "EnableWsd" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_Disable3RDPartyApps!" equ "+" (
				echo.
				echo.%txtDisableDownloadingInstalling%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "OemPreInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "PreInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SilentInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsConsumerFeatures" /t REG_DWORD /d "1" /f >nul 2>&1

				if "%SelectedSourceOS%" equ "w11" (
					:: Configure Start Pins
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v "ConfigureStartPins" /t REG_SZ /d "{ \"pinnedList\": [ {  } ] }" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v "ConfigureStartPins_ProviderSet" /t REG_DWORD /d "0" /f >nul 2>&1
				)
			)

			if "!T_CustomDisableAutomaticallyInstallationforPreSuggested3RDPartyApps!" equ "+" (
				echo.
				echo.%txtCustomDisableAutomatically%
				:: Allow user run Microsoft Edge (Edge HTML) and Microsoft Edge (Chromium-based) Side by Side browser experience.
				if "%ImageBuild%" gtr "17763" (
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\EdgeUpdate" /v "AllowSXS" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\EdgeUpdate" /v "AllowSXS" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\EdgeUpdate" /v "AllowSXS" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\EdgeUpdate" /v "AllowSXS" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\EdgeUpdate" /v "AllowSXS" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\EdgeUpdate" /v "AllowSXS" /t REG_DWORD /d "1" /f >nul 2>&1
				)

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "ContentDeliveryAllowed" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "FeatureManagementEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "OemPreInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "PreInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "PreInstalledAppsEverEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "RotatingLockScreenEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "RotatingLockScreenOverlayEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SilentInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SoftLandingEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SystemPaneSuggestionsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe delete "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\Subscriptions" /f >nul 2>&1
				reg.exe delete "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SuggestedApps" /f >nul 2>&1

				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "ContentDeliveryAllowed" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "FeatureManagementEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "OemPreInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "PreInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "PreInstalledAppsEverEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "RotatingLockScreenEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "RotatingLockScreenOverlayEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SilentInstalledAppsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SoftLandingEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SystemPaneSuggestionsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe delete "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\Subscriptions" /f >nul 2>&1
				reg.exe delete "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SuggestedApps" /f >nul 2>&1

				rem 202913   %= SilentInstalledApps 1          =%
				rem 202914   %= SilentInstalledApps 2          =%
				rem 280797   %= SyncProviders 1 OneDriveLocal  =%
				rem 280811   %= SyncProviders 2 OneDriveLocal  =%
				rem 280812   %= ApiTest                        =%
				rem 280813   %= Windows Ink - StokedOnIt       =%
				rem 280814   %= Share 1 Facebook Instagram     =%
				rem 280815   %= Share 2 Facebook Instagram     =%
				rem 280810   %= OneDriveSync 1                 =%
				rem 280817   %= OneDriveSync 2                 =%
				rem 310091   %= ActionCenter 1                 =%
				rem 310092   %= ActionCenter 2                 =%
				rem 310093   %= MinuteZeroOffers 1             =%
				rem 310094   %= MinuteZeroOffers 2             =%
				rem 314558   %= DynamicLayouts 1 Candy Crush   =%
				rem 314559   %= DynamicLayouts 2 Candy Crush   =%
				rem 314562   %= PeopleAppSuggestions 1         =%
				rem 314563   %= PeopleAppSuggestions 2         =%
				rem 314566   %= OobeOffers 1                   =%
				rem 314567   %= OobeOffers 2                   =%
				rem 338380   %= LockScreen 1 Hotspot           =%
				rem 338387   %= LockScreen 2 Hotspot           =%
				rem 338381   %= StartSuggestions 1             =%
				rem 338388   %= StartSuggestions 2             =%
				rem 338382   %= WindowsTip 1                   =%
				rem 338383
				rem 338384
				rem 338385
				rem 338389   %= WindowsTip 2                   =%
				rem 338386   %= Settings 1                     =%
				rem 338393   %= Settings 2                     =%
				rem 338390
				rem 338391
				rem 338392
				rem 346480   %= Signals 1                      =%
				rem 346481   %= Signals 2                      =%
				rem 353694   %= SettingsAccountsYourInfo 1     =%
				rem 353695   %= SettingsAccountsYourInfo 2     =%
				rem 353696   %= SettingsHome 1                 =%
				rem 353697   %= SettingsHome 2                 =%
				rem 353698   %= Timeline 1                     =%
				rem 353699   %= Timeline 2                     =%
				rem 88000044 %= AppDefaultsEdgeEnlightenment 1 =%
				rem 88000045 %= AppDefaultsEdgeEnlightenment 2 =%
				rem 88000105 %= SettingsValueBanner 1          =%
				rem 88000106 %= SettingsValueBanner 2          =%
				rem 88000161 %= OneDriveDocuments 1            =%
				rem 88000162 %= OneDriveDocuments 2            =%
				rem 88000163 %= OneDriveDesktop 1              =%
				rem 88000164 %= OneDriveDesktop 2              =%
				rem 88000165 %= OneDrivePictures 1             =%
				rem 88000166 %= OneDrivePictures 2             =%

				for %%# in (
					202913
					202914
					280797
					280811
					280810
					280817

					280814
					280815
					310091
					310092
					310093
					310094

					314558
					314559
					314566
					314567

					338380
					338387
					338381
					338388
					338382
					338389

					338386
					338393

					346480
					346481

					353694
					353695
					353696
					353697
					353698
					353699

					88000044
					88000045
					88000105
					88000106
					88000161
					88000162
					88000163
					88000164
					88000165
					88000166
				) do (
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SubscribedContent-%%#Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SubscribedContent-%%#Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				) >nul 2>&1

				rem SuggestedApps ON and AutoInstall OFF
				for %%# in (
					33823Nicke.ScreenToGif_99xjgbc30gqtw
					4DF9E0F8.Netflix_mcm4njqhnhss8
					AmazonVideo.PrimeVideo_pwbj9vvecjh7j
					9E2F88E3.TWITTER_wgeqdkkx372wm
					TelegramMessengerLLP.TelegramDesktop_t4vj0pshhgkwm

					19453.net.Rufus_y8nh7bq2a8dtt
					4846UtilitiesTools.JsonFormatterFree_b17t1j31etq18
					NightRise.NotepadWrapped_bahp16nyyek9m
					FinalWire.AIDA64_a2fqy4btbmbvp
					61908RichardWalters.Calculator_486nvj664v5b0
					44352GadgetWE.UnitConversion_wrnqd43hr7tc6

					Microsoft.SysinternalsSuite_8wekyb3d8bbwe
					Microsoft.D3DMappingLayers_8wekyb3d8bbwe
					Microsoft.DirectXRuntime_8wekyb3d8bbwe
					Microsoft.SysinternalsSuite_8wekyb3d8bbwe
					Microsoft.PowerShell_8wekyb3d8bbwe
					Microsoft.WindowsTerminal_8wekyb3d8bbwe
					Microsoft.WindowsFileManager_8wekyb3d8bbwe
					Microsoft.WindowsFileRecovery_8wekyb3d8bbwe
					Microsoft.MicrosoftEmulator_8wekyb3d8bbwe
					Microsoft.SensorExplorer_8wekyb3d8bbwe
					Microsoft.WindowsRemoteArduinoExperience_8wekyb3d8bbwe
					Microsoft.WindowsVirtualShieldsforIoTMakers_8wekyb3d8bbwe

					Microsoft.MsixPackagingTool_8wekyb3d8bbwe
					Microsoft.DesktopAppInstaller_8wekyb3d8bbwe
					Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe
					Microsoft.ScreenSketch_8wekyb3d8bbwe
					Microsoft.WindowsNotepad_8wekyb3d8bbwe
					Microsoft.Windows.Photos_8wekyb3d8bbwe
					ClipChamp.ClipChamp_yxz26nhyzhsrt
					Microsoft.WindowsCalculator_8wekyb3d8bbwe
					Microsoft.WindowsScan_8wekyb3d8bbwe
					5913DefineStudio.PhotoScan_jj4r3mnwe2ey2
				) do (
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SuggestedApps" /v "%%#" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SuggestedApps" /v "%%#" /t REG_DWORD /d "1" /f >nul 2>&1
				) >nul 2>&1

				rem SuggestedApps OFF
				for %%# in (
					Microsoft.Todos_8wekyb3d8bbwe
					MicrosoftTeams_8wekyb3d8bbwe
					WikimediaFoundation.Wikipedia_54ggd3ev8bvz6
					NAVER.LINEwin8_8ptj331gd3tyt
					FACEBOOK.317180B0BB486_8xx8rvfyw5nnt

					5319275A.WhatsAppDesktop_cv1g1gvanyjgm
					Microsoft.MicrosoftOfficeHub_8wekyb3d8bbwe
					Microsoft.MicrosoftSolitaireCollection_8wekyb3d8bbwe

					AdobeSystemsIncorporated.AdobeLightroom_ynb6jyjzte8ga
					AdobeSystemsIncorporated.AdobePhotoshopExpress_ynb6jyjzte8ga
					CorelCorporation.PaintShopPro_wbjqpk9xt50t4
					2FE3CB00.PICSART-PHOTOSTUDIO_crhqpqs3x1ygc
					89006A2E.AutodeskSketchBook_tf1gferkr813w

					SpotifyAB.SpotifyMusic_zpdnekdrzrea0
					TuneIn.TuneInRadio_6bhtb546zcxnj
					Deezer.62021768415AF_q7m17pa7q8kj0
					Microsoft.RawImageExtension_8wekyb3d8bbwe

					Microsoft.Microsoft3DViewer_8wekyb3d8bbwe
					Microsoft.MixedReality.Portal_8wekyb3d8bbwe
					Microsoft.Print3D_8wekyb3d8bbwe

					1424566A.147190DF3DE79_5byw4zywtsh80
					6F71D7A7.HotspotShieldFreeVPN_nsbqstbb9qxb6
					Microsoft.BingNews_8wekyb3d8bbwe
					Microsoft.BingWeather_8wekyb3d8bbwe
					Microsoft.GetHelp_8wekyb3d8bbwe
					Microsoft.Getstarted_8wekyb3d8bbwe
					Microsoft.Office.OneNote_8wekyb3d8bbwe
					Microsoft.MSPaint_8wekyb3d8bbwe
					Microsoft.People_8wekyb3d8bbwe
					Microsoft.WindowsAlarms_8wekyb3d8bbwe
					Microsoft.WindowsMaps_8wekyb3d8bbwe
					microsoft.windowscommunicationsapps_8wekyb3d8bbwe
					Microsoft.YourPhone_8wekyb3d8bbwe
					ROBLOXCorporation.ROBLOX_55nm5eh3cm0pr

					828B5831.HiddenCityMysteryofShadows_ytsefhwckbdv6
					A278AB0D.DisneyMagicKingdoms_h6adky7gbf63m
					A278AB0D.MarchofEmpires_h6adky7gbf63m
					Nordcurrent.CookingFever_m9bz608c1b9ra
					PLRWorldwideSales.FishdomPlayrix_1feq88045d2v2
					king.com.BubbleWitch3Saga_kgqvnymyfvs32
					king.com.CandyCrushFriends_kgqvnymyfvs32
					ThumbmunkeysLtd.PhototasticCollage_nfy108tqq3p12
				) do (
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SuggestedApps" /v "%%#" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SuggestedApps" /v "%%#" /t REG_DWORD /d "0" /f >nul 2>&1
				) >nul 2>&1

				rem Deleting SuggestedApps Entries
				rem for %%# in (
				rem ) do (
				rem 	reg.exe delete "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SuggestedApps" /v "%%#" /f >nul 2>&1
				rem 	reg.exe delete "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager\SuggestedApps" /v "%%#" /f >nul 2>&1
				rem ) >nul 2>&1

				if "%SelectedSourceOS%" equ "w11" (
					:: Configure Start Pins
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v "ConfigureStartPins" /t REG_SZ /d "{ \"pinnedList\": [ {  } ] }" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v "ConfigureStartPins_ProviderSet" /t REG_DWORD /d "0" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Start" /v "ConfigureStartPins_WinningProvider" /t REG_SZ /d "B5292708-1619-419B-9923-E5D9F3925E71" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\providers\B5292708-1619-419B-9923-E5D9F3925E71\default\Device\Start" /v "ConfigureStartPins" /t REG_SZ /d "{ \"pinnedList\": [ { \"desktopAppId\": \"Explorer\" }, { \"desktopAppId\": \"IExplorer\" }, { \"desktopAppId\": \"MSEdge\" }, { \"packagedAppId\": \"Microsoft.WindowsStore_8wekyb3d8bbwe!App\" }, { \"packagedAppId\": \"Amazon.comServicesLLC.AmazonAppstore_bvztej1py64t8!App\" }, { \"packagedAppId\": \"Microsoft.WindowsCalculator_8wekyb3d8bbwe!App\" }, { \"packagedAppId\": \"Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe!App\" }, { \"packagedAppId\": \"Microsoft.WindowsNotepad_8wekyb3d8bbwe!App\" }, { \"packagedAppId\": \"Microsoft.WindowsSoundRecorder_8wekyb3d8bbwe!App\" }, { \"packagedAppId\": \"Microsoft.Windows.Photos_8wekyb3d8bbwe!App\" }, { \"packagedAppId\": \"Microsoft.WindowsTerminal_8wekyb3d8bbwe!App\" }, { \"packagedAppId\": \"MicrosoftCorporationII.WindowsSubsystemForAndroid_8wekyb3d8bbwe!App\" }, { \"packagedAppId\": \"MicrosoftCorporationII.WindowsSubsystemForLinux_8wekyb3d8bbwe!App\" } ] }" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\providers\B5292708-1619-419B-9923-E5D9F3925E71\default\Device\Start" /v "ConfigureStartPins_LastWrite" /t REG_DWORD /d "1" /f >nul 2>&1
				)
			)

			if "!T_DisableTeamsApp!" equ "+" (
				echo.
				echo.%txtPreventTeamsChatAutoInstall%
				:: Prevent Teams Chat AutoInstall
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Communications" /v "ConfigureChatAutoInstall" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Communications" /v "ConfigureChatAutoInstall" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v "ConfigureChatAutoInstall" /t REG_DWORD /d "0" /f >nul 2>&1
				:: Prevent Teams Chat Store Daily PopUps
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\Microsoft.WindowsStore_8wekyb3d8bbwe!App" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\Microsoft.WindowsStore_8wekyb3d8bbwe!App" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Notifications\Settings\Microsoft.WindowsStore_8wekyb3d8bbwe!App" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "%SelectedSourceOS%" equ "w10" (
				if "!T_LegacyVerticalMixerVolumeControl!" equ "+" (
					echo.
					echo.%txtLegacyVerticalMixerVolume%
					reg.exe delete "HKLM\TK_NTUSER\Software\Microsoft\Windows NT\CurrentVersion\MTCUVC" /v "EnableMtcUvc" /f >nul 2>&1
					reg.exe delete "HKLM\TK_DEFAULT\Software\Microsoft\Windows NT\CurrentVersion\MTCUVC" /v "EnableMtcUvc" /f >nul 2>&1
					reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows NT\CurrentVersion\MTCUVC" /v "EnableMtcUvc" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows NT\CurrentVersion\MTCUVC" /v "EnableMtcUvc" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows NT\CurrentVersion\MTCUVC" /v "EnableMtcUvc" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows NT\CurrentVersion\MTCUVC" /v "EnableMtcUvc" /t REG_DWORD /d "0" /f >nul 2>&1
				)
			)

			if "!T_SetCloudContentfor3RDPartyAppsandDataCollection_Policies!" equ "+" (
				echo.
				echo.%txtSetCloudContent43RDPartyApps%
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsConsumerFeatures" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\CloudContent" /v "DisableSoftLanding" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DataCollection" /v "AllowTelemetry" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DataCollection" /v "DoNotShowFeedbackNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_DisableCortanaApp!" equ "+" (
				echo.
				echo.%txtDisableCortana%
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\InputPersonalization\TrainedDataStore" /v "HarvestContacts" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "DeviceHistoryEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "HistoryViewEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaConsent" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaceable" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaced" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\InputPersonalization" /v "RestrictImplicitInkCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\InputPersonalization" /v "RestrictImplicitTextCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\AppContainer\Storage\microsoft.microsoftedge_8wekyb3d8bbwe\MicrosoftEdge\ServiceUI" /v "EnableCortana" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\InputPersonalization" /v "RestrictImplicitInkCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\InputPersonalization" /v "RestrictImplicitTextCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\InputPersonalization\TrainedDataStore" /v "HarvestContacts" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Personalization\Settings" /v "AcceptedPrivacyPolicy" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "DeviceHistoryEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "HistoryViewEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaConsent" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaceable" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaced" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\AboveLock" /v "AllowCortanaAboveLock" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Experience" /v "AllowCortana" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Speech_OneCore\Preferences" /v "ModelDownloadAllowed" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\InputPersonalization" /v "AllowInputPersonalization" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AllowCloudSearch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AllowCortana" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AllowCortanaAboveLock" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AllowSearchToUseLocation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "ConnectedSearchPrivacy" /t REG_DWORD /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "ConnectedSearchSafeSearch" /t REG_DWORD /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "ConnectedSearchUseWeb" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "ConnectedSearchUseWebOverMeteredConnections" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "DisableWebSearch" /t REG_DWORD /d "1" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Wow6432Node\Microsoft\Windows\Windows Search" /v "AllowCortana" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Wow6432Node\Microsoft\Windows\Windows Search" /v "AllowCortanaAboveLock" /t REG_DWORD /d "0" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana ActionUriServer.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\ActionUriServer.exe|Name=Block Cortana ActionUriServer.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana Package" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|Name=Block Cortana Package|Desc=Block Cortana Outbound UDP/TCP Traffic|AppPkgId=S-1-15-2-1861897761-1695161497-2927542615-642690995-327840285-2659745135-2630312742|Platform=2:6:2|Platform2=GTEQ|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana PlacesServer.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\PlacesServer.exe|Name=Block Cortana PlacesServer.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana RemindersServer.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\RemindersServer.exe|Name=Block Cortana RemindersServer.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana RemindersShareTargetApp.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\RemindersShareTargetApp.exe|Name=Block Cortana RemindersShareTargetApp.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana SearchUI.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\SearchUI.exe|Name=Block Cortana SearchUI.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
			)

			if "!T_SetWindowsSearchandCortana_PreferencesandPolicies!" equ "+" (
				echo.
				echo.%txtSetWindowsSearchCortanaPolicies%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Input\Settings" /v "InsightsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Input\Settings" /v "InsightsEnabled" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\InputPersonalization" /v "RestrictImplicitInkCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\InputPersonalization" /v "RestrictImplicitTextCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\InputPersonalization\TrainedDataStore" /v "HarvestContacts" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Personalization\Settings" /v "AcceptedPrivacyPolicy" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\InputPersonalization" /v "RestrictImplicitInkCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\InputPersonalization" /v "RestrictImplicitTextCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\InputPersonalization\TrainedDataStore" /v "HarvestContacts" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Personalization\Settings" /v "AcceptedPrivacyPolicy" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\InputPersonalization" /v "RestrictImplicitInkCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\InputPersonalization" /v "RestrictImplicitTextCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\InputPersonalization\TrainedDataStore" /v "HarvestContacts" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Personalization\Settings" /v "AcceptedPrivacyPolicy" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\InputPersonalization" /v "AllowInputPersonalization" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\HandwritingErrorReports" /v "PreventHandwritingErrorReports" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\AboveLock" /v "AllowCortanaAboveLock" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\current\device\Experience" /v "AllowCortana" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Speech_OneCore\Preferences" /v "ModelDownloadAllowed" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana ActionUriServer.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\ActionUriServer.exe|Name=Block Cortana ActionUriServer.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana Package" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|Name=Block Cortana Package|Desc=Block Cortana Outbound UDP/TCP Traffic|AppPkgId=S-1-15-2-1861897761-1695161497-2927542615-642690995-327840285-2659745135-2630312742|Platform=2:6:2|Platform2=GTEQ|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana PlacesServer.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\PlacesServer.exe|Name=Block Cortana PlacesServer.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana RemindersServer.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\RemindersServer.exe|Name=Block Cortana RemindersServer.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana RemindersShareTargetApp.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\RemindersShareTargetApp.exe|Name=Block Cortana RemindersShareTargetApp.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" /v "Block Cortana SearchUI.exe" /t REG_SZ /d "v2.30|Action=Block|Active=TRUE|Dir=Out|RA42=IntErnet|RA62=IntErnet|App=%%SystemROOT%%\SystemApps\Microsoft.Windows.Cortana_cw5n1h2txyewy\SearchUI.exe|Name=Block Cortana SearchUI.exe|Desc=Block Cortana Outbound UDP/TCP Traffic|" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "AnyAboveLockAppsActive" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "BingSearchEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaConsent" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaInAmbientMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaceable" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaced" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "DeviceHistoryEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "HistoryViewEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "IsAssignedAccess" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "IsWindowsHelloActive" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "ReplaceCortanaCheckRefreshed" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search\CortanaAppOverride" /v "IsAppSignedIn" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "AnyAboveLockAppsActive" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "BingSearchEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaConsent" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaInAmbientMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaceable" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaced" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "DeviceHistoryEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "HistoryViewEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "IsAssignedAccess" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "IsWindowsHelloActive" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "ReplaceCortanaCheckRefreshed" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search\CortanaAppOverride" /v "IsAppSignedIn" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "AnyAboveLockAppsActive" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "BingSearchEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "CortanaConsent" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "CortanaEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "CortanaInAmbientMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaceable" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "CortanaIsReplaced" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "DeviceHistoryEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "HistoryViewEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "IsAssignedAccess" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "IsWindowsHelloActive" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "ReplaceCortanaCheckRefreshed" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search\CortanaAppOverride" /v "IsAppSignedIn" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AllowCortana" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AllowCortanaAboveLock" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AllowCloudSearch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AllowSearchToUseLocation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "AutoIndexSharedFolders" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "ConnectedSearchPrivacy" /t REG_DWORD /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "ConnectedSearchSafeSearch" /t REG_DWORD /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "ConnectedSearchUseWeb" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "ConnectedSearchUseWebOverMeteredConnections" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "DisableWebSearch" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "PreventIndexingEmailAttachments" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "PreventIndexingOfflineFiles" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "PreventIndexingOutlook" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "PreventIndexOnBattery" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Search" /v "PreventRemoteQueries" /t REG_DWORD /d "1" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Wow6432Node\Microsoft\Windows\Windows Search" /v "AllowCortana" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Wow6432Node\Microsoft\Windows\Windows Search" /v "AllowCortanaAboveLock" /t REG_DWORD /d "0" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Search\Preferences" /v "{0077B49E-E474-CE11-8C5E-00AA004254E2}" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Search\Preferences" /v "{4154494E-BFF9-01B8-00AA-0037D96E0000}" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Search\Preferences" /v "{70fab278-f7af-cd11-9bc8-00aa002fc45a}" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Search\Preferences" /v "{C0A19454-7F29-1B10-A587-08002B2A2517}" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Search\Preferences" /v "{c34f5c97-eb05-bb4b-b199-2a7570ec7cf9}" /t REG_DWORD /d "1" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Windows Search\Preferences" /v "{0077B49E-E474-CE11-8C5E-00AA004254E2}" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Windows Search\Preferences" /v "{4154494E-BFF9-01B8-00AA-0037D96E0000}" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Windows Search\Preferences" /v "{70fab278-f7af-cd11-9bc8-00aa002fc45a}" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Windows Search\Preferences" /v "{C0A19454-7F29-1B10-A587-08002B2A2517}" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\Windows Search\Preferences" /v "{c34f5c97-eb05-bb4b-b199-2a7570ec7cf9}" /t REG_DWORD /d "1" /f >nul 2>&1
				)
				reg.exe add "HKLM\TK_NTUSER\Software\Classes\Local Settings\SOFTWARE\Microsoft\Windows\CurrentVersion\AppContainer\Storage\microsoft.microsoftedge_8wekyb3d8bbwe\MicrosoftEdge\ServiceUI" /v "EnableCortana" /t REG_DWORD /d "0" /f >nul 2>&1

				rem "This command will restore the classic search bar without disabling UAC. Maybe fix it after removing Cortana.
				reg.exe add "HKLM\TK_NTUSER\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
				rem To restore:
				rem reg.exe delete "HKLM\TK_NTUSER\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1
				rem reg.exe delete "HKLM\TK_DEFAULT\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1
				rem reg.exe delete "HKLM\TK_SOFTWARE\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1
			)

			if "!T_DisableSIA_DebugTracing!" equ "+" (
				echo.
				echo.%txtDisableSIA%
				rem reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MSOIdentityCRL\Trace" /v "Folder" /t REG_SZ /d "%%SystemDrive%%\MSOTraceLite" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MSOIdentityCRL\Trace" /v "Flags" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MSOIdentityCRL\Trace" /v "level" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MSOIdentityCRL\Trace" /v "Folder" /t REG_SZ /d "%%SystemDrive%%\MSOTraceLite" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MSOIdentityCRL\Trace" /v "Flags" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MSOIdentityCRL\Trace" /v "level" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MSOIdentityCRL\Trace" /v "Folder" /t REG_SZ /d "%%SystemDrive%%\MSOTrace" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MSOIdentityCRL\Trace" /v "Flags" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MSOIdentityCRL\Trace" /v "level" /t REG_DWORD /d "0" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					rem reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\MSOIdentityCRL\Trace" /v "Folder" /t REG_SZ /d "%%SystemDrive%%\MSOTrace" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\MSOIdentityCRL\Trace" /v "Flags" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\MSOIdentityCRL\Trace" /v "level" /t REG_DWORD /d "0" /f >nul 2>&1
				)
			)

			if "!T_CustomWindowsErrorReporting_Policies!" equ "+" (
				echo.
				echo.%txtWindowsErrorReportingPolicies%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Windows Error Reporting" /v "Disabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Windows Error Reporting" /v "DontSendAdditionalData" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Windows Error Reporting" /v "DontShowUI" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Windows Error Reporting" /v "LoggingDisabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Windows Error Reporting" /v "Disabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Windows Error Reporting" /v "DontSendAdditionalData" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Windows Error Reporting" /v "DontShowUI" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Windows Error Reporting" /v "LoggingDisabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Error Reporting" /v "Disabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Error Reporting" /v "DontSendAdditionalData" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Error Reporting" /v "DontShowUI" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\Windows Error Reporting" /v "LoggingDisabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting" /v "AutoApproveOSDumps" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting" /v "BypassPowerThrottling" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting" /v "BypassNetworkCostThrottling" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting" /v "BypassDataThrottling" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting" /v "Disabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Error Reporting" /v "DontSendAdditionalData" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_DisableWindowsSmartScreen!" equ "+" (
				echo.
				echo.%txtDisableSmartScreen2%
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Security Health\State" /v "AppAndBrowser_StoreAppsSmartScreenOff" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\AppHost" /v "EnableWebContentEvaluation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\AppHost" /v "EnableWebContentEvaluation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\AppHost" /v "EnableWebContentEvaluation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\CurrentVersion\AppHost" /v "EnableWebContentEvaluation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\CurrentVersion\AppHost" /v "EnableWebContentEvaluation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\AppHost" /v "EnableWebContentEvaluation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\AppHost" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\AppHost" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\AppHost" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\CurrentVersion\AppHost" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\CurrentVersion\AppHost" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\AppHost" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\AppHost" /v "SmartScreenEnabled" /t REG_SZ /d "Off" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "AicEnabled" /t REG_SZ /d "Anywhere" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v "SmartScreenEnabled" /t REG_SZ /d "Off" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Internet Explorer\PhishingFilter" /v "EnabledV9" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Internet Explorer\PhishingFilter" /v "EnabledV9" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Internet Explorer\PhishingFilter" /v "EnabledV9" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Internet Explorer\PhishingFilter" /v "EnabledV9" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Internet Explorer\PhishingFilter" /v "EnabledV9" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Internet Explorer\PhishingFilter" /v "EnabledV9" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Internet Explorer\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Internet Explorer\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Internet Explorer\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Internet Explorer\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Internet Explorer\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Internet Explorer\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MicrosoftEdge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MicrosoftEdge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MicrosoftEdge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\MicrosoftEdge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\MicrosoftEdge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MicrosoftEdge\SmartScreenEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MicrosoftEdge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MicrosoftEdge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MicrosoftEdge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\MicrosoftEdge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\MicrosoftEdge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MicrosoftEdge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MicrosoftEdge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MicrosoftEdge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MicrosoftEdge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\MicrosoftEdge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\MicrosoftEdge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MicrosoftEdge\PhishingFilter" /v "PreventOverride" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MicrosoftEdge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MicrosoftEdge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MicrosoftEdge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\MicrosoftEdge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\MicrosoftEdge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MicrosoftEdge\Main" /v "AllowInPrivate" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MicrosoftEdge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MicrosoftEdge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MicrosoftEdge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\MicrosoftEdge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\MicrosoftEdge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MicrosoftEdge\Main" /v "AllowPrelaunch" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MicrosoftEdge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MicrosoftEdge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MicrosoftEdge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\MicrosoftEdge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\MicrosoftEdge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MicrosoftEdge\TabPreloader" /v "AllowTabPreloading" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MicrosoftEdge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MicrosoftEdge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MicrosoftEdge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\MicrosoftEdge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\MicrosoftEdge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MicrosoftEdge\Main" /v "PreventFirstRunPage" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\MicrosoftEdge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\MicrosoftEdge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\MicrosoftEdge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\MicrosoftEdge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\MicrosoftEdge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MicrosoftEdge\Main" /v "PreventLiveTileDataCollection" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge" /v "UsageStatsInSample" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge" /v "UsageStatsInSample" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge" /v "UsageStatsInSample" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge" /v "UsageStatsInSample" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge" /v "UsageStatsInSample" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge" /v "UsageStatsInSample" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Edge\StabilityMetrics" /v "user_experience_metrics.stability.exited_cleanly" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Edge\StabilityMetrics" /v "user_experience_metrics.stability.exited_cleanly" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Edge\StabilityMetrics" /v "user_experience_metrics.stability.exited_cleanly" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Edge\StabilityMetrics" /v "user_experience_metrics.stability.exited_cleanly" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Edge\StabilityMetrics" /v "user_experience_metrics.stability.exited_cleanly" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Edge\StabilityMetrics" /v "user_experience_metrics.stability.exited_cleanly" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\System" /v "EnableSmartScreen" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SmartScreen" /v "ConfigureAppInstallControl" /t REG_SZ /d "Anywhere" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SmartScreen" /v "ConfigureAppInstallControlEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_DisableWindowsFirewall!" equ "+" (
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile" /v "EnableFirewall" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\WindowsFirewall\PublicProfile" /v "EnableFirewall" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\WindowsFirewall\StandardProfile" /v "EnableFirewall" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce" /v "DisableFirewall" /t REG_SZ /d "netsh.exe advfirewall set allprofiles state off" /f >nul 2>&1
			)

			if "!T_DisableWindowsDefender!" equ "+" (
				echo.
				echo.%txtDisableDefender%
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows Security Health\State" /v "AccountProtection_MicrosoftAccount_Disconnected" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender Security Center\Notifications" /v "DisableNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender Security Center\Notifications" /v "DisableEnhancedNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows Security Health\State" /v "AccountProtection_MicrosoftAccount_Disconnected" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender" /v "DisableAntiSpyware" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender" /v "DisableAntiVirus" /t REG_DWORD /d "1" /f >nul 2>&1
				if "%SelectedSourceOS%" neq "w11" reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection" /t REG_DWORD /d "0" /f >nul 2>&1
				if "%SelectedSourceOS%" equ "w11" reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtectionSource" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Signature Updates" /v "FirstAuGracePeriod" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\UX Configuration" /v "DisablePrivacyMode" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\Run" /v "SecurityHealth" /t REG_BINARY /d "030000000000000000000000" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MRT" /v "DontOfferThroughWUAU" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MRT" /v "DontReportInfectionInformation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Systray" /v "HideSystray" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "PUAProtection" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "RandomizeScheduleTaskTimes" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Exclusions" /v "DisableAutoExclusions" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\MpEngine" /v "MpEnablePus" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Quarantine" /v "LocalSettingOverridePurgeItemsAfterDelay" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Quarantine" /v "PurgeItemsAfterDelay" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableBehaviorMonitoring" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableIOAVProtection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableOnAccessProtection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRealtimeMonitoring" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRoutinelyTakingAction" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableScanOnRealtimeEnable" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableScriptScanning" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Remediation" /v "Scan_ScheduleDay" /t REG_DWORD /d "8" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Remediation" /v "Scan_ScheduleTime" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Reporting" /v "AdditionalActionTimeOut" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Reporting" /v "CriticalFailureTimeOut" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Reporting" /v "DisableEnhancedNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Reporting" /v "DisableGenericRePorts" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Reporting" /v "NonCriticalTimeOut" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "AvgCPULoadFactor" /t REG_DWORD /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableArchiveScanning" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableCatchupFullScan" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableCatchupQuickScan" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableRemovableDriveScanning" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableRestorePoint" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableScanningMappedNetworkDrivesForFullScan" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableScanningNetworkFiles" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "PurgeItemsAfterDelay" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "ScanOnlyIfIdle" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "ScanParameters" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "ScheduleDay" /t REG_DWORD /d "8" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "ScheduleTime" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "DisableUpdateOnStartupWithoutEngine" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "ScheduleDay" /t REG_DWORD /d "8" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "ScheduleTime" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "SignatureUpdateCatchupInterval" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "DisableBlockAtFirstSeen" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "LocalSettingOverrideSpyNetReporting" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "SpyNetReporting" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "SpyNetReportingLocation" /t REG_MULTI_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "SubmitSamplesConsent" /t REG_DWORD /d "2" /f >nul 2>&1

				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\EventLog\System\Microsoft-Antimalware-ShieldProvider" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\EventLog\System\WinDefend" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\MsSecFlt" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SecurityHealthService" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\Sense" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdBoot" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdFilter" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdNisDrv" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdNisSvc" /v "LaunchProtected" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdNisSvc" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WinDefend" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1

				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\WMI\Autologger\DefenderApiLogger" /v "Start" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\WMI\Autologger\DefenderAuditLogger" /v "Start" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_CustomWindowsDefender_WindowsDefenderSecurityCenterTweaks!" equ "+" (
				echo.
				echo.%txtCustomDefender%
				echo.%txtCustomWindowsDefenderSecurity%
				rem reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v "SecurityHealth" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Run" /v "SecurityHealth" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Systray" /v "HideSystray" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows Security Health\State" /v "AccountProtection_MicrosoftAccount_Disconnected" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows Security Health\State" /v "AccountProtection_MicrosoftAccount_Disconnected" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender" /v "DisableAntiSpyware" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender" /v "DisableRoutinelyTakingAction" /t REG_DWORD /d "1" /f >nul 2>&1

				rem TamperProtection Off = 0 – applies to Windows Home & Pro
				rem TamperProtection On = 1 – applies to Windows Home & Pro
				rem TamperProtection disabled = 2 – applies to Windows Enterprise & Education
				for /d %%j IN (Enterprise; EnterpriseN; EnterpriseS; EnterpriseSN; Education; EducationN; EducationS; EducationSN) DO (
					if /i "!ImageEdition%%i!" equ "%%j" (
						reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection" /t REG_DWORD /d "2" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtectionSource" /t REG_DWORD /d "2" /f >nul 2>&1
					) else (
						if "%SelectedSourceOS%" neq "w11" (
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection" /t REG_DWORD /d "0" /f >nul 2>&1
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtectionSource" /t REG_DWORD /d "0" /f >nul 2>&1
						)
						if "%SelectedSourceOS%" equ "w11" (
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtection" /t REG_DWORD /d "4" /f >nul 2>&1
							reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender\Features" /v "TamperProtectionSource" /t REG_DWORD /d "4" /f >nul 2>&1
						)
					)
				)

				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender Security Center\Notifications" /v "DisableEnhancedNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Defender Security Center\Notifications" /v "DisableNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MRT" /v "DontOfferThroughWUAU" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\MRT" /v "DontReportInfectionInformation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "AllowFastServiceStartup" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableAntiVirus" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "DisableRoutinelyTakingAction" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "RandomizeScheduleTaskTimes" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender" /v "ServiceKeepAlive" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Exclusions" /v "DisableAutoExclusions" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\MpEngine" /v "MpEnablePus" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\NIS\Consumers\IPS" /v "DisableSignatureRetirement" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Quarantine" /v "LocalSettingOverridePurgeItemsAfterDelay" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableBehaviorMonitoring" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableIOAVProtection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableOnAccessProtection" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRealtimeMonitoring" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableScanOnRealtimeEnable" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "LocalSettingOverrideDisableBehaviorMonitoring" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "LocalSettingOverrideDisableIOAVProtection" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "LocalSettingOverrideDisableOnAccessProtection" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "LocalSettingOverrideDisableRealtimeMonitoring" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "LocalSettingOverrideRealtimeScanDirection" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Reporting" /v "DisableEnhancedNotifications" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Reporting" /v "DisableGenericRePorts" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "CheckForSignaturesBeforeRunningScan" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableArchiveScanning" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableCatchupFullScan" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableCatchupQuickScan" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableEmailScanning" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableHeuristics" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisablePackedExeScanning" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableRemovableDriveScanning" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableScanningMappedNetworkDrivesForFullScan" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "DisableScanningNetworkFiles" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "LocalSettingOverrideAvgCPULoadFactor" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "LocalSettingOverrideScanParameters" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "LocalSettingOverrideScheduleDay" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "LocalSettingOverrideScheduleQuickScanTime" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "LocalSettingOverrideScheduleTime" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Scan" /v "ScanOnlyIfIdle" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "DisableScanOnUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "DisableScheduledSignatureUpdateOnBattery" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "DisableUpdateOnStartupWithoutEngine" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "ForceUpdateFromMU" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "RealtimeSignatureDelivery" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "SignatureDisableNotification" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\Signature Updates" /v "UpdateOnStartUp" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "DisableBlockAtFirstSeen" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "DontReportInfectionInformation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "LocalSettingOverrideSpyNetReporting" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "SpyNetReporting" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "SpyNetReportingLocation" /t REG_MULTI_SZ /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows Defender\SpyNet" /v "SubmitSamplesConsent" /t REG_DWORD /d "2" /f >nul 2>&1

				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\EventLog\System\Microsoft-Antimalware-ShieldProvider" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\EventLog\System\WinDefend" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\MsSecFlt" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SecurityHealthService" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\Sense" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdBoot" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdFilter" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdNisDrv" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdNisSvc" /v "LaunchProtected" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WdNisSvc" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WinDefend" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1

				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\WMI\Autologger\DefenderApiLogger" /v "Start" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\WMI\Autologger\DefenderAuditLogger" /v "Start" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_DisableDriversUpdates!" equ "+" (
				echo.
				echo.%txtDisableAutomaticDriver%
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Device Metadata" /v "PreventDeviceMetadataFromNetwork" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Device Metadata" /v "PreventDeviceMetadataFromNetwork" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DriverSearching" /v "DontPromptForWindowsUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DriverSearching" /v "DontSearchWindowsUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DriverSearching" /v "DriverUpdateWizardWuSearchEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DriverSearching" /v "SearchOrderConfig" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "ExcludeWUDriversInQualityUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_EnableCustomWindowsDriversUpdateTweaks!" equ "+" (
				echo.
				echo.%txtEnableCustomWindowsDrivers%
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DeviceInstall\Settings" /v "DisableSendGenericDriverNotFoundToWER" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\EnhancedStorageDevices" /v "TCGSecurityActivationDisabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\GameDVR" /v "AllowGameDVR" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\GameUX" /v "GameUpdateOptions" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\GameUX" /v "DownloadGameInfo" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\GameUX" /v "ListRecentlyPlayed" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_DisableWindowsUpdate!" equ "+" (
				echo.
				echo.%txtDisableWindowsUpdateTweak%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SubscribedContent-310093Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v "SubscribedContent-310093Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\DeliveryOptimization" /v "SystemSettingsDownloadMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\DeliveryOptimization" /v "SystemSettingsDownloadMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Speech_OneCore\Preferences" /v "ModelDownloadAllowed" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization" /v "OptInOOBE" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" /v "DODownloadMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsStore\WindowsUpdate" /v "AutoDownload" /t REG_DWORD /d "5" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\WindowsStore" /v "AutoDownload" /t REG_DWORD /d "5" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Services\7971f918-a847-4430-9279-4a52d1efe18d" /v "RegisteredWithAU" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-DeviceUpdateAgent/Operational" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WINEVT\Channels\Microsoft-Windows-WindowsUpdateClient/Operational]" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" /v "HideMCTLink" /t REG_DWORD /d "1" /f >nul 2>&1

				if "%ImageDefaultLanguage%" equ "zh-CN" reg.exe add "HKLM\TK_SOFTWARE\Microsoft\LexiconUpdate\loc_0804" /v "HapDownloadEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				if "%ImageDefaultLanguage%" equ "zh-HK" reg.exe add "HKLM\TK_SOFTWARE\Microsoft\LexiconUpdate\loc_0804" /v "HapDownloadEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				if "%ImageDefaultLanguage%" equ "zh-TW" reg.exe add "HKLM\TK_SOFTWARE\Microsoft\LexiconUpdate\loc_0804" /v "HapDownloadEnabled" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Speech" /v "AllowSpeechModelUpdate" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" /v "DODownloadMode" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DoNotConnectToWindowsUpdateInternetLocations" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DoNotConnectToWindowsUpdateInternetLocations" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DisableWindowsUpdateAccess" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DisableWindowsUpdateAccess" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "WUServer" /t REG_SZ /d " " /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "WUStatusServer" /t REG_SZ /d " " /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "UpdateServiceUrlAlternate" /t REG_SZ /d " " /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "AUOptions" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "NoAutoUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "UseWUServer" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WaaSMedicSvc" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\wuauserv" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
			)

			if "!T_CustomDisableWindowsUpdateTweaks!" equ "+" (
				echo.
				echo.%txtCustomDisableWindowsUpdate%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\DeliveryOptimization" /v "SystemSettingsDownloadMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\DeliveryOptimization" /v "SystemSettingsDownloadMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization" /v "OptInOOBE" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\DeliveryOptimization\Config" /v "DODownloadMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" /v "DODownloadMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" /v "DOMinBackgroundQos" /t REG_DWORD /d "256" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" /v "DOMinBatteryPercentageAllowedToUpload" /t REG_DWORD /d "100" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" /v "DOMaxUploadBandwidth" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" /v "DOPercentageMaxDownloadBandwidth" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\DeliveryOptimization" /v "DOMaxDownloadBandwidth" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Services\7971f918-a847-4430-9279-4a52d1efe18d" /v "registeredWithAU" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\WindowsUpdate\UX\Settings" /v "HideMCTLink" /t REG_DWORD /d "1" /f >nul 2>&1

				if "%ImageDefaultLanguage%" equ "zh-CN" reg.exe add "HKLM\TK_SOFTWARE\Microsoft\LexiconUpdate\loc_0804" /v "HapDownloadEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				if "%ImageDefaultLanguage%" equ "zh-HK" reg.exe add "HKLM\TK_SOFTWARE\Microsoft\LexiconUpdate\loc_0804" /v "HapDownloadEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				if "%ImageDefaultLanguage%" equ "zh-TW" reg.exe add "HKLM\TK_SOFTWARE\Microsoft\LexiconUpdate\loc_0804" /v "HapDownloadEnabled" /t REG_DWORD /d "0" /f >nul 2>&1

				if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Gwx" /v "DisableGwx" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DisableOSUpgrade" /t REG_DWORD /d "1" /f >nul 2>&1
				)
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DeferUpdatePeriod" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DeferUpgrade" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DeferUpgradePeriod" /t REG_DWORD /d "1" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Services\Pending\7971f918-a847-4430-9279-4a52d1efe18d" /v "ClientApplicationID" /t REG_SZ /d "MoUpdateOrchestrator" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Services\Pending\7971f918-a847-4430-9279-4a52d1efe18d" /v "RegisterWithAU" /t REG_DWORD /d "0" /f >nul 2>&1
				)

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "AllowAutoWindowsUpdateDownloadOverMeteredNetwork" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DisableDualScan" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DisableOSUpgrade" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "ElevateNonAdmins" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "ExcludeWUDriversInQualityUpdate" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "SetDisableUXWUAccess" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "SetRestartWarningSchd" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "AlwaysAutoRebootAtScheduledTime" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DoNotConnectToWindowsUpdateInternetLocations" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DoNotConnectToWindowsUpdateInternetLocations" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DisableWindowsUpdateAccess" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DisableWindowsUpdateAccess" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "WUServer" /t REG_SZ /d " " /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "WUStatusServer" /t REG_SZ /d " " /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "UpdateServiceUrlAlternate" /t REG_SZ /d " " /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "AUOptions" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "AutoInstallMinorUpdates" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "IncludeRecommendedUpdates" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "NoAutoRebootWithLoggedOnUsers" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "UseWUServer" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "UseWUServer" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "NoAutoUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "RebootRelaunchTimeoutEnabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "RebootRelaunchTimeout" /t REG_DWORD /d "10" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "RebootWarningTimeoutEnabled" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsStore\WindowsUpdate" /v "AutoDownload" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsStore\WindowsUpdate" /v "AutoDownload" /t REG_DWORD /d "5" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\WindowsStore" /v "AutoDownload" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\WindowsStore" /v "AutoDownload" /t REG_DWORD /d "5" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\WaaSMedicSvc" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\wuauserv" /v "Start" /t REG_DWORD /d "3" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Speech" /v "AllowSpeechModelUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_DisableWindowsUpgrade!" equ "+" (
				echo.
				echo.%txtDisableAutomaticWindows%
				if "%SelectedSourceOS%" neq "w10" if "%SelectedSourceOS%" neq "w11" (
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Gwx" /v "DisableGwx" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DisableOSUpgrade" /t REG_DWORD /d "1" /f >nul 2>&1
				)
				if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
					if "%ImageBuild%" geq "17134" if "%ImageBuild%" leq "20348" reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "ProductVersion" /t REG_SZ /d "Windows 10" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "AUOptions" /t REG_DWORD /d "2" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" /v "NoAutoUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DeferUpdatePeriod" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DeferUpgrade" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "DeferUpgradePeriod" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "TargetReleaseVersion" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate" /v "TargetReleaseVersionInfo" /t REG_SZ /d "!Image_BranchID!" /f >nul 2>&1
				)
			)

			if "!T_DisableReservedStorage!" equ "+" (
				echo.
				echo.%txtDisableMicrosoftReserved%
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\ReserveManager" /v "ShippedWithReserves" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_EnableFullResetBase!" equ "+" (
				echo.
				echo.%txtEnableDISMImage%
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\SideBySide\Configuration" /v "DisableResetbase" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_EnableFMP3ProCodec!" equ "+" (
				echo.
				echo.%txtEnableFraunhofer%
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows NT\CurrentVersion\drivers.desc" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows NT\CurrentVersion\drivers.desc" /v "%%SystemROOT%%\System32\l3codecp.acm" /t REG_SZ /d "Fraunhofer IIS MPEG Layer-3 Codec (Professional)" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows NT\CurrentVersion\Drivers32" /v "msacm.l3acm" /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\l3codecp.acm" /f >nul 2>&1

				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe delete "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\drivers.desc" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\drivers.desc" /v "%%SystemROOT%%\SysWOW64\l3codecp.acm" /t REG_SZ /d "Fraunhofer IIS MPEG Layer-3 Codec (Professional)" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Drivers32" /v "msacm.l3acm" /t REG_EXPAND_SZ /d "%%SystemROOT%%\SysWOW64\l3codecp.acm" /f >nul 2>&1
				)
			)

			if "!T_EnablePhotoViewer!" equ "+" (
				echo.
				echo.%txtEnableWindowsPhoto%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ApplicationAssociationToasts" /v "emffile_.emf" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ApplicationAssociationToasts" /v "rlefile_.rle" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\ApplicationAssociationToasts" /v "wmffile_.wmf" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "GlobalAssocChangedCounter" /t REG_DWORD /d "114" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.bmp\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.bmp\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.bmp\UserChoice" /v "Hash" /t REG_SZ /d "/1KQq5/dKh4=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.bmp\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dib\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dib\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dib\UserChoice" /v "Hash" /t REG_SZ /d "0AKqoUGFxyM=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dib\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.gif\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.gif\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.gif\UserChoice" /v "Hash" /t REG_SZ /d "/wlP8OC+zh8=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.gif\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jfif\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jfif\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jfif\UserChoice" /v "Hash" /t REG_SZ /d "IoxU3UqIBnI=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jfif\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpe\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpe\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpe\UserChoice" /v "Hash" /t REG_SZ /d "2SgxKaBbHOg=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpe\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpeg\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpeg\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpeg\UserChoice" /v "Hash" /t REG_SZ /d "juGzZInMpQc=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpeg\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpg\OpenWithList" /v "b" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpg\OpenWithList" /v "MRUList" /t REG_SZ /d "ba" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpg\UserChoice" /v "Hash" /t REG_SZ /d "U+pIh6SF/B8=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpg\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jxr\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jxr\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jxr\UserChoice" /v "Hash" /t REG_SZ /d "1H/ZlVgUyqs=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jxr\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.png\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.png\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.png\UserChoice" /v "Hash" /t REG_SZ /d "f/skr7FCe/k=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.png\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tif\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tif\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tif\UserChoice" /v "Hash" /t REG_SZ /d "zVfiuTxa1ds=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tif\UserChoice" /v "ProgId" /t REG_SZ /d "TIFImage.Document" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tiff\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tiff\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tiff\UserChoice" /v "Hash" /t REG_SZ /d "Fu1l7i+Hbd8=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tiff\UserChoice" /v "ProgId" /t REG_SZ /d "TIFImage.Document" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.wdp\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.wdp\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.wdp\UserChoice" /v "Hash" /t REG_SZ /d "/qcrPB0bhuI=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.wdp\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Wdp" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.bmp\UserChoice" /v "Hash" /t REG_SZ /d "StgNnOQjI0g=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.bmp\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.dib\UserChoice" /v "Hash" /t REG_SZ /d "Yj5otSXSOnQ=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.dib\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.gif\UserChoice" /v "Hash" /t REG_SZ /d "G7uqGg5umog=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.gif\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jfif\UserChoice" /v "Hash" /t REG_SZ /d "dGa933SYTUg=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jfif\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpe\UserChoice" /v "Hash" /t REG_SZ /d "g5ejzEAXg2I=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpe\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpeg\UserChoice" /v "Hash" /t REG_SZ /d "C6L4UHj2Nik=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpeg\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpg\UserChoice" /v "Hash" /t REG_SZ /d "Me9K+63c8fQ=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpg\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jxr\UserChoice" /v "Hash" /t REG_SZ /d "psMKU5PaApg=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jxr\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.png\UserChoice" /v "Hash" /t REG_SZ /d "m2bgfjh8Sb4=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.png\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.tif\UserChoice" /v "Hash" /t REG_SZ /d "3MeR759BERw=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.tif\UserChoice" /v "ProgId" /t REG_SZ /d "TIFImage.Document" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.tiff\UserChoice" /v "Hash" /t REG_SZ /d "PUzuwYrrA+Q=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.tiff\UserChoice" /v "ProgId" /t REG_SZ /d "TIFImage.Document" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.wdp\UserChoice" /v "Hash" /t REG_SZ /d "tu0JqOen+Es=" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.wdp\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Wdp" /f >nul 2>&1

				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ApplicationAssociationToasts" /v "emffile_.emf" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ApplicationAssociationToasts" /v "rlefile_.rle" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\ApplicationAssociationToasts" /v "wmffile_.wmf" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer" /v "GlobalAssocChangedCounter" /t REG_DWORD /d "114" /f >nul 2>&1

				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.bmp\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.bmp\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.bmp\UserChoice" /v "Hash" /t REG_SZ /d "/1KQq5/dKh4=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.bmp\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dib\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dib\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dib\UserChoice" /v "Hash" /t REG_SZ /d "0AKqoUGFxyM=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.dib\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.gif\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.gif\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.gif\UserChoice" /v "Hash" /t REG_SZ /d "/wlP8OC+zh8=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.gif\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jfif\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jfif\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jfif\UserChoice" /v "Hash" /t REG_SZ /d "IoxU3UqIBnI=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jfif\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpe\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpe\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpe\UserChoice" /v "Hash" /t REG_SZ /d "2SgxKaBbHOg=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpe\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpeg\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpeg\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpeg\UserChoice" /v "Hash" /t REG_SZ /d "juGzZInMpQc=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpeg\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpg\OpenWithList" /v "b" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpg\OpenWithList" /v "MRUList" /t REG_SZ /d "ba" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpg\UserChoice" /v "Hash" /t REG_SZ /d "U+pIh6SF/B8=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jpg\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jxr\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jxr\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jxr\UserChoice" /v "Hash" /t REG_SZ /d "1H/ZlVgUyqs=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.jxr\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.png\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.png\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.png\UserChoice" /v "Hash" /t REG_SZ /d "f/skr7FCe/k=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.png\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tif\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tif\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tif\UserChoice" /v "Hash" /t REG_SZ /d "zVfiuTxa1ds=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tif\UserChoice" /v "ProgId" /t REG_SZ /d "TIFImage.Document" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tiff\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tiff\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tiff\UserChoice" /v "Hash" /t REG_SZ /d "Fu1l7i+Hbd8=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.tiff\UserChoice" /v "ProgId" /t REG_SZ /d "TIFImage.Document" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.wdp\OpenWithList" /v "a" /t REG_SZ /d "PhotoViewer.dll" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.wdp\OpenWithList" /v "MRUList" /t REG_SZ /d "a" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.wdp\UserChoice" /v "Hash" /t REG_SZ /d "/qcrPB0bhuI=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\.wdp\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Wdp" /f >nul 2>&1

				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.bmp\UserChoice" /v "Hash" /t REG_SZ /d "StgNnOQjI0g=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.bmp\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.dib\UserChoice" /v "Hash" /t REG_SZ /d "Yj5otSXSOnQ=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.dib\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.gif\UserChoice" /v "Hash" /t REG_SZ /d "G7uqGg5umog=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.gif\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jfif\UserChoice" /v "Hash" /t REG_SZ /d "dGa933SYTUg=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jfif\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpe\UserChoice" /v "Hash" /t REG_SZ /d "g5ejzEAXg2I=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpe\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpeg\UserChoice" /v "Hash" /t REG_SZ /d "C6L4UHj2Nik=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpeg\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpg\UserChoice" /v "Hash" /t REG_SZ /d "Me9K+63c8fQ=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jpg\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jxr\UserChoice" /v "Hash" /t REG_SZ /d "psMKU5PaApg=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.jxr\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.png\UserChoice" /v "Hash" /t REG_SZ /d "m2bgfjh8Sb4=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.png\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.tif\UserChoice" /v "Hash" /t REG_SZ /d "3MeR759BERw=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.tif\UserChoice" /v "ProgId" /t REG_SZ /d "TIFImage.Document" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.tiff\UserChoice" /v "Hash" /t REG_SZ /d "PUzuwYrrA+Q=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.tiff\UserChoice" /v "ProgId" /t REG_SZ /d "TIFImage.Document" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.wdp\UserChoice" /v "Hash" /t REG_SZ /d "tu0JqOen+Es=" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\Roaming\OpenWith\FileExts\.wdp\UserChoice" /v "ProgId" /t REG_SZ /d "PhotoViewer.FileAssoc.Wdp" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Classes\Applications\photoviewer.dll\shell\open" /v "MuiVerb" /t REG_SZ /d "@photoviewer.dll,-3043" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Applications\photoviewer.dll\shell\open\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Applications\photoviewer.dll\shell\open\DropTarget" /v "Clsid" /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Applications\photoviewer.dll\shell\print\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Applications\photoviewer.dll\shell\print\DropTarget" /v "Clsid" /t REG_SZ /d "{60fd46de-f830-4894-a628-6fa81bc0190d}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\CLSID\{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /v "ImplementsVerbs" /t REG_SZ /d "preview;printto;rotate90;rotate270;setwallpaper;slideshow" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\CLSID\{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}\shellex\MayChangeDefaultMenu" /ve /t REG_SZ /d "" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Bitmap" /v "FriendlyTypeName" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll,-3056" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Bitmap" /v "ImageOptionFlags" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Bitmap\DefaultIcon" /ve /t REG_SZ /d "%%SystemROOT%%\System32\imageres.dll,-70" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Bitmap\shell\open\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Bitmap\shell\open\DropTarget" /v "Clsid" /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Gif" /v "FriendlyTypeName" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll,-3057" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Gif" /v "ImageOptionFlags" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Gif\DefaultIcon" /ve /t REG_SZ /d "%%SystemROOT%%\System32\imageres.dll,-83" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Gif\shell\open\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Gif\shell\open\DropTarget" /v "Clsid" /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.JFIF" /v "EditFlags" /t REG_DWORD /d "65536" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.JFIF" /v "FriendlyTypeName" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll,-3055" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.JFIF" /v "ImageOptionFlags" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.JFIF\DefaultIcon" /ve /t REG_SZ /d "%%SystemROOT%%\System32\imageres.dll,-72" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.JFIF\shell\open" /v "MuiVerb" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\photoviewer.dll,-3043" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.JFIF\shell\open\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.JFIF\shell\open\DropTarget" /v "Clsid" /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Jpeg" /v "EditFlags" /t REG_DWORD /d "65536" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Jpeg" /v "FriendlyTypeName" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll,-3055" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Jpeg" /v "ImageOptionFlags" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Jpeg\DefaultIcon" /ve /t REG_SZ /d "%%SystemROOT%%\System32\imageres.dll,-72" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Jpeg\shell\open" /v "MuiVerb" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\photoviewer.dll,-3043" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Jpeg\shell\open\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Jpeg\shell\open\DropTarget" /v "Clsid" /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Png" /v "FriendlyTypeName" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll,-3057" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Png" /v "ImageOptionFlags" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Png\DefaultIcon" /ve /t REG_SZ /d "%%SystemROOT%%\System32\imageres.dll,-71" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Png\shell\open\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Png\shell\open\DropTarget" /v "Clsid" /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Tiff" /v "FriendlyTypeName" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll,-3058" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Tiff" /v "ImageOptionFlags" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Tiff\DefaultIcon" /ve /t REG_SZ /d "%%SystemROOT%%\System32\imageres.dll,-122" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Tiff\shell\open" /v "MuiVerb" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\photoviewer.dll,-3043" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Tiff\shell\open\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Tiff\shell\open\DropTarget" /v "Clsid" /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Wdp" /v "EditFlags" /t REG_DWORD /d "65536" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Wdp" /v "ImageOptionFlags" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Wdp\DefaultIcon" /ve /t REG_SZ /d "%%SystemROOT%%\System32\wmphoto.dll,-400" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Wdp\shell\open" /v "MuiVerb" /t REG_EXPAND_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\photoviewer.dll,-3043" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Wdp\shell\open\command" /ve /t REG_EXPAND_SZ /d "%%SystemROOT%%\System32\rundll32.exe \"%%ProgramFiles%%\Windows Photo Viewer\PhotoViewer.dll\", ImageView_Fullscreen %%1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\PhotoViewer.FileAssoc.Wdp\shell\open\DropTarget" /v "Clsid" /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.bmp\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.dds\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.dib\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.gif\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.ico\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jfif\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jpe\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jpeg\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jpg\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.jxr\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.png\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.rle\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.tif\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.tiff\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\.wdp\OpenWithList\PhotoViewer.dll" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\SystemFileAssociations\video\ShellEx\ContextMenuHandlers\ShellVideoSlideshow" /ve /t REG_SZ /d "{E598560B-28D5-46aa-A14A-8A3BEA34B576}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\WPDContextMenu.Image\shellex\ContextMenuHandlers\ShImageViewer" /ve /t REG_SZ /d "{FFE2A43C-56B9-4bf5-9A79-CC6D4285608A}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\WPDContextMenu.Video\shellex\ContextMenuHandlers\ShImageViewer" /ve /t REG_SZ /d "{E598560B-28D5-46aa-A14A-8A3BEA34B576}" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities" /v "ApplicationDescription" /t REG_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\photoviewer.dll,-3069" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities" /v "ApplicationName" /t REG_SZ /d "@%%ProgramFiles%%\Windows Photo Viewer\photoviewer.dll,-3009" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".bmp" /t REG_SZ /d "PhotoViewer.FileAssoc.Bitmap" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".dib" /t REG_SZ /d "PhotoViewer.FileAssoc.Bitmap" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".gif" /t REG_SZ /d "PhotoViewer.FileAssoc.Gif" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".jfif" /t REG_SZ /d "PhotoViewer.FileAssoc.JFIF" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".jpe" /t REG_SZ /d "PhotoViewer.FileAssoc.Jpeg" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".jpeg" /t REG_SZ /d "PhotoViewer.FileAssoc.Jpeg" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".jpg" /t REG_SZ /d "PhotoViewer.FileAssoc.Jpeg" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".jxr" /t REG_SZ /d "PhotoViewer.FileAssoc.Wdp" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".png" /t REG_SZ /d "PhotoViewer.FileAssoc.Png" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".tif" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".tiff" /t REG_SZ /d "PhotoViewer.FileAssoc.Tiff" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows Photo Viewer\Capabilities\FileAssociations" /v ".wdp" /t REG_SZ /d "PhotoViewer.FileAssoc.Wdp" /f >nul 2>&1
			)

			if "!T_ForceLatestNetFramework!" equ "+" (
				echo.
				echo.%txtForceNETPrograms%
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\.NETFramework" /v "OnlyUseLatestCLR" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_BlockAutoEdgeChromiumBasedDelivery!" equ "+" (
				echo.
				echo.%txtBlockAutomaticEdgeChromium%
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\edgeupdate" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\edgeupdatem" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				if "%ImageBuild%" gtr "17763" reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\EdgeUpdate" /v "AllowSXS" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\EdgeUpdate" /v "DoNotUpdateToEdgeWithChromium" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_GeneralTweaks!" equ "+" (
				echo.
				echo.%GlobalGeneralTweaks%
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{5BC2B5AB-80DE-4E83-B8CF-426902051D0A}" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{F132AF7F-7BCA-4EDE-8A7C-958108FE7DBC}" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" (
					reg.exe delete "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{5BC2B5AB-80DE-4E83-B8CF-426902051D0A}" /f >nul 2>&1
					reg.exe delete "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{F132AF7F-7BCA-4EDE-8A7C-958108FE7DBC}" /f >nul 2>&1
				)
				reg.exe delete "HKLM\TK_NTUSER\Software\Microsoft\Siuf\Rules" /v "PeriodInNanoSeconds" /f >nul 2>&1
				reg.exe delete "HKLM\TK_DEFAULT\Software\Microsoft\Siuf\Rules" /v "PeriodInNanoSeconds" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Siuf\Rules" /v "NumberOfSIUFInPeriod" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Siuf\Rules" /v "NumberOfSIUFInPeriod" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Device Metadata" /v "PreventDeviceMetadataFromNetwork" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Device Metadata" /v "PreventDeviceMetadataFromNetwork" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SYSTEM\ControlSet001\Services\Sense" /f >nul 2>&1

				rem Fix Memory Leak and Disable SuperFetch
				rem reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Memory Management" /v "ClearPageFileAtShutdown" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Memory Management" /v "NonPagedPoolSize" /t REG_DWORD /d "192" /f >nul 2>&1
				rem Spectre and MeltDown Protection - "FeatureSettingsOverride"
				rem value 0 Default "Spectre and MeltDown Protection Enabled"
				rem value 3 Disable Mitigations "Spectre and MeltDown Protection Disabled"
				rem value 1 "Only MeltDown Protection Enabled"
				rem reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Memory Management" /v "FeatureSettingsOverride" /t REG_DWORD /d "3" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Memory Management" /v "FeatureSettingsOverrideMask" /t REG_DWORD /d "3" /f >nul 2>&1

				rem reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Memory Management" /v "PagingFiles" /t REG_MULTI_SZ /d "%%SystemDrive%%\pagefile.sys 1024 8192" /f >nul 2>&1
				rem value 2 Default "Ndu"
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\Ndu" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				rem value 1 Default "Null" Disable it causes CLI and Scripts issues
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\Null" /v "Start" /t REG_DWORD /d "1" /f >nul 2>&1

				rem value 2 Default "SysMain"
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\SysMain" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1
				rem value 3 Default "EnablePrefetcher" and "EnableSuperfetch"
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Memory Management\PrefetchParameters" /v "EnablePrefetcher" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\Session Manager\Memory Management\PrefetchParameters" /v "EnableSuperfetch" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\WMI\AutoLogger\AutoLogger-Diagtrack-Listener" /v "Start" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Control\WMI\AutoLogger\SQMLogger" /v "Start" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Diagnostics\DiagTrack" /f >nul 2>&1
				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\DiagTrack" /v "Start" /t REG_DWORD /d "4" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\AppHVSI" /v "AuditApplicationGuard" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\AppHVSI" /v "AllowAppHVSI" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\AppHVSI" /v "AllowAppHVSI_ProviderSet" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\AppHVSI" /v "AllowPersistence" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Biometrics" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\FVE" /v "ActiveDirectoryBackup" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\FVE" /v "OSEnablePrebootInputProtectorsOnSlates" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\FVE" /v "RequireActiveDirectoryBackup" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\FVE" /v "RDVConfigureBDE" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\FVE" /v "RDVAllowBDE" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\FVE" /v "RDVDisableBDE" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Messenger\Client" /v "PreventAutoRun" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Messenger\Client" /v "PreventRun" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\AppHost" /v "EnableWebContentEvaluation" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\AppHost" /v "EnableWebContentEvaluation" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Peernet" /v "Disabled" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\SQMClient\Windows" /v "CEIPEnable" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\System\DNSClient" /v "NV PrimaryDnsSuffix" /t REG_SZ /d "1.1.1.2" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\System\DNSClient" /v "PrimaryDnsSuffix" /t REG_SZ /d "1.1.1.2" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\System\DNSClient" /v "NV SecondaryDnsSuffix" /t REG_SZ /d "1.0.0.2" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\System\DNSClient" /v "SecondaryDnsSuffix" /t REG_SZ /d "1.0.0.2" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\TPM" /v "OSManagedAuthLevel" /t REG_DWORD /d "5" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\BITS" /v "DisableBranchCache" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\BITS" /v "DisablePeerCachingClient" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\BITS" /v "DisablePeerCachingServer" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\CredUI" /v "DisablePasswordReveal" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\CurrentVersion\Internet Settings" /v "CallLegacyWCMPolicies" /t REG_DWORD /d "0" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Installer" /v "DisablePatchUninstall" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Installer" /v "DisableRollback" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors" /v "DisableWindowsLocationProvider" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors" /v "DisableLocationScripting" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors" /v "DisableLocation" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\LocationAndSensors" /v "DisableSensors" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Maps" /v "AutoDownloadAndUpdateMapData" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Maps" /v "AllowUntriggeredNetworkTrafficOnSettingsPage" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Messaging" /v "AllowMessageSync" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Network Connections" /v "NC_PersonalFirewallConfig" /t REG_DWORD /d "0" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\NetworkConnectivityStatusIndicator" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\OneDrive" /v "DisableFileSyncNGSC" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\OneDrive" /v "DisableMeteredNetworkFileSync" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\OneDrive" /v "DisableFileSync" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\OneDrive" /v "DisableLibrariesDefaultSaveToOneDrive" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Personalization" /v "NoLockScreen" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Personalization" /v "NoLockScreenCamera" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\PreviewBuilds" /v "AllowBuildPreview" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\safer\codeidentifiers" /v "authenticodeenabled" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Server\InitialConfigurationTasks" /v "DoNotOpenAtLogon" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\SettingSync" /v "EnableBackupForWin8Apps" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\TabletPC" /v "PreventHandwritingDataSharing" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WcmSvc\Local" /v "WCMPresent" /t REG_DWORD /d "1" /f >nul 2>&1

				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\WorkplaceJoin" /ve /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows NT\CurrentVersion\Software Protection Platform" /v "NoGenTicket" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\WindowsMediaPlayer" /v "DisableAutoUpdate" /t REG_DWORD /d "1" /f >nul 2>&1
				rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\WindowsMediaPlayer" /v "PreventLibrarySharing" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Policies" /v "NtfsDisableEncryption" /t REG_DWORD /d "1" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v "EnableLUA" /t REG_DWORD /d "1" /f >nul 2>&1
				if /i "%ImageArchitecture%" neq "x86" reg.exe add "HKLM\TK_SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Policies\System" /v "EnableLUA" /t REG_DWORD /d "1" /f >nul 2>&1

				rem Fix Native "Run As Administrator" for BAT and CMD script files.
				reg.exe add "HKLM\TK_NTUSER\Software\Classes\batfile\shell\runas\command" /ve /t REG_EXPAND_SZ /d "\"%%SystemROOT%%\System32\cmd.exe\" /X /R for %%%%# in (\"%%1\") do (PushD \"%%%%~dp#\" && Start \"%%%%~nx#\" /I \"%%%%~f#\" %%*)" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Classes\batfile\shell\runas\command" /ve /t REG_EXPAND_SZ /d "\"%%SystemROOT%%\System32\cmd.exe\" /X /R for %%%%# in (\"%%1\") do (PushD \"%%%%~dp#\" && Start \"%%%%~nx#\" /I \"%%%%~f#\" %%*)" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\batfile\shell\runas\command" /ve /t REG_EXPAND_SZ /d "\"%%SystemROOT%%\System32\cmd.exe\" /X /R for %%%%# in (\"%%1\") do (PushD \"%%%%~dp#\" && Start \"%%%%~nx#\" /I \"%%%%~f#\" %%*)" /f >nul 2>&1
				reg.exe add "HKLM\TK_NTUSER\Software\Classes\cmdfile\shell\runas\command" /ve /t REG_EXPAND_SZ /d "\"%%SystemROOT%%\System32\cmd.exe\" /X /R for %%%%# in (\"%%1\") do (PushD \"%%%%~dp#\" && Start \"%%%%~nx#\" /I \"%%%%~f#\" %%*)" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Classes\cmdfile\shell\runas\command" /ve /t REG_EXPAND_SZ /d "\"%%SystemROOT%%\System32\cmd.exe\" /X /R for %%%%# in (\"%%1\") do (PushD \"%%%%~dp#\" && Start \"%%%%~nx#\" /I \"%%%%~f#\" %%*)" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\cmdfile\shell\runas\command" /ve /t REG_EXPAND_SZ /d "\"%%SystemROOT%%\System32\cmd.exe\" /X /R for %%%%# in (\"%%1\") do (PushD \"%%%%~dp#\" && Start \"%%%%~nx#\" /I \"%%%%~f#\" %%*)" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\PromptMenu" /v "Icon" /t REG_SZ /d "cmd.exe" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\PromptMenu" /v "ExtendedSubCommandsKey" /t REG_SZ /d "Directory\ContextMenus\PromptMenu" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\PromptMenu" /v "NoWorkingDirectory" /t REG_SZ /d "" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\PromptMenu" /v "Icon" /t REG_SZ /d "cmd.exe" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\PromptMenu" /v "ExtendedSubCommandsKey" /t REG_SZ /d "Directory\ContextMenus\PromptMenu" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\PromptMenu" /v "NoWorkingDirectory" /t REG_SZ /d "" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\PromptMenu" /v "Icon" /t REG_SZ /d "cmd.exe" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\PromptMenu" /v "ExtendedSubCommandsKey" /t REG_SZ /d "Directory\ContextMenus\PromptMenu" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\PromptMenu" /v "NoWorkingDirectory" /t REG_SZ /d "" /f >nul 2>&1

				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\open" /v "Icon" /t REG_SZ /d "cmd.exe" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\open\command" /ve /t REG_SZ /d "cmd.exe /s /k pushd \"%%V\"" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\RunAs" /v "Icon" /t REG_SZ /d "cmd.exe" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\RunAs" /v "HasLUAShield" /t REG_SZ /d "" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\runas\command" /ve /t REG_SZ /d "cmd.exe /s /k pushd \"%%V\"" /f >nul 2>&1

				if "%SelectedSourceOS%" neq "w11" (
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\RunAs" /v "Icon" /t REG_SZ /d "powershell.exe" /f >nul 2>&1

					if exist "%InstallMount%\%%i\Program Files (x86)\PowerShell\7\pwsh.exe" (
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\PowerShell7x86" /v "Icon" /t REG_SZ /d "\"%%ProgramFiles^(x86^)%%\PowerShell\7\pwsh.exe\"" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\PowerShell7x86\Command" /ve /t REG_SZ /d "\"C:\Program Files ^(x86^)\PowerShell\7\pwsh.exe\" -noExit -Command \"$host.UI.RawUI.WindowTitle = 'PowerShell 7 ^(x86^)'; if ^(^(Get-ExecutionPolicy^) -ne 'AllSigned'^) {Set-ExecutionPolicy -Scope Process RemoteSigned}; ^& '%%1'\"" /f >nul 2>&1
					)
				)
				if exist "%InstallMount%\%%i\Program Files\PowerShell\7\pwsh.exe" (
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\shell\PowerShell7x64" /v "Icon" /t REG_SZ /d "\"%%ProgramFiles%%\PowerShell\7\pwsh.exe\"" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\shell\PowerShell7x64\Command" /ve /t REG_SZ /d "\"C:\Program Files\PowerShell\7\pwsh.exe\" -noExit -Command \"$host.UI.RawUI.WindowTitle = 'PowerShell 7 ^(x64^)'; if ^(^(Get-ExecutionPolicy^) -ne 'AllSigned'^) {Set-ExecutionPolicy -Scope Process RemoteSigned}; ^& '%%1'\"" /f >nul 2>&1
				)

				if "!TweakWSL!" equ "1" (
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\WindowsSubsystem4Linux" /v "Icon" /t REG_SZ /d "wsl.exe" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\WindowsSubsystem4Linux" /v "ExtendedSubCommandsKey" /t REG_SZ /d "Directory\ContextMenus\WindowsSubsystem4Linux" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\WindowsSubsystem4Linux" /v "NoWorkingDirectory" /t REG_SZ /d "" /f >nul 2>&1

					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\WindowsSubsystem4Linux" /v "Icon" /t REG_SZ /d "wsl.exe" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\WindowsSubsystem4Linux" /v "ExtendedSubCommandsKey" /t REG_SZ /d "Directory\ContextMenus\WindowsSubsystem4Linux" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\WindowsSubsystem4Linux" /v "NoWorkingDirectory" /t REG_SZ /d "" /f >nul 2>&1

					reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\WindowsSubsystem4Linux" /v "Icon" /t REG_SZ /d "wsl.exe" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\WindowsSubsystem4Linux" /v "ExtendedSubCommandsKey" /t REG_SZ /d "Directory\ContextMenus\WindowsSubsystem4Linux" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\WindowsSubsystem4Linux" /v "NoWorkingDirectory" /t REG_SZ /d "" /f >nul 2>&1

					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\open" /v "Icon" /t REG_SZ /d "wsl.exe" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\open\command" /ve /t REG_SZ /d "wsl.exe --cd \"%%V\"" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\RunAs" /v "Icon" /t REG_SZ /d "wsl.exe" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\RunAs" /v "HasLUAShield" /t REG_SZ /d "" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\runas\command" /ve /t REG_SZ /d "wsl.exe --cd \"%%V\"" /f >nul 2>&1
				)

				if "!TweakLanguage!" equ "" (
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\PromptMenu" /v "MUIVerb" /t REG_SZ /d "Command &Prompt" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\PromptMenu" /v "MUIVerb" /t REG_SZ /d "Command &Prompt" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\PromptMenu" /v "MUIVerb" /t REG_SZ /d "Command &Prompt" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\open" /v "MUIVerb" /t REG_SZ /d "Open &here" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\RunAs" /v "MUIVerb" /t REG_SZ /d "Open here as &Administrator" /f >nul 2>&1

					if "%SelectedSourceOS%" neq "w11" (
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\runas\command" /ve /t REG_SZ /d "PowerShell.exe -noExit -Command \"$host.UI.RawUI.WindowTitle = 'Running PowerShell Script'; if ^(^(Get-ExecutionPolicy^) -ne 'AllSigned'^) {Set-ExecutionPolicy -Scope Process RemoteSigned}; ^& '%%1'\"" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\RunAs" /v "MUIVerb" /t REG_SZ /d "Run PowerShell &Script as Administrator" /f >nul 2>&1

						if exist "%InstallMount%\%%i\Program Files (x86)\PowerShell\7\pwsh.exe" reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\PowerShell7x86" /v "MUIVerb" /t REG_SZ /d "Run with Power&Shell 7 (x86)" /f >nul 2>&1
					)
					if exist "%InstallMount%\%%i\Program Files\PowerShell\7\pwsh.exe" reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\PowerShell7x64" /v "MUIVerb" /t REG_SZ /d "Run with &PowerShell 7 (x64)" /f >nul 2>&1

					if "!TweakWSL!" equ "1" (
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\WindowsSubsystem4Linux" /v "MUIVerb" /t REG_SZ /d "Windows Subsystem for &Linux" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\WindowsSubsystem4Linux" /v "MUIVerb" /t REG_SZ /d "Windows Subsystem for &Linux" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\WindowsSubsystem4Linux" /v "MUIVerb" /t REG_SZ /d "Windows Subsystem for &Linux" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\open" /v "MUIVerb" /t REG_SZ /d "Open &here" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\RunAs" /v "MUIVerb" /t REG_SZ /d "Open here as &Administrator" /f >nul 2>&1
					)
				) else (
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\PromptMenu" /v "MUIVerb" /t REG_SZ /d "&Prompt de Comando" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\PromptMenu" /v "MUIVerb" /t REG_SZ /d "&Prompt de Comando" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\PromptMenu" /v "MUIVerb" /t REG_SZ /d "&Prompt de Comando" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\open" /v "MUIVerb" /t REG_SZ /d "Abr&ir aqui" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PromptMenu\shell\RunAs" /v "MUIVerb" /t REG_SZ /d "Abrir aqui como &Administrador" /f >nul 2>&1

					if "%SelectedSourceOS%" neq "w11" (
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\runas\command" /ve /t REG_SZ /d "PowerShell.exe -noExit -Command \"$host.UI.RawUI.WindowTitle = 'Executando Script do PowerShell'; if ^(^(Get-ExecutionPolicy^) -ne 'AllSigned'^) {Set-ExecutionPolicy -Scope Process RemoteSigned}; ^& '%%1'\"" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\RunAs" /v "MUIVerb" /t REG_SZ /d "Executar &Script do PowerShell como Administrador" /f >nul 2>&1

						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PowerShell7x86\shell\openpwsh" /v "MUIVerb" /t REG_SZ /d "Abr&ir aqui" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PowerShell7x86\shell\RunAs" /v "MUIVerb" /t REG_SZ /d "Abrir aqui como &Administrador" /f >nul 2>&1
						if exist "%InstallMount%\%%i\Program Files (x86)\PowerShell\7\pwsh.exe" reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\Shell\PowerShell7x86" /v "MUIVerb" /t REG_SZ /d "Executar com o Power&Shell 7 (x86)" /f >nul 2>&1
					)
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PowerShell7x64\shell\openpwsh" /v "MUIVerb" /t REG_SZ /d "Abr&ir aqui" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\PowerShell7x64\shell\RunAs" /v "MUIVerb" /t REG_SZ /d "Abrir aqui como &Administrador" /f >nul 2>&1
					if exist "%InstallMount%\%%i\Program Files\PowerShell\7\pwsh.exe" reg.exe add "HKLM\TK_SOFTWARE\Classes\Microsoft.PowerShellScript.1\shell\PowerShell7x64" /v "MUIVerb" /t REG_SZ /d "Executar com o &PowerShell 7 (x64)" /f >nul 2>&1

					if "!TweakWSL!" equ "1" (
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\Background\shell\WindowsSubsystem4Linux" /v "MUIVerb" /t REG_SZ /d "Subsistema do Windows para &Linux" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\shell\WindowsSubsystem4Linux" /v "MUIVerb" /t REG_SZ /d "Subsistema do Windows para &Linux" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Drive\shell\WindowsSubsystem4Linux" /v "MUIVerb" /t REG_SZ /d "Subsistema do Windows para &Linux" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\open" /v "MUIVerb" /t REG_SZ /d "Abr&ir aqui" /f >nul 2>&1
						reg.exe add "HKLM\TK_SOFTWARE\Classes\Directory\ContextMenus\WindowsSubsystem4Linux\shell\RunAs" /v "MUIVerb" /t REG_SZ /d "Abrir aqui como &Administrador" /f >nul 2>&1
					)
				)
				rem PasswordNeverExpire - MaximumPasswordAge
				rem net accounts /MAXPWAGE:42
				rem net accounts /MAXPWAGE:0
				rem net accounts /MAXPWAGE:UNLIMITED
				if "%SelectedSourceOS%" equ "w7" (
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Network" /v "MaximumPasswordAge" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Network" /v "RequireStrongKey" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Network" /v "MaximumPasswordAge" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Network" /v "RequireStrongKey" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Network" /v "MaximumPasswordAge" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Network" /v "RequireStrongKey" /t REG_DWORD /d "0" /f >nul 2>&1
				)
				if "%SelectedSourceOS%" neq "w7" (
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v "PasswordExpiryWarning" /t REG_DWORD /d "5" /f >nul 2>&1
					reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\Netlogon\Parameters" /v "MaximumPasswordAge" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SYSTEM\ControlSet001\Services\Netlogon\Parameters" /v "RequireStrongKey" /t REG_DWORD /d "0" /f >nul 2>&1
				)
			)

			if "!T_HideCortanaIcon!" equ "+" (
				echo.
				echo.%txtHideTaskbarCortanaIcon%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowCortanaButton" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowCortanaButton" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowCortanaButton" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_HideMeetNowIcon!" equ "+" (
				echo.
				echo.%txtHideTaskbarMeetIcon%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "HideSCAMeetNow" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "HideSCAMeetNow" /t REG_DWORD /d "1" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" /v "HideSCAMeetNow" /t REG_DWORD /d "1" /f >nul 2>&1
			)

			if "!T_HideNewsAndInterests!" equ "+" (
				echo.
				echo.%txtHideTaskbarNewsIcon%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Feeds" /v "ShellFeedsTaskbarViewMode" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Feeds" /v "ShellFeedsTaskbarViewMode" /t REG_DWORD /d "2" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Feeds" /v "EnableFeeds" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			if "!T_HideTaskbarSearchbox!" equ "+" (
				echo.
				echo.%txtHideTaskbarSearchbox%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Search" /v "SearchboxTaskbarMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Search" /v "SearchboxTaskbarMode" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Search" /v "SearchboxTaskbarMode" /t REG_DWORD /d "0" /f >nul 2>&1
				rem "This command will restore the classic search bar without disabling UAC. Maybe fix it after removing Cortana.
				reg.exe add "HKLM\TK_NTUSER\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /ve /t REG_SZ /d "{64bc32b5-4eec-4de7-972d-bd8bd0324537}" /f >nul 2>&1
				rem To restore:
				rem reg.exe delete "HKLM\TK_NTUSER\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1
				rem reg.exe delete "HKLM\TK_DEFAULT\Software\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1
				rem reg.exe delete "HKLM\TK_SOFTWARE\Classes\CLSID\{1d64637d-31e9-4b06-9124-e83fb178ac6e}\TreatAs" /f >nul 2>&1
			)

			if "!T_HideTaskViewIcon!" equ "+" (
				echo.
				echo.%txtHideTaskbarTaskViewIcon%
				reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTaskViewButton" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTaskViewButton" /t REG_DWORD /d "0" /f >nul 2>&1
				reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "ShowTaskViewButton" /t REG_DWORD /d "0" /f >nul 2>&1
			)

			rem reg.exe add "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\Explorer" /v "HideRecentlyAddedApps" /t REG_DWORD /d "1" /f >nul 2>&1
			rem reg.exe add "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\Explorer" /v "HideRecentlyAddedApps" /t REG_DWORD /d "1" /f >nul 2>&1
			rem reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "HideRecentlyAddedApps" /t REG_DWORD /d "1" /f >nul 2>&1
			rem rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\default\Start\HideRecentlyAddedApps" /v "policytype" /t REG_DWORD /d "4" /f >nul 2>&1
			rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\default\Start\HideRecentlyAddedApps" /v "policytype" /t REG_DWORD /d "0" /f >nul 2>&1
			rem rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\default\Start\HideRecentlyAddedApps" /v "value" /t REG_DWORD /d "0" /f >nul 2>&1
			rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\PolicyManager\default\Start\HideRecentlyAddedApps" /v "value" /t REG_DWORD /d "1" /f >nul 2>&1

			if "%SelectedSourceOS%" equ "w11" (
				reg.exe delete "HKLM\TK_NTUSER\Software\Policies\Microsoft\Windows\Explorer" /v "DisableNotificationCenter" /f >nul 2>&1
				reg.exe delete "HKLM\TK_DEFAULT\Software\Policies\Microsoft\Windows\Explorer" /v "DisableNotificationCenter" /f >nul 2>&1
				reg.exe delete "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Explorer" /v "DisableNotificationCenter" /f >nul 2>&1

				rem reg.exe delete "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\IrisService" /f >nul 2>&1
				rem reg.exe delete "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\IrisService" /f >nul 2>&1

				if "!T_BypassReq!" equ "+" (
					rem reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "AllowFailedSystemChecks" /t REG_DWORD /d "1" /f >nul 2>&1
					rem reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassGPUCheck" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassCPUCheck" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassRAMCheck" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassSecureBootCheck" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassStorageCheck" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SYSTEM\Setup\LabConfig" /v "BypassTPMCheck" /t REG_DWORD /d "1" /f >nul 2>&1

					reg.exe add "HKLM\TK_SYSTEM\Setup\MoSetup" /v "AllowUpgradesWithUnsupportedTPMOrCPU" /t REG_DWORD /d "1" /f >nul 2>&1

					rem Disable New Watermark Message: "System requirements not met. Go to Settings to learn more."
					rem Default REG_DWORD value is "1"
					reg.exe add "HKLM\TK_NTUSER\Control Panel\UnsupportedHardwareNotificationCache" /v "SV1" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Control Panel\UnsupportedHardwareNotificationCache" /v "SV2" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Control Panel\UnsupportedHardwareNotificationCache" /v "SV1" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Control Panel\UnsupportedHardwareNotificationCache" /v "SV2" /t REG_DWORD /d "0" /f >nul 2>&1
				)

				if "!T_EnableClassicContextMenu!" equ "+" (
					echo.
					echo.%txtEnableClassicContext%
					reg.exe delete "HKLM\TK_NTUSER\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /f >nul 2>&1
					reg.exe delete "HKLM\TK_DEFAULT\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /f >nul 2>&1
					reg.exe delete "HKLM\TK_SOFTWARE\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /f >nul 2>&1
					reg.exe add "HKLM\TK_NTUSER\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /ve /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /ve /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /ve /f >nul 2>&1
				)

				if "!T_EnableLocalAccount!" equ "+" (
					echo.
					echo.%txtEnableLocalAccount%
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\OOBE" /v "BypassNRO" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\OOBE" /v "BypassNRO" /t REG_DWORD /d "1" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\OOBE" /v "BypassNRO" /t REG_DWORD /d "1" /f >nul 2>&1
				)

				if "!T_HideChatIcon!" equ "+" (
					echo.
					echo.%txtHideTaskbarChatIcon%
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarMn" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarMn" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarMn" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Policies\Microsoft\Windows\Windows Chat" /v "ChatIcon" /t REG_DWORD /d "3" /f >nul 2>&1
					:: Prevent Teams Chat Store Daily PopUps
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\Microsoft.WindowsStore_8wekyb3d8bbwe!App" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\Microsoft.WindowsStore_8wekyb3d8bbwe!App" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Notifications\Settings\Microsoft.WindowsStore_8wekyb3d8bbwe!App" /v "Enabled" /t REG_DWORD /d "0" /f >nul 2>&1
				)

				if "!T_HideWidgetsIcon!" equ "+" (
					echo.
					echo.%txtHideTaskbarWidgetIcon%
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarDa" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarDa" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarDa" /t REG_DWORD /d "0" /f >nul 2>&1
				)

				if "!T_TaskbarAlignment_Center2Left!" equ "+" (
					echo.
					echo.%txtSetWindows11TaskbarAlig%
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAl" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarAl" /t REG_DWORD /d "0" /f >nul 2>&1
					rem echo.##### Restore Windows 10 Taskbar #####
					rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Shell\Update\Packages" /v "UndockingDisabled" /t REG_DWORD /d "1" /f >nul 2>&1
				)

				if "!T_TaskbarSize!" equ "+" (
					echo.
					echo.%txtSetWindows11TaskbarMin%
					rem 0 means a smaller size.
					rem 1 means a default size.
					rem 2 means a larger size.
					reg.exe add "HKLM\TK_NTUSER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSi" /t REG_DWORD /d "0" /f >nul 2>&1
					reg.exe add "HKLM\TK_DEFAULT\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "TaskbarSi" /t REG_DWORD /d "0" /f >nul 2>&1
					rem echo.##### Restore Windows 10 Taskbar #####
					rem reg.exe add "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Shell\Update\Packages" /v "UndockingDisabled" /t REG_DWORD /d "1" /f >nul 2>&1
				)
			)

			echo.
			echo.%GlobalUnMountingImageRegistry%
			call :UnMountImageRegistry

			set TweakWSL=
		)
	)

	call :RemoveFolder "%_TMP%\CustomRegistry"

	echo.
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%Globalfinishappltw%
	echo.-------------------------------------------------------------------------------
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		echo.
		pause
	)
)
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Setup Complete by the Start Menu Startup Resource
::-------------------------------------------------------------------------------------------
if "!T_StartMenu_SetupComplete!" equ "+" (
	cls
	echo.===============================================================================
	echo.%txtAlternative2SetupComplete%
	echo.===============================================================================
	echo.
	echo.    %GlobalImage% install.wim
	echo.    %GlobalImageIndex% !ImageIndexNo!
	echo.    %GlobalImageArchitecture% %ImageArchitecture%
	echo.    %GlobalImageVersion% %ImageVersion%.%ImageServicePackBuild%.%ImageServicePackLevel%
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtStartAddingScript%
	echo.-------------------------------------------------------------------------------

	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			call :DisplayIndexNumberEdition %%i, "!ImageEdition%%i!"
			set "StartupFolder=%InstallMount%\%%i\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup"
			call :CreateFolder "!StartupFolder!"
			call :RemoveFile "!StartupFolder!\RemoveEdgeShortcuts.cmd"
			if exist "%Custom%\StartMenu_SetupComplete.cmd" (
				echo.
				echo.%txtAddingScript2Start%
				copy /Y "%Custom%\StartMenu_SetupComplete.cmd" "!StartupFolder!\StartMenu_SetupComplete.cmd" >nul
			)
		)
	)

	echo.
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtFinishedAddingScript%
	echo.-------------------------------------------------------------------------------
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
)
::-------------------------------------------------------------------------------------------

echo.
echo.
echo.-------------------------------------------------------------------------------
echo.%Globalfinishappltw%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

endlocal

:: Resetting All Flags Status
call :EnvironmentVariables

if "!Allowed!" equ "I" set "Finished=Tweaks"

:: Returning to Apply Tweaks Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Cleanup Source Images
::-------------------------------------------------------------------------------------------
:CleanupSource

if "%SelectedSourceOS%" equ "w81" set "CleanupSources=Enabled"
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%ImageBuild%" leq "17763" set "CleanupSources=Enabled"
	if "%ImageBuild%" gtr "17763" (
		if "!Bypass!" equ "O" if "%IsDialogsEnabled%" equ "Yes" if "!CleanupSources!" equ "" if "!CleanupSources_Warning!" equ "" (
			cls
			echo.
			echo.===============================================================================
			echo.%GlomalCleanupSourceImagesComponentCleanupResetBase%
			echo.===============================================================================
			echo.
			echo.                                %GlobalWARNING%
			echo.                                =============
			echo.
			echo. %txtCleanupSourceImagesComponentResetBaseline1%
			echo. %txtCleanupSourceImagesComponentResetBaseline2%
			echo. %txtCleanupSourceImagesComponentResetBaseline3%
			echo. %txtCleanupSourceImagesComponentResetBaseline4%
			echo.
			echo. forums.mydigitallife.net/threads/msmg-toolkit.50572/page-1114#post-1726900
			echo.
			echo.
			echo. %txtCleanupSourceImagesComponentResetBaseline5%
			echo. %txtCleanupSourceImagesComponentResetBaseline6%
			echo.
			echo. forums.mydigitallife.net/threads/msmg-toolkit.50572/page-1114#post-1726897
			echo.
			echo.
			echo.===============================================================================
			echo.
			choice /C:YN /N /M "%txtDoyouWant2CleanupSourceImages% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
			if errorlevel 2 goto :Stop
			if errorlevel 1 (
				set "CleanupSources_Warning=0"
				set "CleanupSources=Enabled"
			)
		)
	)
)

if "!CleanupSources!" equ "Enabled" (
	cls

	if "%SelectedSourceOS%" equ "w7" set "ComponentCleanup=/SPSuperseded /HideSP"
	if "%SelectedSourceOS%" neq "w7" (
		if "%SelectedSourceOS%" equ "w81" set "ComponentCleanup=/StartComponentCleanup /ResetBase"
		if "%SelectedSourceOS%" neq "w81" (
			if "%ImageBuild%" leq "17763" set "ComponentCleanup=/StartComponentCleanup /ResetBase"
			if "%ImageBuild%" gtr "17763" set "ComponentCleanup=/StartComponentCleanup"
		)
	)

	echo.===============================================================================
	echo.%GlomalCleanupSourceImagesComponentCleanupResetBase%
	echo.===============================================================================
	echo.
	:: Unmount Image Registry if Mounted
	call :UnMountImageRegistry
	echo.-------------------------------------------------------------------------------
	echo.%txtStartingCleaningSourceImagesComponentCleanupResetBase%
	echo.-------------------------------------------------------------------------------
	echo.
	if "%IsBootImageSelected%" equ "Yes" (
		:: Performing [boot.wim, Index : 1 and 2] Image Component Cleanup with ResetBase Option
		for /l %%i in (1, 1, 2) do (
			echo.-------------------------------------------------------------------------------
			echo.%GlobalPerformingBootImageComponentCleanuppos1% %%i] %GlobalPerformingBootImageComponentCleanuppos2%
			echo.-------------------------------------------------------------------------------
			call :CleanupImage "%BootMount%\%%i", "/StartComponentCleanup /ResetBase"
		)
	)

	if "%IsRecoveryImageSelected%" equ "Yes" if exist "%WinReMount%\Windows" (
		:: Performing [WinRE.wim] Image Component Cleanup with ResetBase Option
		echo.-------------------------------------------------------------------------------
		echo.%txtPerformingInstallWIM% !SpecifiedSourceIndex! -^> WinRE.wim] %GlobalPerformingBootImageComponentCleanuppos2%
		echo.-------------------------------------------------------------------------------
		call :CleanupImage "%WinReMount%", "/StartComponentCleanup /ResetBase"
	)

	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			:: Performing [install.wim] Image Component Clean-Up with ResetBase Option
			echo.-------------------------------------------------------------------------------
			echo.%txtPerformingInstallWIM% %%i] %GlobalPerformingBootImageComponentCleanuppos2%
			echo.-------------------------------------------------------------------------------
			if exist "%InstallMount%\%%i\Windows\WinSxS\pending.xml" (
				echo.
				echo.%txtCannotPerformImageComponentCleanupPending%
				echo.
			) else (
				call :CleanupImage "%InstallMount%\%%i", "!ComponentCleanup!"
			)
		)
	)

	echo.-------------------------------------------------------------------------------
	echo.%txtFinishedCleaningSourceImagesComponentCleanupResetBase%
	echo.-------------------------------------------------------------------------------
)

:Stop
echo.
echo.===============================================================================
echo.

set CleanupSources=
set ComponentCleanup=

if "!Bypass!" equ "I" if "!CleanupSources_Warning!" equ "" (
	goto :EOF
)

if "!Allowed!" equ "I" (
	echo.
) else (
	if "!CleanupSources_Warning!" neq "" pause
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Apply, Save and Optimize Changes to the Source Images
::-------------------------------------------------------------------------------------------
:SaveSource

setlocal

set "RemoveWinPE=No"

cls
echo.===============================================================================
echo.%txtApplySaveChanges2SourceImages01%
echo.===============================================================================
echo.
:: Unmount Image Registry if Mounted
echo.%GlobalUnMountingImageRegistry%
call :UnMountImageRegistry
echo.
echo.-------------------------------------------------------------------------------
echo.%txtApplySaveChanges2SourceImages02%
echo.-------------------------------------------------------------------------------
echo.

if "!Bypass!" equ "O" (
	choice /C:NY /N /M "%txtApplySaveChanges2SourceImages03% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 set "Cleaning=Enabled"
)

if "!Cleaning!" equ "Enabled" (
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtApplySaveChanges2SourceImages04%
	echo.-------------------------------------------------------------------------------
	echo.
	echo.%txtApplySaveChanges2SourceImages05%

	:: Performing [boot.wim, Index : 1 and 2] Image Windows folder cleanup
	if "%IsBootImageSelected%" equ "Yes" (
		for /l %%i in (1, 1, 2) do (
			if exist "%BootMount%\%%i\Windows\CbsTemp\*.*" (
				for /f %%f in ('dir /B /AD /OG "%BootMount%\%%i\Windows\CbsTemp\*.*" 2^>nul') do (
					call :RemoveFolder "%%~f"
				)
			)
			for %%f in (
				"%WinReMount%\Windows\CbsTemp\*.*"
				"%WinReMount%\Windows\WinSxS\Temp\TransformerRollbackData\*.*"
			) do (
				call :RemoveFile "%%f", /S
			)

			for %%f in (
				"%BootMount%\%%i\Users\Default\*.LOG1"
				"%BootMount%\%%i\Users\Default\*.LOG2"
				"%BootMount%\%%i\Users\Default\*.TM.blf"
				"%BootMount%\%%i\Users\Default\*.regtrans-ms"
				"%BootMount%\%%i\Windows\inf\*.log"
				"%BootMount%\%%i\Windows\System32\config\*.LOG1"
				"%BootMount%\%%i\Windows\System32\config\*.LOG2"
				"%BootMount%\%%i\Windows\System32\config\*.TM.blf"
				"%BootMount%\%%i\Windows\System32\config\*.regtrans-ms"
				"%BootMount%\%%i\Windows\System32\SMI\Store\Machine\*.LOG1"
				"%BootMount%\%%i\Windows\System32\SMI\Store\Machine\*.LOG2"
				"%BootMount%\%%i\Windows\System32\SMI\Store\Machine\*.TM.blf"
				"%BootMount%\%%i\Windows\System32\SMI\Store\Machine\*.regtrans-ms"
				"%BootMount%\%%i\Windows\WinSxS\Backup\*.*"
				"%BootMount%\%%i\Windows\WinSxS\ManifestCache\*.bin"
				"%BootMount%\%%i\Windows\WinSxS\Temp\PendingDeletes\*.*"
			) do (
				call :RemoveFile "%%f"
			)
		)
	)

	:: Performing [WinRE.wim, Index : !SpecifiedSourceIndex!] Image Windows folder cleanup
	if "%IsRecoveryImageSelected%" equ "Yes" (
		if exist "%WinReMount%\Windows\CbsTemp\*.*" (
			for /f %%f in ('dir /B /AD /OG "%WinReMount%\Windows\CbsTemp\*.*" 2^>nul') do (
				call :RemoveFolder "%%~f"
			)
		)
		for %%f in (
			"%WinReMount%\Windows\CbsTemp\*.*"
			"%WinReMount%\Windows\WinSxS\Temp\TransformerRollbackData\*.*"
		) do (
			call :RemoveFile "%%f", /S
		)

		for %%f in (
			"%WinReMount%\Users\Default\*.LOG1"
			"%WinReMount%\Users\Default\*.LOG2"
			"%WinReMount%\Users\Default\*.TM.blf"
			"%WinReMount%\Users\Default\*.regtrans-ms"
			"%WinReMount%\Windows\inf\*.log"
			"%WinReMount%\Windows\System32\config\*.LOG1"
			"%WinReMount%\Windows\System32\config\*.LOG2"
			"%WinReMount%\Windows\System32\config\*.TM.blf"
			"%WinReMount%\Windows\System32\config\*.regtrans-ms"
			"%WinReMount%\Windows\System32\SMI\Store\Machine\*.LOG1"
			"%WinReMount%\Windows\System32\SMI\Store\Machine\*.LOG2"
			"%WinReMount%\Windows\System32\SMI\Store\Machine\*.TM.blf"
			"%WinReMount%\Windows\System32\SMI\Store\Machine\*.regtrans-ms"
			"%WinReMount%\Windows\WinSxS\Backup\*.*"
			"%WinReMount%\Windows\WinSxS\ManifestCache\*.bin"
			"%WinReMount%\Windows\WinSxS\Temp\PendingDeletes\*.*"
		) do (
			call :RemoveFile "%%f"
		)
	)

	:: Performing [install.wim] Image Windows folder cleanup
	for %%i in (!ImageIndexNo!) do (
		if exist "%InstallMount%\%%i\" (
			for %%f in (
				"%InstallMount%\%%i\$RECYCLE.BIN"
				"%InstallMount%\%%i\PerfLogs"
			) do (
				call :RemoveFolder "%%~f"
			)

			if exist "%InstallMount%\%%i\Windows\CbsTemp\*.*" (
				for /f %%f in ('dir /B /AD /OG "%InstallMount%\%%i\Windows\CbsTemp\*.*" 2^>nul') do (
					call :RemoveFolder "%%~f"
				)
			)
			for %%f in (
				"%WinReMount%\Windows\CbsTemp\*.*"
				"%WinReMount%\Windows\WinSxS\Temp\TransformerRollbackData\*.*"
			) do (
				call :RemoveFile "%%f", /S
			)

			for %%f in (
				"%InstallMount%\%%i\Users\Default\*.LOG1"
				"%InstallMount%\%%i\Users\Default\*.LOG2"
				"%InstallMount%\%%i\Users\Default\*.TM.blf"
				"%InstallMount%\%%i\Users\Default\*.regtrans-ms"
				"%InstallMount%\%%i\Windows\inf\*.log"
				"%InstallMount%\%%i\Windows\System32\config\*.LOG1"
				"%InstallMount%\%%i\Windows\System32\config\*.LOG2"
				"%InstallMount%\%%i\Windows\System32\config\*.TM.blf"
				"%InstallMount%\%%i\Windows\System32\config\*.regtrans-ms"
				"%InstallMount%\%%i\Windows\System32\SMI\Store\Machine\*.LOG1"
				"%InstallMount%\%%i\Windows\System32\SMI\Store\Machine\*.LOG2"
				"%InstallMount%\%%i\Windows\System32\SMI\Store\Machine\*.TM.blf"
				"%InstallMount%\%%i\Windows\System32\SMI\Store\Machine\*.regtrans-ms"
				"%InstallMount%\%%i\Windows\WinSxS\Backup\*.*"
				"%InstallMount%\%%i\Windows\WinSxS\ManifestCache\*.bin"
				"%InstallMount%\%%i\Windows\WinSxS\Temp\PendingDeletes\*.*"
			) do (
				call :RemoveFile "%%f"
			)
		)
	)
	echo.
	echo.%txtApplySaveChanges2SourceImages06%
	echo.
)

:: Saving & Un-Mounting Source Boot Images
if "%IsBootImageSelected%" equ "Yes" (
	for /l %%i in (1, 1, 2) do (
		if exist "%BootMount%\%%i\" (
			if "!RemoveWinPE!" equ "Yes" (
				call :RemoveFolder "%BootMount%\%%i\Setup\WinPE"
			)
			echo.-------------------------------------------------------------------------------
			echo.%txtApplyingChangesUnMounting% %%i] %GlobalWIMImage%
			echo.-------------------------------------------------------------------------------
			call :UnMountImage "%BootMount%\%%i", "Commit"
			call :RemoveFolder "%BootMount%\%%i"
		)
	)
)

:: Optimizing Source Boot Image with Maximum Compression.
echo.-------------------------------------------------------------------------------
echo.%txtApplySaveChanges2SourceImages08%
echo.-------------------------------------------------------------------------------
rem call :ExportImage "%BootWim%", "%_TMP%\boot.wim", "WIM", "No"
echo.
"%WimlibImagex%" optimize "%BootWim%"
echo.
rem "%WimlibImagex%" export "%BootWim%" all "%_TMP%\boot.wim" --compress=LZX --boot
rem if exist "%_TMP%\boot.wim" move /y "%_TMP%\boot.wim" "%BootWim%" >nul

:: Saving & Un-Mounting Source Recovery Images
if exist "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%" (
	if "%IsRecoveryImageSelected%" equ "Yes" (
		if "!RemoveWinPE!" equ "Yes" (
			call :RemoveFolder "%WinReMount%\Setup\WinPE"
		)
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%GlobalUnMountingImage% !SpecifiedSourceIndex! -^> %txtApplySaveChanges2SourceImages09pos02%
		echo.-------------------------------------------------------------------------------
		call :UnMountImage "%WinReMount%", "Commit"
		call :RemoveFolder "%WinReMount%"
	)

	:: Optimizing Source Recovery Image with Maximum Compression.
	echo.-------------------------------------------------------------------------------
	echo.%txtApplySaveChanges2SourceImages14pos01% !SpecifiedSourceIndex! -^> %txtApplySaveChanges2SourceImages14pos02%
	echo.-------------------------------------------------------------------------------
	call :RemoveFile "%_TMP%\winre.wim"
	rem call :ExportImage "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%", "%_TMP%\winre.wim", "WIM", "No"
	echo.
	"%WimlibImagex%" optimize "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%"
	echo.
	copy /Y "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%" "%_TMP%\winre.wim" >nul
	rem "%WimlibImagex%" export "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%" all "%_TMP%\winre.wim" --compress=LZX --boot
	rem "%WimlibImagex%" export "%InstallMount%\!SpecifiedSourceIndex!\%WinReWim%" all "%_TMP%\winre.wim" --compress=LZX
)
echo.

:: Saving & Un-Mounting Source Install & Recovery Images
for %%i in (!ImageIndexNo!) do (
	if exist "%InstallMount%\%%i\" (
		:: Copying Optimized Source Recovery Image to all install.wim Indexes.
		if exist "%_TMP%\winre.wim" (
			echo.-------------------------------------------------------------------------------
			echo.%txtApplySaveChanges2SourceImages10pos01% %%i] %GlobalWIMImage%
			echo.-------------------------------------------------------------------------------
			rem copy /Y "%_TMP%\winre.wim" "%InstallMount%\%%i\Windows\System32\Recovery" >nul
			copy /Y "%_TMP%\winre.wim" "%InstallMount%\%%i\%WinReWim%" >nul
		)

		echo.-------------------------------------------------------------------------------
		echo.%GlobalApplyChangesUnMouting% %%i 
		echo.					%GlobalEdition% : !ImageEdition%%i!] %GlobalWIMImage%
		echo.-------------------------------------------------------------------------------
		call :UnMountImage "%InstallMount%\%%i", "Commit"
		call :RemoveFolder "%InstallMount%\%%i"
	)
)
call :RemoveFile "%_TMP%\winre.wim"

if "!VirtualCreate_ImageIndexEditions!" equ "Disabled" (
	:: Deal with EI.cfg file
	call :EIcfg

	:: Optimizing Source Install Image with Maximum Compression.
	if "!TrimEditions!" equ "Enabled" if !ChosenCount! lss !ImageCount! (
		call :ExportRearrangingImageIndexes
	)
	if "!TrimEditions!" equ "Disabled" (
		if /i "!ChosenSource!" equ "A" (
			call :ExportOptimizingInstallImage
		)
		if /i "!ChosenSource!" neq "A" (
			if !ImageCount! equ 1 (
				call :ExportOptimizingInstallImage
			)
			if !ImageCount! gtr 1 (
				if !ChosenCount! lss !ImageCount! (
					call :ExportOptimizingInstallImage
				)
				if !ChosenCount! equ !ImageCount! (
					call :ExportRearrangingImageIndexes
				)
			)
		)
	)
	:: Deleting Source "install.wim" Image File
	if "!ImageFormat!" equ "ESD" if exist "%InstallEsd%" call :RemoveFile "%InstallWim%"

	:: Display the list of avaialble Image Indexes.
	set "ImageIndexNo=1"
	for /l %%i in (2 1 !ImageCount!) do set "ImageIndexNo=!ImageIndexNo!;%%i"
	:: Display Image Information
	call :ShowImageInfo

	:: Getting ^<Install Media^> Source Image File Name
	if "!InstallMedia_ImageFolderPath!" equ "" call :GettingInstallMediaSource_ImageFileName
	if "!InstallMediaSource_ImageFileName!" equ "" call :GettingInstallMediaSource_ImageFileName
	if "!InstallMedia_ImageFileName!" equ "" call :InstallMedia_ImageFileName
	if "!InstallMedia_ImageFileName!" neq "" set "NewInstallMediaFileName=!InstallMedia_ImageFileName!.iso"

	call :GenerateISO

	goto :Stop
)
if "!VirtualCreate_ImageIndexEditions!" equ "Enabled" (
	if !ImageCount! gtr 1 if !ChosenCount! lss !ImageCount! (
		call :ImageIndexDeletion
	)
)

:VirtualCreate_ImageIndexEditions

:: Prepare things for abbodi1406 - Virtual Create Image Index Editions Use
set "VirtualCreate_ImageIndexEditionsPath=%SystemDRIVE%\VirtualCreate_ImageIndexEditions"
set "VirtualCreate_ImageIndexEditionsScript=!VirtualCreate_ImageIndexEditionsPath!\VirtualCreate_ImageIndexEditions"
set "Methods=vAutoStart;vDeleteSource;vPreserve;vwim2esd;vSkipISO"
set "vEditions=ProfessionalWorkstation;ProfessionalWorkstationN;ProfessionalEducation;ProfessionalEducationN;Enterprise;EnterpriseN;Education;EducationN;ServerRdsh;IoTEnterprise;IoTEnterpriseS;CloudEdition;CloudEditionN;CoreSingleLanguage"

set ChosenVirtualEditions=

set NewInstallMediaFilefromVirtualCreateNamePath=
set NewInstallMediaFilefromVirtualCreate=

for %%# in (!Methods!) do (
	if "%%#" equ "vAutoStart" (
		set "%%#=+"
	)
	if "%IsSourceSelected%" equ "No" (
		if "%%#" equ "vSkipISO" (
			set "%%#=-"
		)
	)
	if "%IsSourceSelected%" equ "Yes" (
		if "%%#" equ "vSkipISO" (
			set "%%#=+"
		)
	)
	if "%%#" neq "vAutoStart" if "%%#" neq "vSkipISO" (
		set "%%#=-"
	)
)

if exist "!VirtualCreate_ImageIndexEditionsPath!\*.iso" (
	call :MoveVirtualCreated_InstallMediaImageFile
)
call :CheckingVirtualCreated_InstallMediaFolder
call :RemoveFolder "!VirtualCreate_ImageIndexEditionsPath!\!VirtualCreated_InstallMedia!" >nul

if exist "%~dp0VirtualCreate_ImageIndexEditions.zip" (
	"%Zip%" x -y "%~dp0VirtualCreate_ImageIndexEditions.zip" -o"!VirtualCreate_ImageIndexEditionsPath!" >nul
)

call :RemoveFolder "!VirtualCreate_ImageIndexEditionsPath!\InstallMedia" >nul

echo.
echo.%txtCopyingToolkitCustomized%
echo.%GlobalFrom% ^<!InstallMedia!^>
echo.%GlobalTo% ^<!VirtualCreate_ImageIndexEditionsPath!\InstallMedia^> #####
%XCopy% "!InstallMedia!\*.*" "!VirtualCreate_ImageIndexEditionsPath!\InstallMedia" >nul
echo.
echo.%GlobalCopyingFinished%

if "!AssignChosenVirtualEditions!" equ "1" goto :AssignChosenVirtualEditions

:EditionsCreationMethodMenu
cls
echo.===============================================================================
echo.%txtabbodi1406EditionsCreation%
echo.===============================================================================
echo. [1] ^(!vAutoStart!^)vAutoStart
if "!vAutoStart!" equ "-" (
	echo.        %txtvAutoStartline1%
	echo.   "!VirtualCreate_ImageIndexEditionsScript!.cmd"
	echo.        %txtvAutoStartline2%
) else (
	echo.        %txtvAutoStartline3%
	echo.        %txtvAutoStartline4%
)
echo.
echo. [2] ^(!vDeleteSource!^)vDeleteSource
if "!vDeleteSource!" equ "+" (
	echo.        %txtvDeleteSourceline1%
	echo.       %txtvDeleteSourceline2%
)
echo.
echo. [3] ^(!vPreserve!^)vPreserve
if "!vPreserve!" equ "+" (
	echo.        %txtvPreserveline1%
) else (
	echo.        %txtvPreserveline2%
	echo.        %txtvPreserveline3%
	echo.              %txtvPreserveline4%
)
echo.
echo. [4] ^(!vwim2esd!^)vwim2esd
if "!vwim2esd!" equ "+" (
	echo.        %txtvwim2esdline1%
)
echo.
echo. [5] ^(!vSkipISO!^)vSkipISO
if "!vSkipISO!" equ "+" (
	echo.        %txtvSkipISOline1%
) else (
	echo.        %txtvSkipISOline2%
)
echo.
echo. [C] %txtChooseNeededImage%
echo.
echo.===============================================================================
echo.
choice /C:12345CP /N /M "%GlobalEnterChoice% "
if errorlevel 7 (
	for %%e in (
		ProfessionalWorkstation
		ProfessionalWorkstationN
		ProfessionalEducationN
		ProfessionalEducation
		Enterprise
		EnterpriseN
		ServerRdsh
		EducationN
		Education
		IoTEnterprise
		IoTEnterpriseS
		CloudEdition
		CloudEditionN
		CoreSingleLanguage
	) do (
		set "VE_%%e=+"
	)
	goto :AssignChosenVirtualEditions
)
if errorlevel 6 (
	if "!vAutoStart!" equ "+" (
		goto :ChooseEditionsMenu
	) else (
		goto :AssignChosenVirtualEditions
	)
)
if errorlevel 5 (
	if "!vSkipISO!" equ "-" (
		set "vSkipISO=+"
	) else (
		set "vSkipISO=-"
	)
)
if errorlevel 4 (
	if "!vwim2esd!" equ "-" (
		set "vwim2esd=+"
	) else (
		set "vwim2esd=-"
	)
)
if errorlevel 3 (
	if "!vPreserve!" equ "-" (
		set "vPreserve=+"
	) else (
		set "vPreserve=-"
	)
)
if errorlevel 2 (
	if "!vDeleteSource!" equ "-" (
		set "vDeleteSource=+"
	) else (
		set "vDeleteSource=-"
	)
)
if errorlevel 1 (
	if "!vAutoStart!" equ "+" (
		set "vAutoStart=-"
	) else (
		set "vAutoStart=+"
	)
)
goto :EditionsCreationMethodMenu

:ChooseEditionsMenu
cls
echo.===============================================================================
echo.%txtChooseEditionsMenu%
echo.===============================================================================
echo. [1] ^(!VE_ProfessionalWorkstation!^)%txt1Pro4Workstations%
echo. [2] ^(!VE_ProfessionalEducation!^)%txt2ProEducation%
echo. [3] ^(!VE_Enterprise!^)%txt3Enterprise%
echo. [4] ^(!VE_ServerRdsh!^)%txt4EnterpriseMulti%
echo. [5] ^(!VE_Education!^)%txt5Education%
echo. [6] ^(!VE_IoTEnterprise!^)%txt6IoTEnterprise%
echo. [7] ^(!VE_IoTEnterpriseS!^)%txt7IoTEnterpriseLTSC%
echo. [8] ^(!VE_CloudEdition!^)%txt8Cloud%
echo. [9] ^(!VE_CoreSingleLanguage!^)%txt9Home%
echo.
echo. %txtNoteYouCanLeaveAllline1%
echo.       %txtNoteYouCanLeaveAllline2%
echo.
echo.
echo. [S] %GlobalOption_SelectAll% ^| [R] %GlobalOption_Revert2Default%
echo. [C] %txtStartVirtualCreate%
echo.
echo.
echo. [X] %GlobalGoBack2MainMenu%
echo.
echo.===============================================================================
echo.
choice /C:123456789SRCXP /N /M "%GlobalEnterChoice% "
if errorlevel 14 (
	for %%e in (
		ProfessionalWorkstation
		ProfessionalWorkstationN
		ProfessionalEducationN
		ProfessionalEducation
		Enterprise
		EnterpriseN
		ServerRdsh
		EducationN
		Education
		IoTEnterprise
		IoTEnterpriseS
		CloudEdition
		CloudEditionN
		CoreSingleLanguage
	) do (
		set "VE_%%e=+"
	)
)
if errorlevel 13 goto :Stop
if errorlevel 12 (
	goto :AssignChosenVirtualEditions
)
if errorlevel 11 (
	for %%e in (!vEditions!) do (
		set "VE_%%e=-"
	)
)
if errorlevel 10 (
	for %%e in (!vEditions!) do (
		set "VE_%%e=+"
	)
)
if errorlevel 9 (
	if "!VE_CoreSingleLanguage!" equ "-" (
		set "VE_CoreSingleLanguage=+"
	) else (
		set "VE_CoreSingleLanguage=-"
	)
)
if errorlevel 8 (
	for %%# in (
		CloudEdition
		CloudEditionN
	) do (
		if "!VE_%%#!" equ "-" (
			set "VE_%%#=+"
		) else (
			set "VE_%%#=-"
		)
	)
)
if errorlevel 7 (
	if "!VE_IoTEnterpriseS!" equ "-" (
		set "VE_IoTEnterpriseS=+"
	) else (
		set "VE_IoTEnterpriseS=-"
	)
)
if errorlevel 6 (
	if "!VE_IoTEnterprise!" equ "-" (
		set "VE_IoTEnterprise=+"
	) else (
		set "VE_IoTEnterprise=-"
	)
)
if errorlevel 5 (
	for %%# in (
		Education
		EducationN
	) do (
		if "!VE_%%#!" equ "-" (
			set "VE_%%#=+"
		) else (
			set "VE_%%#=-"
		)
	)
)
if errorlevel 4 (
	if "!VE_ServerRdsh!" equ "-" (
		set "VE_ServerRdsh=+"
	) else (
		set "VE_ServerRdsh=-"
	)
)
if errorlevel 3 (
	for %%# in (
		Enterprise
		EnterpriseN
	) do (
		if "!VE_%%#!" equ "-" (
			set "VE_%%#=+"
		) else (
			set "VE_%%#=-"
		)
	)
)
if errorlevel 2 (
	for %%# in (
		ProfessionalEducation
		ProfessionalEducationN
	) do (
		if "!VE_%%#!" equ "-" (
			set "VE_%%#=+"
		) else (
			set "VE_%%#=-"
		)
	)
)
if errorlevel 1 (
	for %%# in (
		ProfessionalWorkstation
		ProfessionalWorkstationN
	) do (
		if "!VE_%%#!" equ "-" (
			set "VE_%%#=+"
		) else (
			set "VE_%%#=-"
		)
	)
)
goto :ChooseEditionsMenu

:AssignChosenVirtualEditions

set "vAutoExit=1"

for %%# in (!Methods!) do (
	if "!%%#!" equ "+" (
		set "%%#=1"
	) else (
		set "%%#=0"
	)
)

for %%e in (!vEditions!) do (
	if "!VE_%%e!" equ "+" (
		set "ChosenVirtualEditions=!ChosenVirtualEditions!;%%e"
		echo.%%e
	)
)

if "!ChosenVirtualEditions!" neq "" (
	set "ChosenVirtualEditions=!ChosenVirtualEditions:~1!"

	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtDisplayChosenEditions%
	echo.-------------------------------------------------------------------------------
	echo.!ChosenVirtualEditions!
	echo.===============================================================================
	echo.
)

(
	echo.[create_virtual_editions]
	echo.vAutoStart       =!vAutoStart!
	echo.vDeleteSource    =!vDeleteSource!
	echo.vPreserve        =!vPreserve!
	echo.vwim2esd         =!vwim2esd!
	echo.vSkipISO         =!vSkipISO!
	echo.vAutoExit        =!vAutoExit!
	echo.vAutoEditions    =!ChosenVirtualEditions!
)>"!VirtualCreate_ImageIndexEditionsPath!\ConvertConfig.ini"
echo.
echo.===============================================================================
echo.

cls
rem Start "Virtual Create Image Index Editions" /wait /I cmd.exe /C "!VirtualCreate_ImageIndexEditionsScript!.cmd"
Start "Virtual Create Image Index Editions" /wait /B cmd.exe /C "!VirtualCreate_ImageIndexEditionsScript!.cmd"

cd /D "%ROOT%" >nul

color 0E
title MSMG Toolkit %version%(Custom)[%DateTimeCLOCK%]

call :CheckingVirtualCreated_InstallMediaImageFile >nul

if not exist "!NewInstallMediaFilefromVirtualCreateNamePath!" (
	call :CheckingVirtualCreated_InstallMediaFolder
	call :CopyVirtualCreated_InstallMediaFolder
) else (
	call :ExtractVirtualCreated_InstallMediaImageFile
)

set "TrimEditions=Disabled"
set ImageIndexNo=
set SpecifiedSourceIndex=
set Auto=
set "ChosenSource=A"

if exist "%InstallEsd%" call :RemoveFile "%InstallWim%" >nul
if exist "%InstallWim%" set "VirtualCreated_InstallImageFile=WIM" >nul
if exist "%InstallEsd%" set "VirtualCreated_InstallImageFile=ESD" >nul

:: Get total no of Indexes present inside the WIM/ESD Image
if exist "%InstallWim%" call :GetImageCount "%InstallWim%" >nul
if exist "%InstallEsd%" call :GetImageCount "%InstallEsd%" >nul

:: Display the list of avaialble Image Indexes.
for /l %%i in (1 1 !ImageCount!) do (
	set "ImageIndexNo=!ImageIndexNo!;%%i"
)
set "ImageIndexNo=!ImageIndexNo:~1!"

:: Getting All Image Index Edition
call :GettingAllImageIndexEditions

:: Deal with EI.cfg file
call :EIcfg

if "!VirtualCreated_InstallImageFile!" equ "WIM" (
	if /i "!LastImageEdition:~,4!" equ "Core" (
		set "RearrangingSingleLanguage=1"
	)

	if "!RearrangingSingleLanguage!" equ "1" (
		:: Display Image Information
		call :ShowImageInfo

		set "ImageIndexNo=!ImageCount!"
		for /l %%i in (1 1 !ImageCount!) do (
			if %%i lss !ImageCount! (
				set "ImageIndexNo=!ImageIndexNo!;%%i"
			)
		)
		:: Rearranging and Optimizing Image Indexes according to the below sequence...
		echo.
		echo.%txtRearrangingOptimizing%
		echo.
		echo.%txtImageIndexNo% "!ImageIndexNo!"
		echo.
		call :ExportRearrangingImageIndexes
	)
	if "!RearrangingSingleLanguage!" neq "1" (
		:: Optimizing Install Image File...
		echo.
		echo.%txtOptimizingInstallImage%.
		echo.
		call :ExportOptimizingInstallImage
	)
)
if "!InstallMediaSource_ImageLabel!" equ "" call :InstallMediaSource_ImageLabel

:: Deleting Source "install.wim" Image File
if "!ImageFormat!" equ "ESD" if exist "%InstallEsd%" call :RemoveFile "%InstallWim%"

:: Get total no of Indexes present inside the WIM/ESD Image
if exist "%InstallWim%" call :GetImageCount "%InstallWim%"
if exist "%InstallEsd%" call :GetImageCount "%InstallEsd%" 

:: Display the list of avaialble Image Indexes.
set "ImageIndexNo=1"
for /l %%i in (2 1 !ImageCount!) do set "ImageIndexNo=!ImageIndexNo!;%%i"
:: Display Image Information
call :ShowImageInfo

call :GenerateISO

call :RemoveFile "!NewInstallMediaFilefromVirtualCreateNamePath!" >nul
call :RemoveFolder "!VirtualCreate_ImageIndexEditionsPath!\!VirtualCreated_InstallMedia!" >nul

call :RemoveFile "%Toolkitcfg%"

echo.-------------------------------------------------------------------------------
echo.%txtFinishedApplyingSaving%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
echo.
pause

endlocal

setlocal EnableExtensions EnableDelayedExpansion

set "ImageFormat=WIM"
set "IsSourceSelected=No"
set IsBootImageSelected=
set IsRecoveryImageSelected=
set SelectedSourceOS=

set ChosenSource=
set /A ChosenCount=0
set ImageIndexNo=
set AutoImageIndexNo=
set Auto=
set SpecifiedSourceIndex=
set "TrimEditions=Disabled"
set "VirtualCreate_ImageIndexEditions=Disabled"
set Allowed=
set "Bypass=O"

goto :MainMenu

::-------------------------------------------------------------------------------------------
:: Function to Export and Rearranging Image Indexes
::-------------------------------------------------------------------------------------------
:ExportRearrangingImageIndexes
for %%i in (!ImageIndexNo!) do (
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtOptimizingSource% %%i] %GlobalWithMaximumCompression%
	echo.-------------------------------------------------------------------------------
	echo.
	"%WimlibImagex%" export "%InstallWim%" %%i "%_TMP%\install.wim" --compress=LZX
	rem "%WimlibImagex%" export "%InstallWim%" %%i "%_TMP%\install.wim" --compress=LZX --recompress
	echo.
)
:: Move Replace Source "install.wim" for New "install.wim" Image File
if exist "%_TMP%\install.wim" move /y "%_TMP%\install.wim" "%InstallWim%" >nul

if "!ImageFormat!" equ "ESD" call :ExportOptimizingInstallImage

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Export Optimizing [Source "install.wim" or Generating "install.esd" Image]
::-------------------------------------------------------------------------------------------
:ExportOptimizingInstallImage
echo.
echo.-------------------------------------------------------------------------------
if "!ImageFormat!" equ "WIM" echo.%GlobalOptimizingSource% %GlobalWithMaximumCompression%
if "!ImageFormat!" equ "ESD" echo.%txtOptimizingSource2Esd%
echo.-------------------------------------------------------------------------------
echo.
if "!ImageFormat!" equ "WIM" "%WimlibImagex%" optimize "%InstallWim%"
if "!ImageFormat!" equ "ESD" "%WimlibImagex%" export "%InstallWim%" all "%InstallEsd%" --compress=LZMS:100 --solid
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Check Virtual Created Install Media ISO presence
::-------------------------------------------------------------------------------------------
:CheckingVirtualCreated_InstallMediaImageFile
for /R "%VirtualCreate_ImageIndexEditionsPath%" %%f IN (
	*.iso
	*.ISO
) DO (
	set "NewInstallMediaFilefromVirtualCreate=%%~nxf"
	set "NewInstallMediaFilefromVirtualCreateNamePath=%%~ff"
) >nul

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Check Virtual Created Install Media Folder presence
::-------------------------------------------------------------------------------------------
:CheckingVirtualCreated_InstallMediaFolder
cd /D "!VirtualCreate_ImageIndexEditionsPath!\" >nul
for /f "tokens=* delims=" %%# in ('dir /B /AD "."') do (
	if exist "%%~f#\sources\install.*" set "VirtualCreated_InstallMedia=%%~#"
) >nul
cd /D "%ROOT%" >nul

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Move The New Install Media File to your ISO folder
::-------------------------------------------------------------------------------------------
:MoveVirtualCreated_InstallMediaImageFile

set NewInstallMediaFileName=

:: Getting ^<Install Media^> Source OS and Image BranchID
call :ISO_SourceOSBranchID

if "%IsSourceSelected%" equ "No" (
	:: Getting ^<Install Media^> Source Image Path and File Name
	set "InstallMedia_ImageFolderPath=%ISO%"
	set "InstallMedia_ImageFileName=!NewInstallMediaFilefromVirtualCreate:~0,-4!"
	if "!InstallMediaSource_ImageFileName!" equ "" set "InstallMediaSource_ImageFileName=!NewInstallMediaFilefromVirtualCreate!"
)
if "%IsSourceSelected%" equ "Yes" (
	:: Getting ^<Install Media^> Source Image File Name
	if "!CurrentImageBuild!" equ "" (
		set "InstallMedia_ImageFileName=%ISOSourceOS%%ImageBuild%.%ImageServicePackBuild%!ISO_BranchID!%ImageArchitecture%"
	) else (
		set "InstallMedia_ImageFileName=%ISOSourceOS%!CurrentImageBuild!.%ImageServicePackBuild%!ISO_BranchID!%ImageArchitecture%"
	)
)

:: DateTime Version Stamp
call :DateTimeStamp

set "NewInstallMediaFileName=!InstallMedia_ImageFileName!_[!DateTimeStamp!].iso"
echo.
echo.%txtNewVirtualCreated%
echo."!NewInstallMediaFilefromVirtualCreate!"
echo.
echo.%txtRenaming%
echo."!NewInstallMediaFileName!"
echo.
ren "!NewInstallMediaFilefromVirtualCreateNamePath!" "!NewInstallMediaFileName!"
echo.%txtMovingVirtualCreated%
echo.%GlobalFrom%  ^<!VirtualCreate_ImageIndexEditionsPath!^>
echo.%GlobalTo%  ^<%ISO%^\^> #####
echo.
move /y "!VirtualCreate_ImageIndexEditionsPath!\!NewInstallMediaFileName!" "%ISO%\" >nul

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Extract The New InstallMedia Image File to InstallMedia folder
::-------------------------------------------------------------------------------------------
:ExtractVirtualCreated_InstallMediaImageFile

set NewInstallMediaFileName=

:: Getting ^<Install Media^> Source OS and Image BranchID
call :ISO_SourceOSBranchID

if "%IsSourceSelected%" equ "No" (
	:: Getting ^<Install Media^> Source Image Path and File Name
	set "InstallMedia_ImageFolderPath=%VirtualCreate_ImageIndexEditionsPath%"
	set "InstallMedia_ImageFileName=!NewInstallMediaFilefromVirtualCreate:~0,-4!"
	if "!InstallMediaSource_ImageFileName!" equ "" set "InstallMediaSource_ImageFileName=!NewInstallMediaFilefromVirtualCreate!"
)
if "%IsSourceSelected%" equ "Yes" (
	:: Getting ^<Install Media^> Source Image File Name
	if "!CurrentImageBuild!" equ "" (
		set "InstallMedia_ImageFileName=%ISOSourceOS%%ImageBuild%.%ImageServicePackBuild%!ISO_BranchID!%ImageArchitecture%"
	) else (
		set "InstallMedia_ImageFileName=%ISOSourceOS%!CurrentImageBuild!.%ImageServicePackBuild%!ISO_BranchID!%ImageArchitecture%"
	)
)
set "NewInstallMediaFileName=!InstallMedia_ImageFileName!.iso"

echo.%txtExtractingNewISO% ^<%DVD%^> %GlobalFolder%
echo.
echo.%txtExtractingMayTake%
echo.
"%Zip%" x -y "!NewInstallMediaFilefromVirtualCreateNamePath!" -o"%DVD%" >nul

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Copy The New Install Media Folder to Install Media folder
::-------------------------------------------------------------------------------------------
:CopyVirtualCreated_InstallMediaFolder

set NewInstallMediaFileName=

:: Getting ^<Install Media^> Source OS and Image BranchID
call :ISO_SourceOSBranchID

:: Getting ^<Install Media^> Source Image Path and File Name
if "!InstallMediaSource_ImageFileName!" equ "" call :GettingInstallMediaSource_ImageFileName

call :RemoveFolder "!InstallMedia!"
echo.%txtCopyingVirtualCreated%
echo.%GlobalFrom% ^<!VirtualCreate_ImageIndexEditionsPath!\!VirtualCreated_InstallMedia!^>
echo.%GlobalTo% ^<!InstallMedia!^> #####
%XCopy% "!VirtualCreate_ImageIndexEditionsPath!\!VirtualCreated_InstallMedia!\*.*" "!InstallMedia!" >nul
echo.
echo.%GlobalCopyingFinished%

if "%IsSourceSelected%" equ "No" (
	set "InstallMedia_ImageFileName=!VirtualCreated_InstallMedia!"
)
if "%IsSourceSelected%" equ "Yes" (
	if "!CurrentImageBuild!" equ "" (
		set "InstallMedia_ImageFileName=%ISOSourceOS%%ImageBuild%.%ImageServicePackBuild%!ISO_BranchID!%ImageArchitecture%"
	) else (
		set "InstallMedia_ImageFileName=%ISOSourceOS%!CurrentImageBuild!.%ImageServicePackBuild%!ISO_BranchID!%ImageArchitecture%"
	)
)
set "NewInstallMediaFileName=!InstallMedia_ImageFileName!.iso"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Generate Install Media Image File Name
::-------------------------------------------------------------------------------------------
:InstallMedia_ImageFileName

set NewInstallMediaFileName=

:: Getting ^<Install Media^> Source OS and Image BranchID
call :ISO_SourceOSBranchID

:: Getting ^<Install Media^> Source Image File Name
if "!CurrentImageBuild!" equ "" (
	set "InstallMedia_ImageFileName=%ISOSourceOS%%ImageBuild%.%ImageServicePackBuild%!ISO_BranchID!%ImageArchitecture%"
) else (
	set "InstallMedia_ImageFileName=%ISOSourceOS%!CurrentImageBuild!.%ImageServicePackBuild%!ISO_BranchID!%ImageArchitecture%"
)
set "NewInstallMediaFileName=!InstallMedia_ImageFileName!.iso"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Discard Changes & Unmount Source Images
::-------------------------------------------------------------------------------------------
:DiscardSource

cls
echo.===============================================================================
echo.%txtDiscardChangesUnmountSourceImages%
echo.===============================================================================
echo.
:: Unmount Image Registry if Mounted
call :UnMountImageRegistry
echo.-------------------------------------------------------------------------------
echo.%txtDiscardChangesUnmountSourceImagesStart%
echo.-------------------------------------------------------------------------------
echo.
:: Discarding ^& Un-Mounting Source Boot Images
for /l %%i in (1, 1, 2) do (
	if exist "%BootMount%\%%i\" (
		echo.-------------------------------------------------------------------------------
		echo.%txtDiscardChangesUnmountSourceImagesBootpos01% %%i] %txtDiscardChangesUnmountSourceImagesBootpos02%
		echo.-------------------------------------------------------------------------------
		call :UnMountImage "%BootMount%\%%i", "Discard"
		call :RemoveFolder "%BootMount%\%%i"
	)
)

:: Discarding ^& Un-Mounting Source Install & Recovery Images
for /l %%i in (1, 1, !ImageCount!) do (
	if exist "%InstallMount%\%%i\" (
		if "!SpecifiedSourceIndex!" equ "" (
			if exist "%WinReMount%\%%i\Windows" (
				echo.-------------------------------------------------------------------------------
				echo.%GlobalUnMountingImage% %%i -^> %GlobalWIMImage%
				echo.-------------------------------------------------------------------------------
				call :UnMountImage "%WinReMount%\%%i", "Discard"
				call :RemoveFolder "%WinReMount%\%%i"
			)
		) else (
			if exist "%InstallMount%\!SpecifiedSourceIndex!" (
				if exist "%WinReMount%\Windows" (
					echo.-------------------------------------------------------------------------------
					echo.%GlobalUnMountingImage% !SpecifiedSourceIndex! -^> %GlobalWIMImage%
					echo.-------------------------------------------------------------------------------
					call :UnMountImage "%WinReMount%", "Discard"
					call :RemoveFolder "%WinReMount%"
				)
			)
		)

		echo.-------------------------------------------------------------------------------
		echo.%txtDiscardChangesUnmountSourceImagesInstall02pos01% %%i] %txtDiscardChangesUnmountSourceImagesInstall02pos02%
		echo.-------------------------------------------------------------------------------
		call :UnMountImage "%InstallMount%\%%i", "Discard"
		call :RemoveFolder "%InstallMount%\%%i"
	)
)
call :RemoveFile "%Toolkitcfg%"

echo.-------------------------------------------------------------------------------
echo.%txtDiscardChangesUnmountSourceImagesStartFin%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	pause
)

set "IsSourceSelected=No"
set IsBootImageSelected=
set IsRecoveryImageSelected=
set SelectedSourceOS=

set ChosenSource=
set /A ChosenCount=0
set ImageIndexNo=
set AutoImageIndexNo=
set Auto=
set SpecifiedSourceIndex=

goto :MainMenu
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Make a DVD ISO Image for Burning to DVD Disc
::-------------------------------------------------------------------------------------------
:MakeISO

setlocal

cls
echo.===============================================================================
echo.%txtMakeDVDISOImage%
echo.===============================================================================
echo.

:: Checking whether Source is Applied
if "%IsSourceSelected%" equ "Yes" (
	echo.%GlobalCantUseThisFeature%
	goto :Stop
)

:: Checking whether Windows Source DVD folder is empty
if not exist "%BIOSBoot%" (
	echo.%GlobalWindowsInstallationSource% ^<%DVD%^> %GlobalEmptyFolder%
	echo.
	echo.%GlobalPleaseCopyInstallationSource% ^<%DVD%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Source DVD folder is empty
if not exist "%BootWim%" (
	echo.%GlobalWindowsInstallationSource% ^<%DVD%^> %GlobalEmptyFolder%
	echo.
	echo.%GlobalPleaseCopyInstallationSource% ^<%DVD%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Source DVD folder is empty
if not exist "%InstallWim%" if not exist "%InstallEsd%" if not exist "%DVD%\sources\*.swm" (
	echo.%GlobalWindowsInstallationSource% ^<%DVD%^> %GlobalEmptyFolder%
	echo.
	echo.%GlobalPleaseCopyInstallationSource% ^<%DVD%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingBuildingDVDISO%
echo.-------------------------------------------------------------------------------
echo.-------------------------------------------------------------------------------
echo.%txtGettingBuildingDVDISO%
echo.-------------------------------------------------------------------------------
echo.

:: Get total no of Indexes present inside the Image
call :GetImageCount "%InstallWim%"

:: Getting Specified Source Index Information
call :GetImageIndexInfo "%InstallWim%", 1 >nul

:: Getting ^<Install Media^> Source OS and Image BranchID
call :ISO_SourceOSBranchID

if !ImageCount! equ 1 (
	set "ISOEdition=-%ImageEdition%"
) else (
	set "ISOEdition=-MultiEditions"
)

:GettingInstallMediaSource_ImageLabel

set InstallMediaSource_ImageFileName=
set InstallMediaSource_ImageLabel=

:: Getting ^<Install Media^> Source - Image Label Name
echo.-------------------------------------------------------------------------------
echo.%txtGettingISOLabel%
echo.-------------------------------------------------------------------------------
echo.
echo.
echo.  [S]  %txtSelectInstallMedia%
echo.  [A]  %txtAutoLabel%
echo.  [P]  %txtPersonalLabel%
echo.
choice /C:SAP /N /M "%txtEnterSelectAutoPersonal% : "
echo.
if errorlevel 3 (
	echo.%txtIfyouleavetheInstallMediaSourceline1%
	echo.%txtIfyouleavetheInstallMediaSourceline2%
	rem echo.the Original ISO Source Label will be placed.
	set InstallMediaSource_ImageLabel=
	set /p "InstallMediaSource_ImageLabel=%txtEntertheISOVolumeLabel% "
	echo.
)
if errorlevel 2 (
	set "InstallMediaSource_ImageLabel=%ISOSourceOS%!ISO_BranchID!%ImageArchitecture%%ISOEdition%"
)
if errorlevel 1 (
	call :InstallMediaSource_ImageLabel
)

if "!InstallMediaSource_ImageLabel!" equ "" goto :GettingInstallMediaSource_ImageLabel

:GettingInstallMedia_ImageSavingFileName

set InstallMedia_ImageSavingFileName=

:: Getting ^<Install Media^> Image Saving File Name
echo.-------------------------------------------------------------------------------
echo.%txtGettingISOFileName%
echo.-------------------------------------------------------------------------------
echo.
echo.%txtThenewISOfilewillbepos1% ^<%ISO%^\^> %GlobalFolder3%
echo.
echo.  [A]  %txtAutoFileName%
echo.  [P]  %txtPersonalFileName%
echo.
choice /C:AP /N /M "%txtEnterAutoPersonal% : "
echo.
if errorlevel 2 (
	set /p "InstallMedia_ImageSavingFileName=%txtEnterISOFileName% "
	echo.
)
if errorlevel 1 (
	if "!CurrentImageBuild!" equ "" (
		set "InstallMedia_ImageSavingFileName=%ISOSourceOS%%ImageBuild%!ISO_BranchID!%ImageArchitecture%%ISOEdition%"
	) else (
		set "InstallMedia_ImageSavingFileName=%ISOSourceOS%!CurrentImageBuild!!ISO_BranchID!%ImageArchitecture%%ISOEdition%"
	)
)

if "!InstallMedia_ImageSavingFileName!" equ "" goto :GettingInstallMedia_ImageSavingFileName

:GenerateISO

if "!NewInstallMediaFileName!" neq "" set "InstallMedia_ImageSavingFileName=!NewInstallMediaFileName:~0,-4!"

:: DateTime Version Stamp
call :DateTimeStamp

:: Building a DVD ISO Image for Booting with BIOS/UEFI Systems.
echo.-------------------------------------------------------------------------------
echo.%txtBuildingDVDISOImage%
echo.-------------------------------------------------------------------------------
echo.
echo.%GlobalInstallMediaSourceImageLabel% "!InstallMediaSource_ImageLabel!"
echo.%txtISOFileName% "!InstallMedia_ImageSavingFileName!_[!DateTimeStamp!].iso"
echo.

if exist "%UEFIBoot%" (
	"%Oscdimg%" -bootdata:2#p0,e,b"%BIOSBoot%"#pEF,e,b"%UEFIBoot%" -o -h -m -u2 -udfver102 -l"!InstallMediaSource_ImageLabel!" "%DVD%" "%ISO%\!InstallMedia_ImageSavingFileName!_[!DateTimeStamp!].iso"
) else (
	"%Oscdimg%" -bootdata:1#p0,e,b"%BIOSBoot%" -o -h -m -u2 -udfver102 -l"!InstallMediaSource_ImageLabel!" "%DVD%" "%ISO%\!InstallMedia_ImageSavingFileName!_[!DateTimeStamp!].iso"
)
echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedBuildingDVDISO%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!NewInstallMediaFileName!" neq "" (
	goto :EOF
)
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

endlocal

set InstallMedia_ImageSavingFileName=

:: Returning to Previous Menu
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Get Install Media Source Image Label
::-------------------------------------------------------------------------------------------
:InstallMediaSource_ImageLabel
echo.%txtInstallMediaSource% "!InstallMedia_ImageFolderPath!\!InstallMediaSource_ImageFileName!"
echo.
rem FOR /F "tokens=* delims=" %%v IN ('PowerShell.exe -NonI -NoP -Command "if (!(Get-DiskImage -ImagePath !ISOsourceFilePath!).Attached) { (Mount-DiskImage -ImagePath !ISOsourceFilePath! -NoDriveLetter -PassThru | Get-Volume).FileSystemLabel } else { (Get-DiskImage -ImagePath !ISOsourceFilePath! | Get-Volume).FileSystemLabel }"') do (
FOR /F "tokens=* delims=" %%v IN ('PowerShell.exe -NonI -NoP -Command "(Mount-DiskImage -ImagePath '!InstallMedia_ImageFolderPath!\!InstallMediaSource_ImageFileName!' -NoDriveLetter -PassThru | Get-Volume).FileSystemLabel"') do (
	set "InstallMediaSource_ImageLabel=%%v"
	set "USBDriveLabel=%%v"
)
PowerShell.exe -NonI -NoP -Command "DisMount-DiskImage -ImagePath '!InstallMedia_ImageFolderPath!\!InstallMediaSource_ImageFileName!'" >nul 2>&1

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Burn a DVD ISO Image to DVD Disc
::-------------------------------------------------------------------------------------------
:BurnISO

setlocal

set DvdDrive=

cls
echo.===============================================================================
echo.%txtBurnDVDISOImage%
echo.===============================================================================
echo.

:: Checking whether Install Media Image folder is empty
call :CheckInstallMediaFolder

if "!InstallMediaSourceImage_IsPresent!" equ "" (
	echo.%GlobalCantFindWindowsInstallMedia%
	if "!InstallMediaISOSource!" equ "O" echo.    ^<%ISOsource%^> %GlobalFolder%
	if "!InstallMediaISO!" equ "O" echo.    ^<%ISO%^> %GlobalFolder%
	echo.
	echo.%GlobalPleasePutWindowsInstallMediaISO%
	echo.%GlobalIntoOneOfTheRespectiveFolders%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingBurningDVDISOImage%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtGettingDVDDriveDVDISO%
echo.-------------------------------------------------------------------------------
echo.
:: Getting ^<Install Media^> Source Image File Name
if "!InstallMediaSource_ImageFileName!" equ "" call :GettingInstallMediaSource_ImageFileName

:: Getting DVD Drive Letter
set /p DvdDrive=%txtEnterDVDDriveLetter%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtBurningDVDISOImage%
echo.-------------------------------------------------------------------------------
echo.
echo.%txtBurningISOImagepos1% [!InstallMediaSource_ImageFileName!] %txtBurningISOImagepos2% [%DvdDrive%:]...
echo.
%DvdBurn% "%DvdDrive%:" "!InstallMedia_ImageFolderPath!\!InstallMediaSource_ImageFileName!"
echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedBurningDVDISO%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

endlocal

set DvdDrive=
set InstallMediaSource_ImageFileName=
set InstallMediaSourceImage_IsPresent=
set InstallMediaIMGSource=
set InstallMediaIMG=
set InstallMediaISOSource=
set InstallMediaISO=

:: Returning to Previous Menu
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Copy Source Folder to USB Flash Drive
::-------------------------------------------------------------------------------------------
:CopyUSB

call :InstallMediaSource_ImageLabel

setlocal

set DriveLetter=

cls
echo.===============================================================================
echo.%txtCopySourceFolderUSB%
echo.===============================================================================
echo.

:: Checking whether Source is Applied
if "%IsSourceSelected%" equ "Yes" (
	echo.%GlobalCantUseThisFeature%
	goto :Stop
)

:: Checking whether Windows Source DVD folder is empty
if not exist "%BootWim%" (
	echo.%GlobalWindowsInstallationSource% ^<%DVD%^> %GlobalEmptyFolder%
	echo.
	echo.%GlobalPleaseCopyInstallationSource% ^<%DVD%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Source DVD folder is empty
if not exist "%InstallWim%" if not exist "%InstallEsd%" (
	echo.%GlobalWindowsInstallationSource% ^<%DVD%^> %GlobalEmptyFolder%
	echo.
	echo.%GlobalPleaseCopyInstallationSource% ^<%DVD%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingCopySourceFolderUSB%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalGettingUSB%
echo.-------------------------------------------------------------------------------
echo.

:: Show Available USB Flash Drives.
echo.%GlobalListingAvailableUSB%
call :ListDisks

if !CountLoop! lss 3 (
	for %%# in (%DriveLetters%) do (
		call :InstallMediaInfo %%#
	)
)
if !CountLoop! equ 3 (
	for /F "tokens=*" %%# in ('^(echo.LIST VOLUME^) ^| DiskPart.exe ^| findstr.exe /I "Remov Amovible 可移动"') do for /F "tokens=3 delims= " %%s in ("%%#") do (
		set "DriveLetter=%%s"
	)
)
if !CountLoop! gtr 3 (
	set DriveLetter=

	:: Getting USB Flash Drive Letter
	set /P "DriveLetter=%GlobalEnterUSBFlashDriveLetter% "
)

if !CountLoop! geq 3 call :InstallMediaInfo !DriveLetter!

:: Getting USB Flash Drive Volume Label.
if "!USBDriveLabel!" equ "" set /p "USBDriveLabel=%GlobalEnterUSBFlashLabel% "

echo.%GlobalTargetUSBDrive% "!DriveLetter!:"
echo.%GlobalUSBDriveLabel% "!USBDriveLabel!"

echo.
echo.
echo.-------------------------------------------------------------------------------
echo.%txtCopyingSourceFolderUSB%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtCopyingSourcefilesFolders%
echo.-------------------------------------------------------------------------------
echo.
echo.%txtSourceDrive% "%DVD%"
echo.%txtTargetDrive% !DriveLetter!:
echo.
%XCopy% "%DVD%" !DriveLetter!: >nul
echo.-------------------------------------------------------------------------------
echo.%txtFinishedCopyingSourceFolderUSB%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

set DriveLetter=

endlocal

:: Returning to Previous Menu
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Sync Source Boot and Install Images to USB Flash Drive
::-------------------------------------------------------------------------------------------
:SyncUSB

call :InstallMediaSource_ImageLabel

setlocal

set DriveLetter=

cls
echo.===============================================================================
echo.%txtSyncSourceBootInstallImages%
echo.===============================================================================
echo.

:: Checking whether Source is Applied
if "%IsSourceSelected%" equ "Yes" (
	echo.%GlobalCantUseThisFeature%
	goto :Stop
)

:: Checking whether Windows Source DVD folder is empty
if not exist "%BootWim%" (
	echo.%GlobalWindowsInstallationSource% ^<%DVD%^> %GlobalEmptyFolder%
	echo.
	echo.%GlobalPleaseCopyInstallationSource% ^<%DVD%^> %GlobalFolder%
	goto :Stop
)

:: Checking whether Windows Source DVD folder is empty
if not exist "%InstallWim%" if not exist "%InstallEsd%" (
	echo.%GlobalWindowsInstallationSource% ^<%DVD%^> %GlobalEmptyFolder%
	echo.
	echo.%GlobalPleaseCopyInstallationSource% ^<%DVD%^> %GlobalFolder%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingSyncSourceBootInstallImages%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalGettingUSB%
echo.-------------------------------------------------------------------------------
echo.

:: Show Available USB Flash Drives.
echo.%GlobalListingAvailableUSB%
call :ListDisks

if !CountLoop! lss 3 (
	for %%# in (%DriveLetters%) do (
		call :InstallMediaInfo %%#
	)
)
if !CountLoop! equ 3 (
	for /F "tokens=*" %%# in ('^(echo.LIST VOLUME^) ^| DiskPart.exe ^| findstr.exe /I "Remov Amovible 可移动"') do for /F "tokens=3 delims= " %%s in ("%%#") do (
		set "DriveLetter=%%s"
	)
)
if !CountLoop! gtr 3 (
	set DriveLetter=

	:: Getting USB Flash Drive Letter
	set /P "DriveLetter=%GlobalEnterUSBFlashDriveLetter% "
)

if !CountLoop! geq 3 call :InstallMediaInfo !DriveLetter!

:: Getting USB Flash Drive Volume Label.
if "!USBDriveLabel!" equ "" set /p "USBDriveLabel=%GlobalEnterUSBFlashLabel% "

echo.%GlobalTargetUSBDrive% "!DriveLetter!:"
echo.%GlobalUSBDriveLabel% "!USBDriveLabel!"

echo.
echo.
echo.-------------------------------------------------------------------------------
echo.%txtSyncingSourceBootInstallImagesUSB%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtCopyingSourceBoot%
echo.-------------------------------------------------------------------------------
echo.
echo.%txtMainMenu_1% : ^<\DVD\Sources\boot.wim^>
if exist "%DVD%\Sources\install.!ImageID!" echo.         ^<\DVD\Sources\install.!ImageID!^>
echo.%txtMainMenu_6% : ^<!DriveLetter!:\Sources^>
echo.

call :RemoveFile "!DriveLetter!:\Sources\boot.wim"
call :RemoveFile "!DriveLetter!:\Sources\install.*"

%XCopy% "%DVD%\Sources\boot.wim" !DriveLetter!:\Sources
if exist "%DVD%\Sources\install.!ImageID!" %XCopy% "%DVD%\Sources\install.!ImageID!" !DriveLetter!:\Sources
if "!USBDriveLabel!" neq "" Label.exe !DriveLetter!: !USBDriveLabel!

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedSyncingSourceBootInstallImagesUSB%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

set DriveLetter=

endlocal

:: Returning to Previous Menu
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Burn a ISO Image to USB Flash Drive
::-------------------------------------------------------------------------------------------
:BurnUSB

call :InstallMediaSource_ImageLabel

setlocal

set USBDriveLetter=

cls
echo.===============================================================================
echo.%txtBurnISOImageUSB%
echo.===============================================================================
echo.

:: Checking whether Install Media Image folder is empty
call :CheckInstallMediaFolder

if "!InstallMediaSourceImage_IsPresent!" equ "" (
	echo.%GlobalCantFindWindowsInstallMedia%
	if "!InstallMediaISOSource!" equ "O" echo.    ^<%ISOsource%^> %GlobalFolder%
	if "!InstallMediaISO!" equ "O" echo.    ^<%ISO%^> %GlobalFolder%
	echo.
	echo.%GlobalPleasePutWindowsInstallMediaISO%
	echo.%GlobalIntoOneOfTheRespectiveFolders%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingBurningISOImageUSB%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtGettingInstallMediaSourceImage%
echo.-------------------------------------------------------------------------------
echo.
:: Getting ^<Install Media^> Source Image File Name
if "!InstallMediaSource_ImageFileName!" equ "" call :GettingInstallMediaSource_ImageFileName

echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalGettingUSB%
echo.-------------------------------------------------------------------------------
echo.
:: Show Available USB Flash Drives.
echo.%GlobalListingAvailableUSB%
call :ListDisks

:: Getting USB Flash Drive Letter
set /p "USBDriveLetter=%GlobalEnterUSBFlashDriveLetter% "

:: Checking whether the Specified USB Flash Drive exist
cd /D !USBDriveLetter!: 2>nul
if errorlevel 1 (
	echo.%GlobalInvalidUSBFlashDrive%
	goto :Stop
)

:: Getting USB Flash Drive Volume Label.
if "!USBDriveLabel!" equ "" set /p "USBDriveLabel=%GlobalEnterUSBFlashLabel% "

echo.
echo.-------------------------------------------------------------------------------
echo.%txtBurningISOImageUSBFlash%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtCopyingISOImageContentsUSBFlash%
echo.-------------------------------------------------------------------------------
echo.
echo.%txtSourceISO% !InstallMediaSource_ImageFileName!
echo.%txtTargetDrive2% !USBDriveLetter!:
echo.
"%Zip%" x -y "!InstallMedia_ImageFolderPath!\!InstallMediaSource_ImageFileName!" -o"!USBDriveLetter!:"
if "!USBDriveLabel!" neq "" Label.exe !USBDriveLetter!: !USBDriveLabel!
echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedBurningISOImageUSB%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

endlocal

set USBDriveLetter=
set InstallMediaSource_ImageFileName=
set InstallMediaSourceImage_IsPresent=
set InstallMediaIMGSource=
set InstallMediaIMG=
set InstallMediaISOSource=
set InstallMediaISO=

:: Returning to Previous Menu
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Format a USB Flash Drive
::-------------------------------------------------------------------------------------------
:FormatUSB

call :InstallMediaSource_ImageLabel

setlocal

set USBDriveLetter=

cls
echo.===============================================================================
echo.%txtFormatUSBFlashDrive%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtStartingFormattingUSBFlashDrive%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalGettingUSB%
echo.-------------------------------------------------------------------------------
echo.
:: Show Available USB Flash Drives.
echo.%GlobalListingAvailableUSB%
call :ListDisks

:: Getting USB Flash Drive Letter
set /p "USBDriveLetter=%GlobalEnterUSBFlashDriveLetter% "
echo.

:: Checking whether the Specified USB Flash Drive exist
cd /D !USBDriveLetter!: 2>nul
if errorlevel 1 (
	echo.%GlobalInvalidUSBFlashDrive%
	goto :Stop
)

:: Getting USB Flash Drive Volume Label.
if "!USBDriveLabel!" equ "" set /p "USBDriveLabel=%GlobalEnterUSBFlashLabel% "
echo.

:: Getting USB Boot Type (UEFI/BIOS/ALL).
choice /C:12 /N /M "%txtEnterUSBFlashDriveBootType% [1=BIOS,2=BIOS/UEFI] : "
if errorlevel 2 goto :BIOS_UEFI
if errorlevel 1 goto :BIOS

:: Formatting USB Flash Drive in NTFS Format for BIOS Booting Systems.
:BIOS
	echo.
	choice /C:YN /N /M "%GlobalAreYouSureWantFormat% [!USBDriveLetter!:]? ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 (
		echo.
		echo.%GlobalFormattingUSBFlashDrivepos1% [!USBDriveLetter!:] %GlobalFormattingUSBFlashDrivepos2%
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%GlobalStoppedFormattingUSBFlashDrive%
		echo.-------------------------------------------------------------------------------
		goto :Stop
	)
	if errorlevel 1 (
		call :FormatDisk !USBDriveLetter!:, NTFS, !USBDriveLabel!
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%GlobalFinishedFormattingUSBFlashDrive%
		echo.-------------------------------------------------------------------------------
		goto :Stop
	)

:: Formatting USB Flash Drive in FAT32 Format for BIOS and or UEFI Booting Systems.
:BIOS_UEFI
	echo.
	choice /C:YN /N /M "%GlobalAreYouSureWantFormat% [!USBDriveLetter!:]? ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
	if errorlevel 2 (
		echo.
		echo.%GlobalFormattingUSBFlashDrivepos1% [!USBDriveLetter!:] %GlobalFormattingUSBFlashDrivepos2%
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%GlobalStoppedFormattingUSBFlashDrive%
		echo.-------------------------------------------------------------------------------
		goto :Stop
	)
	if errorlevel 1 (
		call :FormatDisk !USBDriveLetter!:, FAT32, !USBDriveLabel!
		echo.
		echo.-------------------------------------------------------------------------------
		echo.%GlobalFinishedFormattingUSBFlashDrive%
		echo.-------------------------------------------------------------------------------
		goto :Stop
	)

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
	pause
)

set USBDriveLetter=

endlocal

:: Returning to Previous Menu
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to List Removable Disks and Volumes
::-------------------------------------------------------------------------------------------
:ListDisks

echo.
echo.===============================================================================
echo.%txtDISKPARTlISTvOLUME%
echo.-------------------------------------------------------------------------------
set /A CountLoop=0
for /F "tokens=*" %%# in ('^(echo.LIST VOLUME^) ^| DiskPart.exe ^| findstr.exe /I "LTR Stat 状态 --- Remov Amovible 可移动" ^| findstr.exe /I /V "DISKPART"') do (
	if "%%#" neq "" set /A CountLoop+=1
	echo.%%#
)
echo.===============================================================================
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Get Install Media Info
:: Input Parameters [ %~1 : USB Drive Letter]
::-------------------------------------------------------------------------------------------
:InstallMediaInfo
for %%e in (
	wim
	esd
	swm
) do (
	if exist "%DVD%\sources\install.%%e" (
		set "ImageID=%%e"
	)
	if exist "%~1:\sources\install.%%e" (
		set "DriveLetter=%~1"
		set "USBDriveMedia=%~1:\sources\install.%%e"
	)
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Format a Disk/Volume
:: Input Parameters [ %~1 : USB Drive Letter, %~2 : Format Type, %~3 : Drive Label]
::-------------------------------------------------------------------------------------------
:FormatDisk

:: Writing DiskPart.txt Script File.
call :RemoveFile "%_TMP%\DiskPart.txt"
(
	echo.select volume ^%~1
	echo.clean
	echo.create partition primary
	echo.select partition ^1
	echo.active
	echo.format fs=%~2 quick label=%~3
	echo.exit
	echo.
)>>"%_TMP%\DiskPart.txt"

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFormattingUSBFlashDrive%
echo.-------------------------------------------------------------------------------
echo.
:: Executing DiskPart.txt Script file With Diskpart.
echo.%GlobalFormattingUSBFlashDrive% [%~1] in %~2 %txtFormatPleaseWait%
start /B /wait diskpart /s "%_TMP%\DiskPart.txt" >nul
echo.
echo.%GlobalFormattingUSBFlashDrive% [%~1] in %~2 %txtFormatComplete%
call :RemoveFile "%_TMP%\DiskPart.txt"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to WIM/ESD Multi Image Index Deletion
::-------------------------------------------------------------------------------------------
:ImageIndexDeletion

if exist "%InstallWim%" (
	set "LowerCase=wim"
	set "UpperCase=WIM"
	set "InstallImageFile=%InstallWim%"
) >nul
if exist "%InstallEsd%" (
	set "LowerCase=esd"
	set "UpperCase=ESD"
	set "InstallImageFile=%InstallEsd%"
) >nul

cls
echo.===============================================================================
echo.                 MSMG Toolkit - !UpperCase! %txtMultiImageIndexDeletion%         
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if "!InstallImageFile!" equ "" (
	echo.%txtCannotFindWindowsSetupInstallImage%
	echo.            ^<DVD\Sources\install.!LowerCase!^> %txtCannotFindWindowsSetupInstallImageline2% 
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

:: Get total no of Indexes present inside the WIM/ESD Image
call :GetImageCount "!InstallImageFile!"

if !ImageCount! equ 1 (
	echo.%txtCannotDeleteLoneImageIndex%
	goto :Stop
)

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Single or Multi Image Index to Delete
	echo.%txtKeepMindThatHereRemoveImageIndexline1%
	echo.%txtKeepMindThatHereRemoveImageIndexline2%
	if "!Allowed!" equ "I" (
		echo.
	) else (
		echo.
	)
	pause
	call :GetImageIndexNo "!InstallImageFile!", 1
) else (
	:: Display Image Information
	call :ShowImageInfo
)

if !ChosenCount! equ !ImageCount! goto :Stop
echo.-------------------------------------------------------------------------------
echo.%txtStartDeletingSourceUnwantedpos1% !UpperCase! %txtStartDeletingSourceUnwantedpos2%
echo.-------------------------------------------------------------------------------

:Sorting2AscendingOrder
for /l %%i IN (1, 1, !ImageCount!) DO (
	for %%c IN (!ImageIndexNo!) DO (
		if %%i equ %%c (
			set "AscendingImageIndexNoOrder=!AscendingImageIndexNoOrder!,%%c"
		)
	)
)
set "ImageIndexNo=!AscendingImageIndexNoOrder:~1!"

:ImageIndexesAutomatedRemoval
echo.===============================================================================
echo.%txtApplyingAutomatedDeletionUnselectedline1%
echo.%txtApplyingAutomatedDeletionUnselectedline2%
echo.===============================================================================
echo.
set /A IndexRemovalID=0
set /A FinalLOOP=!ImageCount!
for %%i IN (!ImageIndexNo!) DO (
	set /A ChosenIndex=%%i
	echo.-------------------------------------------------------------------------------
	echo.%txtLOOP4Sourcepos1% [install.!LowerCase!, %txtLOOP4Sourcepos2% %%i] ######
	echo.-------------------------------------------------------------------------------
	echo.
	call :Formula
	if !RepeatCommandCount! geq 1 (
		call :RepeatDeleteImageCommand
	)
	echo.===============================================================================
	if !ChosenIndex! equ !ImageCount! echo.%txtThisWasFinalLOOP%
	echo.%txtEndChosenImageIndexpos1% [%%i] %txtEndChosenImageIndexpos2%
	echo.===============================================================================
	echo.
	set ChosenIndex=
)
if !FinalLOOP! gtr !PreviouslyChosenIndex! if !PreviouslyChosenIndex! lss !ImageCount! (
	set /A FinalLOOP+=1
	set /A ChosenIndex=!FinalLOOP!
	echo.-------------------------------------------------------------------------------
	echo.%txtLOOP4Sourcepos1% [install.!LowerCase!, %txtLOOP4Sourcepos02%
	echo.%txtHigherThanLastSelection%
	echo.-------------------------------------------------------------------------------
	echo.
	call :Formula
	echo.%txtProceedingWithFinalLOOP%
	echo.
	if !RepeatCommandCount! geq 1 (
		call :RepeatDeleteImageCommand
	)
	set PreviouslyChosenIndex=
	echo.===============================================================================
	echo.%txtEndFinalLOOP%
	echo.===============================================================================
)

echo.-------------------------------------------------------------------------------
echo.%txtFinishedDeletingUnselectedSourcepos1% !UpperCase! %txtFinishedDeletingUnselectedSourcepos2%
echo.-------------------------------------------------------------------------------

goto :Stop

:Formula
:: RepeatCommandCount = ChosenIndex - (PreviouslyChosenIndex + Constant)
:: RepeatCommandCount = ChosenIndex - (PreviouslyChosenIndex + 1)
if "!PreviouslyChosenIndex!" equ "" (
	set /A PreviouslyChosenIndex=0
)
set /A RepeatCommandCount=!ChosenIndex!-(!PreviouslyChosenIndex!+1)
set /A PreviouslyChosenIndex=!ChosenIndex!
set /A IndexRemovalID+=1
goto :EOF

:RepeatDeleteImageCommand
if !RepeatCommandCount! geq 1 (
	echo.%txtAddingIndexRemovalID%
	echo.%txtTheNewIndexRemovalID% [!IndexRemovalID!].
	echo.-------------------------------------------------------------------------------
	echo.%txtUnselectedImageIndexesStartedRemoved%
	if !RepeatCommandCount! equ 1 (
		echo.%txtbyRepeating1TimesLoop%
	) else (
		echo.%txtbyRepeatingpos1% [!RepeatCommandCount!] %txtbyRepeatingpos2%
	)
	echo.%txtforSpecifiedImageIndexRemovalID% [!IndexRemovalID!].
	echo.-------------------------------------------------------------------------------
) else (
	echo.%txtThereIntervalRemoveline1%
	echo.%txtThereIntervalRemoveline2%
	echo.%txtThereIntervalRemoveline3%
)

for /L %%r IN (1, 1, !RepeatCommandCount!) DO (
	echo.
	echo.    %txtProcessingRepetition% [%%r]...
	call :DeleteImage "!InstallImageFile!", !IndexRemovalID!
	echo.%txtTheRepetitionpos1% [%%r] %txtTheRepetitionpos2%
	echo.
)
goto :EOF

:Stop
echo.
echo.===============================================================================
echo.

set RepeatCommandCount=
set PreviouslyChosenIndex=
set ChosenIndex=
set IndexRemovalID=
set StartImageCount=

set ChosenSource=
set /A ChosenCount=0
set ImageIndexNo=
set AutoImageIndexNo=
set Auto=
set SpecifiedSourceIndex=

:: Returning to ...
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - WIM Manager
::-------------------------------------------------------------------------------------------
:WIMManager

set "CurrentMenu=WIMManager"

cls
echo.===============================================================================
echo.%txtWIMManager%
echo.===============================================================================
echo.

:: Checking whether Source is Applied.
if "%IsSourceSelected%" equ "Yes" (
	echo.%GlobalCantUseThisFeature%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :MainMenu
)

echo.  [A]   %txtADisplay%
echo.  [B]   %txtBRename%
echo.  [C]   %txtCExport%
echo.  [D]   %txtDConvert%
echo.  [E]   %txtESplit%
echo.  [F]   %txtFMerge%
echo.  [G]   %txtGUpgrade%
echo.  [H]   %txtHCapture%
echo.  [I]   %txtIApply%
echo.  [J]   %txtJCleanup%
echo.  [K]   %txtKOptimize%
echo.
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:ABCDEFGHIJKX /N /M "%GlobalEnterChoice% "
if errorlevel 12 goto :ToolsMenu
if errorlevel 11 call :WIMOptimize
if errorlevel 10 call :WIMCleanUp
if errorlevel  9 call :WIMApply
if errorlevel  8 call :WIMCapture
if errorlevel  7 call :WIMUpgrade
if errorlevel  6 call :WIMMerge
if errorlevel  5 call :WIMSplit
if errorlevel  4 call :WIMConvert
if errorlevel  3 call :WIMExport
if errorlevel  2 call :WIMRename
if errorlevel  1 call :WIMDisplay

if "!Allowed!" equ "I" (
	echo.
) else (
	pause
)
goto :!CurrentMenu!
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Display WIM Image Information
::-------------------------------------------------------------------------------------------
:WIMDisplay

cls
echo.===============================================================================
echo.%txtDisplayWIMImageInformation%
echo.===============================================================================

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%txtPleaseCopyWindowsSetup%
	echo.
	echo.===============================================================================
	echo.
	goto :Stop
)

:: Display Image Information
call :ShowImageInfo

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Rename WIM Index
::-------------------------------------------------------------------------------------------
:WIMRename

setlocal

set NewImageName=
set NewImageDescription=

cls
echo.===============================================================================
echo.%txtRenameWIMImageIndex%
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingRenamingSourceWIM%
echo.-------------------------------------------------------------------------------

:: Display Image Information
call :ShowImageInfo

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Single Image Index to Rename
	set /p ImageIndexNo=%GlobalEnterSingleWIM% :
	if /i "!ImageIndexNo!" equ "Q" (
		set /A ChosenCount=0
		set ChosenSource=
		set ImageIndexNo=
		set AutoImageIndexNo=
		set Auto=
		set SpecifiedSourceIndex=
		goto :MainMenu
	)
)

echo.
set /p NewImageName=%txtEnterWIMIndexName%
echo.
set /p NewImageDescription=%txtEnterWIMIndexDescription%

echo.
echo.-------------------------------------------------------------------------------
echo.%txtRenamingSourceWIMImagepos1% : !ImageIndexNo!] %txtRenamingSourceWIMImagepos2%
echo.-------------------------------------------------------------------------------
echo.
"%WimlibImagex%" info "%InstallWim%" !ImageIndexNo! "%NewImageName%" "%NewImageDescription%" --image-property DISPLAYNAME="%NewImageName%" --image-property DISPLAYDESCRIPTION="%NewImageDescription%"
echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedRenamingSourceWIM%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	pause
)

set NewImageName=
set NewImageDescription=

if "%IsSourceSelected%" equ "No" (
	set ChosenSource=
	set /A ChosenCount=0
	set ImageIndexNo=
	set AutoImageIndexNo=
	set Auto=
	set SpecifiedSourceIndex=
)

endlocal

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Export WIM Index to Source WIM Image or New WIM Image
::-------------------------------------------------------------------------------------------
:WIMExport

setlocal

set WimImageFileName=
set Exported2NewImage=
set Export2SameImage=
set Replace=

cls
echo.===============================================================================
echo.%txtExportWIMIndex%
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingExportingSourceWIM%
echo.-------------------------------------------------------------------------------

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Single or Multi Image Index to Export
	call :GetImageIndexNo "%InstallWim%", 1
) else (
	:: Display Image Information
	call :ShowImageInfo
)

if "!Exported2NewImage!" equ "" (
	echo.
	echo.
	echo.  [1] %txt1JustCreateNew%
	echo.  [2] %txt2CreateNew%
	echo.  [3] %txt3AddSelectedImageIndexes%
	echo.      %txtNoteTheChosenOnesWill%
	echo.
	choice /C:123 /N /M "%GlobalEnterChoice% "
	if errorlevel 3 (
		set "Export2SameImage=1"
	)
	if errorlevel 2 (
		set "Replace=1"
		set "Exported2NewImage=%DVD%\sources\Exportedinstall.wim"
	)
	if errorlevel 1 (
		echo.
		set /p WimImageFileName=%txtEnterWIMImageFilename% [.wim] :
		set "Exported2NewImage=%DVD%\sources\!WimImageFileName!.wim"
	)
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtExportingSourceWIMImageIndex%
echo.-------------------------------------------------------------------------------
echo.

for %%i in (!ImageIndexNo!) do (
	echo.-------------------------------------------------------------------------------
	if "!Exported2NewImage!" neq "" (
		if "!Replace!" neq "" (
			echo.%GlobalExportingSourceWIMImagepos1% %%i] %GlobalTo% [install.wim]...
		) else (
			echo.%GlobalExportingSourceWIMImagepos1% %%i] %GlobalTo% [!WimImageFileName!.wim]...
		)
	)
	if "!Export2SameImage!" neq "" echo.%GlobalExportingSourceWIMImagepos1% %%i] %GlobalTo% [install.wim]...
	echo.-------------------------------------------------------------------------------
	if "!Exported2NewImage!" neq "" (
		rem call :ExportImageIndex "%InstallWim%", %%i, "!Exported2NewImage!", "WIM", "No"
		echo.
		"%WimlibImagex%" export "%InstallWim%" %%i "%DVD%\sources\!Exported2NewImage!" --compress=LZX
		echo.
	)
	if "!Export2SameImage!" neq "" (
		rem call :ExportImageIndex "%InstallWim%", %%i, "%InstallWim%", "WIM", "No"
		echo.
		"%WimlibImagex%" export "%InstallWim%" %%i "%InstallWim%" --compress=LZX
		echo.
	)
)
if "!Replace!" neq "" move /y "!Exported2NewImage!" "%InstallWim%" >nul

echo.-------------------------------------------------------------------------------
echo.%txtFinishedExportingSourceWIMImageIndex%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set WimImageFileName=
set Exported2NewImage=
set Export2SameImage=
set Replace=

if "%IsSourceSelected%" equ "No" (
	set ChosenSource=
	set /A ChosenCount=0
	set ImageIndexNo=
	set AutoImageIndexNo=
	set Auto=
	set SpecifiedSourceIndex=
)

endlocal

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Convert WIM Image to ESD Image
::-------------------------------------------------------------------------------------------
:WIMConvert

cls
echo.===============================================================================
echo.%txtConvertWIMImageESDImage%
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingConvertingWIMImageESDImage%
echo.-------------------------------------------------------------------------------

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Single or Multi Image Index to WIM Convert
	call :GetImageIndexNo "%InstallWim%", 1
)

echo.
echo.-------------------------------------------------------------------------------
echo.%txtConvertingWIMImageESDImage%
echo.-------------------------------------------------------------------------------

:: Exporting Source Image to ESD Image
if !ChosenCount! lss !ImageCount! (
	for %%i in (!ImageIndexNo!) do (
		rem call :ExportImageIndex "%InstallWim%", %%i, "%InstallEsd%", "ESD", "No"
		echo.
		"%WimlibImagex%" export "%InstallWim%" %%i "%_TMP%\install.wim" --compress=LZX
		echo.
	)
)
:: Move and Replace Source "install.wim" for New "install.wim" Image File
if exist "%_TMP%\install.wim" move /y "%_TMP%\install.wim" "%InstallWim%" >nul

rem call :ExportImage "%InstallWim%", "%InstallEsd%", "ESD", "No"
echo.
"%WimlibImagex%" export "%InstallWim%" all "%InstallEsd%" --compress=LZMS:100 --solid
echo.

:: Deleting Source Image File
if exist "%InstallEsd%" call :RemoveFile "%InstallWim%"

echo.-------------------------------------------------------------------------------
echo.%txtFinishedConvertingWIMImageESDImage%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

if "%IsSourceSelected%" equ "No" (
	set ChosenSource=
	set /A ChosenCount=0
	set ImageIndexNo=
	set AutoImageIndexNo=
	set Auto=
	set SpecifiedSourceIndex=
)

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Split WIM Image
::-------------------------------------------------------------------------------------------
:WIMSplit

setlocal

set WimImageSplitFileSize=

cls
echo.===============================================================================
echo.%txtSplitWIMImage%
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingSplitingSourceWIMImage%
echo.-------------------------------------------------------------------------------
echo.
set /p WimImageSplitFileSize=%txtEnterWIMImageSplitFileSize%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtSplitingSourceWIMImage%
echo.-------------------------------------------------------------------------------

call :SplitImage "%InstallWim%", "%DVD%\sources\install.swm", %WimImageSplitFileSize%
call :RemoveFile "%InstallWim%"

echo.-------------------------------------------------------------------------------
echo.%txtFinishedSplitingSourceWIMImage%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set WimImageSplitFileSize=

endlocal

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Merge Splitted WIM Image
::-------------------------------------------------------------------------------------------
:WIMMerge

cls
echo.===============================================================================
echo.%txtMergeSplittedWIMImage%
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingMergingSplittedWIMImage%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtMergingSourceWIMImage%
echo.-------------------------------------------------------------------------------

call :MergeImage "%DVD%\sources\install", "%InstallWim%"
call :RemoveFile "%DVD%\sources\*.swm"

echo.-------------------------------------------------------------------------------
echo.%txtFinishedMergingSplittedWIMImage%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Upgrade WIM Index Edition
::-------------------------------------------------------------------------------------------
:WIMUpgrade

setlocal

set SourceEdition=
set TargetEdition=
set Flag=
set Edition=
set Name=
set Description=
set DisplayName=
set DisplayDescription=

cls
echo.===============================================================================
echo.%txtUpgradeWIMEdition%
echo.===============================================================================

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

:: Display Image Information
call :ShowImageInfo

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Single Image Index to Upgrade
	set /p ImageIndexNo=%GlobalEnterSingleWIM% :
	if /i "!ImageIndexNo!" equ "Q" (
		set /A ChosenCount=0
		set ChosenSource=
		set ImageIndexNo=
		set AutoImageIndexNo=
		set Auto=
		set SpecifiedSourceIndex=
		goto :MainMenu
	)
)

:: Getting Selected Image Index Information
call :GetImageIndexInfo "%InstallWim%", 1 >nul

:: Setting Selected Source OS version
call :SelectedSourceOS

set /A CheckingCount=0

echo.

:: Checking whether the selected Source OS is ...
if "%SelectedSourceOS%" equ "w7" (
	:: Windows 7 Enterprise Edition
	if /i "%ImageFlag%" equ "Enterprise" (
		echo.%txtWindows7EnterpriseUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 7 Enterprise N Edition
	if /i "%ImageFlag%" equ "EnterpriseN" (
		echo.%txtWindows7EnterpriseNUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 7 Enterprise K Edition
	if /i "%ImageFlag%" equ "EnterpriseK" (
		echo.%txtWindows7EnterpriseKUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 7 Enterprise KN Edition
	if /i "%ImageFlag%" equ "EnterpriseKN" (
		echo.%txtWindows7EnterpriseKNUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 7 Ultimate Edition
	if /i "%ImageFlag%" equ "Ultimate" (
		echo.%txtWindows7UltimateUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 7 Ultimate N Edition
	if /i "%ImageFlag%" equ "UltimateN" (
		echo.%txtWindows7UltimateNUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 7 Ultimate K Edition
	if /i "%ImageFlag%" equ "UltimateK" (
		echo.%txtWindows7UltimateKUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 7 Ultimate KN Edition
	if /i "%ImageFlag%" equ "UltimateKN" (
		echo.%txtWindows7UltimateKNUpgraded%
		set /A CheckingCount+=1
	)
)

if "%SelectedSourceOS%" equ "w81" (
	:: Windows 8.1 Pro with Media Center Edition
	if /i "%ImageFlag%" equ "ProfessionalWMC" (
		echo.%txtWindows81ProMediaUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 8.1 Pro N Edition
	if /i "%ImageFlag%" equ "ProfessionalN" (
		echo.%txtWindows81ProNUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 8.1 Enterprise Edition
	if /i "%ImageFlag%" equ "Enterprise" (
		echo.%txtWindows81EnterpriseUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 8.1 Enterprise N Edition
	if /i "%ImageFlag%" equ "EnterpriseN" (
		echo.%txtWindows81EnterpriseNUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 8.1 Embedded Industry Pro/Enterprise Edition
	if /i "%ImageFlag%" equ "EmbeddedIndustry" (
		echo.%txtWindowsEmbedded81ProUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 8.1 Embedded Industry Enterprise Edition
	if /i "%ImageFlag%" equ "EmbeddedIndustryE" (
		echo.%txtWindowsEmbedded81EnterpriseUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows Server 2012 R2 Datacenter Core Edition
	if /i "%ImageFlag%" equ "ServerDataCenterCore" (
		echo.%txtWindowsServer2012CoreUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows Server 2012 R2 Datacenter Edition
	if /i "%ImageFlag%" equ "ServerDataCenter" (
		echo.%txtWindowsServer2012R2Upgraded%
		set /A CheckingCount+=1
	)

	:: Windows Server 2012 R2 Foundation Edition
	if /i "%ImageFlag%" equ "ServerWinFoundation" (
		echo.%txtWindowsServer2012R2FoundationUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows Storage Server 2012 R2 Standard Edition
	if /i "%ImageFlag%" equ "ServerStorageStandard" (
		echo.%txtWindowsServer2012R2StandardUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows Storage Server 2012 R2 Workgroup Edition
	if /i "%ImageFlag%" equ "ServerStorageWorkgroup" (
		echo.%txtWindowsServer2012R2WorkgroupUpgraded%
		set /A CheckingCount+=1
	)
)

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%SelectedSourceOS%" equ "w10" (
		:: Windows 10 Enterprise Edition
		if "%ImageBuild%" equ "10240" if /i "%ImageFlag%" equ "Enterprise" (
			echo.%txtWindows10EnterpriseUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows 10 Enterprise N Edition
		if "%ImageBuild%" equ "10240" if /i "%ImageFlag%" equ "EnterpriseN" (
			echo.%txtWindows10EnterpriseNUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows 10 S Edition
		if "%ImageBuild%" equ "16299" if /i "%ImageEdition%" equ "Cloud" (
			echo.%txtWindows10SUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows 10 S N Edition
		if "%ImageBuild%" equ "16299" if /i "%ImageEdition%" equ "CloudN" (
			echo.%txtWindows10SNUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows 10 Professional Edition
		if "%ImageBuild%" equ "16299" if /i "%ImageFlag%" equ "Professional" (
			echo.%txtWindows10ProUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows 10 Professional N Edition
		if "%ImageBuild%" equ "16299" if /i "%ImageFlag%" equ "ProfessionalN" (
			echo.%txtWindows10ProNUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows 10 Enterprise LTSB/LTSC Edition
		if /i "%ImageFlag%" equ "EnterpriseS" (
			if "%ImageBuild%" equ "10240" (
				echo.%txtWindows10Enterprise2015LTSBUpgraded%
				set /A CheckingCount+=1
			)
			if "%ImageBuild%" equ "14393" (
				echo.%txtWindows10Enterprise2016LTSBUpgraded%
				set /A CheckingCount+=1
			)
			if "%ImageBuild%" equ "17763" (
				echo.%txtWindows10Enterprise2019LTSCpgraded%
				set /A CheckingCount+=1
			)
			if "%ImageBuild%" equ "19044" (
				echo.%txtWindows10Enterprise2021LTSCpgraded%
				set /A CheckingCount+=1
			)
		)

		:: Windows 10 Enterprise N LTSB/LTSC Edition
		if /i "%ImageFlag%" equ "EnterpriseSN" (
			if "%ImageBuild%" equ "10240" (
				echo.%txtWindows10EnterpriseN2015LTSBUpgraded%
				set /A CheckingCount+=1
			)
			if "%ImageBuild%" equ "14393" (
				echo.%txtWindows10EnterpriseN2016LTSBUpgraded%
				set /A CheckingCount+=1
			)
			if "%ImageBuild%" equ "17763" (
				echo.%txtWindows10EnterpriseN2019LTSCUpgraded%
				set /A CheckingCount+=1
			)
			if "%ImageBuild%" equ "19044" (
				echo.%txtWindows10Enterprise2021LTSCUpgraded%
				set /A CheckingCount+=1
			)
		)

		:: Windows Hyper Server 2016 Edition
		if /i "%ImageFlag%" equ "ServerHyper" (
			echo.%txtWindowsHyperVServer2016Upgraded%
			set /A CheckingCount+=1
		)

		:: Windows Server 2016 Azure Core Edition
		if /i "%ImageFlag%" equ "ServerAzureCor" (
			echo.%txtWindowsServer2016AzureCoreUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows Server 2016 Datacenter Edition
		if /i "%ImageFlag%" equ "ServerDatacenter" (
			echo.%txtWindowsServer2016DatacenterUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows Storage Server 2016 Standard Edition
		if /i "%ImageFlag%" equ "ServerStorageStandard" (
			echo.%txtWindowsServer2016StandardUpgraded%
			set /A CheckingCount+=1
		)

		:: Windows Storage Server 2016 Workgroup Edition
		if /i "%ImageFlag%" equ "ServerStorageWorkgroup" (
			echo.%txtWindowsServer2016WorkgroupUpgraded%
			set /A CheckingCount+=1
		)
	)

	:: Windows 10/11 Enterprise G Edition
	if /i "%ImageFlag%" equ "EnterpriseG" (
		echo.%GlobalWindows% %OSID% %txtEnterpriseGUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 10/11 Enterprise GN Edition
	if /i "%ImageFlag%" equ "EnterpriseGN" (
		echo.%GlobalWindows% %OSID% %txtEnterpriseGNUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 10/11 IoT Enterprise Edition
	if /i "%ImageFlag%" equ "IoTEnterprise" (
		echo.%GlobalWindows% %OSID% %txtIoTEnterpriseUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 10/11 IoT Enterprise N Edition
	if /i "%ImageFlag%" equ "IoTEnterpriseN" (
		echo.%GlobalWindows% %OSID% %txtIoTEnterpriseNUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 10/11 Education Edition
	if /i "%ImageFlag%" equ "Education" (
		echo.%GlobalWindows% %OSID% %txtEducationUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 10/11 Education N Edition
	if /i "%ImageFlag%" equ "EducationN" (
		echo.%GlobalWindows% %OSID% %txtEducationNUpgraded%
		set /A CheckingCount+=1
	)

	:: Windows 10/11 Enterprise Multi-Sessions, formely known as "for Virtual Desktops" Edition
	if /i "%ImageFlag%" equ "ServerRdsh" (
		echo.%GlobalWindows% %OSID% %txtEnterpriseMultiUpgraded%
		set /A CheckingCount+=1
	)
)

if "%CheckingCount%" neq "0" (
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)
	goto :WIMManager
)

set SourceEdition=%ImageFlag%

echo.-------------------------------------------------------------------------------
echo.%txtStartingUpgradingWIMImageEdition%
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtMountingImageIndexpos01% !ImageIndexNo!] %txtMountingImageIndexpos02% ^<%InstallMount%^>...
echo.-------------------------------------------------------------------------------
call :MountImage "%InstallWim%", !ImageIndexNo!, "%InstallMount%"
echo.-------------------------------------------------------------------------------
echo.
echo.-------------------------------------------------------------------------------
echo.%txtGettingTargetEditions%
echo.-------------------------------------------------------------------------------
echo.
for /f "tokens=2 delims=:" %%a in ('%DISM% /Image:"%InstallMount%" /Get-TargetEditions ^| find.exe /I "Target Edition"') do (echo. %%a)
echo.
:: Get Target Edition
set /p "TargetEdition=%txtEnterTargetEditions% "
echo.

:: Checking whether the Selected Source OS is a Windows 8.1 Pro Retail Edition
if "%SelectedSourceOS%" equ "w81" if /i "%ImageEdition%" equ "Professional" if "%TargetEdition%" equ "ProfessionalWMC" (
	echo.%txtCheckingWhetherSourceImage%
	echo.
	%DISM% /Format:Table /Image:"%InstallMount%" /Get-Packages | findstr.exe /I /C:"GVLK-Package" >nul
	if not errorlevel 1 (
		echo.%txtSelectedSourceNot%
		echo.
		echo.%txtPleaseUseWindows81Pro%
		goto :Stop
	)
)
echo.-------------------------------------------------------------------------------

if "%SelectedSourceOS%" equ "w7" (
	if "%ImageInstallationType%" equ "Client" echo.%txtUpgradingWindows7pos1% %SourceEdition% %GlobalTo% %TargetEdition%...
	if "%ImageInstallationType:~,6%" equ "Server" echo.%txtUpgradingWindowsServer2008R2% %SourceEdition% %GlobalTo% %TargetEdition%...
)

if "%SelectedSourceOS%" equ "w81" (
	if "%ImageInstallationType%" equ "Client" echo.%txtUpgradingWindows81% %SourceEdition% %GlobalTo% %TargetEdition%...
	if "%ImageInstallationType%" equ "Embedded" echo.%txtUpgradingWindows81Embedded% %SourceEdition% %GlobalTo% %TargetEdition%...
	if "%ImageInstallationType:~,6%" equ "Server" echo.%txtUpgradingWindowsServer2012R2% %SourceEdition% %GlobalTo% %TargetEdition%...
)

if "%SelectedSourceOS%" equ "w10" (
	if "%ImageInstallationType%" equ "Client" echo.%txtUpgradingWindows10% %SourceEdition% %GlobalTo% %TargetEdition%...
	if "%ImageInstallationType:~,6%" equ "Server" (
		if "%ImageBuild%" equ "14393" echo.%GlobalUpgradingWindowsServer% 2016 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "15063" echo.%GlobalUpgradingWindowsServer% v1709 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "16299" echo.%GlobalUpgradingWindowsServer% v1803 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "17134" echo.%GlobalUpgradingWindowsServer% v1809 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "17763" echo.%GlobalUpgradingWindowsServer% 2019 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "18362" echo.%GlobalUpgradingWindowsServer% v1903 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "18363" echo.%GlobalUpgradingWindowsServer% v1909 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "19041" echo.%GlobalUpgradingWindowsServer% v2004 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "19042" echo.%GlobalUpgradingWindowsServer% v20H2 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "19043" echo.%GlobalUpgradingWindowsServer% v21H1 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "19044" echo.%GlobalUpgradingWindowsServer% v21H2 %SourceEdition% %GlobalTo% %TargetEdition%...
		if "%ImageBuild%" equ "20348" echo.%GlobalUpgradingWindowsServer% 2022 %SourceEdition% %GlobalTo% %TargetEdition%...
	)
)

if "%SelectedSourceOS%" equ "w11" (
	if "%ImageInstallationType%" equ "Client" echo.%txtUpgradingWindows11% %SourceEdition% %GlobalTo% %TargetEdition%...	)
)

echo.-------------------------------------------------------------------------------
%DISM% /Image:"%InstallMount%" /Set-Edition:%TargetEdition%
echo.
echo.-------------------------------------------------------------------------------
echo.%GlobalUnMountingImage% !ImageIndexNo!] %GlobalWIMImage%
echo.-------------------------------------------------------------------------------
call :UnMountImage "%InstallMount%", "Commit"
echo.-------------------------------------------------------------------------------
echo.%txtApplyingTargetWIMImage%
echo.-------------------------------------------------------------------------------
echo.

if "%SelectedSourceOS%" equ "w7" (
	if "%TargetEdition%" equ "HomeBasic" (
		set "Flag=HomeBasic"
		set "Edition=HomeBasic"
		set "Name=Windows 7 HOMEBASIC"
		set "Description=Windows 7 HOMEBASIC"
		set "DisplayName=Windows 7 Home Basic"
		set "DisplayDescription=Windows 7 Home Basic"
	)

	if "%TargetEdition%" equ "HomePremium" (
		set "Flag=HomePremium"
		set "Edition=HomePremium"
		set "Name=Windows 7 HOMEPREMIUM"
		set "Description=Windows 7 HOMEPREMIUM"
		set "DisplayName=Windows 7 Home Premium"
		set "DisplayDescription=Windows 7 Home Premium"
	)

	if "%TargetEdition%" equ "Professional" (
		set "Flag=Professional"
		set "Edition=Professional"
		set "Name=Windows 7 PROFESSIONAL"
		set "Description=Windows 7 PROFESSIONAL"
		set "DisplayName=Windows 7 Professional"
		set "DisplayDescription=Windows 7 Professional"
	)

	if "%TargetEdition%" equ "Ultimate" (
		set "Flag=Ultimate"
		set "Edition=Ultimate"
		set "Name=Windows 7 ULTIMATE"
		set "Description=Windows 7 ULTIMATE"
		set "DisplayName=Windows 7 Ultimate"
		set "DisplayDescription=Windows 7 Ultimate"
	)

	if "%TargetEdition%" equ "HomeBasicN" (
		set "Flag=HomeBasicN"
		set "Edition=HomeBasicN"
		set "Name=Windows 7 HOMEBASICN"
		set "Description=Windows 7 HOMEBASICN"
		set "DisplayName=Windows 7 Home Basic N"
		set "DisplayDescription=Windows 7 Home Basic N"
	)

	if "%TargetEdition%" equ "HomePremiumN" (
		set "Flag=HomePremiumN"
		set "Edition=HomePremiumN"
		set "Name=Windows 7 HOMEPREMIUMN"
		set "Description=Windows 7 HOMEPREMIUMN"
		set "DisplayName=Windows 7 Home Premium N"
		set "DisplayDescription=Windows 7 Home Premium N"
	)

	if "%TargetEdition%" equ "ProfessionalN" (
		set "Flag=ProfessionalN"
		set "Edition=ProfessionalN"
		set "Name=Windows 7 PROFESSIONALN"
		set "Description=Windows 7 PROFESSIONALN"
		set "DisplayName=Windows 7 Professional N"
		set "DisplayDescription=Windows 7 Professional N"
	)

	if "%TargetEdition%" equ "UltimateN" (
		set "Flag=UltimateN"
		set "Edition=UltimateN"
		set "Name=Windows 7 ULTIMATEN"
		set "Description=Windows 7 ULTIMATEN"
		set "DisplayName=Windows 7 Ultimate N"
		set "DisplayDescription=Windows 7 Ultimate N"
	)

	if "%TargetEdition%" equ "HomeBasicK" (
		set "Flag=HomeBasicK"
		set "Edition=HomeBasicK"
		set "Name=Windows 7 HOMEBASICK"
		set "Description=Windows 7 HOMEBASICK"
		set "DisplayName=Windows 7 Home Basic K"
		set "DisplayDescription=Windows 7 Home Basic K"
	)

	if "%TargetEdition%" equ "HomePremiumK" (
		set "Flag=HomePremiumK"
		set "Edition=HomePremiumK"
		set "Name=Windows 7 HOMEPREMIUMK"
		set "Description=Windows 7 HOMEPREMIUMK"
		set "DisplayName=Windows 7 Home Premium K"
		set "DisplayDescription=Windows 7 Home Premium K"
	)

	if "%TargetEdition%" equ "ProfessionalK" (
		set "Flag=ProfessionalK"
		set "Edition=ProfessionalK"
		set "Name=Windows 7 PROFESSIONALK"
		set "Description=Windows 7 PROFESSIONALK"
		set "DisplayName=Windows 7 Professional K"
		set "DisplayDescription=Windows 7 Professional K"
	)

	if "%TargetEdition%" equ "UltimateK" (
		set "Flag=UltimateK"
		set "Edition=UltimateK"
		set "Name=Windows 7 ULTIMATEK"
		set "Description=Windows 7 ULTIMATEK"
		set "DisplayName=Windows 7 Ultimate K"
		set "DisplayDescription=Windows 7 Ultimate K"
	)

	if "%TargetEdition%" equ "HomeBasicKN" (
		set "Flag=HomeBasicKN"
		set "Edition=HomeBasicKN"
		set "Name=Windows 7 HOMEBASICKN"
		set "Description=Windows 7 HOMEBASICKN"
		set "DisplayName=Windows 7 Home Basic KN"
		set "DisplayDescription=Windows 7 Home Basic KN"
	)

	if "%TargetEdition%" equ "HomePremiumKN" (
		set "Flag=HomePremiumKN"
		set "Edition=HomePremiumKN"
		set "Name=Windows 7 HOMEPREMIUMKN"
		set "Description=Windows 7 HOMEPREMIUMKN"
		set "DisplayName=Windows 7 Home Premium KN"
		set "DisplayDescription=Windows 7 Home Premium KN"
	)

	if "%TargetEdition%" equ "ProfessionalKN" (
		set "Flag=ProfessionalKN"
		set "Edition=ProfessionalKN"
		set "Name=Windows 7 PROFESSIONALKN"
		set "Description=Windows 7 PROFESSIONALKN"
		set "DisplayName=Windows 7 Professional KN"
		set "DisplayDescription=Windows 7 Professional KN"
	)

	if "%TargetEdition%" equ "UltimateKN" (
		set "Flag=UltimateKN"
		set "Edition=UltimateKN"
		set "Name=Windows 7 ULTIMATEKN"
		set "Description=Windows 7 ULTIMATEKN"
		set "DisplayName=Windows 7 Ultimate KN"
		set "DisplayDescription=Windows 7 Ultimate KN"
	)

	if "%TargetEdition%" equ "ServerStandardCore" (
		set "Flag=ServerStandardCore"
		set "Edition=ServerStandard"
		set "Name=Windows Server 2008 R2 SERVERSTANDARDCORE"
		set "Description=Windows Server 2008 R2 SERVERSTANDARDCORE"
		set "DisplayName=Windows Server 2008 R2 Standard ^(Server Core Installation^)"
		set "DisplayDescription=This option installs a minimal installation of Windows Server without the standard Windows user interface, and with a subset of server roles that can be managed from a command prompt, reducing management requirements and attack surface."
	)

	if "%TargetEdition%" equ "ServerEnterpriseCore" (
		set "Flag=ServerEnterpriseCore"
		set "Edition=ServerEnterprise"
		set "Name=Windows Server 2008 R2 SERVERENTERPRISECORE"
		set "Description=Windows Server 2008 R2 SERVERENTERPRISECORE"
		set "DisplayName=Windows Server 2008 R2 Enterprise ^(Server Core Installation^)"
		set "DisplayDescription=This option installs a minimal installation of Windows Server without the standard Windows user interface, and with a subset of server roles that can be managed from a command prompt, reducing management requirements and attack surface."
	)

	if "%TargetEdition%" equ "ServerDatacenterCore" (
		set "Flag=ServerDataCenterCore"
		set "Edition=ServerDatacenter"
		set "Name=Windows Server 2008 R2 SERVERDATACENTERCORE"
		set "Description=Windows Server 2008 R2 SERVERDATACENTERCORE"
		set "DisplayName=Windows Server 2008 R2 Datacenter ^(Server Core Installation^)"
		set "DisplayDescription=This option installs a minimal installation of Windows Server without the standard Windows user interface, and with a subset of server roles that can be managed from a command prompt, reducing management requirements and attack surface."
	)

	if "%TargetEdition%" equ "ServerStandard" (
		set "Flag=ServerStandard"
		set "Edition=ServerStandard"
		set "Name=Windows Server 2008 R2 SERVERSTANDARD"
		set "Description=Windows Server 2008 R2 SERVERSTANDARD"
		set "DisplayName=Windows Server 2008 R2 Standard ^(Full Installation^)"
		set "DisplayDescription=This option installs the complete installation of Windows Server. This installation includes the entire user interface, and it supports all of the server roles."
	)

	if "%TargetEdition%" equ "ServerEnterprise" (
		set "Flag=ServerEnterprise"
		set "Edition=ServerEnterprise"
		set "Name=Windows Server 2008 R2 SERVERENTERPRISE"
		set "Description=Windows Server 2008 R2 SERVERENTERPRISE"
		set "DisplayName=Windows Server 2008 R2 Enterprise ^(Full Installation^)"
		set "DisplayDescription=This option installs the complete installation of Windows Server. This installation includes the entire user interface, and it supports all of the server roles."
	)

	if "%TargetEdition%" equ "ServerDatacenter" (
		set "Flag=ServerDataCenter"
		set "Edition=ServerDatacenter"
		set "Name=Windows Server 2008 R2 SERVERDATACENTER"
		set "Description=Windows Server 2008 R2 SERVERDATACENTER"
		set "DisplayName=Windows Server 2008 R2 Datacenter ^(Full Installation^)"
		set "DisplayDescription=This option installs the complete installation of Windows Server. This installation includes the entire user interface, and it supports all of the server roles."
	)
)

if "%SelectedSourceOS%" equ "w81" (
	if "%TargetEdition%" equ "Core" (
		set "Flag=Core"
		set "Edition=Core"
		set "Name=Windows 8.1 Core"
		set "Description=Windows 8.1 Core"
		set "DisplayName=Windows 8.1 Core"
		set "DisplayDescription=Windows 8.1 Core"
	)

	if "%TargetEdition%" equ "Professional" (
		set "Flag=Professional"
		set "Edition=Professional"
		set "Name=Windows 8.1 Pro"
		set "Description=Windows 8.1 Pro"
		set "DisplayName=Windows 8.1 Pro"
		set "DisplayDescription=Windows 8.1 Pro"
	)

	if "%TargetEdition%" equ "ProfessionalWMC" (
		set "Flag=ProfessionalWMC"
		set "Edition=ProfessionalWMC"
		set "Name=Windows 8.1 Pro WMC"
		set "Description=Windows 8.1 Pro WMC"
		set "DisplayName=Windows 8.1 Pro with Media Center"
		set "DisplayDescription=Windows 8.1 Pro with Media Center"
	)

	if "%TargetEdition%" equ "ProfessionalN" (
		set "Flag=ProfessionalN"
		set "Edition=ProfessionalN"
		set "Name=Windows 8.1 Pro N"
		set "Description=Windows 8.1 Pro N"
		set "DisplayName=Windows 8.1 Pro N"
		set "DisplayDescription=Windows 8.1 Pro N"
	)

	if "%TargetEdition%" equ "ServerDatacenterCore" (
		set "Flag=ServerDatacenterCore"
		set "Edition=ServerDatacenterCore"
		set "Name=Windows Server 2012 R2 Datacenter ^(Server Core Installation^)"
		set "Description=This option ^(recommended^) reduces management and servicing by installing only what is needed to run most server roles and applications. It does not include a GUI, but you can fully manage the server locally or remotely with Windows PowerShell or other tools. You can switch to a different installation option later. See \"Windows Server Installation Options.\""
		set "DisplayName=Windows Server 2012 R2 Datacenter ^(Server Core Installation^)"
		set "DisplayDescription=This option ^(recommended^) reduces management and servicing by installing only what is needed to run most server roles and applications. It does not include a GUI, but you can fully manage the server locally or remotely with Windows PowerShell or other tools. You can switch to a different installation option later. See \"Windows Server Installation Options.\""
	)

	if "%TargetEdition%" equ "ServerStandard" (
		set "Flag=ServerStandard"
		set "Edition=ServerStandard"
		set "Name=Windows Server 2012 R2 Standard ^(Server with a GUI^)"
		set "Description=This option is useful when a GUI is required-for example, to provide backward compatibility for an application that cannot be run on a Server Core installation. All server roles and features are supported. You can switch to a different installation option later. See \"Windows Server Installation Options.\""
		set "DisplayName=Windows Server 2012 R2 Standard ^(Server with a GUI^)"
		set "DisplayDescription=This option is useful when a GUI is required-for example, to provide backward compatibility for an application that cannot be run on a Server Core installation. All server roles and features are supported. You can switch to a different installation option later. See \"Windows Server Installation Options.\""
	)

	if "%TargetEdition%" equ "ServerDatacenter" (
		set "Flag=ServerDatacenter"
		set "Edition=ServerDatacenter"
		set "Name=Windows Server 2012 R2 Datacenter ^(Server with a GUI^)"
		set "Description=This option is useful when a GUI is required-for example, to provide backward compatibility for an application that cannot be run on a Server Core installation. All server roles and features are supported. You can switch to a different installation option later. See \"Windows Server Installation Options.\""
		set "DisplayName=Windows Server 2012 R2 Datacenter ^(Server with a GUI^)"
		set "DisplayDescription=This option is useful when a GUI is required-for example, to provide backward compatibility for an application that cannot be run on a Server Core installation. All server roles and features are supported. You can switch to a different installation option later. See \"Windows Server Installation Options.\""
	)
)

if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	if "%TargetEdition%" equ "CoreCountrySpecific" (
		set "Flag=CoreCountrySpecific"
		set "Edition=CoreCountrySpecific"
		set "Name=Windows %OSID% Home China"
		set "Description=Windows %OSID% Home China"
		set "DisplayName=Windows %OSID% Home China"
		set "DisplayDescription=Windows %OSID% Home China"
	)

	if "%TargetEdition%" equ "CoreSingleLanguage" (
		set "Flag=CoreSingleLanguage"
		set "Edition=CoreSingleLanguage"
		set "Name=Windows %OSID% Home Single Language"
		set "Description=Windows %OSID% Home Single Language"
		set "DisplayName=Windows %OSID% Home Single Language"
		set "DisplayDescription=Windows %OSID% Home Single Language"
	)

	if "%TargetEdition%" equ "Core" (
		set "Flag=Core"
		set "Edition=Core"
		set "Name=Windows %OSID% Home"
		set "Description=Windows %OSID% Home"
		set "DisplayName=Windows %OSID% Home"
		set "DisplayDescription=Windows %OSID% Home"
	)

	if "%TargetEdition%" equ "CoreN" (
		set "Flag=CoreN"
		set "Edition=CoreN"
		set "Name=Windows %OSID% Home N"
		set "Description=Windows %OSID% Home N"
		set "DisplayName=Windows %OSID% Home N"
		set "DisplayDescription=Windows %OSID% Home N"
	)

	if "%TargetEdition%" equ "ProfessionalCountrySpecific" (
		set "Flag=ProfessionalCountrySpecific"
		set "Edition=ProfessionalCountrySpecific"
		set "Name=Windows %OSID% Pro China"
		set "Description=Windows %OSID% Pro China"
		set "DisplayName=Windows %OSID% Pro China"
		set "DisplayDescription=Windows %OSID% Pro China"
	)

	if "%TargetEdition%" equ "ProfessionalSingleLanguage" (
		set "Flag=ProfessionalSingleLanguage"
		set "Edition=ProfessionalSingleLanguage"
		set "Name=Windows %OSID% Pro Single Language"
		set "Description=Windows %OSID% Pro Single Language"
		set "DisplayName=Windows %OSID% Pro Single Language"
		set "DisplayDescription=Windows %OSID% Pro Single Language"
	)

	if "%TargetEdition%" equ "Professional" (
		set "Flag=Professional"
		set "Edition=Professional"
		set "Name=Windows %OSID% Pro"
		set "Description=Windows %OSID% Pro"
		set "DisplayName=Windows %OSID% Pro"
		set "DisplayDescription=Windows %OSID% Pro"
	)

	if "%TargetEdition%" equ "ProfessionalN" (
		set "Flag=ProfessionalN"
		set "Edition=ProfessionalN"
		set "Name=Windows %OSID% Pro N"
		set "Description=Windows %OSID% Pro N"
		set "DisplayName=Windows %OSID% Pro N"
		set "DisplayDescription=Windows %OSID% Pro N"
	)

	if "%TargetEdition%" equ "Education" (
		set "Flag=Education"
		set "Edition=Education"
		set "Name=Windows %OSID% Education"
		set "Description=Windows %OSID% Education"
		set "DisplayName=Windows %OSID% Education"
		set "DisplayDescription=Windows %OSID% Education"
	)

	if "%TargetEdition%" equ "EducationN" (
		set "Flag=EducationN"
		set "Edition=EducationN"
		set "Name=Windows %OSID% Education N"
		set "Description=Windows %OSID% Education N"
		set "DisplayName=Windows %OSID% Education N"
		set "DisplayDescription=Windows %OSID% Education N"
	)

	if "%TargetEdition%" equ "Enterprise" (
		set "Flag=Enterprise"
		set "Edition=Enterprise"
		set "Name=Windows %OSID% Enterprise"
		set "Description=Windows %OSID% Enterprise"
		set "DisplayName=Windows %OSID% Enterprise"
		set "DisplayDescription=Windows %OSID% Enterprise"
	)

	if "%TargetEdition%" equ "EnterpriseN" (
		set "Flag=EnterpriseN"
		set "Edition=EnterpriseN"
		set "Name=Windows %OSID% Enterprise N"
		set "Description=Windows %OSID% Enterprise N"
		set "DisplayName=Windows %OSID% Enterprise N"
		set "DisplayDescription=Windows %OSID% Enterprise N"
	)

	if "%TargetEdition%" equ "EnterpriseG" (
		set "Flag=EnterpriseG"
		set "Edition=EnterpriseG"
		set "Name=Windows %OSID% Enterprise G"
		set "Description=Windows %OSID% Enterprise G"
		set "DisplayName=Windows %OSID% Enterprise G"
		set "DisplayDescription=Windows %OSID% Enterprise G"
	)

	if "%TargetEdition%" equ "EnterpriseGN" (
		set "Flag=EnterpriseGN"
		set "Edition=EnterpriseGN"
		set "Name=Windows %OSID% Enterprise GN"
		set "Description=Windows %OSID% Enterprise GN"
		set "DisplayName=Windows %OSID% Enterprise GN"
		set "DisplayDescription=Windows %OSID% Enterprise GN"
	)

	if "%TargetEdition%" equ "ProfessionalEducation" (
		set "Flag=ProfessionalEducation"
		set "Edition=ProfessionalEducation"
		set "Name=Windows %OSID% Pro Education"
		set "Description=Windows %OSID% Pro Education"
		set "DisplayName=Windows %OSID% Pro Education"
		set "DisplayDescription=Windows %OSID% Pro Education"
	)

	if "%TargetEdition%" equ "ProfessionalEducationN" (
		set "Flag=ProfessionalEducationN"
		set "Edition=ProfessionalEducationN"
		set "Name=Windows %OSID% Pro EducationN"
		set "Description=Windows %OSID% Pro Education N"
		set "DisplayName=Windows %OSID% Pro Education N"
		set "DisplayDescription=Windows %OSID% Pro Education N"
	)

	if "%TargetEdition%" equ "ProfessionalWorkstation" (
		set "Flag=ProfessionalWorkstation"
		set "Edition=ProfessionalWorkstation"
		set "Name=Windows %OSID% Pro for Workstations"
		set "Description=Windows %OSID% Pro for Workstations"
		set "DisplayName=Windows %OSID% Pro for Workstations"
		set "DisplayDescription=Windows %OSID% Pro for Workstations"
	)

	if "%TargetEdition%" equ "ProfessionalWorkstationN" (
		set "Flag=ProfessionalWorkstationN"
		set "Edition=ProfessionalWorkstationN"
		set "Name=Windows %OSID% Pro N for Workstations"
		set "Description=Windows %OSID% Pro N for Workstations"
		set "DisplayName=Windows %OSID% Pro N for Workstations"
		set "DisplayDescription=Windows %OSID% Pro N for Workstations"
	)

	if "%TargetEdition%" equ "ServerRdsh" (
		set "Flag=ServerRdsh"
		set "Edition=ServerRdsh"
		set "Name=Windows %OSID% Enterprise for Remote Sessions"
		set "Description=Windows %OSID% Enterprise for Remote Sessions"
		set "DisplayName=Windows %OSID% Enterprise for Remote Sessions"
		set "DisplayDescription=Windows %OSID% Enterprise for Remote Sessions"
	)

	if "%TargetEdition%" equ "IoTEnterprise" (
		set "Flag=IoTEnterprise"
		set "Edition=IoTEnterprise"
		set "Name=Windows %OSID% IoT Enterprise"
		set "Description=Windows %OSID% IoT Enterprise"
		set "DisplayName=Windows %OSID% IoT Enterprise"
		set "DisplayDescription=Windows %OSID% IoT Enterprise"
	)

	if "%TargetEdition%" equ "IoTEnterpriseS" (
		set "Flag=IoTEnterpriseS"
		set "Edition=IoTEnterpriseS"
		set "Name=Windows %OSID% IoT Enterprise LTSC"
		set "Description=Windows %OSID% IoT Enterprise LTSC"
		set "DisplayName=Windows %OSID% IoT Enterprise LTSC"
		set "DisplayDescription=Windows %OSID% IoT Enterprise LTSC"
	)

	if "%TargetEdition%" equ "IoTEnterpriseN" (
		set "Flag=IoTEnterpriseN"
		set "Edition=IoTEnterpriseN"
		set "Name=Windows %OSID% IoT Enterprise N"
		set "Description=Windows %OSID% IoT Enterprise N"
		set "DisplayName=Windows %OSID% IoT Enterprise N"
		set "DisplayDescription=Windows %OSID% IoT Enterprise N"
	)

	if "%TargetEdition%" equ "IoTEnterpriseSN" (
		set "Flag=IoTEnterpriseSN"
		set "Edition=IoTEnterpriseSN"
		set "Name=Windows %OSID% IoT Enterprise N LTSC"
		set "Description=Windows %OSID% IoT Enterprise N LTSC"
		set "DisplayName=Windows %OSID% IoT Enterprise N LTSC"
		set "DisplayDescription=Windows %OSID% IoT Enterprise N LTSC"
	)

	if "%ImageBuild%" equ "14393" (
		if "%ImageInstallationType%" equ "Server Core" (
			if "%SourceEdition%" equ "ServerStandard" (
				if "%TargetEdition%" equ "ServerAzureCor" (
					set "Flag=ServerAzureCor"
					set "Edition=ServerAzureCor"
					set "Name=Windows Server 2016 SERVERAZURECORE"
					set "Description=Windows Server 2016 SERVERAZURECORE"
					set "DisplayName=Windows Server 2016 Azure"
					set "DisplayDescription=This option ^(recommended^) reduces management and servicing by installing only what is needed to run most server roles and applications. It does not include a GUI, but you can fully manage the server locally or remotely with Windows PowerShell or other tools. For more details see \"Windows Server Installation Options.\""
				)

				if "%TargetEdition%" equ "ServerDatacenter" (
					set "Flag=ServerDataCenterCore"
					set "Edition=ServerDatacenter"
					set "Name=Windows Server 2016 SERVERDATACENTERCORE"
					set "Description=Windows Server 2016 SERVERDATACENTERCORE"
					set "DisplayName=Windows Server 2016 Datacenter"
					set "DisplayDescription=This option ^(recommended^) reduces management and servicing by installing only what is needed to run most server roles and applications. It does not include a GUI, but you can fully manage the server locally or remotely with Windows PowerShell or other tools. For more details see \"Windows Server Installation Options.\""
				)
			)
		)

		if "%ImageInstallationType:~,6%" equ "Server" (
			if "%SourceEdition%" equ "ServerSolution" if "%TargetEdition%" equ "ServerStandard" (
				set "Flag=ServerStandard"
				set "Edition=ServerStandard"
				set "Name=Windows Server 2016 SERVERSTANDARD"
				set "Description=Windows Server 2016 SERVERSTANDARD"
				set "DisplayName=Windows Server 2016 Standard ^(Desktop Experience^)"
				set "DisplayDescription=This option is useful when a GUI is required-for example, to provide backward compatibility for an application that cannot be run on a Server Core installation. All server roles and features are supported. For more details see \"Windows Server Installation Options.\""
			)

			if "%SourceEdition%" equ "ServerStandard" if "%TargetEdition%" equ "ServerDatacenter" (
				set "Flag=ServerDataCenter"
				set "Edition=ServerDatacenter"
				set "Name=Windows Server 2016 SERVERDATACENTER"
				set "Description=Windows Server 2016 SERVERDATACENTER"
				set "DisplayName=Windows Server 2016 Datacenter ^(Desktop Experience^)"
				set "DisplayDescription=This option is useful when a GUI is required-for example, to provide backward compatibility for an application that cannot be run on a Server Core installation. All server roles and features are supported. For more details see \"Windows Server Installation Options.\""
			)
		)
	)

	if "%ImageBuild%" equ "17763" (
		if "%ImageInstallationType%" equ "Server Core" (
			if "%SourceEdition%" equ "ServerStandardACor" if "%TargetEdition%" equ "ServerDatacenterACor" (
				set "Flag=ServerDataCenterACor"
				set "Edition=ServerDatacenterACor"
				set "Name=Windows Server SERVERDATACENTERACORE"
				set "Description=Windows Server SERVERDATACENTERACORE"
				set "DisplayName=Windows Server Datacenter"
				set "DisplayDescription=This option ^(Recommended^) omits most of the Windows graphical environment. Manage with a command prompt and PowerShell, or remotely with Windows Admin Center or other tools."
			)

			if "%SourceEdition%" equ "ServerStandard" if "%TargetEdition%" equ "ServerDatacenter" (
				set "Flag=ServerDataCenterCore"
				set "Edition=ServerDataCenter"
				set "Name=Windows Server 2019 SERVERDATACENTERCORE"
				set "Description=Windows Server 2019 SERVERDATACENTERCORE"
				set "DisplayName=Windows Server 2019 Datacenter"
				set "DisplayDescription=This option ^(Recommended^) omits most of the Windows graphical environment. Manage with a command prompt and PowerShell, or remotely with Windows Admin Center or other tools."
			)
		)

		if "%ImageInstallationType:~,6%" equ "Server" (
			if "%SourceEdition%" equ "ServerSolution" if "%TargetEdition%" equ "ServerStandard" (
				set "Flag=ServerStandard"
				set "Edition=ServerStandard"
				set "Name=Windows Server 2019 SERVERSTANDARD"
				set "Description=Windows Server 2019 SERVERSTANDARD"
				set "DisplayName=Windows Server 2019 Standard ^(Desktop Experience^)"
				set "DisplayDescription=This option installs the full Windows graphical environment, consuming extra drive space. It can be useful if you want to use the Windows desktop or have an app that requires it."
			)

			if "%SourceEdition%" equ "ServerStandard" if "%TargetEdition%" equ "ServerDatacenter" (
				set "Flag=ServerDataCenter"
				set "Edition=ServerDatacenter"
				set "Name=Windows Server 2019 SERVERDATACENTER"
				set "Description=Windows Server 2019 SERVERDATACENTER"
				set "DisplayName=Windows Server 2019 Datacenter ^(Desktop Experience^)"
				set "DisplayDescription=This option installs the full Windows graphical environment, consuming extra drive space. It can be useful if you want to use the Windows desktop or have an app that requires it."
			)
		)
	)

	if "%ImageBuild%" equ "20348" (
		if "%ImageInstallationType%" equ "Server Core" (
			if "%SourceEdition%" equ "ServerStandard" if "%TargetEdition%" equ "ServerDatacenter" (
				set "Flag=ServerDataCenterCore"
				set "Edition=ServerDatacenter"
				set "Name=Windows Server 2022 SERVERDATACENTERCORE"
				set "Description=Windows Server 2022 SERVERDATACENTERCORE"
				set "DisplayName=Windows Server 2022 Datacenter"
				set "DisplayDescription=This option ^(Recommended^) omits most of the Windows graphical environment. Manage with a command prompt and PowerShell, or remotely with Windows Admin Center or other tools."
			)
		)

		if "%ImageInstallationType:~,6%" equ "Server" (
			if "%SourceEdition%" equ "ServerSolution" if "%TargetEdition%" equ "ServerStandard" (
				set "Flag=ServerStandard"
				set "Edition=ServerStandard"
				set "Name=Windows Server 2022 SERVERSTANDARD"
				set "Description=Windows Server 2022 SERVERSTANDARD"
				set "DisplayName=Windows Server 2022 Standard ^(Desktop Experience^)"
				set "DisplayDescription=This option installs the full Windows graphical environment, consuming extra drive space. It can be useful if you want to use the Windows desktop or have an app that requires it."
			)

			if "%SourceEdition%" equ "ServerStandard" if "%TargetEdition%" equ "ServerDatacenter" (
				set "Flag=ServerDataCenter"
				set "Edition=ServerDatacenter"
				set "Name=Windows Server 2022 SERVERDATACENTER"
				set "Description=Windows Server 2022 SERVERDATACENTER"
				set "DisplayName=Windows Server 2022 Datacenter ^(Desktop Experience^)"
				set "DisplayDescription=This option installs the full Windows graphical environment, consuming extra drive space. It can be useful if you want to use the Windows desktop or have an app that requires it."
			)
		)
	)
)

:: Setting Image Flag, Name and Description to reflect Target Edition
echo.%txtSettingImageDisplayName% "%DisplayName%"...
echo.%txtSettingImageDisplayDescription% "%DisplayDescription%"...
echo.%txtSettingImageFlag% "%Flag%"...
echo.%txtSettingImageEdition% "%Edition%"...
echo.

for %%# (
	Name
	DisplayName
	Description
	DisplayDescription
) do (
	set "%%#=!%%#:^=!"
)

"%WimlibImagex%" info "%InstallWim%" !ImageIndexNo! "%Name%" "%Description%" --image-property DISPLAYNAME="%DisplayName%" --image-property DISPLAYDESCRIPTION="%DisplayDescription%" --image-property FLAGS="%Flag%" >nul

:: Deal with EI.cfg file
call :EIcfg

echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedUpgradingSourceWIMImage%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set SourceEdition=
set TargetEdition=
set Flag=
set Edition=
set Name=
set Description=
set DisplayName=
set DisplayDescription=

if "%IsSourceSelected%" equ "No" (
	set ChosenSource=
	set /A ChosenCount=0
	set ImageIndexNo=
	set AutoImageIndexNo=
	set Auto=
	set SpecifiedSourceIndex=
)

endlocal

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Capture a Drive or Folder to a WIM Image
::-------------------------------------------------------------------------------------------
:WIMCapture

setlocal

set SourceDriveFolder=
set TargetWimImageFileName=
set TargetWimImageName=
set TargetWimImageDescription=
set TargetWimImageEditionFlag=
set BootFlag=

cls
echo.===============================================================================
echo.%txtCaptureDriveFolderWIMImage%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
echo.%txtStartingCapturingDriveFolderWIMImage%
echo.-------------------------------------------------------------------------------
echo.
:: Get Source Drive or folder path to be Captuerd to WIM Image
set /p SourceDriveFolder=%txtEnterValidSourceDrive%:
echo.
:: Get Target WIM Image File Name
set /p TargetWimImageFileName=%txtEnterTargetWIMImage%
echo.
:: Get Target WIM Image Name
set /p TargetWimImageName=%txtEnterTargetWIMImageName%
echo.
:: Get Target WIM Image Description
set /p TargetWimImageDescription=%txtEnterTargetWIMImageDescription%
echo.
:: Get Target WIM Image Editon Flag
set /p TargetWimImageEditionFlag=%txtEnterTargetWIMImageEdition%
echo.
:: Get Bootable Flag Status
choice /C:YN /N /M "%txtMakeTargetWIMImageBootable% ['Y'%GlobalChoice_Yes%/'N'%GlobalChoice_No%] : "
if errorlevel 2 set BootFlag=No
if not errorlevel 2 set BootFlag=Yes
echo.
echo.-------------------------------------------------------------------------------
echo.%txtCapturingDriveFolderWIM%
echo.-------------------------------------------------------------------------------
call :CaptureImage "%DVD%\sources\%TargetWimImageFileName%", "%SourceDriveFolder%", %TargetWimImageName%, %TargetWimImageDescription%, %BootFlag%
echo.-------------------------------------------------------------------------------
echo.%txtSettingTargetWIMImage%
echo.-------------------------------------------------------------------------------
echo.
:: Setting WIM Image Flag, Name and Description to reflect Target Edition
echo.%txtSettingTargetWIMImageName% "%TargetWimImageName%"...
echo.
echo.%txtSettingTargetWIMImageDescription% "%TargetWimImageDescription%"...
echo.
echo.%txtSettingTargetWIMImageFlag% "%TargetWimImageEditionFlag%"...
%Imagex% /Flags "%TargetWimImageEditionFlag%" /Info "%DVD%\sources\%TargetWimImageFileName%" 1 %TargetWimImageName% %TargetWimImageDescription% >nul
echo.
echo.-------------------------------------------------------------------------------
echo.%txtFinishedCapturingDriveFolderWIMImage%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.
if "!Allowed!" equ "I" (
	echo.
) else (
	pause
)

set SourceDriveFolder=
set TargetWimImageFileName=
set TargetWimImageName=
set TargetWimImageDescription=
set TargetWimImageEditionFlag=
set BootFlag=

endlocal

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Apply a WIM Image Index to a Drive or Folder
::-------------------------------------------------------------------------------------------
:WIMApply

setlocal

set TargetDriveFolder=

cls
echo.===============================================================================
echo.%txtApplyWIMImageIndexDrive%
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingApplyingWIMImageIndexDrive%
echo.-------------------------------------------------------------------------------

:: Display Image Information
call :ShowImageInfo

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Single Image Index to WIMApply Export
	set /p ImageIndexNo=%GlobalEnterSingleWIM% :
	if /i "!ImageIndexNo!" equ "Q" (
		set /A ChosenCount=0
		set ChosenSource=
		set ImageIndexNo=
		set AutoImageIndexNo=
		set Auto=
		set SpecifiedSourceIndex=
		goto :MainMenu
	)
)

:: Get Target Drive or folder path to Apply the WIM Image Index
echo.
set /p TargetDriveFolder=%txtEnterTargetDriveFolder%
echo.
echo.-------------------------------------------------------------------------------
echo.%txtApplyingWIMImageIndexDrive%
echo.-------------------------------------------------------------------------------
echo.
call :ApplyImage "%InstallWim%", !ImageIndexNo!, %TargetDriveFolder%
echo.-------------------------------------------------------------------------------
echo.%txtFinishedApplyingWIMImageIndexDrive%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set TargetDriveFolder=

if "%IsSourceSelected%" equ "No" (
	set ChosenSource=
	set /A ChosenCount=0
	set ImageIndexNo=
	set AutoImageIndexNo=
	set Auto=
	set SpecifiedSourceIndex=
)

endlocal

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Cleanup a WIM Image Index
::-------------------------------------------------------------------------------------------
:WIMCleanUp

setlocal

set CleanupOption=

cls
echo.===============================================================================
echo.%GlobalCleanupWIMImageIndex%
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

rem echo.  [1]  Check Image Health
echo.  [1]  %txt1CleanupImageWithCheckHealth%
echo.
rem echo.  [2]  Scan Image Health
echo.  [2]  %txt2CleanupImageWithScanHealth%
echo.
echo.  [3]  %txt3CleanupImageWithResetBase%
echo.
if "%SelectedSourceOS%" neq "w7" if "%SelectedSourceOS%" neq "w81" (
	echo.  [4]  %txt4CleanupImageResetBase%
	echo.
)
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:1234X /N /M "%GlobalEnterChoice% "
if errorlevel 5 goto :ToolsMenu
if errorlevel 4 (
	set "CleanupOption=CleanupImage"
	set "ComponentCleanup=/StartComponentCleanup"
)
if errorlevel 3 (
	set "CleanupOption=CleanupImage"
	if "%SelectedSourceOS%" equ "w7" set "ComponentCleanup=/SPSuperseded /HideSP"
	if "%SelectedSourceOS%" neq "w7" set "ComponentCleanup=/StartComponentCleanup /ResetBase"
)
if errorlevel 2 set "CleanupOption=/ScanHealth"
if errorlevel 1 set "CleanupOption=/CheckHealth"

cls
echo.===============================================================================
echo.%GlobalCleanupWIMImageIndex%
echo.===============================================================================
echo.
echo.-------------------------------------------------------------------------------
if "!CleanupOption!" equ "CleanupImage" echo.%txtStartingSourceWIMImageCleanup%
if "!CleanupOption!" equ "CheckHealth" echo.%txtStartingSourceWIMImageCleanupCheckHealth%
if "!CleanupOption!" equ "ScanHealth" echo.%txtStartingSourceWIMImageCleanupScanHealth%
echo.-------------------------------------------------------------------------------

:: Checking for Image Index Validation
if "!ImageIndexNo!" equ "" (
	:: Getting Single or Multi Image Index to Export
	call :GetImageIndexNo "%InstallWim%", 1
) else (
	:: Display Image Information
	call :ShowImageInfo
)

:: Getting Specified Source Image Index Information
call :GetImageIndexInfo "%InstallWim%", !SpecifiedSourceIndex! >nul

:: Setting Selected Source OS version
call :SelectedSourceOS

echo.
echo.-------------------------------------------------------------------------------
if "!CleanupOption!" equ "CleanupImage" echo.%txtSourceWIMImageCleanup%
if "!CleanupOption!" equ "CheckHealth" echo.%txtSourceWIMImageCleanupCheckHealth%
if "!CleanupOption!" equ "ScanHealth" echo.%txtSourceWIMImageCleanupScanHealth%
echo.-------------------------------------------------------------------------------
echo.

:: Mounting Source Install Image Indexes to Service
for %%i in (!ImageIndexNo!) do (
	call :CreateFolder "%InstallMount%\%%i"

	echo.-------------------------------------------------------------------------------
	if %%i leq 9 echo.%txtMountingSourceImage% [install.wim, %GlobalIndex% :  %%i - %GlobalEdition% : !ImageEdition%%i!]
	if %%i gtr 9 echo.%txtMountingSourceImage% [install.wim, %GlobalIndex% : %%i - %GlobalEdition% : !ImageEdition%%i!]
	echo.                           %txtmoutsourimamsg02pos02% ^<%InstallMount%\%%i^>...
	echo.-------------------------------------------------------------------------------
	call :MountImage "%InstallWim%", %%i, "%InstallMount%\%%i"
	echo.-------------------------------------------------------------------------------
	echo.%txtPerformingInstallWIM% %%i] %txtPerformingInstallWIMCleanup%
	echo.-------------------------------------------------------------------------------
	if "!CleanupOption!" equ "CleanupImage" (
		call :CleanupImage "%InstallMount%\%%i", "!ComponentCleanup!"
	) else (
		call :CleanupImage "%InstallMount%\%%i", "!CleanupOption!"
	)
	echo.-------------------------------------------------------------------------------
	echo.%GlobalUnMountingImage% %%i] %GlobalWIMImage%
	echo.-------------------------------------------------------------------------------
	call :UnMountImage "%InstallMount%\%%i", "Commit"
)
echo.-------------------------------------------------------------------------------
if "!CleanupOption!" equ "CleanupImage" echo.%txtFinishedSourceWIMImageCleanup%
if "!CleanupOption!" equ "CheckHealth" echo.%txtFinishedSourceWIMImageCleanupCheckHealth%
if "!CleanupOption!" equ "ScanHealth" echo.%txtFinishedSourceWIMImageCleanupScanHealth%
echo.-------------------------------------------------------------------------------

:Stop
echo.
echo.===============================================================================
echo.

set CleanupOption=
set ComponentCleanup=

if "%IsSourceSelected%" equ "No" (
	set ChosenSource=
	set /A ChosenCount=0
	set ImageIndexNo=
	set AutoImageIndexNo=
	set Auto=
	set SpecifiedSourceIndex=
)

endlocal

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Optimize WIM Index to Source WIM Image
::-------------------------------------------------------------------------------------------
:WIMOptimize

cls
echo.===============================================================================
echo.%txtOptimizeWIMImage%
echo.===============================================================================
echo.

:: Checking whether Windows Source Install Image file exist
if not exist "%InstallWim%" (
	echo.%txtGlobalCannotFindWindowsSetupInstallImage%
	echo.
	echo.%GlobalPleaseCopyWindowsSetupInstall%
	goto :Stop
)

echo.-------------------------------------------------------------------------------
echo.%txtStartingOptimizingWIMImage%
echo.-------------------------------------------------------------------------------
:: Display Image Information
call :ShowImageInfo
echo.
echo.-------------------------------------------------------------------------------
rem echo.####Optimizing Source WIM Image################################################
echo.%GlobalOptimizingSource% %GlobalWithMaximumCompression%
echo.-------------------------------------------------------------------------------
rem call :ExportImage "%InstallWim%", "%_TMP%\rebuildinstall.wim", "WIM", "No"
echo.
rem "%WimlibImagex%" export "%InstallWim%" all "%_TMP%\rebuild.wim" --compress=LZX
if exist "%InstallWim%" "%WimlibImagex%" optimize "%InstallWim%"
echo.
rem move /y "%_TMP%\rebuild.wim" "%InstallWim%" >nul
echo.-------------------------------------------------------------------------------
echo.%txtFinishedOptimizingWIMImage%
echo.-------------------------------------------------------------------------------
:Stop
echo.
echo.===============================================================================
echo.

:: Returning to WIM Manager Menu
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Show MSMG Toolkit Debug Information
::-------------------------------------------------------------------------------------------
:Debug

cls
echo.===============================================================================
echo.%txtDebugInformation%
echo.===============================================================================
echo.
echo. HostArchitecture=%HostArchitecture%
echo. SelectedSourceOS=%SelectedSourceOS%
echo. IsSourceSelected=%IsSourceSelected%
echo. IsDialogsEnabled=%IsDialogsEnabled%
echo. IsLogsEnabled=%IsLogsEnabled%
echo.
echo.
echo.
echo. ImageIndexNo=!ImageIndexNo!
echo. ImageArchitecture=%ImageArchitecture%
echo. ImageBuild=%ImageBuild%
echo. ImageVersion=%ImageVersion%
echo. ImageServicePackBuild=%ImageServicePackBuild%
echo. ImageServicePackLevel=%ImageServicePackLevel%
echo. ImageDefaultLanguage=%ImageDefaultLanguage%
echo. ImageCount=!ImageCount!
echo.
echo.===============================================================================
if "!Allowed!" equ "I" (
	echo.
) else (
	echo.
)
pause

:: Returning to Main Menu
goto :MainMenu
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: MSMG Toolkit - Options Menu
::-------------------------------------------------------------------------------------------
:Options

cls
echo.===============================================================================
echo.%txtOptionsMenu%
echo.===============================================================================
echo.
echo.  [1]   %txtSetToolkitColorSettings%
echo.
if "%IsDialogsEnabled%" equ "No" echo.  [2]   %txtEnableToolkitInfoWarningDialogs%
if "%IsDialogsEnabled%" equ "Yes" echo.  [2]   %txtDisableToolkitInfoWarningDialogs%
echo.
if "%IsLogsEnabled%" equ "No" echo.  [3]   %txtEnableToolkitLogGeneration%
if "%IsLogsEnabled%" equ "Yes" echo.  [3]   %txtDisableToolkitLogGeneration%
echo.
if "%IsImageRegistryLoaded%" equ "No" echo.  [4]   %txtLoadImageRegistry%
if "%IsImageRegistryLoaded%" equ "Yes" echo.  [4]   %txtUnloadImageRegistry%
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:1234X /N /M "%GlobalEnterChoice% "
if errorlevel 5 goto :ToolsMenu
if errorlevel 4 (
	if "%IsImageRegistryLoaded%" equ "No" (
		cls
		echo.===============================================================================
		echo.%GlobalImageRegistry%
		echo.===============================================================================
		echo.
		:: Checking whether Source OS is Selected
		if "%IsSourceSelected%" equ "No" (
			echo.%txtSourceOSNotSelected%
			echo.
			echo.===============================================================================
			echo.
			if "!Allowed!" equ "I" (
				echo.
			) else (
				pause
			)
			goto :MainMenu
		)

		:: Checking whether Multi-Index servicing mode is selected
		if !ChosenCount! gtr 1 (
			echo.%GlobalIntegrateWindowsThinPCFeaturesEnable%
			echo.
			echo.%GlobalIntegrateWindowsThinPCFeaturesReChoose%
			goto :Stop
		)

		for /l %%i in (1, 1, !ImageCount!) do (
			if exist "%InstallMount%\%%i\" (
				echo.%txtLoadingImageRegistry%
				call :MountImageRegistry "%InstallMount%\%%i"
			)
		)

		set "IsImageRegistryLoaded=Yes"
		echo.
		echo.[HKEY_LOCAL_MACHINE\TK_SOFTWARE]         -^> [HKEY_LOCAL_MACHINE\SOFTWARE]
		echo.[HKEY_LOCAL_MACHINE\TK_SOFTWARE\Classes] -^> [HKEY_CLASSES_ROOT]
		echo.[HKEY_LOCAL_MACHINE\TK_SYSTEM]           -^> [HKEY_LOCAL_MACHINE\SYSTEM]
		echo.[HKEY_LOCAL_MACHINE\TK_NTUSER]           -^> [HKEY_CURRENT_USER]
		echo.[HKEY_LOCAL_MACHINE\TK_DEFAULT]          -^> [HKEY_USERS\.Default]
		echo.
		echo.%txtLoadingImageRegistryComplete%
		echo.
		echo.===============================================================================
		echo.
		pause
	)
	if "%IsImageRegistryLoaded%" equ "Yes" (
		cls
		echo.===============================================================================
		echo.%GlobalImageRegistry%
		echo.===============================================================================
		echo.
		echo.%txtUnloadingImageRegistry%
		call :UnMountImageRegistry
		set "IsImageRegistryLoaded=No"
		echo.
		echo.%txtUnloadingImageRegistryComplete%
		echo.
		echo.===============================================================================
		echo.
		pause
	)
	goto :Toolsmenu
)
if errorlevel 3 (
	if "%IsLogsEnabled%" equ "No" set "IsLogsEnabled=Yes"
	if "%IsLogsEnabled%" equ "Yes" set "IsLogsEnabled=No"
	goto :Options
)
if errorlevel 2 (
	if "%IsDialogsEnabled%" equ "No" set "IsDialogsEnabled=Yes"
	if "%IsDialogsEnabled%" equ "Yes" set "IsDialogsEnabled=No"
	goto :Options
)
if errorlevel 1 goto :SetTkColor

::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Set Toolkit Color Settings
::-------------------------------------------------------------------------------------------
:SetTkColor

cls
echo.===============================================================================
echo.%txtSetToolkitColorSettingsMenu%
echo.===============================================================================
echo. %txtListAvailableBackground%
echo.
echo.%txt1ListAvailable%
echo.%txt2ListAvailable%
echo.%txt3ListAvailable%
echo.%txt4ListAvailable%
echo.%txt5ListAvailable%
echo.%txt6ListAvailable%
echo.%txt7ListAvailable%
echo.%txt8ListAvailable%
echo.%txt9ListAvailable%
echo.%txtAListAvailable%
echo.%txtBListAvailable%
echo.%txtCListAvailable%
echo.%txtDListAvailable%
echo.%txtEListAvailable%
echo.
echo.  [X]  %GlobalOption_GoBack%
echo.===============================================================================
echo.
choice /C:123456789ABCDEFGHIJKLMNOPQRSX /N /M "%GlobalEnterChoice% "
if errorlevel 29 goto :Options
if errorlevel 28 color F1
if errorlevel 27 color F0
if errorlevel 26 color 9F
if errorlevel 25 color 9E
if errorlevel 24 color 9B
if errorlevel 23 color 9A
if errorlevel 22 color 97
if errorlevel 21 color 4F
if errorlevel 20 color 4E
if errorlevel 19 color 4B
if errorlevel 18 color 4A
if errorlevel 17 color 3E
if errorlevel 16 color 39
if errorlevel 15 color 31
if errorlevel 14 color 30
if errorlevel 13 color 1F
if errorlevel 12 color 1E
if errorlevel 11 color 1D
if errorlevel 10 color 1C
if errorlevel  9 color 1B
if errorlevel  8 color 1A
if errorlevel  7 color 17
if errorlevel  6 color 0F
if errorlevel  5 color 0E
if errorlevel  4 color 0C
if errorlevel  3 color 0B
if errorlevel  2 color 0A
if errorlevel  1 color 07

goto :SetTkColor
::-------------------------------------------------------------------------------------------

:: ############################################################################################
:: MSMG Toolkit DISM Functions
:: ############################################################################################

::-------------------------------------------------------------------------------------------
:: Checking whether Install Media Image folder is empty
::-------------------------------------------------------------------------------------------
:CheckInstallMediaFolder

if not exist "%ISOsource%\*.img" (
	set "InstallMediaIMGSource=O"
) else (
	set "InstallMediaSourceImage_IsPresent=1"
)
if not exist "%ISO%\*.img" (
	set "InstallMediaIMG=O"
) else (
	set "InstallMediaSourceImage_IsPresent=1"
)

if not exist "%ISOsource%\*.iso" (
	set "InstallMediaISOSource=O"
) else (
	set "InstallMediaSourceImage_IsPresent=1"
)
if not exist "%ISO%\*.iso" (
	set "InstallMediaISO=O"
) else (
	set "InstallMediaSourceImage_IsPresent=1"
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Getting ^<Install Media^> Source Image File Name
::-------------------------------------------------------------------------------------------
:GettingInstallMediaSource_ImageFileName

set InstallMedia_ImageFolderPath=

cls
echo.
echo.===============================================================================
echo.%txtISOFolderMenu%
echo.===============================================================================
if "!InstallMediaISOSource!" equ "" (
	echo.
	echo.  [U]   %txtISOSourcespos1% ^<%ISOsource%\^> %txtISOSourcespos2%
)
if "!InstallMediaISO!" equ "" (
	echo.
	echo.  [C]   %txtISOSavespos1% ^<%ISO%^\^> %txtISOSavespos2%
)
echo.
echo.
echo.  [X]   %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
choice /C:UCX /N /M "%GlobalEnterChoice% "
if errorlevel 3 goto :MainMenu
if errorlevel 2 (
	set "InstallMedia_ImageFolderPath=%ISO%"
)
if errorlevel 1 (
	set "InstallMedia_ImageFolderPath=%ISOsource%"
)

echo.
echo.
echo.%txtSelectWantedImage%
echo.
set /A count=1
for /f "tokens=*" %%# in ('dir /B /A-D "!InstallMedia_ImageFolderPath!\*.*"') do (
	if !count! geq 1 if !count! leq 9 set "OptionID= !count!"
	if !count! gtr 9 if !count! leq 99 set "OptionID=!count!"
	set "InstallMediaSourceID_%%#=!count!"
	if "!InstallMediaSourceID_%%#!" neq "" (
		set /A count+=1
		echo.[!OptionID!] %%~#
	)
)
echo.
echo.
echo. [X] %GlobalOption_GoBack%
echo.
echo.===============================================================================
echo.
set /p "MenuChoice=%GlobalEnterChoice% "
set /A ISOcount=0
for %%c in (!MenuChoice!) DO (
   if /i "%%c" equ "X" goto :MainMenu
   for /f "tokens=*" %%# in ('dir /B /A-D "!InstallMedia_ImageFolderPath!\*.*"') do (
       if "%%c" equ "!InstallMediaSourceID_%%#!" (
           set /A ISOcount+=1
           if !ISOcount! equ 1 set "InstallMediaSource_ImageFileName=%%~#"
       )
   )
)

if "!InstallMediaSource_ImageFileName!" equ "" goto :GettingInstallMediaSource_ImageFileName
echo.
echo.
echo.%GlobalInstallMediaSourceImageLabel%
echo.!InstallMediaSource_ImageFileName!
echo.
echo.

call :InstallMediaSource_ImageLabel

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Getting ^<Install Media^> Source OS and Image BranchID
::-------------------------------------------------------------------------------------------
:ISO_SourceOSBranchID

:: Getting Source OS version
if "%ImageVersion%" equ "6.1.7601" (
	set "ISOSourceOS=W7-"
	set "ISO_BranchID=-SP1-"
)

if "%ImageVersion%" equ "6.3.9600" (
	set "ISOSourceOS=W81-"
	set "ISO_BranchID=-"
)

if "%ImageVersion:~0,-6%" equ "10.0" (
	set "ISOSourceOS=W10-"
	:: Get updated Image Information
	if "!CurrentImageBuild!" equ "" (
		if "%ImageBuild%" gtr "17763" if "%ImageBuild%" leq "19044" (
			call :GetUpdatedImageInformation
		) >nul
	)
	if "%ImageBuild%" equ "10240" set "ISO_BranchID=-v1507-"
	if "%ImageBuild%" equ "10586" set "ISO_BranchID=-v1511-"
	if "%ImageBuild%" equ "14393" set "ISO_BranchID=-v1607-"
	if "%ImageBuild%" equ "15063" set "ISO_BranchID=-v1703-"
	if "%ImageBuild%" equ "16299" set "ISO_BranchID=-v1709-"
	if "%ImageBuild%" equ "17134" set "ISO_BranchID=-v1803-"
	if "%ImageBuild%" equ "17763" set "ISO_BranchID=-v1809-"
	if "!CurrentImageBuild!" equ "18362" set "ISO_BranchID=-v1903-"
	if "!CurrentImageBuild!" equ "18363" set "ISO_BranchID=-v1909-"
	if "!CurrentImageBuild!" equ "19041" set "ISO_BranchID=-v2004-"
	if "!CurrentImageBuild!" equ "19042" set "ISO_BranchID=-v20H2-"
	if "!CurrentImageBuild!" equ "19043" set "ISO_BranchID=-v21H1-"
	if "!CurrentImageBuild!" equ "19044" set "ISO_BranchID=-v21H2-"
	rem if "!CurrentImageBuild!" equ "19045" set "ISO_BranchID=-v22H1-"
	if "%ImageBuild%" equ "20348" set "ISO_BranchID=-v21H2-"
	if "%ImageBuild%" geq "21996" (
		if "%ImageBuild%" lss "22563" set "ISO_BranchID=-v21H2-"
		if "%ImageBuild%" geq "22563" set "ISO_BranchID=-v22H2-"
		set "ISOSourceOS=W11-"
	)
)
if "%ImageVersion:~0,-6%" equ "11.0" (
	set "ISOSourceOS=W11-"
	if "%ImageBuild%" geq "21996" (
		if "%ImageBuild%" lss "22563" set "ISO_BranchID=-v21H2-"
		if "%ImageBuild%" geq "22563" set "ISO_BranchID=-v22H2-"
	)
)
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to get Image Index Count
:: Input Parameters [ %~1 : Image Filename ]
::-------------------------------------------------------------------------------------------
:GetImageCount

:: Get total no of Indexes present in the Image.
for /f "tokens=2 delims=: " %%a in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" ^| findstr.exe /I Index') do (set /A ImageCount=%%a)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to display Image Information
::-------------------------------------------------------------------------------------------
:ShowImageInfo

call :EraseFileContents "%ImageInfo%"

if exist "%InstallWim%" set "InstallImageFile=%InstallWim%" >nul
if exist "%InstallEsd%" set "InstallImageFile=%InstallEsd%" >nul

if "!GetImageIndexNo!" equ "" (
	:: Get total no of Indexes present inside the WIM/ESD Image
	call :GetImageCount "!InstallImageFile!"
)

echo.
echo.%txtDisplayImageInformation01%
echo.
:: List all the Indexes in the Image.
(
	echo.===============================================================================
	echo.%txtIndexArchName%
	echo.===============================================================================
)>>"%ImageInfo%"

if "%IsSourceSelected%" equ "No" (
	for /f "tokens=2 delims=: " %%a in ('%DISM% /Get-ImageInfo /ImageFile:"!InstallImageFile!" ^| findstr.exe /I "Index"') do (
		call :Arch_Name %%a
	)
)
if "%IsSourceSelected%" equ "Yes" (
	if "!ImageIndexNo!" equ "" (
		for /l %%i in (1, 1, !ImageCount!) do (
			call :Arch_Name %%a
		)
	)
	if "!ImageIndexNo!" neq "" (
		for %%a in (!ImageIndexNo!) do (
			call :Arch_Name %%a
		)
	)
)

type "%ImageInfo%"
call :RemoveFile "%ImageInfo%"

echo.===============================================================================
echo.

goto :EOF

:: Input Parameters [ %~1 : Image Index No ]
:Arch_Name
for /f "tokens=2 delims=: " %%b in ('%DISM% /Get-ImageInfo /ImageFile:"!InstallImageFile!" /Index:%~1 ^| findstr.exe /I "Architecture"') do (
	for /f "tokens=2 delims=:" %%c in ('%DISM% /Get-ImageInfo /ImageFile:"!InstallImageFile!" /Index:%~1 ^| findstr.exe /I "Name"') do (
		if "%%b" neq "arm64" (
			if %~1 leq 9 echo.^|   %~1   ^| %%b  ^|%%c
			if %~1 gtr 9 if %~1 lss 99 echo.^|   %~1  ^| %%b  ^|%%c
			if %~1 gtr 99 echo.^|   %~1 ^| %%b  ^|%%c
		)
		if "%%b" equ "arm64" (
			if %~1 leq 9 echo.^|   %~1   ^| %%b^|%%c
			if %~1 gtr 9 if %~1 lss 99 echo.^|   %~1  ^| %%b^|%%c
			if %~1 gtr 99 echo.^|   %~1 ^| %%b^|%%c
		)
	)>>"%ImageInfo%"
)
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to get Image Index number to service
:: Input Parameters [ %~1 : Image Filename, %~2 : Image Index Range Start ]
::-------------------------------------------------------------------------------------------
:GetImageIndexNo

set "GetImageIndexNo=1"

if exist "%InstallWim%" set "InstallImageFile=%InstallWim%" >nul
if exist "%InstallEsd%" set "InstallImageFile=%InstallEsd%" >nul

if "!ImageIndexNo!" equ "" (
	:: Get total no of Indexes present inside the WIM/ESD Image
	call :GetImageCount "!InstallImageFile!"

	:: Display the list of avaialble Image Indexes.
	call :ShowImageInfo
	set "ShowImageInfo=1"

	if "!ChosenSource!" equ "" (
		if !ImageCount! equ %~2 (
			set ChosenSource=!ImageCount!
		) else (
			set /p "ChosenSource=%txtImageIndex2Servicepos01% %~2,...!ImageCount!, 'A'%txtImageIndex2Servicepos02%, 'Q'%txtImageIndex2Servicepos03%] : "
		)
	)
)

set ImageIndexNo=
set SpecifiedSourceIndex=
set /A ChosenCount=0
set AutoImageIndexNo=
if /i "!ChosenSource!" equ "Q" (
	set ChosenSource=
	set Auto=
	set InstallImageFile=
	set ShowImageInfo=
	set GetImageIndexNo=
	goto :MainMenu
)

if /i "!ChosenSource!" equ "A" (
	for /l %%i in (1, 1, !ImageCount!) do (
		if %%i geq %~2 if %%i leq !ImageCount! set "ImageIndexNo=!ImageIndexNo!;%%i"
	)
	if !ImageCount! equ 1 set ChosenSource=
)
if /i "!ChosenSource!" neq "A" (
	for %%i in (!ChosenSource!) do (
		if %%i geq %~2 if %%i leq !ImageCount! set "ImageIndexNo=!ImageIndexNo!;%%i"
	)
	set ChosenSource=
)

set "ImageIndexNo=!ImageIndexNo:~1!"

:: Display the list of avaialble Image Indexes.
if "!ShowImageInfo!" equ "" call :ShowImageInfo
set ShowImageInfo=
set GetImageIndexNo=

:: Getting All Image Index Edition
call :GettingAllImageIndexEditions

:: Checking if any of Editions Base are Selected
for %%i in (!ImageIndexNo!) do (
	if /i "!ImageEdition%%i!" equ "Professional" set "SpecifiedSourceIndex=%%i"
	if /i "!ImageEdition%%i!" equ "Core" (
		set "Core=%%i"
		set "HomeCoreEditionBase=1"
	)
	if /i "!ImageEdition%%i!" equ "CoreN" (
		set "CoreN=%%i"
		set "HomeCoreNEditionBase=1"
	)
	if /i "!ImageEdition%%i!" equ "Professional" (
		set "Professional=%%i"
		set "ProfessionalEditionBase=1"
	)
	if /i "!ImageEdition%%i!" equ "ProfessionalN" (
		set "ProfessionalN=%%i"
		set "ProfessionalNEditionBase=1"
	)
	for %%p in (HomeCoreEditionBase;HomeCoreNEditionBase;ProfessionalEditionBase;ProfessionalNEditionBase) do (
		if !%%p! equ 1 (
			set "EditionBase=Pass"
		)
	)
	if "!Auto!" equ "1" (
		for %%e in (Core;CoreN;Professional;ProfessionalN) do (
			if /i "!ImageEdition%%i!" equ "%%e" set "AutoImageIndexNo=!AutoImageIndexNo!;%%i"
		)
	)
)

if "!Auto!" equ "1" (
	set "AutoImageIndexNo=!AutoImageIndexNo:~1!"
	for %%i in (!AutoImageIndexNo!) do (
		if %%i leq !ImageCount! set /A ChosenCount+=1
	)
	if !ChosenCount! gtr 0 set "ImageIndexNo=!AutoImageIndexNo!"
	set AutoImageIndexNo=
)
if !ChosenCount! equ 0 (
	for %%i in (!ImageIndexNo!) do (
		if %%i leq !ImageCount! set /A ChosenCount+=1
	)
)

if "!SpecifiedSourceIndex!" equ "" (
	if !ChosenCount! equ 1 (
		set "SpecifiedSourceIndex=!ImageIndexNo!"
	) else (
		if "%IsSourceSelected%" equ "No" (
			set "SpecifiedSourceIndex=1"
		)
		if "%IsSourceSelected%" equ "Yes" (
			echo.
			echo.%txtImageIndex2Service02%
			echo.
			echo.%txtImageIndex2Service03line1%
			echo.      %txtImageIndex2Service03line2%
			echo.
			set /p "SpecifiedSourceIndex=%txtImageIndex2Service04pos01% [!ImageIndexNo!] %txtImageIndex2Service04pos02% "
		)
	)
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to get Image Index Architecture
:: Input Parameters [ %~1 : Image Filename, %~2 : Image Index No ]
::-------------------------------------------------------------------------------------------
:GetImageArchitecture

for /f "tokens=2 delims=: " %%a in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I Architecture') do (set ImageArchitecture=%%a)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to get Image Index Edition
:: Input Parameters [ %~1 : Image Filename, %~2 : Image Index No ]
::-------------------------------------------------------------------------------------------
:GetImageEdition

for /f "tokens=2 delims=: " %%g in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I Edition') do (set ImageEdition=%%g)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to get Image Index Information
:: Input Parameters [%~1 : Image Filename, %~2 : Image Index No]
::-------------------------------------------------------------------------------------------
:GetImageIndexInfo

for /f "tokens=2 delims=:" %%a in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I "Name"') do (set "ImageName=%%a")
for /f "tokens=2 delims=:" %%b in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I "Description"') do (set "ImageDescription=%%b")
for /f "tokens=2 delims=: " %%c in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I "Architecture"') do (set "ImageArchitecture=%%c")
if "!CurrentImageBuild!" equ "" for /f "tokens=2 delims=: " %%d in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I "Version"') do (set ImageVersion=%%d)
for /f "tokens=2 delims=:" %%e in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| find.exe /I "ServicePack Build"') do (set /A ImageServicePackBuild=%%e)
for /f "tokens=2 delims=:" %%f in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| find.exe /I "ServicePack Level"') do (set /A ImageServicePackLevel=%%f)
for /f "tokens=2 delims=: " %%g in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I "Edition"') do (set "ImageEdition=%%g")
for /f "tokens=2 delims=:<> " %%h in ('%Imagex% /info "%~1" %~2 ^| findstr.exe /I "Flag"') do (set "ImageFlag=%%h")
for /f "tokens=2 delims=:" %%i in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I "Installation"') do (set "ImageInstallationType=%%i")
for /f "tokens=1 delims= " %%l in ('%DISM% /Get-ImageInfo /ImageFile:"%~1" /Index:%~2 ^| findstr.exe /I "Default"') do (set "ImageDefaultLanguage=%%l")

set "ImageName=%ImageName:~1%"
set "ImageDescription=%ImageDescription:~1%"
if "!ImageBuild!" equ "" (
	if "%ImageVersion:~0,-6%" neq "10.0" if "%ImageVersion:~0,-6%" neq "11.0" (
		set /A ImageBuild=%ImageVersion:~4,4%
	)
	if "%ImageVersion%" neq "6.1.7601" if "%ImageVersion%" neq "6.3.9600" (
		set /A ImageBuild=%ImageVersion:~5,5%
	)
)
if "!InitialImageServicePackBuild!" equ "" set /A InitialImageServicePackBuild=!ImageServicePackBuild!

:: Get updated Image Information
if "!CurrentImageBuild!" equ "" (
	if "%ImageBuild%" gtr "17763" if "%ImageBuild%" leq "19044" (
		call :GetUpdatedImageInformation
	) >nul
)
set "ImageInstallationType=%ImageInstallationType:~1%"
set "ImageDefaultLanguage=!ImageDefaultLanguage:~1!"

if /i "!ImageFlag!" equ "" set "ImageFlag=!ImageEdition!"

if "%ImageInstallationType:~,6%" equ "Server" (
	set "ImageDescription=%ImageDescription:(=^(%"
	set "ImageDescription=%ImageDescription:)=^)%"
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to get updated Image Index Information
::-------------------------------------------------------------------------------------------
:GetUpdatedImageInformation

if "%ImageVersion%" neq "6.1.7601" if "%ImageVersion%" neq "6.3.9600" (
	if "%IsSourceSelected%" equ "No" if "!SpecifiedSourceIndex!" equ "" if "!CurrentImageBuild!" equ "" (
		echo.===============================================================================
		echo.-------------------------------------------------------------------------------
		echo.%txtMountingImageGetCurrent%
		echo.-------------------------------------------------------------------------------
		call :CreateFolder "%InstallMount%\1"
		call :MountImage "%InstallWim%", 1, "%InstallMount%\1"
	)
	echo.===============================================================================
	echo.-------------------------------------------------------------------------------
	echo.%txtReadingGettingCurrentImage%
	echo.-------------------------------------------------------------------------------
	if "!SpecifiedSourceIndex!" equ "" (
		for /l %%i in (1, 1, !ImageCount!) do (
			if exist "%InstallMount%\%%i\" (
				call :GettingImageRegistryInfo "%InstallMount%\%%i"
			)
		)
	)
	if "!SpecifiedSourceIndex!" neq "" (
		if exist "%InstallMount%\!SpecifiedSourceIndex!" (
			call :GettingImageRegistryInfo "%InstallMount%\!SpecifiedSourceIndex!"
		)
	)

	if "%IsSourceSelected%" equ "No" if "!SpecifiedSourceIndex!" equ "" (
		echo.===============================================================================
		for /l %%i in (1, 1, !ImageCount!) do (
			if exist "%InstallMount%\%%i\" (
				echo.
				echo.-------------------------------------------------------------------------------
				echo.%txtDiscardingUnMounting% %%i] %GlobalWIMImage%
				echo.-------------------------------------------------------------------------------
				call :UnMountImage "%InstallMount%\%%i", "Discard"
				call :RemoveFolder "%InstallMount%\%%i"
			)
		)
	)
	echo.%txtDataObtained%
	echo.===============================================================================
)

goto :EOF

::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to get Image Index Registry Information
:: Input Parameters [ %~1 : Image Mount folder ]
::-------------------------------------------------------------------------------------------
:GettingImageRegistryInfo
call :MountImageRegistry "%~1"
set "Key=HKLM\TK_SOFTWARE\Microsoft\Windows NT\CurrentVersion"
for /f "tokens=3 delims= " %%# in ('reg.exe query "!Key!" /v "CurrentBuild" ^| find.exe /I "REG_SZ"') do (
	rem set /A ImageBuild=%%#
	set /A CurrentImageBuild=%%#
)
set "ImageVersion=%ImageVersion:~0,-6%.!CurrentImageBuild!"
for /f "tokens=3 delims= " %%# in ('reg.exe query "!Key!" /v "UBR" ^| find.exe /I "REG_DWORD"') do (
	set /A ImageServicePackBuild=%%#
)
call :UnMountImageRegistry
goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Display Source Image Information
::-------------------------------------------------------------------------------------------
:DisplaySourceImageInformation
echo.
echo.-------------------------------------------------------------------------------
echo.%txtSourceImageInformation%
echo.-------------------------------------------------------------------------------
echo.
echo.%txtSourceImageInformationImage%  install.wim
echo.%txtSourceImageInformationImageIndex%  !ImageIndexNo!
echo.%txtSourceImageInformationImageArchitecture%  %ImageArchitecture%
echo.%txtSourceImageInformationImageVersion%  %ImageVersion%
echo.%txtSourceImageInformationImageSPBuild%  %ImageServicePackBuild%
echo.%txtSourceImageInformationImageSPLevel%  %ImageServicePackLevel%
echo.%txtSourceImageInformationImageBuild%  %ImageBuild%
if "!CurrentImageBuild!" neq "" echo.%txtSourceImageInformationImageCurrentBuild%  !CurrentImageBuild!
echo.%txtSourceImageInformationDefaultLanguage%  %ImageDefaultLanguage%
echo.
for %%i in (!ImageIndexNo!) do (
	echo.%txtSourceImageInformationImageEdition%  %%i ^| !ImageEdition%%i!
)
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to display Index Number and Edition
:: Input Parameters [ %~1 : Image Index No, %~2 : Index Image Edition ]
::-------------------------------------------------------------------------------------------
:DisplayIndexNumberEdition
echo.
echo.
echo.===============================================================================
if %~1 leq 9 echo.            [install.wim, %GlobalIndex% :  %~1 - %GlobalEdition% : %~2]
if %~1 gtr 9 echo.            [install.wim, %GlobalIndex% : %~1 - %GlobalEdition% : %~2]
echo.===============================================================================
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Mount a Image
:: Input Parameters [ %~1 : Image Filename, %~2 : Image Index No, %~3 : Image Mount folder ]
::-------------------------------------------------------------------------------------------
:MountImage

%DISM% /Mount-Image /ImageFile:"%~1" /Index:%~2 /MountDir:%~3
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Un-Mount the Mounted Image
:: Input Parameters [ %~1 : Image Mount Folder, %~2 : Image Commit / Discard Option ]
::-------------------------------------------------------------------------------------------
:UnMountImage

%DISM% /Unmount-Image /MountDir:%~1 /%~2
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to delete a selected Image Index from a Image
:: Input Parameters [ %~1 : Image Filename, %~2 : Image Index No or Index Removal ID ]
::-------------------------------------------------------------------------------------------
:DeleteImage

%DISM% /Delete-Image /ImageFile:"%~1" /Index:%~2
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to rename a selected Image Index Information
:: Input Parameters [ %~1 : Image Filename, %~2 : Image Index No, %~3 : Image Name, %~4 : Image Description ]
::-------------------------------------------------------------------------------------------
:RenameImage

%Imagex% /Info %~1 %~2 "%~3" "%~4"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to split a Image
:: Input Parameters [ %~1 : Image Filename, %~2 : Image Split Filename, %~3 : Image Split Size in MB ]
::-------------------------------------------------------------------------------------------
:SplitImage

%DISM% /Split-Image /ImageFile:"%~1" /SWMFile:%~2 /FileSize:%~3
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to merge a splitted Image
:: Input Parameters [ %~1 : Image Splitted Filename without Extension, %~2 : Image Filename ]
::-------------------------------------------------------------------------------------------
:MergeImage

%Imagex% /ref %~1*.swm /Check /Export %~1.swm * %~2

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to apply a Image to a drive or a folder
:: Input Parameters [ %~1 : Image Filename, %~2 : Image Index No, %~3 : Image Apply Drive or folder Name ]
::-------------------------------------------------------------------------------------------
:ApplyImage

%DISM% /Apply-Image /ImageFile:"%~1" /Index:%~2 /ApplyDir:%~3\ /CheckIntegrity /Verify
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to capture a drive or a folder to a Image
:: Input Parameters [ %~1 : Image Filename, %~2 : Capture Drive or Folder Name,
::                    %~3 : Index Name, %~4 : Index Description, %~5 : Bootable or Not Options ]
::-------------------------------------------------------------------------------------------
:CaptureImage

if "%~5" equ "Yes" %DISM% /Capture-Image /ImageFile:"%~1" /CaptureDir:%~2 /Name:"%~3" /Description:"%~4" /ConfigFile:%WimConfigFile% /Bootable /Compress:Max /CheckIntegrity /Verify
if "%~5" equ "No" %DISM% /Capture-Image /ImageFile:"%~1" /CaptureDir:%~2 /Name:"%~3" /Description:"%~4" /ConfigFile:%WimConfigFile% /Compress:Max /CheckIntegrity /Verify
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to append another Image to Image
:: Input Parameters [ %~1 : Image Filename, %~2 : Capture Drive or Folder Name,
::                    %~3 : Index Name, %~4 : Index Description, %~5 : Bootable or Not Option ]
::-------------------------------------------------------------------------------------------
:AppendImage

if "%~5" equ "Yes" %DISM% /Append-Image /ImageFile:"%~1" /CaptureDir:%~2 /Name:"%~3" /Description:"%~4" /ConfigFile:%WimConfigFile% /Bootable /CheckIntegrity /Verify
if "%~5" equ "No" %DISM% /Append-Image /ImageFile:"%~1" /CaptureDir:%~2 /Name:"%~3" /Description:"%~4" /ConfigFile:%WimConfigFile% /CheckIntegrity /Verify
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to export a select Image Index with Maximum/Recovery compression
:: Input Parameters [ %~1 : Source Image Filename, %~2 : Source Image Index No,
::                    %~3 : Target Image Filename, %~4 : Image Format, %~5 : Bootable or Not Option ]
::-------------------------------------------------------------------------------------------
:ExportImageIndex

if "%~5" equ "Yes" (
	if "%~4" equ "WIM" %DISM% /Export-Image /SourceImageFile:"%~1" /SourceIndex:%~2 /DestinationImageFile:%~3 /CheckIntegrity /Compress:Max /Bootable
	if "%~4" equ "ESD" %DISM% /Export-Image /SourceImageFile:"%~1" /SourceIndex:%~2 /DestinationImageFile:%~3 /CheckIntegrity /Compress:Recovery /Bootable
)
if "%~5" equ "No" (
	if "%~4" equ "WIM" %DISM% /Export-Image /SourceImageFile:"%~1" /SourceIndex:%~2 /DestinationImageFile:%~3 /CheckIntegrity /Compress:Max
	if "%~4" equ "ESD" %DISM% /Export-Image /SourceImageFile:"%~1" /SourceIndex:%~2 /DestinationImageFile:%~3 /CheckIntegrity /Compress:Recovery
)
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to export all Image Indexes with Maximum/Recovery compression
:: Input Parameters [ %~1 : Source Image Filename, %~2 : Target Image Filename, %~3 : Image Format, %~4 : Bootable or Not Option ]
::-------------------------------------------------------------------------------------------
:ExportImage

if "%~4" equ "Yes" (
	if "%~3" equ "WIM" %DISM% /Export-Image /SourceImageFile:"%~1" /All /DestinationImageFile:%~2 /CheckIntegrity /Compress:Max /Bootable
	if "%~3" equ "ESD" %DISM% /Export-Image /SourceImageFile:"%~1" /All /DestinationImageFile:%~2 /CheckIntegrity /Compress:Recovery /Bootable
)
if "%~4" equ "No" (
	if "%~3" equ "WIM" %DISM% /Export-Image /SourceImageFile:"%~1" /All /DestinationImageFile:%~2 /CheckIntegrity /Compress:Max
	if "%~3" equ "ESD" %DISM% /Export-Image /SourceImageFile:"%~1" /All /DestinationImageFile:%~2 /CheckIntegrity /Compress:Recovery
)
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to cleanup a Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Option  ]
::-------------------------------------------------------------------------------------------
:CleanupImage

%DISM% /Image:"%~1" /Cleanup-Image %~2
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to add driver packages to Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Drivers Packages Path ]
::-------------------------------------------------------------------------------------------
:AddDriver

%DISM% /Image:"%~1" /Add-Driver /Driver:%~2 /ForceUnsigned /Recurse
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to disable a feature inside a Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Feature Name ]
::-------------------------------------------------------------------------------------------
:DisableFeature

%DISM% /Image:"%~1" /Get-FeatureInfo /FeatureName:%~2 | findstr.exe /I /C:"State : Disabled" >nul
if "!ErrorLevel!" equ "0" (
	echo.-------------------------------------------------------------------------------
	echo.%txtDisableFeaturew01pos01% - [%~2] %txtDisableFeaturew01pos02%
	echo.-------------------------------------------------------------------------------
) else (
	echo.-------------------------------------------------------------------------------
	echo.%txtDisableFeaturew02% - [%~2]...
	echo.-------------------------------------------------------------------------------
	%DISM% /Image:"%~1" /Disable-Feature /FeatureName:%~2
)
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to enable a feature inside a Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Feature Name ]
::-------------------------------------------------------------------------------------------
:EnableFeature

%DISM% /Image:"%~1" /Get-FeatureInfo /FeatureName:%~2 | findstr.exe /I /C:"State : Enabled" >nul
if "!ErrorLevel!" equ "0" (
	echo.-------------------------------------------------------------------------------
	echo.%txtEnableFeaturew01pos01% - [%~2] %txtEnableFeaturew01pos02%
	echo.-------------------------------------------------------------------------------
) else (
	echo.-------------------------------------------------------------------------------
	echo.%txtEnableFeaturew02% - [%~2]...
	echo.-------------------------------------------------------------------------------
	%DISM% /Image:"%~1" /Enable-Feature /FeatureName:%~2 /All
)
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to export a list of packages present inside a Image to a file
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Filename ]
::-------------------------------------------------------------------------------------------
:GetPackages

%DISM% /Get-Packages /Image:"%~1">"%Logs%\%~2"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to export the list of features present inside a Image to a file
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Filename ]
::-------------------------------------------------------------------------------------------
:GetFeatures

%DISM% /Get-Features /Format:Table /Image:"%~1">"%Logs%\%~2"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to add a Package to Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Packages Path / Package Name ]
::-------------------------------------------------------------------------------------------
:AddPackage

rem %DISM% /Image:"%~1" /Add-Package /PackagePath:"%~2" /PreventPending
%DISM% /Image:"%~1" /Add-Package /PackagePath:"%~2"
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to remove a Package from a Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Packages Path / Package Name ]
::-------------------------------------------------------------------------------------------
:RemovePackage

%DISM% /Image:"%~1" /Remove-Package /PackageName:"%~2"
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to add a provisioned appx package to a Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : App Name, %~3 : App Package Path, %~4 : App Dependency Packages Path, %~5 : App License Path ]
::-------------------------------------------------------------------------------------------
:AddProvisionedAppxPackage

echo.-------------------------------------------------------------------------------
echo.%txtIntegrateProvisionedAppx_01pos01% [%~2] %txtIntegrateProvisionedAppx_01pos02%
echo.-------------------------------------------------------------------------------
%DISM% /Image:"%~1" /Add-ProvisionedAppxPackage /PackagePath:"%~3" %~4 %~5
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to remove provisioned appx package from the Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : App Name, %~3 : Package Name ]
::-------------------------------------------------------------------------------------------
:RemoveProvisionedAppxPackage

setlocal

set PackageNames=

echo.-------------------------------------------------------------------------------
echo.%txtRemoveProvisionedAppx_01pos01% [%~2] %txtRemoveProvisionedAppx_01pos02%
echo.-------------------------------------------------------------------------------

:: Getting Provisioned Appx Package list
for /f "tokens=2 delims=: " %%p in ('%DISM% /Image:"%~1" /Get-ProvisionedAppxPackages ^| find.exe /I "PackageName : %~3"') do (
	set "PackageNames=!PackageNames!;%%p"
)
set "PackageNames=!PackageNames:~1!"

if "!PackageNames!" neq "~1" (
	:: Removing Provisioned Appx Package from the Image
	echo.
	echo.
	for %%p in (!PackageNames!) do (
		echo."%%p"
		echo.
		%DISM% /Image:"%~1" /Remove-ProvisionedAppxPackage /PackageName:%%p
	)
)

if "!PackageNames!" equ "~1" (
	echo.
	echo.%txtRemoveProvisionedAppx_02pos01% %~2 %txtRemoveProvisionedAppx_02pos02%
)

echo.

set PackageNames=

endlocal

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to remove the default application associations from the Windows image
:: Input Parameters [ %~1 : Image Mount Path ]
::-------------------------------------------------------------------------------------------
:RemoveDefaultAppAssociations

%DISM% /Image:"%~1" /Remove-DefaultAppAssociations

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to import a set of default application associations to a Windows image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : App Association XML Filename ]
::-------------------------------------------------------------------------------------------
:ImportDefaultAppAssociations

%DISM% /Image:"%~1" /Import-DefaultAppAssociations:%~2

goto :EOF
::-------------------------------------------------------------------------------------------

:: ############################################################################################
:: MSMG Toolkit Misc Functions
:: ############################################################################################

::-------------------------------------------------------------------------------------------
:: Function to remove a Locked/Hidden Windows Package from the Image
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Package Description, %~3 : Package Name ]
::-------------------------------------------------------------------------------------------
:RemoveLockedPackage

setlocal

set PackageNames=
set PackageAlreadyRemoved=

:: Making Locked/Hidden Windows Package visible
call :UnHidePackage "%~1", %~3

:: Getting Windows Package List
echo.
echo.===============================================================================
echo.%txtDisplayingRelatedPackages01% "%~3"
echo.%txtDisplayingRelatedPackages02%
echo.-------------------------------------------------------------------------------
set /A count=0
for /f "tokens=3 delims=: " %%p in ('%DISM% /Image:"%~1" /Get-Packages ^| findstr.exe /I "%~3"') do (
	echo. ^(+^) %%p
	set /A count+=1
)
if !count! gtr 0 (
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtDisplayingRelatedPackages03%
	echo.-------------------------------------------------------------------------------
	if !count! equ 1 (
		for /f "tokens=3 delims=: " %%p in ('%DISM% /Image:"%~1" /Get-Packages ^| findstr.exe /I "%~3"') do (
			echo. ^(-^) %%p
			set "PackageNames=!PackageNames!;%%p"
		)
	)
	if !count! gtr 1 (
		for /f "tokens=3 delims=: " %%p in ('%DISM% /Image:"%~1" /Get-Packages ^| findstr.exe /I "%~3" ^| findstr.exe /I /V "%ImageDefaultLanguage%" ^| findstr.exe /V /C:"~wow64" ^| findstr.exe /I /C:"%FindString%"') do (
			echo. ^(-^) %%p
			set "PackageNames=!PackageNames!;%%p"
		)
	)
	set "PackageNames=!PackageNames:~1!"

	if "!PackageNames!" neq "~1" (
		:: Removing Windows Package from the Image
		for %%p in (!PackageNames!) do (
			echo.
			echo.-------------------------------------------------------------------------------
			echo.%txtDisplayingRelatedPackages04line01% [%~3] %GlobalPackage%
			echo.-------------------------------------------------------------------------------
			%DISM% /Image:"%~1" /Remove-Package /PackageName:%%p
		)
	)
)
if "!PackageNames!" equ "~1" set "PackageAlreadyRemoved=1"
if !count! equ 0 (
	set "PackageAlreadyRemoved=1"
)
if "!PackageAlreadyRemoved!" equ "1" (
	echo.%txtDisplayingRelatedPackages05line01% [%~3] %txtDisplayingRelatedPackages05line02%
	echo.-------------------------------------------------------------------------------
)

set PackageAlreadyRemoved=
set PackageNames=

endlocal

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to mount Image Registry
:: Input Parameters [ %~1 : Image Mount Path ]
::-------------------------------------------------------------------------------------------
:MountImageRegistry

:: Mounting Image Registry for Offline Editing
reg.exe load HKLM\TK_COMPONENTS "%~1\Windows\System32\config\COMPONENTS" >nul
reg.exe load HKLM\TK_DEFAULT "%~1\Windows\System32\config\default" >nul
reg.exe load HKLM\TK_NTUSER "%~1\Users\Default\ntuser.dat" >nul
reg.exe load HKLM\TK_SOFTWARE "%~1\Windows\System32\config\SOFTWARE" >nul
reg.exe load HKLM\TK_SYSTEM "%~1\Windows\System32\config\SYSTEM" >nul

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to unmount Image Registry
:: Input Parameters [ None ]
::-------------------------------------------------------------------------------------------
:UnMountImageRegistry

:: Un-Mounting Image Registry
reg.exe unload HKLM\TK_COMPONENTS >nul 2>&1
reg.exe unload HKLM\TK_DRIVERS >nul 2>&1
reg.exe unload HKLM\TK_DEFAULT >nul 2>&1
reg.exe unload HKLM\TK_NTUSER >nul 2>&1
reg.exe unload HKLM\TK_SCHEMA >nul 2>&1
reg.exe unload HKLM\TK_SOFTWARE >nul 2>&1
reg.exe unload HKLM\TK_SYSTEM >nul 2>&1

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to import registry settings to Image Registry
:: Input Parameters [ %~1 : Import Registry file Name ]
::-------------------------------------------------------------------------------------------
:ImportRegistry2Image

:: Importing registry settings to Image Registry
reg import "%~1" 2>nul
rem reg import "%~1" >nul 2>&1

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Download MSU File and Extract Specific CAB File
:: Input Parameters [ %~1 : Download URI, %~2 : Packs Path and File Name
::                    %~3 : Packs Path, %~4 : Download File Name]
::-------------------------------------------------------------------------------------------
:DownloadExtractingSpecificFile
if not exist "%~4.cab" (
	:: Common process
	rem Start "Downloading %~4 file..." /wait /B PowerShell.exe -NoP -C Invoke-WebRequest "%~1" -OutFile "%~2"
	reg.exe query "HKLM\SYSTEM\CurrentControlSet\Services\BITS" >nul 2>&1 && (
		reg.exe query "HKLM\SYSTEM\CurrentControlSet\Services\BITS" | find.exe /I " Start" | find.exe /I "0x4" >nul && (
			:: Fastest process
			rem PowerShell.exe -NoP -C "New-Object WinSCP.Session.GetFileInfo('%~1').LastWriteTime"
			Start "Downloading %~4 file..." /wait /B PowerShell.exe -NoP -C "(New-Object System.Net.WebClient).DownloadFile('%~1', '%~2')"
		) || (
			:: Preserves Remote TimeStamp
			Start "Downloading %~4 file..." /wait /B PowerShell.exe -NoP -C Start-BitsTransfer -Source "%~1" -Destination "%~2"
		)
	) || (
		:: Fastest process
		rem PowerShell.exe -NoP -C "New-Object WinSCP.Session.GetFileInfo('%~1').LastWriteTime"
		Start "Downloading %~4 file..." /wait /B PowerShell.exe -NoP -C "(New-Object System.Net.WebClient).DownloadFile('%~1', '%~2')"
	)

	:: Extracting specific file from MSU file.
	if exist "%~2" (
		"%Zip%" e "%~2" "-o%~3" "%~4.cab" -r
		rem PowerShell.exe -NoP -C "Expand-Archive -Force '%~2' '%~3'"
		call :RemoveFile "%~2"
	)
) else (
	echo.
	echo %txtDownloadFile01% %~4.cab %txtDownloadFile02%
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Download some File from Web
:: Input Parameters [ %~1 : Download URI, %~2 : Packs Path and File Name
::                    %~3 : Download File Name Ext]
::-------------------------------------------------------------------------------------------
:DownloadFile
if not exist "%~2" (
	:: Common process
	rem Start "Downloading %~3 file..." /wait /B PowerShell.exe -NoP -C Invoke-WebRequest "%~1" -OutFile "%~2"
	reg.exe query "HKLM\SYSTEM\CurrentControlSet\Services\BITS" >nul 2>&1 && (
		reg.exe query "HKLM\SYSTEM\CurrentControlSet\Services\BITS" | find.exe /I " Start" | find.exe /I "0x4" >nul && (
			:: Fastest process
			rem PowerShell.exe -NoP -C "New-Object WinSCP.Session.GetFileInfo('%~1').LastWriteTime"
			Start "Downloading %~3 file..." /wait /B PowerShell.exe -NoP -C "(New-Object System.Net.WebClient).DownloadFile('%~1', '%~2')"
		) || (
			:: Preserves Remote TimeStamp
			Start "Downloading %~3 file..." /wait /B PowerShell.exe -NoP -C Start-BitsTransfer -Source "%~1" -Destination "%~2"
		)
	) || (
		:: Fastest process
		rem PowerShell.exe -NoP -C "New-Object WinSCP.Session.GetFileInfo('%~1').LastWriteTime"
		Start "Downloading %~3 file..." /wait /B PowerShell.exe -NoP -C "(New-Object System.Net.WebClient).DownloadFile('%~1', '%~2')"
	)
) else (
	echo.
	echo %txtDownloadFile01% %~3 %txtDownloadFile02%
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to deal with EI.cfg file
::-------------------------------------------------------------------------------------------
:EIcfg

if !ImageCount! gtr 1 (
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtCopyGenericEIcfg01%
	echo.                        ^<%DVD%\Sources^> %txtCopyGenericEIcfg02%
	echo.-------------------------------------------------------------------------------
	copy /Y "%GenericEI%" "%DVD%\sources\EI.cfg" >nul
	echo.
	echo.%GlobalCopyingFinished%
	echo.
)
if !ImageCount! equ 1 (
	for %%e in (%VLeditions%) do (
		call :GetImageEdition "%InstallWim%", 1
		if "%%e" equ "%ImageEdition%" set VL=1
	)
	rem if %VL% equ 0 (
	rem 	echo.-------------------------------------------------------------------------------
	rem 	echo.##### Removing EI.cfg file from:
	rem 	echo.                        ^<%DVD%\Sources^> Folder #####
	rem 	echo.-------------------------------------------------------------------------------
	rem 	call :RemoveFile "%DVD%\sources\EI.cfg" >nul
	rem )

	:: Getting Install Image Index Edition
	call :GetImageEdition "%InstallWim%", 1
	echo.
	echo.-------------------------------------------------------------------------------
	echo.%txtWriteGenericEIcfg01ln01% "%ImageEdition%" %txtWriteGenericEIcfg01ln02%
	echo.                        ^<%DVD%\Sources^> %GlobalFolder2%
	echo.-------------------------------------------------------------------------------
	rem call :RemoveFile "%DVD%\sources\EI.cfg" >nul
	call :EraseFileContents "%DVD%\sources\EI.cfg" >nul
	(
		echo.[EditionID]
		if "%TargetEdition%" neq "" (
			echo.%TargetEdition%
		) else (
			echo.%ImageEdition%
		)
		echo.
		echo.[Channel]
		if %VL% equ 0 (
			echo._Default
			echo.
			echo.[VL]
			echo.0
		) else (
			echo.Volume
			echo.
			echo.[VL]
			echo.1
		)
		echo.
	)>"%DVD%\sources\EI.cfg"
	echo.
	echo.%txtWriteGenericEIcfg03%
	echo.
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to erase file contents
:: Input Parameters [ %~1 : Filename ]
::-------------------------------------------------------------------------------------------
:EraseFileContents

if exist "%~1" @echo OFF>"%~1"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to delete a file(s)
:: Input Parameters [ %~1 : Filename, %~2 : /S parameter ]
::-------------------------------------------------------------------------------------------
:RemoveFile

if exist "%~1" del %~2 /F /Q "%~1" >nul

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Create a Folder
:: Input Parameters [ %~1 : Foldername ]
::-------------------------------------------------------------------------------------------
:CreateFolder

if not exist "%~1\" md "%~1" >nul

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to delete a folder(s)
:: Input Parameters [ %~1 : Foldername ]
::-------------------------------------------------------------------------------------------
:RemoveFolder

if "%~1" neq "" if "%~1" neq "\" if exist "%~1\" rd /S /Q "%~1" >nul

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to rename file
:: Input Parameters [ %~1 : Folder path Filename, %~2 : New File Name ]
::-------------------------------------------------------------------------------------------
:RenameFile
if exist "%~1" ren "%~1" "%~2" >nul

goto :eof
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Read Previous Settings from a Storage File
:: Input Parameters [ %~1 : Variable Name ]
::-------------------------------------------------------------------------------------------
:ReadConfigFile
findstr.exe /I /B v%1 "%Toolkitcfg%" >nul && for /f "tokens=2 delims==" %%# in ('findstr.exe /I /B v%1 "%Toolkitcfg%"') do (set %1=%%#)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Getting the previously saved Variable Setting Values from a Storage File.
::-------------------------------------------------------------------------------------------
:GettingVariableSettingValues

findstr.exe /I \[Toolkit_VariableSettingValues\] "%Toolkitcfg%" >nul
for %%# in (
	InstallMedia
	ISOsource
	ISO
	ImageCount
	ImageIndexNo
	ChosenCount
	HomeCoreEditionBase
	HomeCoreNEditionBase
	ProfessionalEditionBase
	ProfessionalNEditionBase
	EditionBase
	SpecifiedSourceIndex
	IsBootImageSelected
	IsRecoveryImageSelected
	IsSourceSelected
	InitialImageServicePackBuild
	Support_Warning
	InstallMediaSource_ImageLabel
	InstallMedia_ImageFileName
	NewInstallMediaFileName
) do (
	call :ReadConfigFile %%#
)
for /l %%i in (1 1 !ImageCount!) do (
	call :ReadConfigFile ImageEdition%%i
)

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to Storing Variable Values on Storage File as a previous Setting to use when a code brake or crashing occurs.
::-------------------------------------------------------------------------------------------
:StoringVariableSettingValues
(
	echo.[Toolkit_VariableSettingValues]
	echo.vInstallMedia                 =%InstallMedia%
	echo.vISOsource                    =%ISOsource%
	echo.vISO                          =%ISO%
	echo.vImageCount                   =!ImageCount!
	echo.vImageIndexNo                 =!ImageIndexNo!
	echo.vChosenCount                  =!ChosenCount!
	echo.vHomeCoreEditionBase          =!HomeCoreEditionBase!
	echo.vHomeCoreNEditionBase         =!HomeCoreNEditionBase!
	echo.vProfessionalEditionBase      =!ProfessionalEditionBase!
	echo.vProfessionalNEditionBase     =!ProfessionalNEditionBase!
	echo.vEditionBase                  =!EditionBase!
	echo.vSpecifiedSourceIndex         =!SpecifiedSourceIndex!
	echo.vIsBootImageSelected          =!IsBootImageSelected!
	echo.vIsRecoveryImageSelected      =!IsRecoveryImageSelected!
	echo.vIsSourceSelected             =!IsSourceSelected!
	echo.vInitialImageServicePackBuild =!InitialImageServicePackBuild!
	echo.vSupport_Warning              =!Support_Warning!
	echo.vInstallMediaSource_ImageLabel=!InstallMediaSource_ImageLabel!
	echo.vInstallMedia_ImageFileName   =!InstallMedia_ImageFileName!
	echo.vNewInstallMediaFileName      =!NewInstallMediaFileName!
	for /l %%i in (1 1 !ImageCount!) do (
		if %%i leq 9 echo.vImageEdition%%i                =!ImageEdition%%i!
		if %%i gtr 9 echo.vImageEdition%%i               =!ImageEdition%%i!
	)
)>"%Toolkitcfg%"

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to unhide a Windows Component Package
:: Input Parameters [ %~1 : Image Mount Path, %~2 : Package Name ]
::-------------------------------------------------------------------------------------------
:UnHidePackage

setlocal

set RegistryKey=

:: Mounting Image Registry
call :MountImageRegistry "%~1" >nul

:: Retriving Package Registry Key Path
for /f "tokens=* delims=" %%a in ('reg.exe query "HKLM\TK_SOFTWARE\Microsoft\Windows\CurrentVersion\Component Based Servicing\Packages" /f "%~2" ^| find.exe /I "%~2"') do ( set "RegistryKey=%%a" )

:: Making Windows Components Package visible
reg.exe delete "%RegistryKey%\Owners" /f >nul 2>&1
reg.exe add "%RegistryKey%" /v "Visibility" /t REG_DWORD /d "1" /f >nul 2>&1
reg.exe add "%RegistryKey%" /v "DefVis" /t REG_DWORD /d "2" /f >nul 2>&1

:: Un-Mounting Image Registry
call :UnMountImageRegistry

set RegistryKey=

endlocal

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Cleanup MSMG Toolkit's temporary files and folders
::-------------------------------------------------------------------------------------------
:CleanUp

echo.
echo.
echo.%txtStartingCleaningUp%
echo.
echo.%txtCleaningUpImageRegistry%
echo.
echo.%GlobalUnMountingImageRegistry%
call :UnMountImageRegistry
echo.
echo.%txtCleaningUpImage%

for /f "tokens=4" %%m in ('reg.exe query "HKLM\SOFTWARE\Microsoft\WIMMount\Mounted Images" /s /v "Mount Path" 2^>nul ^| findstr.exe /I /C:"Mount Path"') do (
	Dism.exe /English /Image:"%%m" /Get-Packages >nul 2>&1
	Dism.exe /English /Unmount-Wim /MountDir:"%%m" /Discard >nul
	call :RemoveFolder "%%m"
	if exist "%%m\" (
		call :CreateFolder "%del286%"
		robocopy.exe "%del286%" "%%m" /MIR /R:1 /W:1 /NFL /NDL /NP /NJH /NJS >nul 2>&1
		call :RemoveFolder "%del286%"
		call :RemoveFolder "%%m"
	)
)

Dism.exe /English /Cleanup-Mountpoints >nul
Dism.exe /English /Cleanup-Wim >nul

:: Cleaning Up Images Mount Points Folders
call :RemoveFolder "%BootMount%"
call :CreateFolder "%BootMount%"
call :RemoveFolder "%InstallMount%"
call :CreateFolder "%InstallMount%"
call :RemoveFolder "%WinReMount%"
call :CreateFolder "%WinReMount%"
echo.

:: Cleaning Up Logs Folders
echo.%txtCleaningUpLogs%
call :RemoveFolder "%Logs%"
call :CreateFolder "%Logs%"
echo.

:: Cleaning Up Temporary files Folders
echo.%txtCleaningUpTemporary%
call :RemoveFolder "%_TMP%"
call :CreateFolder "%_TMP%"
call :RemoveFile "%Toolkitcfg%"

echo.
echo.%txtFinishedCleaningUp%
echo.

goto :EOF
::-------------------------------------------------------------------------------------------

::-------------------------------------------------------------------------------------------
:: Function to quit MSMG Toolkit
::-------------------------------------------------------------------------------------------
:Quit

cls
echo.===============================================================================
echo.%txtquitmnu%
echo.===============================================================================
echo.
if "%IsSourceSelected%" equ "Yes" (
	echo.%txtquitmsg01%
	echo.%txtquitmsg02%
	echo.
	echo.===============================================================================
	echo.
	if "!Allowed!" equ "I" (
		echo.
	) else (
		pause
	)

	goto :ApplyMenu
)
echo.%txtpercleanopera%
call :CleanUp
echo.%txtpercleanoperamsg01%
echo.
echo.%txtpercleanoperamsg02%
echo.
echo.===============================================================================
echo.
pause

:: Restoring DOS Window Size
reg.exe delete "HKCU\Console\%%SystemROOT%%_system32_cmd.exe" /f >nul

color 00
endlocal

exit
